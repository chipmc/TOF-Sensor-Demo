
c:/Users/alexb/OneDrive/Desktop/Orbit/TOFSEN~1/TOF-Sensor-Demo/target/4.1.0/boron/TOF-Sensor-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000044a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b84c0  000b84c0  000084c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b84e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003e534  000b84e8  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b85a0  000b85a0  000285a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b85c8  000b85c8  000285c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013bff9  00000000  00000000  000285cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014f05  00000000  00000000  001645c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b9cb  00000000  00000000  001794ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030b0  00000000  00000000  001b4e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3e0  00000000  00000000  001b7f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e034  00000000  00000000  001c2325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00045fb2  00000000  00000000  00200359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138349  00000000  00000000  0024630b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b58  00000000  00000000  0037e654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fd39 	bl	b7aa4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fd5b 	bl	b7af4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e534 	.word	0x2003e534
   b4048:	000b84e8 	.word	0x000b84e8
   b404c:	2003e5ec 	.word	0x2003e5ec
   b4050:	2003e5ec 	.word	0x2003e5ec
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fb3d 	bl	b66dc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b848c 	.word	0x000b848c
   b407c:	000b84b4 	.word	0x000b84b4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba1e 	b.w	b44c0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa73 	bl	b4570 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 badd 	b.w	b664c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b941 	b.w	b5318 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b93f 	b.w	b5318 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b945 	b.w	b5328 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f870 	bl	b518c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4f0d 	.word	0x000b4f0d
   b40b4:	000b7e0c 	.word	0x000b7e0c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN13PeopleCounterD1Ev>:

PeopleCounter::PeopleCounter() {
}

PeopleCounter::~PeopleCounter() {
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN13PeopleCounterD0Ev>:
PeopleCounter::~PeopleCounter() {
   b40ca:	b510      	push	{r4, lr}
}
   b40cc:	210c      	movs	r1, #12
PeopleCounter::~PeopleCounter() {
   b40ce:	4604      	mov	r4, r0
}
   b40d0:	f7ff ffe3 	bl	b409a <_ZdlPvj>
   b40d4:	4620      	mov	r0, r4
   b40d6:	bd10      	pop	{r4, pc}

000b40d8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40d8:	b40e      	push	{r1, r2, r3}
   b40da:	b500      	push	{lr}
   b40dc:	b08c      	sub	sp, #48	; 0x30
   b40de:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40e0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40e4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40e8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ea:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40ee:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f0:	6801      	ldr	r1, [r0, #0]
   b40f2:	aa04      	add	r2, sp, #16
   b40f4:	201e      	movs	r0, #30
    attr.flags = 0;
   b40f6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40fa:	f001 f84f 	bl	b519c <log_message_v>
}
   b40fe:	b00c      	add	sp, #48	; 0x30
   b4100:	f85d eb04 	ldr.w	lr, [sp], #4
   b4104:	b003      	add	sp, #12
   b4106:	4770      	bx	lr

000b4108 <_ZN13PeopleCounter8instanceEv>:
PeopleCounter &PeopleCounter::instance() {
   b4108:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b410a:	4c07      	ldr	r4, [pc, #28]	; (b4128 <_ZN13PeopleCounter8instanceEv+0x20>)
   b410c:	6825      	ldr	r5, [r4, #0]
   b410e:	b94d      	cbnz	r5, b4124 <_ZN13PeopleCounter8instanceEv+0x1c>
        _instance = new PeopleCounter();
   b4110:	200c      	movs	r0, #12
   b4112:	f7ff ffbe 	bl	b4092 <_Znwj>
   b4116:	b120      	cbz	r0, b4122 <_ZN13PeopleCounter8instanceEv+0x1a>
PeopleCounter::PeopleCounter() {
   b4118:	4b04      	ldr	r3, [pc, #16]	; (b412c <_ZN13PeopleCounter8instanceEv+0x24>)
   b411a:	e9c0 3500 	strd	r3, r5, [r0]
   b411e:	2305      	movs	r3, #5
   b4120:	6083      	str	r3, [r0, #8]
        _instance = new PeopleCounter();
   b4122:	6020      	str	r0, [r4, #0]
}
   b4124:	6820      	ldr	r0, [r4, #0]
   b4126:	bd38      	pop	{r3, r4, r5, pc}
   b4128:	2003e5f0 	.word	0x2003e5f0
   b412c:	000b7e6c 	.word	0x000b7e6c

000b4130 <_ZN13PeopleCounter5setupEv>:

void PeopleCounter::setup() {
}
   b4130:	4770      	bx	lr
	...

000b4134 <_ZN13PeopleCounter4loopEv>:

void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b4134:	b538      	push	{r3, r4, r5, lr}
    static int oldOccupancyState = 0;       // Need to remember these for past state path
    static bool atTheThreshold = false;
    int oldOccupancyCount = occupancyCount;
   b4136:	4c21      	ldr	r4, [pc, #132]	; (b41bc <_ZN13PeopleCounter4loopEv+0x88>)
   b4138:	6825      	ldr	r5, [r4, #0]

    switch (TofSensor::instance().getOccupancyState()) {
   b413a:	f000 f871 	bl	b4220 <_ZN9TofSensor8instanceEv>
   b413e:	f000 f981 	bl	b4444 <_ZN9TofSensor17getOccupancyStateEv>
   b4142:	2803      	cmp	r0, #3
   b4144:	d835      	bhi.n	b41b2 <_ZN13PeopleCounter4loopEv+0x7e>
   b4146:	e8df f000 	tbb	[pc, r0]
   b414a:	1202      	.short	0x1202
   b414c:	3021      	.short	0x3021

      case 0:                               // No occupancy detected
        oldOccupancyState = 0;
   b414e:	4a1c      	ldr	r2, [pc, #112]	; (b41c0 <_ZN13PeopleCounter4loopEv+0x8c>)
   b4150:	2300      	movs	r3, #0
   b4152:	6013      	str	r3, [r2, #0]
        atTheThreshold = false;
   b4154:	4a1b      	ldr	r2, [pc, #108]	; (b41c4 <_ZN13PeopleCounter4loopEv+0x90>)
   b4156:	7013      	strb	r3, [r2, #0]
    }

   #if TENFOOTDISPLAY
    if (oldOccupancyCount != occupancyCount) printBigNumbers(occupancyCount);
   #else
    if (oldOccupancyCount != occupancyCount) Log.info("Occupancy %s %i",(occupancyCount > oldOccupancyCount) ? "increased to" : "decreased to", occupancyCount);
   b4158:	6823      	ldr	r3, [r4, #0]
   b415a:	42ab      	cmp	r3, r5
   b415c:	d006      	beq.n	b416c <_ZN13PeopleCounter4loopEv+0x38>
   b415e:	bfd4      	ite	le
   b4160:	4a19      	ldrle	r2, [pc, #100]	; (b41c8 <_ZN13PeopleCounter4loopEv+0x94>)
   b4162:	4a1a      	ldrgt	r2, [pc, #104]	; (b41cc <_ZN13PeopleCounter4loopEv+0x98>)
   b4164:	491a      	ldr	r1, [pc, #104]	; (b41d0 <_ZN13PeopleCounter4loopEv+0x9c>)
   b4166:	481b      	ldr	r0, [pc, #108]	; (b41d4 <_ZN13PeopleCounter4loopEv+0xa0>)
   b4168:	f7ff ffb6 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
   #endif
}
   b416c:	bd38      	pop	{r3, r4, r5, pc}
        if (atTheThreshold) {
   b416e:	4915      	ldr	r1, [pc, #84]	; (b41c4 <_ZN13PeopleCounter4loopEv+0x90>)
   b4170:	4a13      	ldr	r2, [pc, #76]	; (b41c0 <_ZN13PeopleCounter4loopEv+0x8c>)
   b4172:	780b      	ldrb	r3, [r1, #0]
   b4174:	b13b      	cbz	r3, b4186 <_ZN13PeopleCounter4loopEv+0x52>
          atTheThreshold = false;
   b4176:	2000      	movs	r0, #0
   b4178:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 2) {
   b417a:	6811      	ldr	r1, [r2, #0]
            occupancyCount++; 
   b417c:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 2) {
   b417e:	2902      	cmp	r1, #2
            occupancyCount++; 
   b4180:	bf04      	itt	eq
   b4182:	3301      	addeq	r3, #1
   b4184:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 1;
   b4186:	2301      	movs	r3, #1
        oldOccupancyState = 2;
   b4188:	6013      	str	r3, [r2, #0]
      break;
   b418a:	e7e5      	b.n	b4158 <_ZN13PeopleCounter4loopEv+0x24>
        if (atTheThreshold) {
   b418c:	490d      	ldr	r1, [pc, #52]	; (b41c4 <_ZN13PeopleCounter4loopEv+0x90>)
   b418e:	4a0c      	ldr	r2, [pc, #48]	; (b41c0 <_ZN13PeopleCounter4loopEv+0x8c>)
   b4190:	780b      	ldrb	r3, [r1, #0]
   b4192:	b143      	cbz	r3, b41a6 <_ZN13PeopleCounter4loopEv+0x72>
          atTheThreshold = false;
   b4194:	2000      	movs	r0, #0
   b4196:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 1) {
   b4198:	6811      	ldr	r1, [r2, #0]
            occupancyCount++; 
   b419a:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 1) {
   b419c:	2901      	cmp	r1, #1
            occupancyCount--;
   b419e:	bf04      	itt	eq
   b41a0:	f103 33ff 	addeq.w	r3, r3, #4294967295
   b41a4:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 2;
   b41a6:	2302      	movs	r3, #2
   b41a8:	e7ee      	b.n	b4188 <_ZN13PeopleCounter4loopEv+0x54>
        atTheThreshold = true;
   b41aa:	4b06      	ldr	r3, [pc, #24]	; (b41c4 <_ZN13PeopleCounter4loopEv+0x90>)
   b41ac:	2201      	movs	r2, #1
   b41ae:	701a      	strb	r2, [r3, #0]
      break;
   b41b0:	e7d2      	b.n	b4158 <_ZN13PeopleCounter4loopEv+0x24>
        Log.info("Error in occupancy state");
   b41b2:	4909      	ldr	r1, [pc, #36]	; (b41d8 <_ZN13PeopleCounter4loopEv+0xa4>)
   b41b4:	4807      	ldr	r0, [pc, #28]	; (b41d4 <_ZN13PeopleCounter4loopEv+0xa0>)
   b41b6:	f7ff ff8f 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
      break;
   b41ba:	e7cd      	b.n	b4158 <_ZN13PeopleCounter4loopEv+0x24>
   b41bc:	2003e5ec 	.word	0x2003e5ec
   b41c0:	2003e5f8 	.word	0x2003e5f8
   b41c4:	2003e5f4 	.word	0x2003e5f4
   b41c8:	000b7e2e 	.word	0x000b7e2e
   b41cc:	000b7e21 	.word	0x000b7e21
   b41d0:	000b7e54 	.word	0x000b7e54
   b41d4:	2003e684 	.word	0x2003e684
   b41d8:	000b7e3b 	.word	0x000b7e3b

000b41dc <_ZN13PeopleCounter8setCountEi>:
  return occupancyCount;

}

void PeopleCounter::setCount(int value){
  occupancyCount = value;
   b41dc:	4b01      	ldr	r3, [pc, #4]	; (b41e4 <_ZN13PeopleCounter8setCountEi+0x8>)
   b41de:	6019      	str	r1, [r3, #0]
}
   b41e0:	4770      	bx	lr
   b41e2:	bf00      	nop
   b41e4:	2003e5ec 	.word	0x2003e5ec

000b41e8 <_ZN9TofSensorD1Ev>:

TofSensor::TofSensor() {
}

TofSensor::~TofSensor() {
}
   b41e8:	4770      	bx	lr

000b41ea <_ZN9TofSensorD0Ev>:
TofSensor::~TofSensor() {
   b41ea:	b510      	push	{r4, lr}
}
   b41ec:	2118      	movs	r1, #24
TofSensor::~TofSensor() {
   b41ee:	4604      	mov	r4, r0
}
   b41f0:	f7ff ff53 	bl	b409a <_ZdlPvj>
   b41f4:	4620      	mov	r0, r4
   b41f6:	bd10      	pop	{r4, pc}

000b41f8 <_ZN9TofSensorC1Ev>:
TofSensor::TofSensor() {
   b41f8:	b538      	push	{r3, r4, r5, lr}
   b41fa:	4605      	mov	r5, r0
   b41fc:	4b07      	ldr	r3, [pc, #28]	; (b421c <_ZN9TofSensorC1Ev+0x24>)
   b41fe:	f845 3b04 	str.w	r3, [r5], #4
   b4202:	4604      	mov	r4, r0
   b4204:	f003 f82a 	bl	b725c <_Z19__fetch_global_Wirev>
   b4208:	f04f 33ff 	mov.w	r3, #4294967295
   b420c:	4601      	mov	r1, r0
   b420e:	461a      	mov	r2, r3
   b4210:	4628      	mov	r0, r5
   b4212:	f000 fdc9 	bl	b4da8 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b4216:	4620      	mov	r0, r4
   b4218:	bd38      	pop	{r3, r4, r5, pc}
   b421a:	bf00      	nop
   b421c:	000b7fe0 	.word	0x000b7fe0

000b4220 <_ZN9TofSensor8instanceEv>:
TofSensor &TofSensor::instance() {
   b4220:	b538      	push	{r3, r4, r5, lr}
  if (!_instance) {
   b4222:	4d06      	ldr	r5, [pc, #24]	; (b423c <_ZN9TofSensor8instanceEv+0x1c>)
   b4224:	682b      	ldr	r3, [r5, #0]
   b4226:	b93b      	cbnz	r3, b4238 <_ZN9TofSensor8instanceEv+0x18>
      _instance = new TofSensor();
   b4228:	2018      	movs	r0, #24
   b422a:	f7ff ff32 	bl	b4092 <_Znwj>
   b422e:	4604      	mov	r4, r0
   b4230:	b108      	cbz	r0, b4236 <_ZN9TofSensor8instanceEv+0x16>
   b4232:	f7ff ffe1 	bl	b41f8 <_ZN9TofSensorC1Ev>
   b4236:	602c      	str	r4, [r5, #0]
}
   b4238:	6828      	ldr	r0, [r5, #0]
   b423a:	bd38      	pop	{r3, r4, r5, pc}
   b423c:	2003e5fc 	.word	0x2003e5fc

000b4240 <_ZN9TofSensor4loopEv>:
  }
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneBaselines[0],zoneBaselines[1]);
  return TRUE;
}

int TofSensor::loop(){                         // This function will update the current distance / occupancy for each zone.  It will return true if occupancy changes                    
   b4240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int oldOccupancyState = occupancyState;
   b4244:	4d2e      	ldr	r5, [pc, #184]	; (b4300 <_ZN9TofSensor4loopEv+0xc0>)
   b4246:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4310 <_ZN9TofSensor4loopEv+0xd0>
   b424a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; b4314 <_ZN9TofSensor4loopEv+0xd4>
   b424e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b4318 <_ZN9TofSensor4loopEv+0xd8>
   b4252:	682e      	ldr	r6, [r5, #0]
  occupancyState = 0;
   b4254:	2300      	movs	r3, #0
int TofSensor::loop(){                         // This function will update the current distance / occupancy for each zone.  It will return true if occupancy changes                    
   b4256:	b085      	sub	sp, #20
  occupancyState = 0;
   b4258:	602b      	str	r3, [r5, #0]
   b425a:	2701      	movs	r7, #1
   b425c:	46c1      	mov	r9, r8

  unsigned long startedRanging;

  for (byte zone = 0; zone < 2; zone++){
    myTofSensor.stopRanging();
   b425e:	1d04      	adds	r4, r0, #4
   b4260:	4620      	mov	r0, r4
   b4262:	f000 fdef 	bl	b4e44 <_ZN10SFEVL53L1X11stopRangingEv>
    myTofSensor.clearInterrupt();
   b4266:	4620      	mov	r0, r4
   b4268:	f000 fde6 	bl	b4e38 <_ZN10SFEVL53L1X14clearInterruptEv>
    myTofSensor.setROI(ROWS_OF_SPADS,COLUMNS_OF_SPADS,opticalCenters[zone]);
   b426c:	f81b 3b01 	ldrb.w	r3, [fp], #1
   b4270:	2208      	movs	r2, #8
   b4272:	2106      	movs	r1, #6
   b4274:	4620      	mov	r0, r4
   b4276:	f000 fe08 	bl	b4e8a <_ZN10SFEVL53L1X6setROIEhhh>
    delay(1);
   b427a:	2001      	movs	r0, #1
   b427c:	f002 f9ba 	bl	b65f4 <delay>
    myTofSensor.startRanging();
   b4280:	4620      	mov	r0, r4
   b4282:	f000 fddc 	bl	b4e3e <_ZN10SFEVL53L1X12startRangingEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4286:	f000 fe49 	bl	b4f1c <HAL_Timer_Get_Milli_Seconds>
   b428a:	9003      	str	r0, [sp, #12]

    startedRanging = millis();
    while(!myTofSensor.checkForDataReady()) {
   b428c:	4620      	mov	r0, r4
   b428e:	f000 fddc 	bl	b4e4a <_ZN10SFEVL53L1X17checkForDataReadyEv>
   b4292:	b988      	cbnz	r0, b42b8 <_ZN9TofSensor4loopEv+0x78>
   b4294:	f000 fe42 	bl	b4f1c <HAL_Timer_Get_Milli_Seconds>
      if (millis() - startedRanging > SENSOR_TIMEOUT) {
   b4298:	9b03      	ldr	r3, [sp, #12]
   b429a:	1ac0      	subs	r0, r0, r3
   b429c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b42a0:	d9f4      	bls.n	b428c <_ZN9TofSensor4loopEv+0x4c>
        Log.info("Sensor Timed out");
   b42a2:	4818      	ldr	r0, [pc, #96]	; (b4304 <_ZN9TofSensor4loopEv+0xc4>)
   b42a4:	4918      	ldr	r1, [pc, #96]	; (b4308 <_ZN9TofSensor4loopEv+0xc8>)
   b42a6:	f7ff ff17 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
        return SENSOR_TIMEOUT_ERROR;
   b42aa:	f06f 0002 	mvn.w	r0, #2
  #if PEOPLECOUNTER_DEBUG
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneSignalPerSpad[0], zoneSignalPerSpad[1]);
  #endif

  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
}
   b42ae:	b005      	add	sp, #20
   b42b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42b4:	2702      	movs	r7, #2
   b42b6:	e7d3      	b.n	b4260 <_ZN9TofSensor4loopEv+0x20>
    zoneSignalPerSpad[zone] = myTofSensor.getSignalPerSpad();
   b42b8:	4620      	mov	r0, r4
   b42ba:	f000 fddb 	bl	b4e74 <_ZN10SFEVL53L1X16getSignalPerSpadEv>
    bool occupied = ( zoneSignalPerSpad[zone] >= (zoneBaselines[zone] + PERSON_THRESHOLD)); //&& (MinDistance > DOOR_THRESHOLD));
   b42be:	f85a 2b04 	ldr.w	r2, [sl], #4
    zoneSignalPerSpad[zone] = myTofSensor.getSignalPerSpad();
   b42c2:	f848 0b04 	str.w	r0, [r8], #4
    bool occupied = ( zoneSignalPerSpad[zone] >= (zoneBaselines[zone] + PERSON_THRESHOLD)); //&& (MinDistance > DOOR_THRESHOLD));
   b42c6:	3213      	adds	r2, #19
    occupancyState += occupied * (zone + 1);
   b42c8:	4290      	cmp	r0, r2
   b42ca:	bfcc      	ite	gt
   b42cc:	463b      	movgt	r3, r7
   b42ce:	2300      	movle	r3, #0
   b42d0:	682a      	ldr	r2, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b42d2:	2f02      	cmp	r7, #2
    occupancyState += occupied * (zone + 1);
   b42d4:	4413      	add	r3, r2
   b42d6:	602b      	str	r3, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b42d8:	d1ec      	bne.n	b42b4 <_ZN9TofSensor4loopEv+0x74>
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneSignalPerSpad[0], zoneSignalPerSpad[1]);
   b42da:	42b3      	cmp	r3, r6
   b42dc:	d00a      	beq.n	b42f4 <_ZN9TofSensor4loopEv+0xb4>
   b42de:	f8d9 2004 	ldr.w	r2, [r9, #4]
   b42e2:	9201      	str	r2, [sp, #4]
   b42e4:	f8d9 2000 	ldr.w	r2, [r9]
   b42e8:	9200      	str	r2, [sp, #0]
   b42ea:	4908      	ldr	r1, [pc, #32]	; (b430c <_ZN9TofSensor4loopEv+0xcc>)
   b42ec:	4805      	ldr	r0, [pc, #20]	; (b4304 <_ZN9TofSensor4loopEv+0xc4>)
   b42ee:	4632      	mov	r2, r6
   b42f0:	f7ff fef2 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
   b42f4:	6828      	ldr	r0, [r5, #0]
   b42f6:	1b80      	subs	r0, r0, r6
   b42f8:	bf18      	it	ne
   b42fa:	2001      	movne	r0, #1
   b42fc:	e7d7      	b.n	b42ae <_ZN9TofSensor4loopEv+0x6e>
   b42fe:	bf00      	nop
   b4300:	2003e614 	.word	0x2003e614
   b4304:	2003e684 	.word	0x2003e684
   b4308:	000b7e74 	.word	0x000b7e74
   b430c:	000b7e85 	.word	0x000b7e85
   b4310:	2003e620 	.word	0x2003e620
   b4314:	2003e534 	.word	0x2003e534
   b4318:	2003e618 	.word	0x2003e618

000b431c <_ZN9TofSensor18performCalibrationEv>:
bool TofSensor::performCalibration() {
   b431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    zoneBaselines[0] += TofSensor::getZone1();
   b431e:	4c19      	ldr	r4, [pc, #100]	; (b4384 <_ZN9TofSensor18performCalibrationEv+0x68>)

int TofSensor::getZone1() {
  return zoneSignalPerSpad[0];
   b4320:	4f19      	ldr	r7, [pc, #100]	; (b4388 <_ZN9TofSensor18performCalibrationEv+0x6c>)
bool TofSensor::performCalibration() {
   b4322:	4606      	mov	r6, r0
   b4324:	2563      	movs	r5, #99	; 0x63
    TofSensor::loop();                  // Get the latest values
   b4326:	4630      	mov	r0, r6
   b4328:	f7ff ff8a 	bl	b4240 <_ZN9TofSensor4loopEv>
    zoneBaselines[0] += TofSensor::getZone1();
   b432c:	6822      	ldr	r2, [r4, #0]
   b432e:	683b      	ldr	r3, [r7, #0]
    zoneBaselines[1] += TofSensor::getZone2();
   b4330:	6879      	ldr	r1, [r7, #4]
    zoneBaselines[0] += TofSensor::getZone1();
   b4332:	441a      	add	r2, r3
    zoneBaselines[1] += TofSensor::getZone2();
   b4334:	6863      	ldr	r3, [r4, #4]
    zoneBaselines[0] += TofSensor::getZone1();
   b4336:	6022      	str	r2, [r4, #0]
    zoneBaselines[1] += TofSensor::getZone2();
   b4338:	440b      	add	r3, r1
  for (int i=1; i<DISTANCES_ARRAY_SIZE; i++) {
   b433a:	3d01      	subs	r5, #1
    zoneBaselines[1] += TofSensor::getZone2();
   b433c:	6063      	str	r3, [r4, #4]
  for (int i=1; i<DISTANCES_ARRAY_SIZE; i++) {
   b433e:	d1f2      	bne.n	b4326 <_ZN9TofSensor18performCalibrationEv+0xa>
  if (occupancyState != 0){
   b4340:	4f12      	ldr	r7, [pc, #72]	; (b438c <_ZN9TofSensor18performCalibrationEv+0x70>)
  zoneBaselines[0] = zoneBaselines[0]/DISTANCES_ARRAY_SIZE;
   b4342:	2164      	movs	r1, #100	; 0x64
  zoneBaselines[1] = zoneBaselines[1]/DISTANCES_ARRAY_SIZE;
   b4344:	fb93 f3f1 	sdiv	r3, r3, r1
   b4348:	6063      	str	r3, [r4, #4]
  if (occupancyState != 0){
   b434a:	683b      	ldr	r3, [r7, #0]
  zoneBaselines[0] = zoneBaselines[0]/DISTANCES_ARRAY_SIZE;
   b434c:	fb92 f2f1 	sdiv	r2, r2, r1
   b4350:	6022      	str	r2, [r4, #0]
  if (occupancyState != 0){
   b4352:	b93b      	cbnz	r3, b4364 <_ZN9TofSensor18performCalibrationEv+0x48>
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneBaselines[0],zoneBaselines[1]);
   b4354:	480e      	ldr	r0, [pc, #56]	; (b4390 <_ZN9TofSensor18performCalibrationEv+0x74>)
   b4356:	490f      	ldr	r1, [pc, #60]	; (b4394 <_ZN9TofSensor18performCalibrationEv+0x78>)
   b4358:	e9d4 2300 	ldrd	r2, r3, [r4]
   b435c:	f7ff febc 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
  return TRUE;
   b4360:	2001      	movs	r0, #1
}
   b4362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Log.info("Target zone not clear - will wait ten seconds and try again");
   b4364:	490c      	ldr	r1, [pc, #48]	; (b4398 <_ZN9TofSensor18performCalibrationEv+0x7c>)
   b4366:	480a      	ldr	r0, [pc, #40]	; (b4390 <_ZN9TofSensor18performCalibrationEv+0x74>)
   b4368:	f7ff feb6 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b436c:	f242 7010 	movw	r0, #10000	; 0x2710
   b4370:	f002 f940 	bl	b65f4 <delay>
    TofSensor::loop();
   b4374:	4630      	mov	r0, r6
   b4376:	f7ff ff63 	bl	b4240 <_ZN9TofSensor4loopEv>
    if (occupancyState != 0) return FALSE;
   b437a:	683b      	ldr	r3, [r7, #0]
   b437c:	2b00      	cmp	r3, #0
   b437e:	d0e9      	beq.n	b4354 <_ZN9TofSensor18performCalibrationEv+0x38>
   b4380:	4628      	mov	r0, r5
   b4382:	e7ee      	b.n	b4362 <_ZN9TofSensor18performCalibrationEv+0x46>
   b4384:	2003e618 	.word	0x2003e618
   b4388:	2003e620 	.word	0x2003e620
   b438c:	2003e614 	.word	0x2003e614
   b4390:	2003e684 	.word	0x2003e684
   b4394:	000b7eb9 	.word	0x000b7eb9
   b4398:	000b7ef3 	.word	0x000b7ef3

000b439c <_ZN9TofSensor5setupEv>:
void TofSensor::setup(){
   b439c:	b538      	push	{r3, r4, r5, lr}
  if(myTofSensor.begin() != 0){
   b439e:	1d05      	adds	r5, r0, #4
void TofSensor::setup(){
   b43a0:	4604      	mov	r4, r0
  if(myTofSensor.begin() != 0){
   b43a2:	4628      	mov	r0, r5
   b43a4:	f000 fd3a 	bl	b4e1c <_ZN10SFEVL53L1X5beginEv>
   b43a8:	b310      	cbz	r0, b43f0 <_ZN9TofSensor5setupEv+0x54>
    Log.info("Sensor error reset in 10 seconds");
   b43aa:	4920      	ldr	r1, [pc, #128]	; (b442c <_ZN9TofSensor5setupEv+0x90>)
   b43ac:	4820      	ldr	r0, [pc, #128]	; (b4430 <_ZN9TofSensor5setupEv+0x94>)
   b43ae:	f7ff fe93 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b43b2:	f242 7010 	movw	r0, #10000	; 0x2710
   b43b6:	f002 f91d 	bl	b65f4 <delay>
    System.reset();
   b43ba:	f001 f83d 	bl	b5438 <_ZN11SystemClass5resetEv>
  myTofSensor.setDistanceModeLong();
   b43be:	4628      	mov	r0, r5
   b43c0:	f000 fd54 	bl	b4e6c <_ZN10SFEVL53L1X19setDistanceModeLongEv>
  myTofSensor.setSigmaThreshold(45);        // Default is 45 - this will make it harder to get a valid result - Range 1 - 16383
   b43c4:	212d      	movs	r1, #45	; 0x2d
   b43c6:	4628      	mov	r0, r5
   b43c8:	f000 fd65 	bl	b4e96 <_ZN10SFEVL53L1X17setSigmaThresholdEt>
  myTofSensor.setSignalThreshold(1500);     // Default is 1500 raising value makes it harder to get a valid results- Range 1-16383
   b43cc:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b43d0:	4628      	mov	r0, r5
   b43d2:	f000 fd5d 	bl	b4e90 <_ZN10SFEVL53L1X18setSignalThresholdEt>
  myTofSensor.setTimingBudgetInMs(20);      // Was 20mSec
   b43d6:	2114      	movs	r1, #20
   b43d8:	4628      	mov	r0, r5
   b43da:	f000 fd44 	bl	b4e66 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
  while (TofSensor::loop() == SENSOR_BUFFRER_NOT_FULL) {delay(10);}; // Wait for the buffer to fill up
   b43de:	4620      	mov	r0, r4
   b43e0:	f7ff ff2e 	bl	b4240 <_ZN9TofSensor4loopEv>
   b43e4:	3005      	adds	r0, #5
   b43e6:	d108      	bne.n	b43fa <_ZN9TofSensor5setupEv+0x5e>
   b43e8:	200a      	movs	r0, #10
   b43ea:	f002 f903 	bl	b65f4 <delay>
   b43ee:	e7f6      	b.n	b43de <_ZN9TofSensor5setupEv+0x42>
  else Log.info("Sensor init successfully");
   b43f0:	4910      	ldr	r1, [pc, #64]	; (b4434 <_ZN9TofSensor5setupEv+0x98>)
   b43f2:	480f      	ldr	r0, [pc, #60]	; (b4430 <_ZN9TofSensor5setupEv+0x94>)
   b43f4:	f7ff fe70 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
   b43f8:	e7e1      	b.n	b43be <_ZN9TofSensor5setupEv+0x22>
  Log.info("Buffer is full - will now calibrate");
   b43fa:	480d      	ldr	r0, [pc, #52]	; (b4430 <_ZN9TofSensor5setupEv+0x94>)
   b43fc:	490e      	ldr	r1, [pc, #56]	; (b4438 <_ZN9TofSensor5setupEv+0x9c>)
   b43fe:	f7ff fe6b 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
  if (TofSensor::performCalibration()) Log.info("Calibration Complete");
   b4402:	4620      	mov	r0, r4
   b4404:	f7ff ff8a 	bl	b431c <_ZN9TofSensor18performCalibrationEv>
   b4408:	b120      	cbz	r0, b4414 <_ZN9TofSensor5setupEv+0x78>
   b440a:	490c      	ldr	r1, [pc, #48]	; (b443c <_ZN9TofSensor5setupEv+0xa0>)
   b440c:	4808      	ldr	r0, [pc, #32]	; (b4430 <_ZN9TofSensor5setupEv+0x94>)
   b440e:	f7ff fe63 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
}
   b4412:	bd38      	pop	{r3, r4, r5, pc}
    Log.info("Initial calibration failed - wait 10 secs and reset");
   b4414:	490a      	ldr	r1, [pc, #40]	; (b4440 <_ZN9TofSensor5setupEv+0xa4>)
   b4416:	4806      	ldr	r0, [pc, #24]	; (b4430 <_ZN9TofSensor5setupEv+0x94>)
   b4418:	f7ff fe5e 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b441c:	f242 7010 	movw	r0, #10000	; 0x2710
   b4420:	f002 f8e8 	bl	b65f4 <delay>
}
   b4424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    System.reset();
   b4428:	f001 b806 	b.w	b5438 <_ZN11SystemClass5resetEv>
   b442c:	000b7f2f 	.word	0x000b7f2f
   b4430:	2003e684 	.word	0x2003e684
   b4434:	000b7f50 	.word	0x000b7f50
   b4438:	000b7f69 	.word	0x000b7f69
   b443c:	000b7f8d 	.word	0x000b7f8d
   b4440:	000b7fa2 	.word	0x000b7fa2

000b4444 <_ZN9TofSensor17getOccupancyStateEv>:
  return zoneSignalPerSpad[1];
}

int TofSensor::getOccupancyState() {
  return occupancyState;
}
   b4444:	4b01      	ldr	r3, [pc, #4]	; (b444c <_ZN9TofSensor17getOccupancyStateEv+0x8>)
   b4446:	6818      	ldr	r0, [r3, #0]
   b4448:	4770      	bx	lr
   b444a:	bf00      	nop
   b444c:	2003e614 	.word	0x2003e614

000b4450 <_GLOBAL__sub_I_opticalCenters>:
   b4450:	b510      	push	{r4, lr}
SFEVL53L1X myTofSensor;
   b4452:	f002 ff03 	bl	b725c <_Z19__fetch_global_Wirev>
   b4456:	f04f 33ff 	mov.w	r3, #4294967295
   b445a:	4601      	mov	r1, r0
}
   b445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SFEVL53L1X myTofSensor;
   b4460:	4801      	ldr	r0, [pc, #4]	; (b4468 <_GLOBAL__sub_I_opticalCenters+0x18>)
   b4462:	461a      	mov	r2, r3
   b4464:	f000 bca0 	b.w	b4da8 <_ZN10SFEVL53L1XC1ER7TwoWireii>
   b4468:	2003e600 	.word	0x2003e600

000b446c <_ZN5spark10LogHandler5writeEPKcj>:
}
   b446c:	4770      	bx	lr

000b446e <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b446e:	6a00      	ldr	r0, [r0, #32]
   b4470:	6803      	ldr	r3, [r0, #0]
   b4472:	68db      	ldr	r3, [r3, #12]
   b4474:	4718      	bx	r3
	...

000b4478 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4478:	4b0a      	ldr	r3, [pc, #40]	; (b44a4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b447a:	b510      	push	{r4, lr}
   b447c:	4604      	mov	r4, r0
   b447e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4480:	f001 fa96 	bl	b59b0 <_ZN5spark10LogManager8instanceEv>
   b4484:	4621      	mov	r1, r4
   b4486:	f001 fcce 	bl	b5e26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b448a:	f002 fa35 	bl	b68f8 <_Z16_fetch_usbserialv>
   b448e:	f002 fa25 	bl	b68dc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4492:	4620      	mov	r0, r4
   b4494:	4b04      	ldr	r3, [pc, #16]	; (b44a8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4496:	f840 3b04 	str.w	r3, [r0], #4
   b449a:	f001 fb5f 	bl	b5b5c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b449e:	4620      	mov	r0, r4
   b44a0:	bd10      	pop	{r4, pc}
   b44a2:	bf00      	nop
   b44a4:	000b8008 	.word	0x000b8008
   b44a8:	000b7ff0 	.word	0x000b7ff0

000b44ac <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b44ac:	b510      	push	{r4, lr}
   b44ae:	4604      	mov	r4, r0
    }
   b44b0:	f7ff ffe2 	bl	b4478 <_ZN5spark16SerialLogHandlerD1Ev>
   b44b4:	4620      	mov	r0, r4
   b44b6:	2124      	movs	r1, #36	; 0x24
   b44b8:	f7ff fdef 	bl	b409a <_ZdlPvj>
   b44bc:	4620      	mov	r0, r4
   b44be:	bd10      	pop	{r4, pc}

000b44c0 <setup>:
const int intPin =      D3;                       // Hardware interrupt - poliarity set in the library
const int blueLED =     D7;
char statusMsg[64] = "Startup Complete.  Running version 2.03";

void setup(void)
{
   b44c0:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   b44c2:	f002 fecb 	bl	b725c <_Z19__fetch_global_Wirev>
   b44c6:	f002 fb2f 	bl	b6b28 <_ZN7TwoWire5beginEv>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b44ca:	2000      	movs	r0, #0
   b44cc:	f000 fd2e 	bl	b4f2c <hal_timer_millis>
        while (_while() && !_condition()) {
   b44d0:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b44d4:	4604      	mov	r4, r0
   b44d6:	2000      	movs	r0, #0
   b44d8:	f000 fd28 	bl	b4f2c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b44dc:	1b00      	subs	r0, r0, r4
   b44de:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b44e2:	42a8      	cmp	r0, r5
   b44e4:	f171 0300 	sbcs.w	r3, r1, #0
   b44e8:	d207      	bcs.n	b44fa <setup+0x3a>
  waitFor(Serial.isConnected, 10000);       // Primarily interface to this code is serial
   b44ea:	f002 fa05 	bl	b68f8 <_Z16_fetch_usbserialv>
   b44ee:	f002 f9f8 	bl	b68e2 <_ZN9USBSerial11isConnectedEv>
   b44f2:	b910      	cbnz	r0, b44fa <setup+0x3a>
            spark_process();
   b44f4:	f000 ff00 	bl	b52f8 <spark_process>
        while (_while() && !_condition()) {
   b44f8:	e7ed      	b.n	b44d6 <setup+0x16>
   b44fa:	f002 f9fd 	bl	b68f8 <_Z16_fetch_usbserialv>
   b44fe:	f002 f9f0 	bl	b68e2 <_ZN9USBSerial11isConnectedEv>
  delay(1000);                              // Gives serial time to connect
   b4502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4506:	f002 f875 	bl	b65f4 <delay>

  pinMode(blueLED,OUTPUT);                  // Set up pin names and modes
   b450a:	2101      	movs	r1, #1
   b450c:	2007      	movs	r0, #7
   b450e:	f002 fe0d 	bl	b712c <pinMode>
  pinMode(intPin,INPUT);
   b4512:	2100      	movs	r1, #0
   b4514:	2003      	movs	r0, #3
   b4516:	f002 fe09 	bl	b712c <pinMode>
  pinMode(shutdownPin,OUTPUT);              // Not sure if we can use this - messes with Boron i2c bus
   b451a:	2101      	movs	r1, #1
   b451c:	2002      	movs	r0, #2
   b451e:	f002 fe05 	bl	b712c <pinMode>
  digitalWrite(shutdownPin, LOW);           // Turns on the module
   b4522:	2100      	movs	r1, #0
   b4524:	2002      	movs	r0, #2
   b4526:	f002 fe12 	bl	b714e <digitalWrite>
  digitalWrite(blueLED,HIGH);               // Blue led on for Setup
   b452a:	2101      	movs	r1, #1
   b452c:	2007      	movs	r0, #7
   b452e:	f002 fe0e 	bl	b714e <digitalWrite>

  delay(100);
   b4532:	2064      	movs	r0, #100	; 0x64
   b4534:	f002 f85e 	bl	b65f4 <delay>

  TofSensor::instance().setup();
   b4538:	f7ff fe72 	bl	b4220 <_ZN9TofSensor8instanceEv>
   b453c:	f7ff ff2e 	bl	b439c <_ZN9TofSensor5setupEv>
  PeopleCounter::instance().setup();
   b4540:	f7ff fde2 	bl	b4108 <_ZN13PeopleCounter8instanceEv>
   b4544:	f7ff fdf4 	bl	b4130 <_ZN13PeopleCounter5setupEv>
  PeopleCounter::instance().setCount(1);
   b4548:	f7ff fdde 	bl	b4108 <_ZN13PeopleCounter8instanceEv>
   b454c:	2101      	movs	r1, #1
   b454e:	f7ff fe45 	bl	b41dc <_ZN13PeopleCounter8setCountEi>

  Log.info(statusMsg);
   b4552:	4905      	ldr	r1, [pc, #20]	; (b4568 <setup+0xa8>)
   b4554:	4805      	ldr	r0, [pc, #20]	; (b456c <setup+0xac>)
   b4556:	f7ff fdbf 	bl	b40d8 <_ZNK5spark6Logger4infoEPKcz>

  digitalWrite(blueLED, LOW);                   // Signal setup complete
}
   b455a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(blueLED, LOW);                   // Signal setup complete
   b455e:	2100      	movs	r1, #0
   b4560:	2007      	movs	r0, #7
   b4562:	f002 bdf4 	b.w	b714e <digitalWrite>
   b4566:	bf00      	nop
   b4568:	2003e536 	.word	0x2003e536
   b456c:	2003e684 	.word	0x2003e684

000b4570 <loop>:

unsigned long lastLedUpdate = 0;

void loop(void)
{
   b4570:	b510      	push	{r4, lr}
  if( (millis() - lastLedUpdate) > 1000 ){
   b4572:	4c10      	ldr	r4, [pc, #64]	; (b45b4 <loop+0x44>)
   b4574:	f000 fcd2 	bl	b4f1c <HAL_Timer_Get_Milli_Seconds>
   b4578:	6823      	ldr	r3, [r4, #0]
   b457a:	1ac0      	subs	r0, r0, r3
   b457c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4580:	d90b      	bls.n	b459a <loop+0x2a>
    digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));
   b4582:	2007      	movs	r0, #7
   b4584:	f002 fdfc 	bl	b7180 <digitalRead>
   b4588:	fab0 f180 	clz	r1, r0
   b458c:	0949      	lsrs	r1, r1, #5
   b458e:	2007      	movs	r0, #7
   b4590:	f002 fddd 	bl	b714e <digitalWrite>
   b4594:	f000 fcc2 	bl	b4f1c <HAL_Timer_Get_Milli_Seconds>
    lastLedUpdate = millis();
   b4598:	6020      	str	r0, [r4, #0]
  }

  if (TofSensor::instance().loop()) {         // If there is new data from the sensor
   b459a:	f7ff fe41 	bl	b4220 <_ZN9TofSensor8instanceEv>
   b459e:	f7ff fe4f 	bl	b4240 <_ZN9TofSensor4loopEv>
   b45a2:	b128      	cbz	r0, b45b0 <loop+0x40>
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b45a4:	f7ff fdb0 	bl	b4108 <_ZN13PeopleCounter8instanceEv>
  }
}
   b45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b45ac:	f7ff bdc2 	b.w	b4134 <_ZN13PeopleCounter4loopEv>
}
   b45b0:	bd10      	pop	{r4, pc}
   b45b2:	bf00      	nop
   b45b4:	2003e634 	.word	0x2003e634

000b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b45b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b45ba:	e9d0 5300 	ldrd	r5, r3, [r0]
   b45be:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b45c0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b45c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b45c6:	42ae      	cmp	r6, r5
   b45c8:	d004      	beq.n	b45d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b45ca:	4628      	mov	r0, r5
   b45cc:	f000 ff4a 	bl	b5464 <_ZN6StringD1Ev>
   b45d0:	3514      	adds	r5, #20
   b45d2:	e7f8      	b.n	b45c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b45d4:	6820      	ldr	r0, [r4, #0]
   b45d6:	f000 fea7 	bl	b5328 <free>
    AllocatorT::free(data_);
}
   b45da:	4620      	mov	r0, r4
   b45dc:	bd70      	pop	{r4, r5, r6, pc}

000b45de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b45de:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b45e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b45e2:	4604      	mov	r4, r0
   b45e4:	460d      	mov	r5, r1
   b45e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b45e8:	d916      	bls.n	b4618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b45ea:	4290      	cmp	r0, r2
   b45ec:	d215      	bcs.n	b461a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b45ee:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b45f2:	1a75      	subs	r5, r6, r1
   b45f4:	f1a1 0714 	sub.w	r7, r1, #20
   b45f8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b45fa:	42b7      	cmp	r7, r6
   b45fc:	d01c      	beq.n	b4638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b45fe:	b12c      	cbz	r4, b460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4600:	4631      	mov	r1, r6
   b4602:	4620      	mov	r0, r4
   b4604:	f000 ff96 	bl	b5534 <_ZN6StringC1EOS_>
   b4608:	7c33      	ldrb	r3, [r6, #16]
   b460a:	7423      	strb	r3, [r4, #16]
   b460c:	4630      	mov	r0, r6
   b460e:	f000 ff29 	bl	b5464 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4612:	3e14      	subs	r6, #20
   b4614:	3c14      	subs	r4, #20
   b4616:	e7f0      	b.n	b45fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4618:	d00e      	beq.n	b4638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b461a:	42b5      	cmp	r5, r6
   b461c:	d00c      	beq.n	b4638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b461e:	b12c      	cbz	r4, b462c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4620:	4629      	mov	r1, r5
   b4622:	4620      	mov	r0, r4
   b4624:	f000 ff86 	bl	b5534 <_ZN6StringC1EOS_>
   b4628:	7c2b      	ldrb	r3, [r5, #16]
   b462a:	7423      	strb	r3, [r4, #16]
   b462c:	4628      	mov	r0, r5
   b462e:	f000 ff19 	bl	b5464 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4632:	3514      	adds	r5, #20
   b4634:	3414      	adds	r4, #20
   b4636:	e7f0      	b.n	b461a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b463e:	2300      	movs	r3, #0
   b4640:	e9c0 3300 	strd	r3, r3, [r0]
   b4644:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4646:	684f      	ldr	r7, [r1, #4]
   b4648:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b464a:	4604      	mov	r4, r0
   b464c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b464e:	dd23      	ble.n	b4698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4650:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4654:	fb08 f007 	mul.w	r0, r8, r7
   b4658:	f000 fe5e 	bl	b5318 <malloc>
            if (!d) {
   b465c:	4605      	mov	r5, r0
   b465e:	b1d8      	cbz	r0, b4698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4660:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4664:	fb08 1202 	mla	r2, r8, r2, r1
   b4668:	f7ff ffb9 	bl	b45de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b466c:	6820      	ldr	r0, [r4, #0]
   b466e:	f000 fe5b 	bl	b5328 <free>
        data_ = d;
   b4672:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4674:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4676:	e9d6 7300 	ldrd	r7, r3, [r6]
   b467a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b467e:	45b8      	cmp	r8, r7
   b4680:	d008      	beq.n	b4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4682:	4639      	mov	r1, r7
   b4684:	4628      	mov	r0, r5
   b4686:	f000 ff6f 	bl	b5568 <_ZN6StringC1ERKS_>
   b468a:	7c3b      	ldrb	r3, [r7, #16]
   b468c:	742b      	strb	r3, [r5, #16]
   b468e:	3714      	adds	r7, #20
   b4690:	3514      	adds	r5, #20
   b4692:	e7f4      	b.n	b467e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4694:	6873      	ldr	r3, [r6, #4]
   b4696:	6063      	str	r3, [r4, #4]
}
   b4698:	4620      	mov	r0, r4
   b469a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b46a0 <_GLOBAL__sub_I_logHandler>:
   b46a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b46a2:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   b46a4:	2400      	movs	r4, #0
   b46a6:	e9cd 4400 	strd	r4, r4, [sp]
   b46aa:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b46ac:	f002 f924 	bl	b68f8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b46b0:	4d20      	ldr	r5, [pc, #128]	; (b4734 <_GLOBAL__sub_I_logHandler+0x94>)
   b46b2:	4606      	mov	r6, r0
   b46b4:	4669      	mov	r1, sp
   b46b6:	a803      	add	r0, sp, #12
   b46b8:	f7ff ffbf 	bl	b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b46bc:	462f      	mov	r7, r5
        stream_(&stream) {
   b46be:	a903      	add	r1, sp, #12
   b46c0:	a806      	add	r0, sp, #24
   b46c2:	f7ff ffba 	bl	b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b46c6:	4b1c      	ldr	r3, [pc, #112]	; (b4738 <_GLOBAL__sub_I_logHandler+0x98>)
   b46c8:	f847 3b04 	str.w	r3, [r7], #4
   b46cc:	a906      	add	r1, sp, #24
   b46ce:	a809      	add	r0, sp, #36	; 0x24
   b46d0:	f7ff ffb3 	bl	b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b46d4:	aa09      	add	r2, sp, #36	; 0x24
   b46d6:	211e      	movs	r1, #30
   b46d8:	4638      	mov	r0, r7
   b46da:	f001 fc87 	bl	b5fec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b46de:	a809      	add	r0, sp, #36	; 0x24
   b46e0:	f7ff ff6a 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b46e4:	a806      	add	r0, sp, #24
   b46e6:	f7ff ff67 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b46ea:	4b14      	ldr	r3, [pc, #80]	; (b473c <_GLOBAL__sub_I_logHandler+0x9c>)
   b46ec:	602b      	str	r3, [r5, #0]
   b46ee:	a803      	add	r0, sp, #12
   b46f0:	622e      	str	r6, [r5, #32]
   b46f2:	f7ff ff61 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b46f6:	4b12      	ldr	r3, [pc, #72]	; (b4740 <_GLOBAL__sub_I_logHandler+0xa0>)
   b46f8:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b46fa:	f002 f8fd 	bl	b68f8 <_Z16_fetch_usbserialv>
   b46fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4702:	f002 f8e7 	bl	b68d4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4706:	f001 f953 	bl	b59b0 <_ZN5spark10LogManager8instanceEv>
   b470a:	4629      	mov	r1, r5
   b470c:	f001 fb44 	bl	b5d98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b4710:	4668      	mov	r0, sp
   b4712:	f7ff ff51 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b4716:	4b0b      	ldr	r3, [pc, #44]	; (b4744 <_GLOBAL__sub_I_logHandler+0xa4>)
    SleepResult() {}
   b4718:	4a0b      	ldr	r2, [pc, #44]	; (b4748 <_GLOBAL__sub_I_logHandler+0xa8>)
   b471a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b471c:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4720:	2003      	movs	r0, #3
   b4722:	f000 fd53 	bl	b51cc <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4726:	4621      	mov	r1, r4
   b4728:	2001      	movs	r0, #1
}
   b472a:	b00d      	add	sp, #52	; 0x34
   b472c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b4730:	f000 bd5c 	b.w	b51ec <system_thread_set_state>
   b4734:	2003e638 	.word	0x2003e638
   b4738:	000b7ff0 	.word	0x000b7ff0
   b473c:	000b8164 	.word	0x000b8164
   b4740:	000b8008 	.word	0x000b8008
   b4744:	2003e628 	.word	0x2003e628
   b4748:	ffff0000 	.word	0xffff0000

000b474c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b474e:	4604      	mov	r4, r0
   b4750:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4752:	6840      	ldr	r0, [r0, #4]
{
   b4754:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4758:	0849      	lsrs	r1, r1, #1
{
   b475a:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b475c:	f002 fa16 	bl	b6b8c <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b4760:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b4762:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b4764:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b4768:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b476c:	6803      	ldr	r3, [r0, #0]
   b476e:	2202      	movs	r2, #2
   b4770:	68db      	ldr	r3, [r3, #12]
   b4772:	a901      	add	r1, sp, #4
   b4774:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4776:	2500      	movs	r5, #0
   b4778:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b477a:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b477c:	dd05      	ble.n	b478a <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b477e:	6803      	ldr	r3, [r0, #0]
   b4780:	5d71      	ldrb	r1, [r6, r5]
   b4782:	689b      	ldr	r3, [r3, #8]
   b4784:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4786:	3501      	adds	r5, #1
   b4788:	e7f6      	b.n	b4778 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b478a:	2101      	movs	r1, #1
   b478c:	f002 fa02 	bl	b6b94 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b4790:	2000      	movs	r0, #0
   b4792:	b003      	add	sp, #12
   b4794:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b4796:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4798:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b479c:	2301      	movs	r3, #1
   b479e:	7809      	ldrb	r1, [r1, #0]
   b47a0:	9300      	str	r3, [sp, #0]
   b47a2:	f10d 030f 	add.w	r3, sp, #15
   b47a6:	f7ff ffd1 	bl	b474c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b47aa:	b005      	add	sp, #20
   b47ac:	f85d fb04 	ldr.w	pc, [sp], #4

000b47b0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b47b0:	6981      	ldr	r1, [r0, #24]
   b47b2:	2301      	movs	r3, #1
   b47b4:	2286      	movs	r2, #134	; 0x86
   b47b6:	f7ff bfee 	b.w	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b47ba <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b47ba:	6981      	ldr	r1, [r0, #24]
   b47bc:	2340      	movs	r3, #64	; 0x40
   b47be:	2287      	movs	r2, #135	; 0x87
   b47c0:	f7ff bfe9 	b.w	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b47c4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b47c4:	6981      	ldr	r1, [r0, #24]
   b47c6:	2300      	movs	r3, #0
   b47c8:	2287      	movs	r2, #135	; 0x87
   b47ca:	f7ff bfe4 	b.w	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b47ce <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b47ce:	2910      	cmp	r1, #16
{
   b47d0:	b570      	push	{r4, r5, r6, lr}
   b47d2:	460d      	mov	r5, r1
   b47d4:	bf28      	it	cs
   b47d6:	2510      	movcs	r5, #16
	if (Y > 16)
   b47d8:	2a10      	cmp	r2, #16
   b47da:	4616      	mov	r6, r2
   b47dc:	bf28      	it	cs
   b47de:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b47e0:	290a      	cmp	r1, #10
{
   b47e2:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b47e4:	d813      	bhi.n	b480e <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b47e6:	2a0b      	cmp	r2, #11
   b47e8:	bf28      	it	cs
   b47ea:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b47ec:	69a1      	ldr	r1, [r4, #24]
   b47ee:	227f      	movs	r2, #127	; 0x7f
   b47f0:	4620      	mov	r0, r4
   b47f2:	f7ff ffd0 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b47f6:	3d01      	subs	r5, #1
   b47f8:	1e73      	subs	r3, r6, #1
   b47fa:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b47fe:	69a1      	ldr	r1, [r4, #24]
   b4800:	4620      	mov	r0, r4
   b4802:	b2db      	uxtb	r3, r3
}
   b4804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4808:	2280      	movs	r2, #128	; 0x80
   b480a:	f7ff bfc4 	b.w	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b480e:	23c7      	movs	r3, #199	; 0xc7
   b4810:	e7ec      	b.n	b47ec <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b4812:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b4814:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b4816:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b481a:	2302      	movs	r3, #2
   b481c:	7809      	ldrb	r1, [r1, #0]
   b481e:	9300      	str	r3, [sp, #0]
   b4820:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b4822:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4826:	f7ff ff91 	bl	b474c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b482a:	b004      	add	sp, #16
   b482c:	bd10      	pop	{r4, pc}

000b482e <_ZN7VL53L1X26VL53L1X_SetSignalThresholdEt>:
{
   b482e:	b508      	push	{r3, lr}
	VL53L1_WrWord(Device, RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, Signal >> 3);
   b4830:	2266      	movs	r2, #102	; 0x66
   b4832:	08cb      	lsrs	r3, r1, #3
   b4834:	6981      	ldr	r1, [r0, #24]
   b4836:	f7ff ffec 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b483a:	2000      	movs	r0, #0
   b483c:	bd08      	pop	{r3, pc}

000b483e <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt>:
	if (Sigma > (0xFFFF >> 2))
   b483e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
{
   b4842:	b410      	push	{r4}
	if (Sigma > (0xFFFF >> 2))
   b4844:	d207      	bcs.n	b4856 <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt+0x18>
	status = VL53L1_WrWord(Device, RANGE_CONFIG__SIGMA_THRESH, Sigma << 2);
   b4846:	0089      	lsls	r1, r1, #2
   b4848:	b28b      	uxth	r3, r1
}
   b484a:	f85d 4b04 	ldr.w	r4, [sp], #4
	status = VL53L1_WrWord(Device, RANGE_CONFIG__SIGMA_THRESH, Sigma << 2);
   b484e:	6981      	ldr	r1, [r0, #24]
   b4850:	2264      	movs	r2, #100	; 0x64
   b4852:	f7ff bfde 	b.w	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4856:	2001      	movs	r0, #1
   b4858:	f85d 4b04 	ldr.w	r4, [sp], #4
   b485c:	4770      	bx	lr

000b485e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b485e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4862:	4604      	mov	r4, r0
   b4864:	4690      	mov	r8, r2
   b4866:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4868:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b486a:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b486e:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4870:	6860      	ldr	r0, [r4, #4]
   b4872:	4639      	mov	r1, r7
   b4874:	f002 f98a 	bl	b6b8c <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b4878:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b487a:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b487e:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b4882:	6803      	ldr	r3, [r0, #0]
   b4884:	a901      	add	r1, sp, #4
   b4886:	68db      	ldr	r3, [r3, #12]
   b4888:	2202      	movs	r2, #2
   b488a:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b488c:	6860      	ldr	r0, [r4, #4]
   b488e:	2100      	movs	r1, #0
   b4890:	f002 f980 	bl	b6b94 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b4894:	b118      	cbz	r0, b489e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b4896:	3e01      	subs	r6, #1
   b4898:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b489c:	d1e8      	bne.n	b4870 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b489e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b48a2:	6860      	ldr	r0, [r4, #4]
   b48a4:	4639      	mov	r1, r7
   b48a6:	f002 f96e 	bl	b6b86 <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b48aa:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b48ac:	6860      	ldr	r0, [r4, #4]
   b48ae:	6803      	ldr	r3, [r0, #0]
   b48b0:	691b      	ldr	r3, [r3, #16]
   b48b2:	4798      	blx	r3
   b48b4:	b130      	cbz	r0, b48c4 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b48b6:	6860      	ldr	r0, [r4, #4]
   b48b8:	6803      	ldr	r3, [r0, #0]
   b48ba:	695b      	ldr	r3, [r3, #20]
   b48bc:	4798      	blx	r3
   b48be:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b48c2:	e7f3      	b.n	b48ac <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b48c4:	b003      	add	sp, #12
   b48c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b48ca <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b48ca:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b48cc:	2401      	movs	r4, #1
   b48ce:	7809      	ldrb	r1, [r1, #0]
   b48d0:	9400      	str	r4, [sp, #0]
   b48d2:	f7ff ffc4 	bl	b485e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b48d6:	3800      	subs	r0, #0
   b48d8:	bf18      	it	ne
   b48da:	2001      	movne	r0, #1
}
   b48dc:	4240      	negs	r0, r0
   b48de:	b002      	add	sp, #8
   b48e0:	bd10      	pop	{r4, pc}

000b48e2 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b48e2:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b48e4:	2230      	movs	r2, #48	; 0x30
{
   b48e6:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b48e8:	f10d 0307 	add.w	r3, sp, #7
   b48ec:	6981      	ldr	r1, [r0, #24]
   b48ee:	f7ff ffec 	bl	b48ca <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b48f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b48f6:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b48fa:	f003 0301 	and.w	r3, r3, #1
   b48fe:	7023      	strb	r3, [r4, #0]
}
   b4900:	b002      	add	sp, #8
   b4902:	bd10      	pop	{r4, pc}

000b4904 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b4904:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4906:	4605      	mov	r5, r0
   b4908:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b490a:	f10d 0107 	add.w	r1, sp, #7
   b490e:	f7ff ffe8 	bl	b48e2 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b4912:	69a9      	ldr	r1, [r5, #24]
   b4914:	f10d 0306 	add.w	r3, sp, #6
   b4918:	2231      	movs	r2, #49	; 0x31
   b491a:	4628      	mov	r0, r5
   b491c:	f7ff ffd5 	bl	b48ca <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b4920:	b950      	cbnz	r0, b4938 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b4922:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4926:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b492a:	f003 0301 	and.w	r3, r3, #1
   b492e:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b4930:	bf06      	itte	eq
   b4932:	2301      	moveq	r3, #1
   b4934:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b4936:	7020      	strbne	r0, [r4, #0]
}
   b4938:	b003      	add	sp, #12
   b493a:	bd30      	pop	{r4, r5, pc}

000b493c <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b493c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b493e:	2300      	movs	r3, #0
   b4940:	4e1c      	ldr	r6, [pc, #112]	; (b49b4 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b4942:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b4946:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4948:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b494a:	b2aa      	uxth	r2, r5
   b494c:	f816 3b01 	ldrb.w	r3, [r6], #1
   b4950:	69a1      	ldr	r1, [r4, #24]
   b4952:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4954:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4956:	f7ff ff1e 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b495a:	2d88      	cmp	r5, #136	; 0x88
   b495c:	d1f5      	bne.n	b494a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b495e:	4620      	mov	r0, r4
   b4960:	f7ff ff2b 	bl	b47ba <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b4964:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b4966:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b496a:	b963      	cbnz	r3, b4986 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b496c:	f10d 0107 	add.w	r1, sp, #7
   b4970:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b4972:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4974:	f7ff ffc6 	bl	b4904 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b4978:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b497c:	d017      	beq.n	b49ae <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b497e:	2001      	movs	r0, #1
   b4980:	f001 fe38 	bl	b65f4 <delay>
	while (dataReady == 0)
   b4984:	e7ef      	b.n	b4966 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b4986:	4620      	mov	r0, r4
   b4988:	f7ff ff12 	bl	b47b0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b498c:	4620      	mov	r0, r4
   b498e:	f7ff ff19 	bl	b47c4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b4992:	69a1      	ldr	r1, [r4, #24]
   b4994:	2309      	movs	r3, #9
   b4996:	2208      	movs	r2, #8
   b4998:	4620      	mov	r0, r4
   b499a:	f7ff fefc 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b499e:	69a1      	ldr	r1, [r4, #24]
   b49a0:	2300      	movs	r3, #0
   b49a2:	220b      	movs	r2, #11
   b49a4:	4620      	mov	r0, r4
   b49a6:	f7ff fef6 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b49aa:	b002      	add	sp, #8
   b49ac:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b49ae:	f06f 0006 	mvn.w	r0, #6
   b49b2:	e7fa      	b.n	b49aa <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b49b4:	000b8018 	.word	0x000b8018

000b49b8 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b49b8:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b49ba:	224b      	movs	r2, #75	; 0x4b
   b49bc:	f10d 0307 	add.w	r3, sp, #7
{
   b49c0:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b49c2:	6981      	ldr	r1, [r0, #24]
   b49c4:	f7ff ff81 	bl	b48ca <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b49c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b49cc:	2b14      	cmp	r3, #20
   b49ce:	d103      	bne.n	b49d8 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b49d0:	2301      	movs	r3, #1
		*DM = 2;
   b49d2:	8023      	strh	r3, [r4, #0]
}
   b49d4:	b002      	add	sp, #8
   b49d6:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b49d8:	2b0a      	cmp	r3, #10
   b49da:	d1fb      	bne.n	b49d4 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b49dc:	2302      	movs	r3, #2
   b49de:	e7f8      	b.n	b49d2 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b49e0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b49e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b49e2:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b49e4:	f10d 0106 	add.w	r1, sp, #6
{
   b49e8:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b49ea:	f7ff ffe5 	bl	b49b8 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b49ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b49f2:	4606      	mov	r6, r0
	if (DM == 0)
   b49f4:	b153      	cbz	r3, b4a0c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b49f6:	2b01      	cmp	r3, #1
   b49f8:	d152      	bne.n	b4aa0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b49fa:	2d32      	cmp	r5, #50	; 0x32
   b49fc:	d032      	beq.n	b4a64 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b49fe:	d807      	bhi.n	b4a10 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b4a00:	2d14      	cmp	r5, #20
   b4a02:	d025      	beq.n	b4a50 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b4a04:	2d21      	cmp	r5, #33	; 0x21
   b4a06:	d02b      	beq.n	b4a60 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b4a08:	2d0f      	cmp	r5, #15
   b4a0a:	d012      	beq.n	b4a32 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b4a0c:	2601      	movs	r6, #1
   b4a0e:	e01c      	b.n	b4a4a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b4a10:	2dc8      	cmp	r5, #200	; 0xc8
   b4a12:	d031      	beq.n	b4a78 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b4a14:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4a18:	d038      	beq.n	b4a8c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b4a1a:	2d64      	cmp	r5, #100	; 0x64
   b4a1c:	d1f6      	bne.n	b4a0c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a1e:	f240 23e1 	movw	r3, #737	; 0x2e1
   b4a22:	69a1      	ldr	r1, [r4, #24]
   b4a24:	225e      	movs	r2, #94	; 0x5e
   b4a26:	4620      	mov	r0, r4
   b4a28:	f7ff fef3 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a2c:	f44f 7362 	mov.w	r3, #904	; 0x388
   b4a30:	e006      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a32:	231d      	movs	r3, #29
   b4a34:	69a1      	ldr	r1, [r4, #24]
   b4a36:	225e      	movs	r2, #94	; 0x5e
   b4a38:	4620      	mov	r0, r4
   b4a3a:	f7ff feea 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a3e:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a40:	69a1      	ldr	r1, [r4, #24]
   b4a42:	2261      	movs	r2, #97	; 0x61
   b4a44:	4620      	mov	r0, r4
   b4a46:	f7ff fee4 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4a4a:	4630      	mov	r0, r6
   b4a4c:	b002      	add	sp, #8
   b4a4e:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a50:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a52:	69a1      	ldr	r1, [r4, #24]
   b4a54:	225e      	movs	r2, #94	; 0x5e
   b4a56:	4620      	mov	r0, r4
   b4a58:	f7ff fedb 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a5c:	236e      	movs	r3, #110	; 0x6e
   b4a5e:	e7ef      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a60:	23d6      	movs	r3, #214	; 0xd6
   b4a62:	e7f6      	b.n	b4a52 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a64:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b4a68:	69a1      	ldr	r1, [r4, #24]
   b4a6a:	225e      	movs	r2, #94	; 0x5e
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	f7ff fed0 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a72:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b4a76:	e7e3      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a78:	f240 33e1 	movw	r3, #993	; 0x3e1
   b4a7c:	69a1      	ldr	r1, [r4, #24]
   b4a7e:	225e      	movs	r2, #94	; 0x5e
   b4a80:	4620      	mov	r0, r4
   b4a82:	f7ff fec6 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a86:	f240 4396 	movw	r3, #1174	; 0x496
   b4a8a:	e7d9      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4a8c:	f240 5391 	movw	r3, #1425	; 0x591
   b4a90:	69a1      	ldr	r1, [r4, #24]
   b4a92:	225e      	movs	r2, #94	; 0x5e
   b4a94:	4620      	mov	r0, r4
   b4a96:	f7ff febc 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4a9a:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b4a9e:	e7cf      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4aa0:	2d64      	cmp	r5, #100	; 0x64
   b4aa2:	d027      	beq.n	b4af4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b4aa4:	d80d      	bhi.n	b4ac2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b4aa6:	2d21      	cmp	r5, #33	; 0x21
   b4aa8:	d01a      	beq.n	b4ae0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b4aaa:	2d32      	cmp	r5, #50	; 0x32
   b4aac:	d01a      	beq.n	b4ae4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b4aae:	2d14      	cmp	r5, #20
   b4ab0:	d1ac      	bne.n	b4a0c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ab2:	231e      	movs	r3, #30
   b4ab4:	69a1      	ldr	r1, [r4, #24]
   b4ab6:	225e      	movs	r2, #94	; 0x5e
   b4ab8:	4620      	mov	r0, r4
   b4aba:	f7ff feaa 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4abe:	2322      	movs	r3, #34	; 0x22
   b4ac0:	e7be      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4ac2:	2dc8      	cmp	r5, #200	; 0xc8
   b4ac4:	d020      	beq.n	b4b08 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b4ac6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4aca:	d19f      	bne.n	b4a0c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4acc:	f240 438f 	movw	r3, #1167	; 0x48f
   b4ad0:	69a1      	ldr	r1, [r4, #24]
   b4ad2:	225e      	movs	r2, #94	; 0x5e
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	f7ff fe9c 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4ada:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b4ade:	e7af      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ae0:	2360      	movs	r3, #96	; 0x60
   b4ae2:	e7b6      	b.n	b4a52 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ae4:	23ad      	movs	r3, #173	; 0xad
   b4ae6:	69a1      	ldr	r1, [r4, #24]
   b4ae8:	225e      	movs	r2, #94	; 0x5e
   b4aea:	4620      	mov	r0, r4
   b4aec:	f7ff fe91 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4af0:	23c6      	movs	r3, #198	; 0xc6
   b4af2:	e7a5      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4af4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b4af8:	69a1      	ldr	r1, [r4, #24]
   b4afa:	225e      	movs	r2, #94	; 0x5e
   b4afc:	4620      	mov	r0, r4
   b4afe:	f7ff fe88 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b02:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b4b06:	e79b      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b08:	f240 23d9 	movw	r3, #729	; 0x2d9
   b4b0c:	69a1      	ldr	r1, [r4, #24]
   b4b0e:	225e      	movs	r2, #94	; 0x5e
   b4b10:	4620      	mov	r0, r4
   b4b12:	f7ff fe7e 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b16:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b4b1a:	e791      	b.n	b4a40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b4b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4b1e:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b4b20:	2300      	movs	r3, #0
   b4b22:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b4b26:	2302      	movs	r3, #2
   b4b28:	7809      	ldrb	r1, [r1, #0]
   b4b2a:	9300      	str	r3, [sp, #0]
   b4b2c:	ab03      	add	r3, sp, #12
   b4b2e:	f7ff fe96 	bl	b485e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b4b32:	b930      	cbnz	r0, b4b42 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b4b34:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b4b38:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b4b3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4b40:	8023      	strh	r3, [r4, #0]
}
   b4b42:	b004      	add	sp, #16
   b4b44:	bd10      	pop	{r4, pc}

000b4b46 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b4b46:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4b48:	225e      	movs	r2, #94	; 0x5e
   b4b4a:	f10d 0306 	add.w	r3, sp, #6
{
   b4b4e:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4b50:	6981      	ldr	r1, [r0, #24]
   b4b52:	f7ff ffe3 	bl	b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b4b56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4b5a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b4b5e:	d034      	beq.n	b4bca <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4b60:	d810      	bhi.n	b4b84 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b4b62:	2b51      	cmp	r3, #81	; 0x51
   b4b64:	d02f      	beq.n	b4bc6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b4b66:	d805      	bhi.n	b4b74 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b4b68:	2b1d      	cmp	r3, #29
   b4b6a:	d028      	beq.n	b4bbe <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b4b6c:	2b1e      	cmp	r3, #30
   b4b6e:	d02a      	beq.n	b4bc6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b4b70:	2300      	movs	r3, #0
   b4b72:	e025      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4b74:	2bad      	cmp	r3, #173	; 0xad
   b4b76:	d028      	beq.n	b4bca <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4b78:	2bd6      	cmp	r3, #214	; 0xd6
   b4b7a:	d001      	beq.n	b4b80 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b4b7c:	2b60      	cmp	r3, #96	; 0x60
   b4b7e:	d1f7      	bne.n	b4b70 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b4b80:	2321      	movs	r3, #33	; 0x21
   b4b82:	e01d      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4b84:	f240 32e1 	movw	r2, #993	; 0x3e1
   b4b88:	4293      	cmp	r3, r2
   b4b8a:	d020      	beq.n	b4bce <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b4b8c:	d80c      	bhi.n	b4ba8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b4b8e:	f240 22d9 	movw	r2, #729	; 0x2d9
   b4b92:	4293      	cmp	r3, r2
   b4b94:	d01b      	beq.n	b4bce <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b4b96:	f240 22e1 	movw	r2, #737	; 0x2e1
   b4b9a:	4293      	cmp	r3, r2
   b4b9c:	d002      	beq.n	b4ba4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b4b9e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b4ba2:	d1e5      	bne.n	b4b70 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b4ba4:	2364      	movs	r3, #100	; 0x64
   b4ba6:	e00b      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4ba8:	f240 428f 	movw	r2, #1167	; 0x48f
   b4bac:	4293      	cmp	r3, r2
   b4bae:	d003      	beq.n	b4bb8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b4bb0:	f240 5291 	movw	r2, #1425	; 0x591
   b4bb4:	4293      	cmp	r3, r2
   b4bb6:	d1db      	bne.n	b4b70 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b4bb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4bbc:	e000      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b4bbe:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b4bc0:	8023      	strh	r3, [r4, #0]
}
   b4bc2:	b002      	add	sp, #8
   b4bc4:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b4bc6:	2314      	movs	r3, #20
   b4bc8:	e7fa      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b4bca:	2332      	movs	r3, #50	; 0x32
   b4bcc:	e7f8      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b4bce:	23c8      	movs	r3, #200	; 0xc8
   b4bd0:	e7f6      	b.n	b4bc0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b4bd2 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b4bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4bd4:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b4bd6:	f10d 0106 	add.w	r1, sp, #6
{
   b4bda:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b4bdc:	f7ff ffb3 	bl	b4b46 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b4be0:	2d01      	cmp	r5, #1
   b4be2:	d008      	beq.n	b4bf6 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b4be4:	2d02      	cmp	r5, #2
   b4be6:	d02d      	beq.n	b4c44 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b4be8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b4bec:	4620      	mov	r0, r4
   b4bee:	f7ff fef7 	bl	b49e0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b4bf2:	b003      	add	sp, #12
   b4bf4:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b4bf6:	69a1      	ldr	r1, [r4, #24]
   b4bf8:	2314      	movs	r3, #20
   b4bfa:	224b      	movs	r2, #75	; 0x4b
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f7ff fdca 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b4c02:	69a1      	ldr	r1, [r4, #24]
   b4c04:	2307      	movs	r3, #7
   b4c06:	2260      	movs	r2, #96	; 0x60
   b4c08:	4620      	mov	r0, r4
   b4c0a:	f7ff fdc4 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b4c0e:	69a1      	ldr	r1, [r4, #24]
   b4c10:	2305      	movs	r3, #5
   b4c12:	2263      	movs	r2, #99	; 0x63
   b4c14:	4620      	mov	r0, r4
   b4c16:	f7ff fdbe 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b4c1a:	69a1      	ldr	r1, [r4, #24]
   b4c1c:	2338      	movs	r3, #56	; 0x38
   b4c1e:	2269      	movs	r2, #105	; 0x69
   b4c20:	4620      	mov	r0, r4
   b4c22:	f7ff fdb8 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b4c26:	f240 7305 	movw	r3, #1797	; 0x705
   b4c2a:	69a1      	ldr	r1, [r4, #24]
   b4c2c:	2278      	movs	r2, #120	; 0x78
   b4c2e:	4620      	mov	r0, r4
   b4c30:	f7ff fdef 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b4c34:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b4c38:	69a1      	ldr	r1, [r4, #24]
   b4c3a:	227a      	movs	r2, #122	; 0x7a
   b4c3c:	4620      	mov	r0, r4
   b4c3e:	f7ff fde8 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b4c42:	e7d1      	b.n	b4be8 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b4c44:	69a1      	ldr	r1, [r4, #24]
   b4c46:	230a      	movs	r3, #10
   b4c48:	224b      	movs	r2, #75	; 0x4b
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f7ff fda3 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b4c50:	69a1      	ldr	r1, [r4, #24]
   b4c52:	230f      	movs	r3, #15
   b4c54:	2260      	movs	r2, #96	; 0x60
   b4c56:	4620      	mov	r0, r4
   b4c58:	f7ff fd9d 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b4c5c:	69a1      	ldr	r1, [r4, #24]
   b4c5e:	230d      	movs	r3, #13
   b4c60:	2263      	movs	r2, #99	; 0x63
   b4c62:	4620      	mov	r0, r4
   b4c64:	f7ff fd97 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b4c68:	69a1      	ldr	r1, [r4, #24]
   b4c6a:	23b8      	movs	r3, #184	; 0xb8
   b4c6c:	2269      	movs	r2, #105	; 0x69
   b4c6e:	4620      	mov	r0, r4
   b4c70:	f7ff fd91 	bl	b4796 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b4c74:	f640 730d 	movw	r3, #3853	; 0xf0d
   b4c78:	69a1      	ldr	r1, [r4, #24]
   b4c7a:	2278      	movs	r2, #120	; 0x78
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f7ff fdc8 	bl	b4812 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b4c82:	f640 630e 	movw	r3, #3598	; 0xe0e
   b4c86:	e7d7      	b.n	b4c38 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

000b4c88 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b4c88:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b4c8a:	2300      	movs	r3, #0
{
   b4c8c:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b4c8e:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b4c92:	6981      	ldr	r1, [r0, #24]
   b4c94:	f10d 0306 	add.w	r3, sp, #6
   b4c98:	f240 120f 	movw	r2, #271	; 0x10f
   b4c9c:	f7ff ff3e 	bl	b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b4ca0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4ca4:	8023      	strh	r3, [r4, #0]
}
   b4ca6:	b002      	add	sp, #8
   b4ca8:	bd10      	pop	{r4, pc}

000b4caa <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b4caa:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b4cac:	2296      	movs	r2, #150	; 0x96
{
   b4cae:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b4cb0:	f10d 0306 	add.w	r3, sp, #6
   b4cb4:	6981      	ldr	r1, [r0, #24]
   b4cb6:	f7ff ff31 	bl	b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b4cba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4cbe:	8023      	strh	r3, [r4, #0]
}
   b4cc0:	b002      	add	sp, #8
   b4cc2:	bd10      	pop	{r4, pc}

000b4cc4 <_ZN7VL53L1X24VL53L1X_GetSignalPerSpadEPt>:
{
   b4cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t SpNb = 1, signal;
   b4cc6:	2301      	movs	r3, #1
{
   b4cc8:	4604      	mov	r4, r0
   b4cca:	460d      	mov	r5, r1
	uint16_t SpNb = 1, signal;
   b4ccc:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = VL53L1_RdWord(Device,
   b4cd0:	6981      	ldr	r1, [r0, #24]
   b4cd2:	f10d 0306 	add.w	r3, sp, #6
   b4cd6:	2298      	movs	r2, #152	; 0x98
   b4cd8:	f7ff ff20 	bl	b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	status = VL53L1_RdWord(Device,
   b4cdc:	ab01      	add	r3, sp, #4
   b4cde:	69a1      	ldr	r1, [r4, #24]
   b4ce0:	228c      	movs	r2, #140	; 0x8c
   b4ce2:	4620      	mov	r0, r4
   b4ce4:	f7ff ff1a 	bl	b4b1c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
   b4ce8:	4604      	mov	r4, r0
	*signalRate = (uint16_t)(2000.0 * signal / SpNb);
   b4cea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4cee:	f002 fc2f 	bl	b7550 <__aeabi_i2d>
   b4cf2:	4b0b      	ldr	r3, [pc, #44]	; (b4d20 <_ZN7VL53L1X24VL53L1X_GetSignalPerSpadEPt+0x5c>)
   b4cf4:	2200      	movs	r2, #0
   b4cf6:	f002 fc95 	bl	b7624 <__aeabi_dmul>
   b4cfa:	4606      	mov	r6, r0
   b4cfc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b4d00:	460f      	mov	r7, r1
   b4d02:	f002 fc25 	bl	b7550 <__aeabi_i2d>
   b4d06:	4602      	mov	r2, r0
   b4d08:	460b      	mov	r3, r1
   b4d0a:	4630      	mov	r0, r6
   b4d0c:	4639      	mov	r1, r7
   b4d0e:	f002 fdb3 	bl	b7878 <__aeabi_ddiv>
   b4d12:	f002 fe99 	bl	b7a48 <__aeabi_d2uiz>
   b4d16:	8028      	strh	r0, [r5, #0]
}
   b4d18:	4620      	mov	r0, r4
   b4d1a:	b003      	add	sp, #12
   b4d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4d1e:	bf00      	nop
   b4d20:	409f4000 	.word	0x409f4000

000b4d24 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b4d24:	4770      	bx	lr

000b4d26 <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b4d26:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b4d28:	6880      	ldr	r0, [r0, #8]
   b4d2a:	2800      	cmp	r0, #0
   b4d2c:	db03      	blt.n	b4d36 <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b4d2e:	2100      	movs	r1, #0
   b4d30:	b280      	uxth	r0, r0
   b4d32:	f002 fa0c 	bl	b714e <digitalWrite>
       }
       delay(10);
    }
   b4d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4d3a:	200a      	movs	r0, #10
   b4d3c:	f001 bc5a 	b.w	b65f4 <delay>

000b4d40 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b4d40:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b4d42:	6880      	ldr	r0, [r0, #8]
   b4d44:	2800      	cmp	r0, #0
   b4d46:	db03      	blt.n	b4d50 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b4d48:	2101      	movs	r1, #1
   b4d4a:	b280      	uxth	r0, r0
   b4d4c:	f002 f9ff 	bl	b714e <digitalWrite>
    }
   b4d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4d54:	200a      	movs	r0, #10
   b4d56:	f001 bc4d 	b.w	b65f4 <delay>

000b4d5a <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b4d5a:	b510      	push	{r4, lr}
   b4d5c:	211c      	movs	r1, #28
   b4d5e:	4604      	mov	r4, r0
   b4d60:	f7ff f99b 	bl	b409a <_ZdlPvj>
   b4d64:	4620      	mov	r0, r4
   b4d66:	bd10      	pop	{r4, pc}

000b4d68 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b4d68:	b513      	push	{r0, r1, r4, lr}
   b4d6a:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b4d6c:	f10d 0106 	add.w	r1, sp, #6
   b4d70:	f7ff ff9b 	bl	b4caa <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b4d74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4d78:	6023      	str	r3, [r4, #0]
	return status;
    }
   b4d7a:	b002      	add	sp, #8
   b4d7c:	bd10      	pop	{r4, pc}

000b4d7e <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b4d7e:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b4d80:	f10d 0106 	add.w	r1, sp, #6
   b4d84:	f7ff ff80 	bl	b4c88 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b4d88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b4d8c:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b4d90:	1ac0      	subs	r0, r0, r3
   b4d92:	bf18      	it	ne
   b4d94:	f04f 30ff 	movne.w	r0, #4294967295
   b4d98:	b003      	add	sp, #12
   b4d9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d9e <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b4d9e:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b4da0:	f7ff fdcc 	bl	b493c <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b4da4:	bd08      	pop	{r3, pc}
	...

000b4da8 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4dac:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b4db0:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4db4:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b4db8:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4dba:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4dbc:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4dbe:	460f      	mov	r7, r1
   b4dc0:	4616      	mov	r6, r2
   b4dc2:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4dc4:	f7ff f965 	bl	b4092 <_Znwj>
   b4dc8:	4604      	mov	r4, r0
   b4dca:	b180      	cbz	r0, b4dee <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4dcc:	4b0a      	ldr	r3, [pc, #40]	; (b4df8 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b4dce:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4dd2:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b4dd6:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b4dd8:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4ddc:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b4de0:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b4de2:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b4de4:	db03      	blt.n	b4dee <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b4de6:	2101      	movs	r1, #1
   b4de8:	b2b0      	uxth	r0, r6
   b4dea:	f002 f99f 	bl	b712c <pinMode>
   b4dee:	612c      	str	r4, [r5, #16]
}
   b4df0:	4628      	mov	r0, r5
   b4df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4df6:	bf00      	nop
   b4df8:	000b807c 	.word	0x000b807c

000b4dfc <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   b4dfc:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   b4dfe:	f10d 0106 	add.w	r1, sp, #6
   b4e02:	6900      	ldr	r0, [r0, #16]
   b4e04:	f7ff ff40 	bl	b4c88 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   b4e08:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   b4e0c:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   b4e10:	1ac3      	subs	r3, r0, r3
   b4e12:	4258      	negs	r0, r3
   b4e14:	4158      	adcs	r0, r3
   b4e16:	b003      	add	sp, #12
   b4e18:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e1c <_ZN10SFEVL53L1X5beginEv>:
{
   b4e1c:	b510      	push	{r4, lr}
   b4e1e:	4604      	mov	r4, r0
	if (checkID() == false)
   b4e20:	f7ff ffec 	bl	b4dfc <_ZN10SFEVL53L1X7checkIDEv>
   b4e24:	b130      	cbz	r0, b4e34 <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
   b4e26:	6920      	ldr	r0, [r4, #16]
   b4e28:	f7ff fd88 	bl	b493c <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   b4e2c:	3800      	subs	r0, #0
   b4e2e:	bf18      	it	ne
   b4e30:	2001      	movne	r0, #1
}
   b4e32:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   b4e34:	2001      	movs	r0, #1
   b4e36:	e7fc      	b.n	b4e32 <_ZN10SFEVL53L1X5beginEv+0x16>

000b4e38 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   b4e38:	6900      	ldr	r0, [r0, #16]
   b4e3a:	f7ff bcb9 	b.w	b47b0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000b4e3e <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b4e3e:	6900      	ldr	r0, [r0, #16]
   b4e40:	f7ff bcbb 	b.w	b47ba <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b4e44 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b4e44:	6900      	ldr	r0, [r0, #16]
   b4e46:	f7ff bcbd 	b.w	b47c4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b4e4a <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   b4e4a:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   b4e4c:	f10d 0107 	add.w	r1, sp, #7
   b4e50:	6900      	ldr	r0, [r0, #16]
   b4e52:	f7ff fd57 	bl	b4904 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   b4e56:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   b4e5a:	3800      	subs	r0, #0
   b4e5c:	bf18      	it	ne
   b4e5e:	2001      	movne	r0, #1
   b4e60:	b003      	add	sp, #12
   b4e62:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e66 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b4e66:	6900      	ldr	r0, [r0, #16]
   b4e68:	f7ff bdba 	b.w	b49e0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b4e6c <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b4e6c:	6900      	ldr	r0, [r0, #16]
   b4e6e:	2102      	movs	r1, #2
   b4e70:	f7ff beaf 	b.w	b4bd2 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b4e74 <_ZN10SFEVL53L1X16getSignalPerSpadEv>:
	_device->VL53L1X_GetDistance(&distance);
	return (int)distance;
}

uint16_t SFEVL53L1X::getSignalPerSpad()
{
   b4e74:	b507      	push	{r0, r1, r2, lr}
	uint16_t temp;
	_device->VL53L1X_GetSignalPerSpad(&temp);
   b4e76:	f10d 0106 	add.w	r1, sp, #6
   b4e7a:	6900      	ldr	r0, [r0, #16]
   b4e7c:	f7ff ff22 	bl	b4cc4 <_ZN7VL53L1X24VL53L1X_GetSignalPerSpadEPt>
	return temp;
}
   b4e80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4e84:	b003      	add	sp, #12
   b4e86:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e8a <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b4e8a:	6900      	ldr	r0, [r0, #16]
   b4e8c:	f7ff bc9f 	b.w	b47ce <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b4e90 <_ZN10SFEVL53L1X18setSignalThresholdEt>:
	return tempY;
}

void SFEVL53L1X::setSignalThreshold(uint16_t signalThreshold)
{
	_device->VL53L1X_SetSignalThreshold(signalThreshold);
   b4e90:	6900      	ldr	r0, [r0, #16]
   b4e92:	f7ff bccc 	b.w	b482e <_ZN7VL53L1X26VL53L1X_SetSignalThresholdEt>

000b4e96 <_ZN10SFEVL53L1X17setSigmaThresholdEt>:
	return temp;
}

void SFEVL53L1X::setSigmaThreshold(uint16_t sigmaThreshold)
{
	_device->VL53L1X_SetSigmaThreshold(sigmaThreshold);
   b4e96:	6900      	ldr	r0, [r0, #16]
   b4e98:	f7ff bcd1 	b.w	b483e <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt>

000b4e9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <netdb_freeaddrinfo+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	689b      	ldr	r3, [r3, #8]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030268 	.word	0x00030268

000b4eac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <netdb_getaddrinfo+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	68db      	ldr	r3, [r3, #12]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030268 	.word	0x00030268

000b4ebc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <HAL_Pin_Mode+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	689b      	ldr	r3, [r3, #8]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	0003022c 	.word	0x0003022c

000b4ecc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <HAL_Get_Pin_Mode+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	68db      	ldr	r3, [r3, #12]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	0003022c 	.word	0x0003022c

000b4edc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <HAL_GPIO_Write+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	691b      	ldr	r3, [r3, #16]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	0003022c 	.word	0x0003022c

000b4eec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <HAL_GPIO_Read+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	695b      	ldr	r3, [r3, #20]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	0003022c 	.word	0x0003022c

000b4efc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <HAL_RNG_GetRandomNumber+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	685b      	ldr	r3, [r3, #4]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030218 	.word	0x00030218

000b4f0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <HAL_Delay_Microseconds+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	68db      	ldr	r3, [r3, #12]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030218 	.word	0x00030218

000b4f1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	695b      	ldr	r3, [r3, #20]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030218 	.word	0x00030218

000b4f2c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <hal_timer_millis+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030218 	.word	0x00030218

000b4f3c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <os_mutex_recursive_create+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030248 	.word	0x00030248

000b4f4c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <os_mutex_recursive_destroy+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030248 	.word	0x00030248

000b4f5c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <os_mutex_recursive_lock+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030248 	.word	0x00030248

000b4f6c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <os_mutex_recursive_unlock+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030248 	.word	0x00030248

000b4f7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <inet_inet_ntop+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	695b      	ldr	r3, [r3, #20]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030264 	.word	0x00030264

000b4f8c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_usart_end+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	689b      	ldr	r3, [r3, #8]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	0003023c 	.word	0x0003023c

000b4f9c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <hal_usart_write+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	68db      	ldr	r3, [r3, #12]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	0003023c 	.word	0x0003023c

000b4fac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <hal_usart_available+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	691b      	ldr	r3, [r3, #16]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	0003023c 	.word	0x0003023c

000b4fbc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <hal_usart_read+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	695b      	ldr	r3, [r3, #20]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	0003023c 	.word	0x0003023c

000b4fcc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <hal_usart_peek+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	699b      	ldr	r3, [r3, #24]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003023c 	.word	0x0003023c

000b4fdc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <hal_usart_flush+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	69db      	ldr	r3, [r3, #28]
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	0003023c 	.word	0x0003023c

000b4fec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <hal_usart_is_enabled+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6a1b      	ldr	r3, [r3, #32]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	0003023c 	.word	0x0003023c

000b4ffc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <hal_usart_available_data_for_write+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	0003023c 	.word	0x0003023c

000b500c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <hal_usart_begin_config+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	0003023c 	.word	0x0003023c

000b501c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <hal_usart_init_ex+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003023c 	.word	0x0003023c

000b502c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <hal_i2c_begin+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	68db      	ldr	r3, [r3, #12]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030228 	.word	0x00030228

000b503c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <hal_i2c_begin_transmission+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	699b      	ldr	r3, [r3, #24]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030228 	.word	0x00030228

000b504c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <hal_i2c_end_transmission+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	69db      	ldr	r3, [r3, #28]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030228 	.word	0x00030228

000b505c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <hal_i2c_write+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6a1b      	ldr	r3, [r3, #32]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030228 	.word	0x00030228

000b506c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <hal_i2c_available+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030228 	.word	0x00030228

000b507c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <hal_i2c_read+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030228 	.word	0x00030228

000b508c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <hal_i2c_peek+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030228 	.word	0x00030228

000b509c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <hal_i2c_flush+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030228 	.word	0x00030228

000b50ac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <hal_i2c_is_enabled+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	00030228 	.word	0x00030228

000b50bc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <hal_i2c_init+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	00030228 	.word	0x00030228

000b50cc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <hal_i2c_request_ex+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	00030228 	.word	0x00030228

000b50dc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <hal_spi_init+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	69db      	ldr	r3, [r3, #28]
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	00030230 	.word	0x00030230

000b50ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <hal_spi_is_enabled+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6a1b      	ldr	r3, [r3, #32]
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	00030230 	.word	0x00030230

000b50fc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <HAL_USB_USART_Init+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	681b      	ldr	r3, [r3, #0]
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	0003024c 	.word	0x0003024c

000b510c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <HAL_USB_USART_Begin+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	685b      	ldr	r3, [r3, #4]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	0003024c 	.word	0x0003024c

000b511c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <HAL_USB_USART_End+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	689b      	ldr	r3, [r3, #8]
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	0003024c 	.word	0x0003024c

000b512c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <HAL_USB_USART_Available_Data+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	691b      	ldr	r3, [r3, #16]
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	0003024c 	.word	0x0003024c

000b513c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	695b      	ldr	r3, [r3, #20]
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	0003024c 	.word	0x0003024c

000b514c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b514c:	b508      	push	{r3, lr}
   b514e:	4b02      	ldr	r3, [pc, #8]	; (b5158 <HAL_USB_USART_Receive_Data+0xc>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	699b      	ldr	r3, [r3, #24]
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	bd08      	pop	{r3, pc}
   b5158:	0003024c 	.word	0x0003024c

000b515c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b515c:	b508      	push	{r3, lr}
   b515e:	4b02      	ldr	r3, [pc, #8]	; (b5168 <HAL_USB_USART_Send_Data+0xc>)
   b5160:	681b      	ldr	r3, [r3, #0]
   b5162:	69db      	ldr	r3, [r3, #28]
   b5164:	9301      	str	r3, [sp, #4]
   b5166:	bd08      	pop	{r3, pc}
   b5168:	0003024c 	.word	0x0003024c

000b516c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b516c:	b508      	push	{r3, lr}
   b516e:	4b02      	ldr	r3, [pc, #8]	; (b5178 <HAL_USB_USART_Flush_Data+0xc>)
   b5170:	681b      	ldr	r3, [r3, #0]
   b5172:	6a1b      	ldr	r3, [r3, #32]
   b5174:	9301      	str	r3, [sp, #4]
   b5176:	bd08      	pop	{r3, pc}
   b5178:	0003024c 	.word	0x0003024c

000b517c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b517c:	b508      	push	{r3, lr}
   b517e:	4b02      	ldr	r3, [pc, #8]	; (b5188 <HAL_USB_USART_Is_Connected+0xc>)
   b5180:	681b      	ldr	r3, [r3, #0]
   b5182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5184:	9301      	str	r3, [sp, #4]
   b5186:	bd08      	pop	{r3, pc}
   b5188:	0003024c 	.word	0x0003024c

000b518c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b518c:	b508      	push	{r3, lr}
   b518e:	4b02      	ldr	r3, [pc, #8]	; (b5198 <panic_+0xc>)
   b5190:	681b      	ldr	r3, [r3, #0]
   b5192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5194:	9301      	str	r3, [sp, #4]
   b5196:	bd08      	pop	{r3, pc}
   b5198:	00030260 	.word	0x00030260

000b519c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <log_message_v+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	00030260 	.word	0x00030260

000b51ac <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <log_level_name+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030260 	.word	0x00030260

000b51bc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <log_set_callbacks+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030260 	.word	0x00030260

000b51cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <set_system_mode+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	685b      	ldr	r3, [r3, #4]
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	00030220 	.word	0x00030220

000b51dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <system_delay_ms+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	695b      	ldr	r3, [r3, #20]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030220 	.word	0x00030220

000b51ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <system_thread_set_state+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030220 	.word	0x00030220

000b51fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b03      	ldr	r3, [pc, #12]	; (b520c <system_ctrl_set_app_request_handler+0x10>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5206:	9301      	str	r3, [sp, #4]
   b5208:	bd08      	pop	{r3, pc}
   b520a:	0000      	.short	0x0000
   b520c:	00030220 	.word	0x00030220

000b5210 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b03      	ldr	r3, [pc, #12]	; (b5220 <system_ctrl_set_result+0x10>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b521a:	9301      	str	r3, [sp, #4]
   b521c:	bd08      	pop	{r3, pc}
   b521e:	0000      	.short	0x0000
   b5220:	00030220 	.word	0x00030220

000b5224 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b5224:	b508      	push	{r3, lr}
   b5226:	4b03      	ldr	r3, [pc, #12]	; (b5234 <system_reset+0x10>)
   b5228:	681b      	ldr	r3, [r3, #0]
   b522a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b522e:	9301      	str	r3, [sp, #4]
   b5230:	bd08      	pop	{r3, pc}
   b5232:	0000      	.short	0x0000
   b5234:	00030220 	.word	0x00030220

000b5238 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <network_connect+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	685b      	ldr	r3, [r3, #4]
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030240 	.word	0x00030240

000b5248 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <network_connecting+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	689b      	ldr	r3, [r3, #8]
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030240 	.word	0x00030240

000b5258 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <network_disconnect+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	68db      	ldr	r3, [r3, #12]
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030240 	.word	0x00030240

000b5268 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <network_ready+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	691b      	ldr	r3, [r3, #16]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030240 	.word	0x00030240

000b5278 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <network_on+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	695b      	ldr	r3, [r3, #20]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030240 	.word	0x00030240

000b5288 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <network_off+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	699b      	ldr	r3, [r3, #24]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	00030240 	.word	0x00030240

000b5298 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <network_listen+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	69db      	ldr	r3, [r3, #28]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	00030240 	.word	0x00030240

000b52a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <network_listening+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6a1b      	ldr	r3, [r3, #32]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	00030240 	.word	0x00030240

000b52b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <network_set_listen_timeout+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	00030240 	.word	0x00030240

000b52c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <network_get_listen_timeout+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	00030240 	.word	0x00030240

000b52d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <network_is_on+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	00030240 	.word	0x00030240

000b52e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <network_is_off+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030240 	.word	0x00030240

000b52f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <spark_process+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	689b      	ldr	r3, [r3, #8]
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030244 	.word	0x00030244

000b5308 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <spark_set_random_seed_from_cloud_handler+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030244 	.word	0x00030244

000b5318 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <malloc+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	681b      	ldr	r3, [r3, #0]
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	0003021c 	.word	0x0003021c

000b5328 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <free+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	685b      	ldr	r3, [r3, #4]
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	0003021c 	.word	0x0003021c

000b5338 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <realloc+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	689b      	ldr	r3, [r3, #8]
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	0003021c 	.word	0x0003021c

000b5348 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <vsnprintf+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	0003021c 	.word	0x0003021c

000b5358 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <__errno+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	0003021c 	.word	0x0003021c

000b5368 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <__assert_func+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	0003021c 	.word	0x0003021c

000b5378 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <newlib_impure_ptr_callback+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	0003021c 	.word	0x0003021c

000b5388 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5388:	2200      	movs	r2, #0
   b538a:	6840      	ldr	r0, [r0, #4]
   b538c:	4611      	mov	r1, r2
   b538e:	f7ff bf8b 	b.w	b52a8 <network_listening>

000b5392 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5392:	2200      	movs	r2, #0
   b5394:	6840      	ldr	r0, [r0, #4]
   b5396:	4611      	mov	r1, r2
   b5398:	f7ff bf96 	b.w	b52c8 <network_get_listen_timeout>

000b539c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b539c:	6840      	ldr	r0, [r0, #4]
   b539e:	2200      	movs	r2, #0
   b53a0:	f7ff bf8a 	b.w	b52b8 <network_set_listen_timeout>

000b53a4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b53a4:	6840      	ldr	r0, [r0, #4]
   b53a6:	2200      	movs	r2, #0
   b53a8:	f081 0101 	eor.w	r1, r1, #1
   b53ac:	f7ff bf74 	b.w	b5298 <network_listen>

000b53b0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b53b0:	2300      	movs	r3, #0
   b53b2:	6840      	ldr	r0, [r0, #4]
   b53b4:	461a      	mov	r2, r3
   b53b6:	4619      	mov	r1, r3
   b53b8:	f7ff bf66 	b.w	b5288 <network_off>

000b53bc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b53bc:	2300      	movs	r3, #0
   b53be:	6840      	ldr	r0, [r0, #4]
   b53c0:	461a      	mov	r2, r3
   b53c2:	4619      	mov	r1, r3
   b53c4:	f7ff bf58 	b.w	b5278 <network_on>

000b53c8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b53c8:	2200      	movs	r2, #0
   b53ca:	6840      	ldr	r0, [r0, #4]
   b53cc:	4611      	mov	r1, r2
   b53ce:	f7ff bf4b 	b.w	b5268 <network_ready>

000b53d2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b53d2:	2200      	movs	r2, #0
   b53d4:	6840      	ldr	r0, [r0, #4]
   b53d6:	4611      	mov	r1, r2
   b53d8:	f7ff bf36 	b.w	b5248 <network_connecting>

000b53dc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b53dc:	6840      	ldr	r0, [r0, #4]
   b53de:	2200      	movs	r2, #0
   b53e0:	2102      	movs	r1, #2
   b53e2:	f7ff bf39 	b.w	b5258 <network_disconnect>

000b53e6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b53e6:	2300      	movs	r3, #0
   b53e8:	6840      	ldr	r0, [r0, #4]
   b53ea:	461a      	mov	r2, r3
   b53ec:	f7ff bf24 	b.w	b5238 <network_connect>

000b53f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b53f0:	4b02      	ldr	r3, [pc, #8]	; (b53fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b53f2:	2203      	movs	r2, #3
   b53f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b53f6:	4a02      	ldr	r2, [pc, #8]	; (b5400 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b53f8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b53fa:	4770      	bx	lr
   b53fc:	2003e65c 	.word	0x2003e65c
   b5400:	000b80a0 	.word	0x000b80a0

000b5404 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5404:	b510      	push	{r4, lr}
   b5406:	4604      	mov	r4, r0
   b5408:	4608      	mov	r0, r1
{
    _spi = spi;
   b540a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b540c:	f7ff fe66 	bl	b50dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5410:	2300      	movs	r3, #0
   b5412:	6063      	str	r3, [r4, #4]
}
   b5414:	4620      	mov	r0, r4
   b5416:	bd10      	pop	{r4, pc}

000b5418 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b5418:	b507      	push	{r0, r1, r2, lr}
   b541a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b541c:	2100      	movs	r1, #0
{
   b541e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b5420:	9100      	str	r1, [sp, #0]
   b5422:	2001      	movs	r0, #1
   b5424:	218c      	movs	r1, #140	; 0x8c
   b5426:	f7ff fefd 	bl	b5224 <system_reset>
}
   b542a:	b003      	add	sp, #12
   b542c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5430 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b5430:	4601      	mov	r1, r0
    reset(0, flags);
   b5432:	2000      	movs	r0, #0
   b5434:	f7ff bff0 	b.w	b5418 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b5438 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b5438:	2000      	movs	r0, #0
   b543a:	f7ff bff9 	b.w	b5430 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b5440 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5440:	4b05      	ldr	r3, [pc, #20]	; (b5458 <_GLOBAL__sub_I_System+0x18>)
   b5442:	2202      	movs	r2, #2
   b5444:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5446:	4b05      	ldr	r3, [pc, #20]	; (b545c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5448:	4a05      	ldr	r2, [pc, #20]	; (b5460 <_GLOBAL__sub_I_System+0x20>)
   b544a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b544c:	2000      	movs	r0, #0
   b544e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5452:	f7ff bebb 	b.w	b51cc <set_system_mode>
   b5456:	bf00      	nop
   b5458:	2003e670 	.word	0x2003e670
   b545c:	2003e664 	.word	0x2003e664
   b5460:	ffff0000 	.word	0xffff0000

000b5464 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5464:	b510      	push	{r4, lr}
   b5466:	4604      	mov	r4, r0
{
	free(buffer);
   b5468:	6800      	ldr	r0, [r0, #0]
   b546a:	f7ff ff5d 	bl	b5328 <free>
}
   b546e:	4620      	mov	r0, r4
   b5470:	bd10      	pop	{r4, pc}

000b5472 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5472:	b510      	push	{r4, lr}
   b5474:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5476:	6800      	ldr	r0, [r0, #0]
   b5478:	b108      	cbz	r0, b547e <_ZN6String10invalidateEv+0xc>
   b547a:	f7ff ff55 	bl	b5328 <free>
	buffer = NULL;
   b547e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5480:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5484:	6023      	str	r3, [r4, #0]
}
   b5486:	bd10      	pop	{r4, pc}

000b5488 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5488:	b538      	push	{r3, r4, r5, lr}
   b548a:	4604      	mov	r4, r0
   b548c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b548e:	6800      	ldr	r0, [r0, #0]
   b5490:	3101      	adds	r1, #1
   b5492:	f7ff ff51 	bl	b5338 <realloc>
	if (newbuffer) {
   b5496:	b110      	cbz	r0, b549e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5498:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b549c:	2001      	movs	r0, #1
	}
	return 0;
}
   b549e:	bd38      	pop	{r3, r4, r5, pc}

000b54a0 <_ZN6String7reserveEj>:
{
   b54a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b54a2:	6803      	ldr	r3, [r0, #0]
{
   b54a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b54a6:	b123      	cbz	r3, b54b2 <_ZN6String7reserveEj+0x12>
   b54a8:	6843      	ldr	r3, [r0, #4]
   b54aa:	428b      	cmp	r3, r1
   b54ac:	d301      	bcc.n	b54b2 <_ZN6String7reserveEj+0x12>
   b54ae:	2001      	movs	r0, #1
}
   b54b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b54b2:	4620      	mov	r0, r4
   b54b4:	f7ff ffe8 	bl	b5488 <_ZN6String12changeBufferEj>
   b54b8:	2800      	cmp	r0, #0
   b54ba:	d0f9      	beq.n	b54b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b54bc:	68a3      	ldr	r3, [r4, #8]
   b54be:	2b00      	cmp	r3, #0
   b54c0:	d1f5      	bne.n	b54ae <_ZN6String7reserveEj+0xe>
   b54c2:	6822      	ldr	r2, [r4, #0]
   b54c4:	7013      	strb	r3, [r2, #0]
   b54c6:	e7f2      	b.n	b54ae <_ZN6String7reserveEj+0xe>

000b54c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b54c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b54ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b54cc:	4611      	mov	r1, r2
   b54ce:	9201      	str	r2, [sp, #4]
{
   b54d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b54d2:	f7ff ffe5 	bl	b54a0 <_ZN6String7reserveEj>
   b54d6:	9a01      	ldr	r2, [sp, #4]
   b54d8:	b928      	cbnz	r0, b54e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b54da:	4620      	mov	r0, r4
   b54dc:	f7ff ffc9 	bl	b5472 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b54e0:	4620      	mov	r0, r4
   b54e2:	b003      	add	sp, #12
   b54e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b54e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b54e8:	4629      	mov	r1, r5
   b54ea:	6820      	ldr	r0, [r4, #0]
   b54ec:	f002 fada 	bl	b7aa4 <memcpy>
	buffer[len] = 0;
   b54f0:	6822      	ldr	r2, [r4, #0]
   b54f2:	68a3      	ldr	r3, [r4, #8]
   b54f4:	2100      	movs	r1, #0
   b54f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b54f8:	e7f2      	b.n	b54e0 <_ZN6String4copyEPKcj+0x18>

000b54fa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b54fa:	b538      	push	{r3, r4, r5, lr}
   b54fc:	4605      	mov	r5, r0
	if (buffer) {
   b54fe:	6800      	ldr	r0, [r0, #0]
{
   b5500:	460c      	mov	r4, r1
	if (buffer) {
   b5502:	b168      	cbz	r0, b5520 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b5504:	686a      	ldr	r2, [r5, #4]
   b5506:	688b      	ldr	r3, [r1, #8]
   b5508:	429a      	cmp	r2, r3
   b550a:	d307      	bcc.n	b551c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b550c:	6809      	ldr	r1, [r1, #0]
   b550e:	f002 fb48 	bl	b7ba2 <strcpy>
			len = rhs.len;
   b5512:	68a3      	ldr	r3, [r4, #8]
   b5514:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b5516:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5518:	60a3      	str	r3, [r4, #8]
}
   b551a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b551c:	f7ff ff04 	bl	b5328 <free>
	buffer = rhs.buffer;
   b5520:	6823      	ldr	r3, [r4, #0]
   b5522:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b5524:	6863      	ldr	r3, [r4, #4]
   b5526:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b5528:	68a3      	ldr	r3, [r4, #8]
   b552a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b552c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b552e:	e9c4 3300 	strd	r3, r3, [r4]
   b5532:	e7f1      	b.n	b5518 <_ZN6String4moveERS_+0x1e>

000b5534 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b5534:	b510      	push	{r4, lr}
	buffer = NULL;
   b5536:	2300      	movs	r3, #0
	capacity = 0;
   b5538:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b553c:	4604      	mov	r4, r0
	len = 0;
   b553e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5540:	7303      	strb	r3, [r0, #12]
	move(rval);
   b5542:	f7ff ffda 	bl	b54fa <_ZN6String4moveERS_>
}
   b5546:	4620      	mov	r0, r4
   b5548:	bd10      	pop	{r4, pc}

000b554a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b554a:	4288      	cmp	r0, r1
{
   b554c:	b510      	push	{r4, lr}
   b554e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5550:	d005      	beq.n	b555e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5552:	680b      	ldr	r3, [r1, #0]
   b5554:	b12b      	cbz	r3, b5562 <_ZN6StringaSERKS_+0x18>
   b5556:	688a      	ldr	r2, [r1, #8]
   b5558:	4619      	mov	r1, r3
   b555a:	f7ff ffb5 	bl	b54c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b555e:	4620      	mov	r0, r4
   b5560:	bd10      	pop	{r4, pc}
	else invalidate();
   b5562:	f7ff ff86 	bl	b5472 <_ZN6String10invalidateEv>
   b5566:	e7fa      	b.n	b555e <_ZN6StringaSERKS_+0x14>

000b5568 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5568:	b510      	push	{r4, lr}
	buffer = NULL;
   b556a:	2300      	movs	r3, #0
String::String(const String &value)
   b556c:	4604      	mov	r4, r0
	capacity = 0;
   b556e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5572:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5574:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5576:	f7ff ffe8 	bl	b554a <_ZN6StringaSERKS_>
}
   b557a:	4620      	mov	r0, r4
   b557c:	bd10      	pop	{r4, pc}

000b557e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b557e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5580:	6843      	ldr	r3, [r0, #4]
   b5582:	3b01      	subs	r3, #1
    {
   b5584:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5586:	6043      	str	r3, [r0, #4]
   b5588:	b963      	cbnz	r3, b55a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b558a:	6803      	ldr	r3, [r0, #0]
   b558c:	689b      	ldr	r3, [r3, #8]
   b558e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5590:	68a3      	ldr	r3, [r4, #8]
   b5592:	3b01      	subs	r3, #1
   b5594:	60a3      	str	r3, [r4, #8]
   b5596:	b92b      	cbnz	r3, b55a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5598:	6823      	ldr	r3, [r4, #0]
   b559a:	4620      	mov	r0, r4
   b559c:	68db      	ldr	r3, [r3, #12]
        }
    }
   b559e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b55a2:	4718      	bx	r3
    }
   b55a4:	bd10      	pop	{r4, pc}

000b55a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55a6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55a8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55ae:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b55b2:	42ae      	cmp	r6, r5
   b55b4:	d004      	beq.n	b55c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b55b6:	4628      	mov	r0, r5
   b55b8:	f7ff ff54 	bl	b5464 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b55bc:	3510      	adds	r5, #16
   b55be:	e7f8      	b.n	b55b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b55c0:	6820      	ldr	r0, [r4, #0]
   b55c2:	f7ff feb1 	bl	b5328 <free>
    AllocatorT::free(data_);
}
   b55c6:	4620      	mov	r0, r4
   b55c8:	bd70      	pop	{r4, r5, r6, pc}

000b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b55ca:	b510      	push	{r4, lr}
   b55cc:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b55ce:	6800      	ldr	r0, [r0, #0]
   b55d0:	b108      	cbz	r0, b55d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b55d2:	f7ff ffd4 	bl	b557e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b55d6:	4620      	mov	r0, r4
   b55d8:	bd10      	pop	{r4, pc}
	...

000b55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b55dc:	4802      	ldr	r0, [pc, #8]	; (b55e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b55de:	2300      	movs	r3, #0
   b55e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b55e2:	f7ff bcab 	b.w	b4f3c <os_mutex_recursive_create>
   b55e6:	bf00      	nop
   b55e8:	2003e674 	.word	0x2003e674

000b55ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b55ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55ee:	4606      	mov	r6, r0
   b55f0:	460d      	mov	r5, r1
  size_t n = 0;
   b55f2:	188f      	adds	r7, r1, r2
   b55f4:	2400      	movs	r4, #0
  while (size--) {
   b55f6:	42bd      	cmp	r5, r7
   b55f8:	d00c      	beq.n	b5614 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b55fa:	6833      	ldr	r3, [r6, #0]
   b55fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5600:	689b      	ldr	r3, [r3, #8]
   b5602:	4630      	mov	r0, r6
   b5604:	4798      	blx	r3
     if (chunk>=0)
   b5606:	1e03      	subs	r3, r0, #0
   b5608:	db01      	blt.n	b560e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b560a:	441c      	add	r4, r3
  while (size--) {
   b560c:	e7f3      	b.n	b55f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b560e:	2c00      	cmp	r4, #0
   b5610:	bf08      	it	eq
   b5612:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5614:	4620      	mov	r0, r4
   b5616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5618 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5618:	b513      	push	{r0, r1, r4, lr}
   b561a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b561c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b561e:	b159      	cbz	r1, b5638 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5620:	9101      	str	r1, [sp, #4]
   b5622:	f002 fac6 	bl	b7bb2 <strlen>
   b5626:	6823      	ldr	r3, [r4, #0]
   b5628:	9901      	ldr	r1, [sp, #4]
   b562a:	68db      	ldr	r3, [r3, #12]
   b562c:	4602      	mov	r2, r0
   b562e:	4620      	mov	r0, r4
    }
   b5630:	b002      	add	sp, #8
   b5632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5636:	4718      	bx	r3
    }
   b5638:	b002      	add	sp, #8
   b563a:	bd10      	pop	{r4, pc}

000b563c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b563c:	6803      	ldr	r3, [r0, #0]
   b563e:	689b      	ldr	r3, [r3, #8]
   b5640:	4718      	bx	r3

000b5642 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5642:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5644:	210d      	movs	r1, #13
{
   b5646:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5648:	f7ff fff8 	bl	b563c <_ZN5Print5printEc>
  n += print('\n');
   b564c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b564e:	4604      	mov	r4, r0
  n += print('\n');
   b5650:	4628      	mov	r0, r5
   b5652:	f7ff fff3 	bl	b563c <_ZN5Print5printEc>
  return n;
}
   b5656:	4420      	add	r0, r4
   b5658:	bd38      	pop	{r3, r4, r5, pc}

000b565a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b565a:	b530      	push	{r4, r5, lr}
   b565c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b565e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5660:	2a01      	cmp	r2, #1
  *str = '\0';
   b5662:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5666:	bf98      	it	ls
   b5668:	220a      	movls	r2, #10
   b566a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b566c:	460d      	mov	r5, r1
   b566e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5672:	fb01 5312 	mls	r3, r1, r2, r5
   b5676:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b567a:	2b09      	cmp	r3, #9
   b567c:	bf94      	ite	ls
   b567e:	3330      	addls	r3, #48	; 0x30
   b5680:	3337      	addhi	r3, #55	; 0x37
   b5682:	b2db      	uxtb	r3, r3
  } while(n);
   b5684:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5686:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b568a:	d9ef      	bls.n	b566c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b568c:	4621      	mov	r1, r4
   b568e:	f7ff ffc3 	bl	b5618 <_ZN5Print5writeEPKc>
}
   b5692:	b00b      	add	sp, #44	; 0x2c
   b5694:	bd30      	pop	{r4, r5, pc}

000b5696 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b569a:	b086      	sub	sp, #24
   b569c:	af00      	add	r7, sp, #0
   b569e:	4605      	mov	r5, r0
   b56a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b56a2:	1d38      	adds	r0, r7, #4
   b56a4:	2114      	movs	r1, #20
{
   b56a6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b56a8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b56aa:	f7ff fe4d 	bl	b5348 <vsnprintf>

    if (n<bufsize)
   b56ae:	2813      	cmp	r0, #19
   b56b0:	d80e      	bhi.n	b56d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b56b2:	1d39      	adds	r1, r7, #4
   b56b4:	4628      	mov	r0, r5
   b56b6:	f7ff ffaf 	bl	b5618 <_ZN5Print5writeEPKc>
   b56ba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b56bc:	b11e      	cbz	r6, b56c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b56be:	4628      	mov	r0, r5
   b56c0:	f7ff ffbf 	bl	b5642 <_ZN5Print7printlnEv>
   b56c4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b56c6:	4620      	mov	r0, r4
   b56c8:	3718      	adds	r7, #24
   b56ca:	46bd      	mov	sp, r7
   b56cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b56d0:	f100 0308 	add.w	r3, r0, #8
   b56d4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b56d8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b56da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b56de:	4622      	mov	r2, r4
   b56e0:	1c41      	adds	r1, r0, #1
   b56e2:	683b      	ldr	r3, [r7, #0]
   b56e4:	4668      	mov	r0, sp
   b56e6:	f7ff fe2f 	bl	b5348 <vsnprintf>
  return write(str);
   b56ea:	4669      	mov	r1, sp
   b56ec:	4628      	mov	r0, r5
   b56ee:	f7ff ff93 	bl	b5618 <_ZN5Print5writeEPKc>
   b56f2:	4604      	mov	r4, r0
   b56f4:	46c5      	mov	sp, r8
   b56f6:	e7e1      	b.n	b56bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b56f8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b56f8:	6880      	ldr	r0, [r0, #8]
   b56fa:	6803      	ldr	r3, [r0, #0]
   b56fc:	68db      	ldr	r3, [r3, #12]
   b56fe:	4718      	bx	r3

000b5700 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5700:	4770      	bx	lr

000b5702 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5702:	4608      	mov	r0, r1
   b5704:	b111      	cbz	r1, b570c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5706:	680b      	ldr	r3, [r1, #0]
   b5708:	685b      	ldr	r3, [r3, #4]
   b570a:	4718      	bx	r3
}
   b570c:	4770      	bx	lr

000b570e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b570e:	4770      	bx	lr

000b5710 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5710:	4770      	bx	lr

000b5712 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5712:	4770      	bx	lr

000b5714 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5714:	4770      	bx	lr

000b5716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5716:	b538      	push	{r3, r4, r5, lr}
   b5718:	4604      	mov	r4, r0
   b571a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b571c:	6800      	ldr	r0, [r0, #0]
   b571e:	212e      	movs	r1, #46	; 0x2e
   b5720:	f002 fa2b 	bl	b7b7a <strchrnul>
    size = s - category;
   b5724:	6823      	ldr	r3, [r4, #0]
   b5726:	1ac3      	subs	r3, r0, r3
   b5728:	602b      	str	r3, [r5, #0]
    if (size) {
   b572a:	b123      	cbz	r3, b5736 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b572c:	7803      	ldrb	r3, [r0, #0]
   b572e:	b103      	cbz	r3, b5732 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5730:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5732:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5734:	6020      	str	r0, [r4, #0]
}
   b5736:	4618      	mov	r0, r3
   b5738:	bd38      	pop	{r3, r4, r5, pc}

000b573a <_ZN5spark16JSONStreamWriterD0Ev>:
   b573a:	b510      	push	{r4, lr}
   b573c:	210c      	movs	r1, #12
   b573e:	4604      	mov	r4, r0
   b5740:	f7fe fcab 	bl	b409a <_ZdlPvj>
   b5744:	4620      	mov	r0, r4
   b5746:	bd10      	pop	{r4, pc}

000b5748 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5748:	b510      	push	{r4, lr}
   b574a:	2104      	movs	r1, #4
   b574c:	4604      	mov	r4, r0
   b574e:	f7fe fca4 	bl	b409a <_ZdlPvj>
   b5752:	4620      	mov	r0, r4
   b5754:	bd10      	pop	{r4, pc}

000b5756 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5756:	b510      	push	{r4, lr}
   b5758:	2104      	movs	r1, #4
   b575a:	4604      	mov	r4, r0
   b575c:	f7fe fc9d 	bl	b409a <_ZdlPvj>
   b5760:	4620      	mov	r0, r4
   b5762:	bd10      	pop	{r4, pc}

000b5764 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5764:	f7ff bbfa 	b.w	b4f5c <os_mutex_recursive_lock>

000b5768 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5768:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b576a:	f002 fa10 	bl	b7b8e <strcmp>
}
   b576e:	fab0 f080 	clz	r0, r0
   b5772:	0940      	lsrs	r0, r0, #5
   b5774:	bd08      	pop	{r3, pc}

000b5776 <__tcf_1>:
   b5776:	4770      	bx	lr

000b5778 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5778:	b510      	push	{r4, lr}
   b577a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b577c:	f001 f8bc 	bl	b68f8 <_Z16_fetch_usbserialv>
   b5780:	4284      	cmp	r4, r0
   b5782:	d010      	beq.n	b57a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5784:	f001 fd2a 	bl	b71dc <_Z22__fetch_global_Serial1v>
   b5788:	4284      	cmp	r4, r0
   b578a:	d105      	bne.n	b5798 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b578c:	f001 fd26 	bl	b71dc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5794:	f001 b97b 	b.w	b6a8e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5798:	b12c      	cbz	r4, b57a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b579a:	6823      	ldr	r3, [r4, #0]
   b579c:	4620      	mov	r0, r4
   b579e:	685b      	ldr	r3, [r3, #4]
}
   b57a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57a4:	4718      	bx	r3
   b57a6:	bd10      	pop	{r4, pc}

000b57a8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57a8:	680b      	ldr	r3, [r1, #0]
   b57aa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b57ac:	684b      	ldr	r3, [r1, #4]
   b57ae:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b57b0:	b113      	cbz	r3, b57b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b57b2:	685a      	ldr	r2, [r3, #4]
   b57b4:	3201      	adds	r2, #1
   b57b6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57b8:	4770      	bx	lr

000b57ba <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b57ba:	b513      	push	{r0, r1, r4, lr}
   b57bc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b57be:	4608      	mov	r0, r1
   b57c0:	9101      	str	r1, [sp, #4]
   b57c2:	f002 f9f6 	bl	b7bb2 <strlen>
   b57c6:	9901      	ldr	r1, [sp, #4]
   b57c8:	4602      	mov	r2, r0
   b57ca:	4620      	mov	r0, r4
}
   b57cc:	b002      	add	sp, #8
   b57ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b57d2:	f001 bc5d 	b.w	b7090 <_ZN5spark10JSONWriter5valueEPKcj>

000b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b57d6:	b513      	push	{r0, r1, r4, lr}
   b57d8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b57da:	4608      	mov	r0, r1
   b57dc:	9101      	str	r1, [sp, #4]
   b57de:	f002 f9e8 	bl	b7bb2 <strlen>
   b57e2:	6823      	ldr	r3, [r4, #0]
   b57e4:	9901      	ldr	r1, [sp, #4]
   b57e6:	68db      	ldr	r3, [r3, #12]
   b57e8:	4602      	mov	r2, r0
   b57ea:	4620      	mov	r0, r4
}
   b57ec:	b002      	add	sp, #8
   b57ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b57f2:	4718      	bx	r3

000b57f4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b57f4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b57f6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b57f8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b57fc:	68db      	ldr	r3, [r3, #12]
   b57fe:	2201      	movs	r2, #1
   b5800:	f10d 0107 	add.w	r1, sp, #7
   b5804:	4798      	blx	r3
}
   b5806:	b003      	add	sp, #12
   b5808:	f85d fb04 	ldr.w	pc, [sp], #4

000b580c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b580c:	b40e      	push	{r1, r2, r3}
   b580e:	b503      	push	{r0, r1, lr}
   b5810:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5812:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5814:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5818:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b581a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b581c:	f7ff ff3b 	bl	b5696 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5820:	b002      	add	sp, #8
   b5822:	f85d eb04 	ldr.w	lr, [sp], #4
   b5826:	b003      	add	sp, #12
   b5828:	4770      	bx	lr

000b582a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b582a:	680a      	ldr	r2, [r1, #0]
   b582c:	6002      	str	r2, [r0, #0]
   b582e:	684a      	ldr	r2, [r1, #4]
   b5830:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5832:	2200      	movs	r2, #0
   b5834:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5838:	b510      	push	{r4, lr}
   b583a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b583c:	688c      	ldr	r4, [r1, #8]
   b583e:	6084      	str	r4, [r0, #8]
   b5840:	68cc      	ldr	r4, [r1, #12]
   b5842:	60c4      	str	r4, [r0, #12]
   b5844:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5846:	608a      	str	r2, [r1, #8]
   b5848:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b584a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b584c:	610a      	str	r2, [r1, #16]
   b584e:	bd10      	pop	{r4, pc}

000b5850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5854:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5858:	f04f 0a14 	mov.w	sl, #20
   b585c:	9300      	str	r3, [sp, #0]
   b585e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5862:	4b18      	ldr	r3, [pc, #96]	; (b58c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5864:	10a4      	asrs	r4, r4, #2
   b5866:	4617      	mov	r7, r2
   b5868:	435c      	muls	r4, r3
   b586a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b586c:	2c00      	cmp	r4, #0
   b586e:	dd21      	ble.n	b58b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5870:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5872:	fb0a f006 	mul.w	r0, sl, r6
   b5876:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b587a:	463a      	mov	r2, r7
   b587c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5880:	5828      	ldr	r0, [r5, r0]
   b5882:	9101      	str	r1, [sp, #4]
   b5884:	455f      	cmp	r7, fp
   b5886:	bf28      	it	cs
   b5888:	465a      	movcs	r2, fp
   b588a:	f002 f99a 	bl	b7bc2 <strncmp>
                if (cmp == 0) {
   b588e:	2800      	cmp	r0, #0
   b5890:	9901      	ldr	r1, [sp, #4]
   b5892:	f04f 0301 	mov.w	r3, #1
   b5896:	d10b      	bne.n	b58b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5898:	455f      	cmp	r7, fp
   b589a:	d103      	bne.n	b58a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b589c:	9a00      	ldr	r2, [sp, #0]
   b589e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b58a0:	4634      	mov	r4, r6
   b58a2:	e7e3      	b.n	b586c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b58a4:	d9fc      	bls.n	b58a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b58a6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b58a8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b58ac:	3e01      	subs	r6, #1
   b58ae:	e7f7      	b.n	b58a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b58b0:	dbf9      	blt.n	b58a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b58b2:	e7f5      	b.n	b58a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b58b4:	eba5 0508 	sub.w	r5, r5, r8
}
   b58b8:	4802      	ldr	r0, [pc, #8]	; (b58c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b58ba:	10ad      	asrs	r5, r5, #2
   b58bc:	4368      	muls	r0, r5
   b58be:	b003      	add	sp, #12
   b58c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b58c4:	cccccccd 	.word	0xcccccccd

000b58c8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b58c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b58ca:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b58cc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b58ce:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b58d0:	b303      	cbz	r3, b5914 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b58d2:	b1f9      	cbz	r1, b5914 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b58d4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b58d6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b58da:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b58dc:	a903      	add	r1, sp, #12
   b58de:	a801      	add	r0, sp, #4
   b58e0:	f7ff ff19 	bl	b5716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b58e4:	4601      	mov	r1, r0
   b58e6:	b1a8      	cbz	r0, b5914 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b58e8:	f10d 030b 	add.w	r3, sp, #11
   b58ec:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b58ee:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b58f2:	4620      	mov	r0, r4
   b58f4:	f7ff ffac 	bl	b5850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b58f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b58fc:	b153      	cbz	r3, b5914 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b58fe:	6823      	ldr	r3, [r4, #0]
   b5900:	2414      	movs	r4, #20
   b5902:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5906:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5908:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b590c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b590e:	bfa8      	it	ge
   b5910:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5912:	e7e3      	b.n	b58dc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5914:	4628      	mov	r0, r5
   b5916:	b004      	add	sp, #16
   b5918:	bd70      	pop	{r4, r5, r6, pc}
	...

000b591c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b591c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b591e:	4c09      	ldr	r4, [pc, #36]	; (b5944 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5920:	7823      	ldrb	r3, [r4, #0]
   b5922:	f3bf 8f5b 	dmb	ish
   b5926:	07db      	lsls	r3, r3, #31
   b5928:	d409      	bmi.n	b593e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b592a:	4620      	mov	r0, r4
   b592c:	f7fe fbc4 	bl	b40b8 <__cxa_guard_acquire>
   b5930:	b128      	cbz	r0, b593e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5932:	4620      	mov	r0, r4
   b5934:	f7fe fbc5 	bl	b40c2 <__cxa_guard_release>
   b5938:	4803      	ldr	r0, [pc, #12]	; (b5948 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b593a:	f002 f8a5 	bl	b7a88 <atexit>
}
   b593e:	4803      	ldr	r0, [pc, #12]	; (b594c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5940:	bd10      	pop	{r4, pc}
   b5942:	bf00      	nop
   b5944:	2003e67c 	.word	0x2003e67c
   b5948:	000b570f 	.word	0x000b570f
   b594c:	2003e578 	.word	0x2003e578

000b5950 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5950:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5952:	4c09      	ldr	r4, [pc, #36]	; (b5978 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5954:	7823      	ldrb	r3, [r4, #0]
   b5956:	f3bf 8f5b 	dmb	ish
   b595a:	07db      	lsls	r3, r3, #31
   b595c:	d409      	bmi.n	b5972 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b595e:	4620      	mov	r0, r4
   b5960:	f7fe fbaa 	bl	b40b8 <__cxa_guard_acquire>
   b5964:	b128      	cbz	r0, b5972 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5966:	4620      	mov	r0, r4
   b5968:	f7fe fbab 	bl	b40c2 <__cxa_guard_release>
   b596c:	4803      	ldr	r0, [pc, #12]	; (b597c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b596e:	f002 f88b 	bl	b7a88 <atexit>
    return &factory;
}
   b5972:	4803      	ldr	r0, [pc, #12]	; (b5980 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5974:	bd10      	pop	{r4, pc}
   b5976:	bf00      	nop
   b5978:	2003e680 	.word	0x2003e680
   b597c:	000b5777 	.word	0x000b5777
   b5980:	2003e57c 	.word	0x2003e57c

000b5984 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5984:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5986:	2500      	movs	r5, #0
   b5988:	4604      	mov	r4, r0
   b598a:	e9c0 5500 	strd	r5, r5, [r0]
   b598e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5992:	6085      	str	r5, [r0, #8]
   b5994:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5996:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b599a:	f7ff facf 	bl	b4f3c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b599e:	f7ff ffbd 	bl	b591c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b59a2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b59a4:	f7ff ffd4 	bl	b5950 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b59a8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b59aa:	6220      	str	r0, [r4, #32]
}
   b59ac:	4620      	mov	r0, r4
   b59ae:	bd38      	pop	{r3, r4, r5, pc}

000b59b0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b59b0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b59b2:	4c0a      	ldr	r4, [pc, #40]	; (b59dc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b59b4:	7823      	ldrb	r3, [r4, #0]
   b59b6:	f3bf 8f5b 	dmb	ish
   b59ba:	07db      	lsls	r3, r3, #31
   b59bc:	d40c      	bmi.n	b59d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b59be:	4620      	mov	r0, r4
   b59c0:	f7fe fb7a 	bl	b40b8 <__cxa_guard_acquire>
   b59c4:	b140      	cbz	r0, b59d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b59c6:	4806      	ldr	r0, [pc, #24]	; (b59e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b59c8:	f7ff ffdc 	bl	b5984 <_ZN5spark10LogManagerC1Ev>
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7fe fb78 	bl	b40c2 <__cxa_guard_release>
   b59d2:	4804      	ldr	r0, [pc, #16]	; (b59e4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b59d4:	f002 f858 	bl	b7a88 <atexit>
    return &mgr;
}
   b59d8:	4801      	ldr	r0, [pc, #4]	; (b59e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b59da:	bd10      	pop	{r4, pc}
   b59dc:	2003e678 	.word	0x2003e678
   b59e0:	2003e688 	.word	0x2003e688
   b59e4:	000b5f05 	.word	0x000b5f05

000b59e8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b59e8:	4a02      	ldr	r2, [pc, #8]	; (b59f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b59ea:	4903      	ldr	r1, [pc, #12]	; (b59f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b59ec:	4803      	ldr	r0, [pc, #12]	; (b59fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b59ee:	2300      	movs	r3, #0
   b59f0:	f7ff bbe4 	b.w	b51bc <log_set_callbacks>
   b59f4:	000b5ce9 	.word	0x000b5ce9
   b59f8:	000b5c75 	.word	0x000b5c75
   b59fc:	000b5bf5 	.word	0x000b5bf5

000b5a00 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5a00:	2300      	movs	r3, #0
   b5a02:	461a      	mov	r2, r3
   b5a04:	4619      	mov	r1, r3
   b5a06:	4618      	mov	r0, r3
   b5a08:	f7ff bbd8 	b.w	b51bc <log_set_callbacks>

000b5a0c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5a0e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5a10:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5a12:	4668      	mov	r0, sp
   b5a14:	f7ff fec8 	bl	b57a8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5a18:	466a      	mov	r2, sp
   b5a1a:	4629      	mov	r1, r5
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	f001 fa57 	bl	b6ed0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5a22:	a801      	add	r0, sp, #4
   b5a24:	f7ff fdd1 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a28:	4620      	mov	r0, r4
   b5a2a:	b003      	add	sp, #12
   b5a2c:	bd30      	pop	{r4, r5, pc}

000b5a2e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5a30:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5a32:	4604      	mov	r4, r0
   b5a34:	4668      	mov	r0, sp
   b5a36:	f7ff feb7 	bl	b57a8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5a3a:	466a      	mov	r2, sp
   b5a3c:	4629      	mov	r1, r5
   b5a3e:	4620      	mov	r0, r4
   b5a40:	f001 fa22 	bl	b6e88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5a44:	a801      	add	r0, sp, #4
   b5a46:	f7ff fdc0 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	b003      	add	sp, #12
   b5a4e:	bd30      	pop	{r4, r5, pc}

000b5a50 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5a52:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5a54:	4604      	mov	r4, r0
   b5a56:	4668      	mov	r0, sp
   b5a58:	f7ff fea6 	bl	b57a8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5a5c:	466a      	mov	r2, sp
   b5a5e:	4629      	mov	r1, r5
   b5a60:	4620      	mov	r0, r4
   b5a62:	f001 f9ba 	bl	b6dda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5a66:	a801      	add	r0, sp, #4
   b5a68:	f7ff fdaf 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	b003      	add	sp, #12
   b5a70:	bd30      	pop	{r4, r5, pc}
	...

000b5a74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5a74:	b570      	push	{r4, r5, r6, lr}
   b5a76:	b08a      	sub	sp, #40	; 0x28
   b5a78:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5a7a:	4601      	mov	r1, r0
   b5a7c:	a804      	add	r0, sp, #16
   b5a7e:	f7ff ffc5 	bl	b5a0c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5a82:	4e14      	ldr	r6, [pc, #80]	; (b5ad4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5a84:	a804      	add	r0, sp, #16
   b5a86:	f001 fa3b 	bl	b6f00 <_ZN5spark18JSONObjectIterator4nextEv>
   b5a8a:	b1e8      	cbz	r0, b5ac8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5a8c:	a904      	add	r1, sp, #16
   b5a8e:	4668      	mov	r0, sp
   b5a90:	f7ff ffcd 	bl	b5a2e <_ZNK5spark18JSONObjectIterator4nameEv>
   b5a94:	9802      	ldr	r0, [sp, #8]
   b5a96:	4631      	mov	r1, r6
   b5a98:	f7ff fe66 	bl	b5768 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5a9c:	4604      	mov	r4, r0
   b5a9e:	b110      	cbz	r0, b5aa6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5aa0:	1e2c      	subs	r4, r5, #0
   b5aa2:	bf18      	it	ne
   b5aa4:	2401      	movne	r4, #1
   b5aa6:	a801      	add	r0, sp, #4
   b5aa8:	f7ff fd8f 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5aac:	2c00      	cmp	r4, #0
   b5aae:	d0e9      	beq.n	b5a84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5ab0:	a904      	add	r1, sp, #16
   b5ab2:	4668      	mov	r0, sp
   b5ab4:	f7ff ffcc 	bl	b5a50 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5ab8:	4668      	mov	r0, sp
   b5aba:	f001 f9c4 	bl	b6e46 <_ZNK5spark9JSONValue5toIntEv>
   b5abe:	6028      	str	r0, [r5, #0]
   b5ac0:	a801      	add	r0, sp, #4
   b5ac2:	f7ff fd82 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ac6:	e7dd      	b.n	b5a84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5ac8:	a805      	add	r0, sp, #20
   b5aca:	f7ff fd7e 	bl	b55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ace:	b00a      	add	sp, #40	; 0x28
   b5ad0:	bd70      	pop	{r4, r5, r6, pc}
   b5ad2:	bf00      	nop
   b5ad4:	000b80d4 	.word	0x000b80d4

000b5ad8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ada:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5adc:	4620      	mov	r0, r4
   b5ade:	4913      	ldr	r1, [pc, #76]	; (b5b2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5ae0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5ae2:	f002 f854 	bl	b7b8e <strcmp>
   b5ae6:	b950      	cbnz	r0, b5afe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5ae8:	f000 ff06 	bl	b68f8 <_Z16_fetch_usbserialv>
   b5aec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5af0:	f000 fef0 	bl	b68d4 <_ZN9USBSerial5beginEl>
}
   b5af4:	b003      	add	sp, #12
   b5af6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5afa:	f000 befd 	b.w	b68f8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5afe:	490c      	ldr	r1, [pc, #48]	; (b5b30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5b00:	4620      	mov	r0, r4
   b5b02:	f002 f844 	bl	b7b8e <strcmp>
   b5b06:	b978      	cbnz	r0, b5b28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5b08:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5b0c:	a901      	add	r1, sp, #4
   b5b0e:	4628      	mov	r0, r5
        int baud = 9600;
   b5b10:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5b12:	f7ff ffaf 	bl	b5a74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5b16:	f001 fb61 	bl	b71dc <_Z22__fetch_global_Serial1v>
   b5b1a:	9901      	ldr	r1, [sp, #4]
   b5b1c:	f000 ffb4 	bl	b6a88 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5b20:	f001 fb5c 	bl	b71dc <_Z22__fetch_global_Serial1v>
}
   b5b24:	b003      	add	sp, #12
   b5b26:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5b28:	2000      	movs	r0, #0
   b5b2a:	e7fb      	b.n	b5b24 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5b2c:	000b80d9 	.word	0x000b80d9
   b5b30:	000b80e0 	.word	0x000b80e0

000b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b34:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5b36:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5b3a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b3c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5b3e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b42:	42ae      	cmp	r6, r5
   b5b44:	d005      	beq.n	b5b52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5b46:	f105 0008 	add.w	r0, r5, #8
   b5b4a:	f7ff fff3 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5b4e:	3514      	adds	r5, #20
   b5b50:	e7f7      	b.n	b5b42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5b52:	6820      	ldr	r0, [r4, #0]
   b5b54:	f7ff fbe8 	bl	b5328 <free>
}
   b5b58:	4620      	mov	r0, r4
   b5b5a:	bd70      	pop	{r4, r5, r6, pc}

000b5b5c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5b5c:	b510      	push	{r4, lr}
   b5b5e:	4604      	mov	r4, r0
   b5b60:	300c      	adds	r0, #12
   b5b62:	f7ff ffe7 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5b66:	4620      	mov	r0, r4
   b5b68:	f7ff fd1d 	bl	b55a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	bd10      	pop	{r4, pc}

000b5b70 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5b70:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5b72:	4b04      	ldr	r3, [pc, #16]	; (b5b84 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5b74:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5b76:	f840 3b04 	str.w	r3, [r0], #4
   b5b7a:	f7ff ffef 	bl	b5b5c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5b7e:	4620      	mov	r0, r4
   b5b80:	bd10      	pop	{r4, pc}
   b5b82:	bf00      	nop
   b5b84:	000b7ff0 	.word	0x000b7ff0

000b5b88 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5b88:	b510      	push	{r4, lr}
   b5b8a:	4604      	mov	r4, r0
   b5b8c:	f7ff fff0 	bl	b5b70 <_ZN5spark16StreamLogHandlerD1Ev>
   b5b90:	4620      	mov	r0, r4
   b5b92:	2124      	movs	r1, #36	; 0x24
   b5b94:	f7fe fa81 	bl	b409a <_ZdlPvj>
   b5b98:	4620      	mov	r0, r4
   b5b9a:	bd10      	pop	{r4, pc}

000b5b9c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5b9c:	b510      	push	{r4, lr}
   b5b9e:	4b03      	ldr	r3, [pc, #12]	; (b5bac <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5ba0:	6003      	str	r3, [r0, #0]
   b5ba2:	4604      	mov	r4, r0
   b5ba4:	f7ff ffe4 	bl	b5b70 <_ZN5spark16StreamLogHandlerD1Ev>
   b5ba8:	4620      	mov	r0, r4
   b5baa:	bd10      	pop	{r4, pc}
   b5bac:	000b817c 	.word	0x000b817c

000b5bb0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5bb0:	b510      	push	{r4, lr}
   b5bb2:	4604      	mov	r4, r0
   b5bb4:	f7ff fff2 	bl	b5b9c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5bb8:	4620      	mov	r0, r4
   b5bba:	2124      	movs	r1, #36	; 0x24
   b5bbc:	f7fe fa6d 	bl	b409a <_ZdlPvj>
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	bd10      	pop	{r4, pc}

000b5bc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5bc4:	2200      	movs	r2, #0
   b5bc6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5bca:	b510      	push	{r4, lr}
        capacity_(0) {
   b5bcc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5bce:	680c      	ldr	r4, [r1, #0]
   b5bd0:	6004      	str	r4, [r0, #0]
   b5bd2:	684c      	ldr	r4, [r1, #4]
   b5bd4:	6044      	str	r4, [r0, #4]
   b5bd6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bd8:	600a      	str	r2, [r1, #0]
   b5bda:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5bdc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bde:	608a      	str	r2, [r1, #8]
}
   b5be0:	bd10      	pop	{r4, pc}

000b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5be2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5be4:	6803      	ldr	r3, [r0, #0]
   b5be6:	4604      	mov	r4, r0
   b5be8:	6818      	ldr	r0, [r3, #0]
   b5bea:	f7ff f9bf 	bl	b4f6c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5bee:	4620      	mov	r0, r4
   b5bf0:	bd10      	pop	{r4, pc}
	...

000b5bf4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bf8:	b087      	sub	sp, #28
   b5bfa:	4680      	mov	r8, r0
   b5bfc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5bfe:	4b1c      	ldr	r3, [pc, #112]	; (b5c70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5c00:	685b      	ldr	r3, [r3, #4]
   b5c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c06:	4689      	mov	r9, r1
   b5c08:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5c0a:	b96b      	cbnz	r3, b5c28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5c0c:	f7ff fed0 	bl	b59b0 <_ZN5spark10LogManager8instanceEv>
   b5c10:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c12:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5c16:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c18:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5c1a:	f7ff fda3 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5c1e:	7b23      	ldrb	r3, [r4, #12]
   b5c20:	b12b      	cbz	r3, b5c2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5c22:	a805      	add	r0, sp, #20
   b5c24:	f7ff ffdd 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5c28:	b007      	add	sp, #28
   b5c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5c2e:	2301      	movs	r3, #1
   b5c30:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5c32:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5c36:	fa5f f989 	uxtb.w	r9, r9
   b5c3a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5c3e:	45aa      	cmp	sl, r5
   b5c40:	d012      	beq.n	b5c68 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5c42:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5c46:	4631      	mov	r1, r6
   b5c48:	1d38      	adds	r0, r7, #4
   b5c4a:	f7ff fe3d 	bl	b58c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5c4e:	4581      	cmp	r9, r0
   b5c50:	d3f5      	bcc.n	b5c3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5c52:	683b      	ldr	r3, [r7, #0]
   b5c54:	9a03      	ldr	r2, [sp, #12]
   b5c56:	9200      	str	r2, [sp, #0]
   b5c58:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5c5c:	464a      	mov	r2, r9
   b5c5e:	4633      	mov	r3, r6
   b5c60:	4641      	mov	r1, r8
   b5c62:	4638      	mov	r0, r7
   b5c64:	47d8      	blx	fp
   b5c66:	e7ea      	b.n	b5c3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5c68:	2300      	movs	r3, #0
   b5c6a:	7323      	strb	r3, [r4, #12]
   b5c6c:	e7d9      	b.n	b5c22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5c6e:	bf00      	nop
   b5c70:	e000ed00 	.word	0xe000ed00

000b5c74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c78:	469b      	mov	fp, r3
   b5c7a:	4b1a      	ldr	r3, [pc, #104]	; (b5ce4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5c7c:	685b      	ldr	r3, [r3, #4]
   b5c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c82:	4680      	mov	r8, r0
   b5c84:	4689      	mov	r9, r1
   b5c86:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b5c88:	b96b      	cbnz	r3, b5ca6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5c8a:	f7ff fe91 	bl	b59b0 <_ZN5spark10LogManager8instanceEv>
   b5c8e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c90:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5c94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c96:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5c98:	f7ff fd64 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5c9c:	7b23      	ldrb	r3, [r4, #12]
   b5c9e:	b12b      	cbz	r3, b5cac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5ca0:	a801      	add	r0, sp, #4
   b5ca2:	f7ff ff9e 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5ca6:	b003      	add	sp, #12
   b5ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5cac:	2301      	movs	r3, #1
   b5cae:	7323      	strb	r3, [r4, #12]
   b5cb0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5cb4:	b2f6      	uxtb	r6, r6
   b5cb6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5cba:	4555      	cmp	r5, sl
   b5cbc:	d00e      	beq.n	b5cdc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5cbe:	f855 7b04 	ldr.w	r7, [r5], #4
   b5cc2:	4659      	mov	r1, fp
   b5cc4:	1d38      	adds	r0, r7, #4
   b5cc6:	f7ff fdff 	bl	b58c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5cca:	4286      	cmp	r6, r0
   b5ccc:	d3f5      	bcc.n	b5cba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5cce:	683b      	ldr	r3, [r7, #0]
   b5cd0:	464a      	mov	r2, r9
   b5cd2:	68db      	ldr	r3, [r3, #12]
   b5cd4:	4641      	mov	r1, r8
   b5cd6:	4638      	mov	r0, r7
   b5cd8:	4798      	blx	r3
   b5cda:	e7ee      	b.n	b5cba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5cdc:	2300      	movs	r3, #0
   b5cde:	7323      	strb	r3, [r4, #12]
   b5ce0:	e7de      	b.n	b5ca0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5ce2:	bf00      	nop
   b5ce4:	e000ed00 	.word	0xe000ed00

000b5ce8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5cec:	4b16      	ldr	r3, [pc, #88]	; (b5d48 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5cee:	685b      	ldr	r3, [r3, #4]
   b5cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5cf4:	4605      	mov	r5, r0
   b5cf6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5cf8:	bb1b      	cbnz	r3, b5d42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5cfa:	f7ff fe59 	bl	b59b0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5cfe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5d02:	4604      	mov	r4, r0
   b5d04:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5d06:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5d08:	f7ff fd2c 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5d0c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5d10:	2446      	movs	r4, #70	; 0x46
   b5d12:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5d16:	45b0      	cmp	r8, r6
   b5d18:	d109      	bne.n	b5d2e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5d1a:	a801      	add	r0, sp, #4
   b5d1c:	f7ff ff61 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5d20:	42a5      	cmp	r5, r4
   b5d22:	bfb4      	ite	lt
   b5d24:	2000      	movlt	r0, #0
   b5d26:	2001      	movge	r0, #1
}
   b5d28:	b002      	add	sp, #8
   b5d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5d2e:	f856 0b04 	ldr.w	r0, [r6], #4
   b5d32:	4639      	mov	r1, r7
   b5d34:	3004      	adds	r0, #4
   b5d36:	f7ff fdc7 	bl	b58c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5d3a:	4284      	cmp	r4, r0
   b5d3c:	bfa8      	it	ge
   b5d3e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5d40:	e7e9      	b.n	b5d16 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5d42:	2000      	movs	r0, #0
   b5d44:	e7f0      	b.n	b5d28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5d46:	bf00      	nop
   b5d48:	e000ed00 	.word	0xe000ed00

000b5d4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d4e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5d52:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d54:	4604      	mov	r4, r0
   b5d56:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d58:	db0d      	blt.n	b5d76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5d5a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5d5c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5d5e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5d60:	dd04      	ble.n	b5d6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5d62:	00b9      	lsls	r1, r7, #2
   b5d64:	f7ff fae8 	bl	b5338 <realloc>
            if (!d) {
   b5d68:	b918      	cbnz	r0, b5d72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5d6c:	f7ff fadc 	bl	b5328 <free>
        T* d = nullptr;
   b5d70:	2000      	movs	r0, #0
        data_ = d;
   b5d72:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5d74:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5d76:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d78:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d7a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5d7e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d80:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5d84:	1d08      	adds	r0, r1, #4
   b5d86:	f001 fe9b 	bl	b7ac0 <memmove>
    new(p) T(std::move(value));
   b5d8a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5d8e:	6863      	ldr	r3, [r4, #4]
   b5d90:	3301      	adds	r3, #1
   b5d92:	6063      	str	r3, [r4, #4]
    return true;
   b5d94:	2001      	movs	r0, #1
   b5d96:	e7e8      	b.n	b5d6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5d98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5d9a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d9e:	4604      	mov	r4, r0
   b5da0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5da2:	9301      	str	r3, [sp, #4]
   b5da4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5da6:	f7ff fcdd 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5daa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5dae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5db2:	4293      	cmp	r3, r2
   b5db4:	4619      	mov	r1, r3
   b5db6:	d00b      	beq.n	b5dd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5db8:	6809      	ldr	r1, [r1, #0]
   b5dba:	42a9      	cmp	r1, r5
   b5dbc:	f103 0304 	add.w	r3, r3, #4
   b5dc0:	d1f7      	bne.n	b5db2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5dc2:	a801      	add	r0, sp, #4
   b5dc4:	f7ff ff0d 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5dc8:	2500      	movs	r5, #0
}
   b5dca:	4628      	mov	r0, r5
   b5dcc:	b003      	add	sp, #12
   b5dce:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5dd0:	4629      	mov	r1, r5
   b5dd2:	4620      	mov	r0, r4
   b5dd4:	f7ff ffba 	bl	b5d4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5dd8:	4605      	mov	r5, r0
   b5dda:	2800      	cmp	r0, #0
   b5ddc:	d0f1      	beq.n	b5dc2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5dde:	6863      	ldr	r3, [r4, #4]
   b5de0:	2b01      	cmp	r3, #1
   b5de2:	d101      	bne.n	b5de8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5de4:	f7ff fe00 	bl	b59e8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5de8:	a801      	add	r0, sp, #4
   b5dea:	f7ff fefa 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5dee:	e7ec      	b.n	b5dca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5df0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5df0:	b570      	push	{r4, r5, r6, lr}
   b5df2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5df4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5df8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5dfa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5dfe:	4282      	cmp	r2, r0
   b5e00:	d00f      	beq.n	b5e22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5e02:	4601      	mov	r1, r0
            if (*p == value) {
   b5e04:	681d      	ldr	r5, [r3, #0]
   b5e06:	f851 6b04 	ldr.w	r6, [r1], #4
   b5e0a:	42ae      	cmp	r6, r5
   b5e0c:	d107      	bne.n	b5e1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e0e:	1a52      	subs	r2, r2, r1
   b5e10:	f001 fe56 	bl	b7ac0 <memmove>
    --size_;
   b5e14:	6863      	ldr	r3, [r4, #4]
   b5e16:	3b01      	subs	r3, #1
   b5e18:	6063      	str	r3, [r4, #4]
    return true;
   b5e1a:	2001      	movs	r0, #1
}
   b5e1c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5e1e:	4608      	mov	r0, r1
   b5e20:	e7ed      	b.n	b5dfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5e22:	2000      	movs	r0, #0
   b5e24:	e7fa      	b.n	b5e1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5e26 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5e26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5e28:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5e2c:	4604      	mov	r4, r0
   b5e2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5e30:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e32:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5e34:	f7ff fc96 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5e38:	a901      	add	r1, sp, #4
   b5e3a:	4620      	mov	r0, r4
   b5e3c:	f7ff ffd8 	bl	b5df0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5e40:	b118      	cbz	r0, b5e4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5e42:	6863      	ldr	r3, [r4, #4]
   b5e44:	b90b      	cbnz	r3, b5e4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5e46:	f7ff fddb 	bl	b5a00 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5e4a:	a803      	add	r0, sp, #12
   b5e4c:	f7ff fec9 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5e50:	b004      	add	sp, #16
   b5e52:	bd10      	pop	{r4, pc}

000b5e54 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5e54:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5e56:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5e5a:	2318      	movs	r3, #24
   b5e5c:	4604      	mov	r4, r0
   b5e5e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e62:	42ae      	cmp	r6, r5
   b5e64:	d015      	beq.n	b5e92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5e66:	f105 0110 	add.w	r1, r5, #16
   b5e6a:	4620      	mov	r0, r4
   b5e6c:	f7ff ffc0 	bl	b5df0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5e70:	6863      	ldr	r3, [r4, #4]
   b5e72:	b90b      	cbnz	r3, b5e78 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5e74:	f7ff fdc4 	bl	b5a00 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5e78:	69e0      	ldr	r0, [r4, #28]
   b5e7a:	6929      	ldr	r1, [r5, #16]
   b5e7c:	6803      	ldr	r3, [r0, #0]
   b5e7e:	68db      	ldr	r3, [r3, #12]
   b5e80:	4798      	blx	r3
        if (h.stream) {
   b5e82:	6969      	ldr	r1, [r5, #20]
   b5e84:	b119      	cbz	r1, b5e8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5e86:	6a20      	ldr	r0, [r4, #32]
   b5e88:	6803      	ldr	r3, [r0, #0]
   b5e8a:	68db      	ldr	r3, [r3, #12]
   b5e8c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e8e:	3518      	adds	r5, #24
   b5e90:	e7e7      	b.n	b5e62 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5e92:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5e96:	2618      	movs	r6, #24
   b5e98:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e9c:	42ae      	cmp	r6, r5
   b5e9e:	d004      	beq.n	b5eaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5ea0:	4628      	mov	r0, r5
   b5ea2:	f7ff fadf 	bl	b5464 <_ZN6StringD1Ev>
   b5ea6:	3518      	adds	r5, #24
   b5ea8:	e7f8      	b.n	b5e9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5eaa:	2300      	movs	r3, #0
   b5eac:	6163      	str	r3, [r4, #20]
}
   b5eae:	bd70      	pop	{r4, r5, r6, pc}

000b5eb0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5eb2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5eb4:	f7ff fda4 	bl	b5a00 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5eb8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5ebc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ebe:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ec0:	f7ff fc50 	bl	b5764 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	f7ff ffc5 	bl	b5e54 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5eca:	a801      	add	r0, sp, #4
   b5ecc:	f7ff fe89 	bl	b5be2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ed2:	b108      	cbz	r0, b5ed8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5ed4:	f7ff f83a 	bl	b4f4c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5ed8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5edc:	2618      	movs	r6, #24
   b5ede:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ee2:	42ae      	cmp	r6, r5
   b5ee4:	d004      	beq.n	b5ef0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5ee6:	4628      	mov	r0, r5
   b5ee8:	f7ff fabc 	bl	b5464 <_ZN6StringD1Ev>
   b5eec:	3518      	adds	r5, #24
   b5eee:	e7f8      	b.n	b5ee2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5ef0:	6920      	ldr	r0, [r4, #16]
   b5ef2:	f7ff fa19 	bl	b5328 <free>
   b5ef6:	6820      	ldr	r0, [r4, #0]
   b5ef8:	f7ff fa16 	bl	b5328 <free>
}
   b5efc:	4620      	mov	r0, r4
   b5efe:	b002      	add	sp, #8
   b5f00:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5f04 <__tcf_2>:
    static LogManager mgr;
   b5f04:	4801      	ldr	r0, [pc, #4]	; (b5f0c <__tcf_2+0x8>)
   b5f06:	f7ff bfd3 	b.w	b5eb0 <_ZN5spark10LogManagerD1Ev>
   b5f0a:	bf00      	nop
   b5f0c:	2003e688 	.word	0x2003e688

000b5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5f10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f14:	4604      	mov	r4, r0
   b5f16:	460d      	mov	r5, r1
   b5f18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f1a:	d915      	bls.n	b5f48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5f1c:	4290      	cmp	r0, r2
   b5f1e:	d214      	bcs.n	b5f4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5f20:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5f24:	1a75      	subs	r5, r6, r1
   b5f26:	f1a1 0714 	sub.w	r7, r1, #20
   b5f2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f2c:	42b7      	cmp	r7, r6
   b5f2e:	d01a      	beq.n	b5f66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5f30:	b11c      	cbz	r4, b5f3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5f32:	4631      	mov	r1, r6
   b5f34:	4620      	mov	r0, r4
   b5f36:	f7ff fc78 	bl	b582a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5f3a:	f106 0008 	add.w	r0, r6, #8
   b5f3e:	f7ff fdf9 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5f42:	3e14      	subs	r6, #20
   b5f44:	3c14      	subs	r4, #20
   b5f46:	e7f1      	b.n	b5f2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5f48:	d00d      	beq.n	b5f66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5f4a:	42b5      	cmp	r5, r6
   b5f4c:	d00b      	beq.n	b5f66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5f4e:	b11c      	cbz	r4, b5f58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5f50:	4629      	mov	r1, r5
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff fc69 	bl	b582a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5f58:	f105 0008 	add.w	r0, r5, #8
   b5f5c:	f7ff fdea 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5f60:	3514      	adds	r5, #20
   b5f62:	3414      	adds	r4, #20
   b5f64:	e7f1      	b.n	b5f4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5f68:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f6c:	4604      	mov	r4, r0
   b5f6e:	460d      	mov	r5, r1
   b5f70:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f72:	d914      	bls.n	b5f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5f74:	4290      	cmp	r0, r2
   b5f76:	d213      	bcs.n	b5fa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5f78:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5f7c:	1a75      	subs	r5, r6, r1
   b5f7e:	f1a1 0710 	sub.w	r7, r1, #16
   b5f82:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f84:	42b7      	cmp	r7, r6
   b5f86:	d018      	beq.n	b5fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5f88:	b11c      	cbz	r4, b5f92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5f8a:	4631      	mov	r1, r6
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	f7ff fad1 	bl	b5534 <_ZN6StringC1EOS_>
                end->~T();
   b5f92:	4630      	mov	r0, r6
   b5f94:	f7ff fa66 	bl	b5464 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5f98:	3e10      	subs	r6, #16
   b5f9a:	3c10      	subs	r4, #16
   b5f9c:	e7f2      	b.n	b5f84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5f9e:	d00c      	beq.n	b5fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5fa0:	42b5      	cmp	r5, r6
   b5fa2:	d00a      	beq.n	b5fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5fa4:	b11c      	cbz	r4, b5fae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5fa6:	4629      	mov	r1, r5
   b5fa8:	4620      	mov	r0, r4
   b5faa:	f7ff fac3 	bl	b5534 <_ZN6StringC1EOS_>
                p->~T();
   b5fae:	4628      	mov	r0, r5
   b5fb0:	f7ff fa58 	bl	b5464 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5fb4:	3510      	adds	r5, #16
   b5fb6:	3410      	adds	r4, #16
   b5fb8:	e7f2      	b.n	b5fa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5fbc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5fbe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5fc0:	4605      	mov	r5, r0
        if (n > 0) {
   b5fc2:	dd11      	ble.n	b5fe8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5fc4:	0130      	lsls	r0, r6, #4
   b5fc6:	f7ff f9a7 	bl	b5318 <malloc>
            if (!d) {
   b5fca:	4604      	mov	r4, r0
   b5fcc:	b158      	cbz	r0, b5fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5fce:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5fd2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5fd6:	f7ff ffc7 	bl	b5f68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5fda:	6828      	ldr	r0, [r5, #0]
   b5fdc:	f7ff f9a4 	bl	b5328 <free>
        data_ = d;
   b5fe0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5fe2:	60ae      	str	r6, [r5, #8]
        return true;
   b5fe4:	2001      	movs	r0, #1
    }
   b5fe6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5fe8:	2400      	movs	r4, #0
   b5fea:	e7f6      	b.n	b5fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5fec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ff0:	4690      	mov	r8, r2
   b5ff2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5ff4:	2300      	movs	r3, #0
   b5ff6:	9103      	str	r1, [sp, #12]
    return size_;
   b5ff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5ffc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5ffe:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6000:	4299      	cmp	r1, r3
        capacity_(0) {
   b6002:	e9c0 3300 	strd	r3, r3, [r0]
   b6006:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b600a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b600e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6012:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6014:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6016:	dc23      	bgt.n	b6060 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6018:	e9d8 5700 	ldrd	r5, r7, [r8]
   b601c:	2314      	movs	r3, #20
   b601e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6022:	42af      	cmp	r7, r5
   b6024:	d03b      	beq.n	b609e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6026:	4629      	mov	r1, r5
   b6028:	a80b      	add	r0, sp, #44	; 0x2c
   b602a:	f7ff fa83 	bl	b5534 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b602e:	a90b      	add	r1, sp, #44	; 0x2c
   b6030:	a80f      	add	r0, sp, #60	; 0x3c
   b6032:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6034:	f7ff fa7e 	bl	b5534 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6038:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b603c:	4299      	cmp	r1, r3
   b603e:	da1b      	bge.n	b6078 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6040:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6042:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6044:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6048:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b604c:	4631      	mov	r1, r6
   b604e:	f106 0010 	add.w	r0, r6, #16
   b6052:	f7ff ff89 	bl	b5f68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6056:	b9ee      	cbnz	r6, b6094 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6058:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b605a:	3301      	adds	r3, #1
   b605c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b605e:	e011      	b.n	b6084 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6060:	a808      	add	r0, sp, #32
   b6062:	f7ff ffab 	bl	b5fbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6066:	2800      	cmp	r0, #0
   b6068:	d1d6      	bne.n	b6018 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b606a:	a808      	add	r0, sp, #32
   b606c:	f7ff fa9b 	bl	b55a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6070:	4620      	mov	r0, r4
   b6072:	b015      	add	sp, #84	; 0x54
   b6074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6078:	3101      	adds	r1, #1
   b607a:	a808      	add	r0, sp, #32
   b607c:	f7ff ff9e 	bl	b5fbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6080:	2800      	cmp	r0, #0
   b6082:	d1dd      	bne.n	b6040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6084:	a80f      	add	r0, sp, #60	; 0x3c
   b6086:	f7ff f9ed 	bl	b5464 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b608a:	a80b      	add	r0, sp, #44	; 0x2c
   b608c:	f7ff f9ea 	bl	b5464 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6090:	3514      	adds	r5, #20
   b6092:	e7c6      	b.n	b6022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6094:	a90f      	add	r1, sp, #60	; 0x3c
   b6096:	4630      	mov	r0, r6
   b6098:	f7ff fa4c 	bl	b5534 <_ZN6StringC1EOS_>
   b609c:	e7dc      	b.n	b6058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b609e:	2600      	movs	r6, #0
   b60a0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b60a4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b60a6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b60aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b60ae:	429e      	cmp	r6, r3
   b60b0:	da7c      	bge.n	b61ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b60b2:	0133      	lsls	r3, r6, #4
   b60b4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b60b6:	9306      	str	r3, [sp, #24]
        if (!category) {
   b60b8:	b90b      	cbnz	r3, b60be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b60ba:	3601      	adds	r6, #1
   b60bc:	e7f5      	b.n	b60aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b60be:	2300      	movs	r3, #0
   b60c0:	9307      	str	r3, [sp, #28]
   b60c2:	fb09 f306 	mul.w	r3, r9, r6
   b60c6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b60c8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b60ca:	a907      	add	r1, sp, #28
   b60cc:	a806      	add	r0, sp, #24
   b60ce:	f7ff fb22 	bl	b5716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b60d2:	4682      	mov	sl, r0
   b60d4:	2800      	cmp	r0, #0
   b60d6:	d0f0      	beq.n	b60ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b60d8:	f04f 0300 	mov.w	r3, #0
   b60dc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60e0:	4601      	mov	r1, r0
   b60e2:	9a07      	ldr	r2, [sp, #28]
   b60e4:	f10d 0317 	add.w	r3, sp, #23
   b60e8:	4628      	mov	r0, r5
   b60ea:	f7ff fbb1 	bl	b5850 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b60ee:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60f2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b60f4:	2f00      	cmp	r7, #0
   b60f6:	d14a      	bne.n	b618e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b60f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b60fc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6100:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6104:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6108:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b610c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6110:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6112:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6116:	4293      	cmp	r3, r2
   b6118:	db17      	blt.n	b614a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b611a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b611e:	f1ba 0f00 	cmp.w	sl, #0
   b6122:	dd30      	ble.n	b6186 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6124:	fb09 f00a 	mul.w	r0, r9, sl
   b6128:	f7ff f8f6 	bl	b5318 <malloc>
            if (!d) {
   b612c:	4683      	mov	fp, r0
   b612e:	b360      	cbz	r0, b618a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6130:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6134:	fb09 1202 	mla	r2, r9, r2, r1
   b6138:	f7ff feea 	bl	b5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b613c:	6828      	ldr	r0, [r5, #0]
   b613e:	f7ff f8f3 	bl	b5328 <free>
        data_ = d;
   b6142:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6146:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b614a:	682b      	ldr	r3, [r5, #0]
   b614c:	9a01      	ldr	r2, [sp, #4]
   b614e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6152:	686a      	ldr	r2, [r5, #4]
   b6154:	4651      	mov	r1, sl
   b6156:	fb09 3202 	mla	r2, r9, r2, r3
   b615a:	f10a 0014 	add.w	r0, sl, #20
   b615e:	f7ff fed7 	bl	b5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6162:	f1ba 0f00 	cmp.w	sl, #0
   b6166:	d003      	beq.n	b6170 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6168:	a90f      	add	r1, sp, #60	; 0x3c
   b616a:	4650      	mov	r0, sl
   b616c:	f7ff fb5d 	bl	b582a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6170:	686b      	ldr	r3, [r5, #4]
   b6172:	3301      	adds	r3, #1
   b6174:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6176:	a811      	add	r0, sp, #68	; 0x44
   b6178:	f7ff fcdc 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b617c:	b13f      	cbz	r7, b618e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b617e:	a80b      	add	r0, sp, #44	; 0x2c
   b6180:	f7ff fcd8 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6184:	e771      	b.n	b606a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6186:	46bb      	mov	fp, r7
   b6188:	e7d8      	b.n	b613c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b618a:	2701      	movs	r7, #1
   b618c:	e7f3      	b.n	b6176 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b618e:	9b01      	ldr	r3, [sp, #4]
   b6190:	682d      	ldr	r5, [r5, #0]
   b6192:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6196:	9b06      	ldr	r3, [sp, #24]
   b6198:	781b      	ldrb	r3, [r3, #0]
   b619a:	b92b      	cbnz	r3, b61a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b619c:	f8d8 3000 	ldr.w	r3, [r8]
   b61a0:	9a02      	ldr	r2, [sp, #8]
   b61a2:	4413      	add	r3, r2
   b61a4:	7c1b      	ldrb	r3, [r3, #16]
   b61a6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b61a8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b61aa:	e78e      	b.n	b60ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61ac:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b61ae:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61b0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b61b2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61b4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b61b6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b61b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b61ba:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61bc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b61be:	60a2      	str	r2, [r4, #8]
   b61c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b61c2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61c4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b61c6:	60e2      	str	r2, [r4, #12]
   b61c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b61ca:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61cc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b61ce:	6122      	str	r2, [r4, #16]
   b61d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b61d2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b61d4:	9b03      	ldr	r3, [sp, #12]
   b61d6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b61d8:	6162      	str	r2, [r4, #20]
   b61da:	7623      	strb	r3, [r4, #24]
   b61dc:	e7cf      	b.n	b617e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b61e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61e2:	4604      	mov	r4, r0
   b61e4:	b087      	sub	sp, #28
   b61e6:	460d      	mov	r5, r1
        filter_(level, filters) {
   b61e8:	4626      	mov	r6, r4
        stream_(&stream) {
   b61ea:	4619      	mov	r1, r3
   b61ec:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b61ee:	4617      	mov	r7, r2
        stream_(&stream) {
   b61f0:	f7fe fa23 	bl	b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b61f4:	4b0b      	ldr	r3, [pc, #44]	; (b6224 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b61f6:	f846 3b04 	str.w	r3, [r6], #4
   b61fa:	4669      	mov	r1, sp
   b61fc:	a803      	add	r0, sp, #12
   b61fe:	f7fe fa1c 	bl	b463a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6202:	aa03      	add	r2, sp, #12
   b6204:	4639      	mov	r1, r7
   b6206:	4630      	mov	r0, r6
   b6208:	f7ff fef0 	bl	b5fec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b620c:	a803      	add	r0, sp, #12
   b620e:	f7fe f9d3 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6212:	4668      	mov	r0, sp
   b6214:	f7fe f9d0 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6218:	4b03      	ldr	r3, [pc, #12]	; (b6228 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b621a:	6023      	str	r3, [r4, #0]
}
   b621c:	4620      	mov	r0, r4
        stream_(&stream) {
   b621e:	6225      	str	r5, [r4, #32]
}
   b6220:	b007      	add	sp, #28
   b6222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6224:	000b7ff0 	.word	0x000b7ff0
   b6228:	000b8164 	.word	0x000b8164

000b622c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b622c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b622e:	460f      	mov	r7, r1
   b6230:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6232:	491d      	ldr	r1, [pc, #116]	; (b62a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6234:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6236:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6238:	4616      	mov	r6, r2
   b623a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b623c:	f001 fca7 	bl	b7b8e <strcmp>
   b6240:	b9c0      	cbnz	r0, b6274 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6242:	b1a4      	cbz	r4, b626e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6244:	4629      	mov	r1, r5
   b6246:	a801      	add	r0, sp, #4
   b6248:	f7ff fcbc 	bl	b5bc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b624c:	4917      	ldr	r1, [pc, #92]	; (b62ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b624e:	2024      	movs	r0, #36	; 0x24
   b6250:	f001 f828 	bl	b72a4 <_ZnwjRKSt9nothrow_t>
   b6254:	4605      	mov	r5, r0
   b6256:	b130      	cbz	r0, b6266 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6258:	ab01      	add	r3, sp, #4
   b625a:	4632      	mov	r2, r6
   b625c:	4621      	mov	r1, r4
   b625e:	f7ff ffbf 	bl	b61e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6262:	4b13      	ldr	r3, [pc, #76]	; (b62b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6264:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6266:	a801      	add	r0, sp, #4
   b6268:	f7fe f9a6 	bl	b45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b626c:	462c      	mov	r4, r5
}
   b626e:	4620      	mov	r0, r4
   b6270:	b005      	add	sp, #20
   b6272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6274:	490f      	ldr	r1, [pc, #60]	; (b62b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6276:	4638      	mov	r0, r7
   b6278:	f001 fc89 	bl	b7b8e <strcmp>
   b627c:	b990      	cbnz	r0, b62a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b627e:	2c00      	cmp	r4, #0
   b6280:	d0f5      	beq.n	b626e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6282:	4629      	mov	r1, r5
   b6284:	a801      	add	r0, sp, #4
   b6286:	f7ff fc9d 	bl	b5bc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b628a:	4908      	ldr	r1, [pc, #32]	; (b62ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b628c:	2024      	movs	r0, #36	; 0x24
   b628e:	f001 f809 	bl	b72a4 <_ZnwjRKSt9nothrow_t>
   b6292:	4605      	mov	r5, r0
   b6294:	2800      	cmp	r0, #0
   b6296:	d0e6      	beq.n	b6266 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6298:	ab01      	add	r3, sp, #4
   b629a:	4632      	mov	r2, r6
   b629c:	4621      	mov	r1, r4
   b629e:	f7ff ff9f 	bl	b61e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b62a2:	e7e0      	b.n	b6266 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b62a4:	2400      	movs	r4, #0
   b62a6:	e7e2      	b.n	b626e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b62a8:	000b80e8 	.word	0x000b80e8
   b62ac:	000b82f5 	.word	0x000b82f5
   b62b0:	000b817c 	.word	0x000b817c
   b62b4:	000b80ec 	.word	0x000b80ec

000b62b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b62b8:	4b01      	ldr	r3, [pc, #4]	; (b62c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b62ba:	4a02      	ldr	r2, [pc, #8]	; (b62c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b62bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b62be:	4770      	bx	lr
   b62c0:	2003e684 	.word	0x2003e684
   b62c4:	000b80fd 	.word	0x000b80fd

000b62c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b62c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b62cc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b62ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b62d2:	4604      	mov	r4, r0
   b62d4:	460e      	mov	r6, r1
   b62d6:	4617      	mov	r7, r2
   b62d8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b62da:	f000 fb0d 	bl	b68f8 <_Z16_fetch_usbserialv>
   b62de:	4581      	cmp	r9, r0
   b62e0:	d04c      	beq.n	b637c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b62e2:	792b      	ldrb	r3, [r5, #4]
   b62e4:	0719      	lsls	r1, r3, #28
   b62e6:	d504      	bpl.n	b62f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b62e8:	696a      	ldr	r2, [r5, #20]
   b62ea:	4954      	ldr	r1, [pc, #336]	; (b643c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b62ec:	4620      	mov	r0, r4
   b62ee:	f7ff fa8d 	bl	b580c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b62f2:	f1b8 0f00 	cmp.w	r8, #0
   b62f6:	d00d      	beq.n	b6314 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b62f8:	215b      	movs	r1, #91	; 0x5b
   b62fa:	4620      	mov	r0, r4
   b62fc:	f7ff fa7a 	bl	b57f4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6300:	4641      	mov	r1, r8
   b6302:	4620      	mov	r0, r4
   b6304:	f7ff fa67 	bl	b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6308:	6823      	ldr	r3, [r4, #0]
   b630a:	494d      	ldr	r1, [pc, #308]	; (b6440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b630c:	68db      	ldr	r3, [r3, #12]
   b630e:	2202      	movs	r2, #2
   b6310:	4620      	mov	r0, r4
   b6312:	4798      	blx	r3
    if (attr.has_file) {
   b6314:	792b      	ldrb	r3, [r5, #4]
   b6316:	07da      	lsls	r2, r3, #31
   b6318:	d523      	bpl.n	b6362 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b631a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b631e:	212f      	movs	r1, #47	; 0x2f
   b6320:	4640      	mov	r0, r8
   b6322:	f001 fc62 	bl	b7bea <strrchr>
    if (s1) {
   b6326:	b108      	cbz	r0, b632c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6328:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b632c:	4641      	mov	r1, r8
   b632e:	4620      	mov	r0, r4
   b6330:	f7ff fa51 	bl	b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6334:	792b      	ldrb	r3, [r5, #4]
   b6336:	079b      	lsls	r3, r3, #30
   b6338:	d508      	bpl.n	b634c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b633a:	213a      	movs	r1, #58	; 0x3a
   b633c:	4620      	mov	r0, r4
   b633e:	f7ff fa59 	bl	b57f4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6342:	68ea      	ldr	r2, [r5, #12]
   b6344:	493f      	ldr	r1, [pc, #252]	; (b6444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6346:	4620      	mov	r0, r4
   b6348:	f7ff fa60 	bl	b580c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b634c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b634e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6350:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6354:	68db      	ldr	r3, [r3, #12]
   b6356:	bf14      	ite	ne
   b6358:	493b      	ldrne	r1, [pc, #236]	; (b6448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b635a:	493c      	ldreq	r1, [pc, #240]	; (b644c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b635c:	2202      	movs	r2, #2
            write(": ", 2);
   b635e:	4620      	mov	r0, r4
   b6360:	4798      	blx	r3
    if (attr.has_function) {
   b6362:	792b      	ldrb	r3, [r5, #4]
   b6364:	0758      	lsls	r0, r3, #29
   b6366:	d51d      	bpl.n	b63a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6368:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b636a:	460b      	mov	r3, r1
   b636c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b636e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6372:	b160      	cbz	r0, b638e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6374:	2820      	cmp	r0, #32
   b6376:	d108      	bne.n	b638a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6378:	4619      	mov	r1, r3
   b637a:	e7f7      	b.n	b636c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b637c:	4834      	ldr	r0, [pc, #208]	; (b6450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b637e:	f000 fc44 	bl	b6c0a <_ZN5spark12NetworkClass9listeningEv>
   b6382:	2800      	cmp	r0, #0
   b6384:	d0ad      	beq.n	b62e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b638a:	2828      	cmp	r0, #40	; 0x28
   b638c:	d1ee      	bne.n	b636c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b638e:	6823      	ldr	r3, [r4, #0]
   b6390:	1a52      	subs	r2, r2, r1
   b6392:	68db      	ldr	r3, [r3, #12]
   b6394:	4620      	mov	r0, r4
   b6396:	4798      	blx	r3
        write("(): ", 4);
   b6398:	6823      	ldr	r3, [r4, #0]
   b639a:	492e      	ldr	r1, [pc, #184]	; (b6454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b639c:	68db      	ldr	r3, [r3, #12]
   b639e:	2204      	movs	r2, #4
   b63a0:	4620      	mov	r0, r4
   b63a2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b63a4:	2100      	movs	r1, #0
   b63a6:	4638      	mov	r0, r7
   b63a8:	f7fe ff00 	bl	b51ac <log_level_name>
   b63ac:	4601      	mov	r1, r0
    write(s);
   b63ae:	4620      	mov	r0, r4
   b63b0:	f7ff fa11 	bl	b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b63b4:	6823      	ldr	r3, [r4, #0]
   b63b6:	4925      	ldr	r1, [pc, #148]	; (b644c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b63b8:	68db      	ldr	r3, [r3, #12]
   b63ba:	2202      	movs	r2, #2
   b63bc:	4620      	mov	r0, r4
   b63be:	4798      	blx	r3
    if (msg) {
   b63c0:	b11e      	cbz	r6, b63ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b63c2:	4631      	mov	r1, r6
   b63c4:	4620      	mov	r0, r4
   b63c6:	f7ff fa06 	bl	b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b63ca:	792b      	ldrb	r3, [r5, #4]
   b63cc:	f013 0f30 	tst.w	r3, #48	; 0x30
   b63d0:	d02c      	beq.n	b642c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b63d2:	6823      	ldr	r3, [r4, #0]
   b63d4:	4920      	ldr	r1, [pc, #128]	; (b6458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b63d6:	68db      	ldr	r3, [r3, #12]
   b63d8:	2202      	movs	r2, #2
   b63da:	4620      	mov	r0, r4
   b63dc:	4798      	blx	r3
        if (attr.has_code) {
   b63de:	792b      	ldrb	r3, [r5, #4]
   b63e0:	06d9      	lsls	r1, r3, #27
   b63e2:	d50a      	bpl.n	b63fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b63e4:	6823      	ldr	r3, [r4, #0]
   b63e6:	491d      	ldr	r1, [pc, #116]	; (b645c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b63e8:	68db      	ldr	r3, [r3, #12]
   b63ea:	2207      	movs	r2, #7
   b63ec:	4620      	mov	r0, r4
   b63ee:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b63f0:	69aa      	ldr	r2, [r5, #24]
   b63f2:	491b      	ldr	r1, [pc, #108]	; (b6460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b63f4:	4620      	mov	r0, r4
   b63f6:	f7ff fa09 	bl	b580c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b63fa:	792b      	ldrb	r3, [r5, #4]
   b63fc:	069a      	lsls	r2, r3, #26
   b63fe:	d511      	bpl.n	b6424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6400:	06db      	lsls	r3, r3, #27
   b6402:	d505      	bpl.n	b6410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6404:	6823      	ldr	r3, [r4, #0]
   b6406:	4910      	ldr	r1, [pc, #64]	; (b6448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6408:	68db      	ldr	r3, [r3, #12]
   b640a:	2202      	movs	r2, #2
   b640c:	4620      	mov	r0, r4
   b640e:	4798      	blx	r3
            write("details = ", 10);
   b6410:	6823      	ldr	r3, [r4, #0]
   b6412:	4914      	ldr	r1, [pc, #80]	; (b6464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6414:	68db      	ldr	r3, [r3, #12]
   b6416:	4620      	mov	r0, r4
   b6418:	220a      	movs	r2, #10
   b641a:	4798      	blx	r3
            write(attr.details);
   b641c:	69e9      	ldr	r1, [r5, #28]
   b641e:	4620      	mov	r0, r4
   b6420:	f7ff f9d9 	bl	b57d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6424:	215d      	movs	r1, #93	; 0x5d
   b6426:	4620      	mov	r0, r4
   b6428:	f7ff f9e4 	bl	b57f4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b642c:	6823      	ldr	r3, [r4, #0]
   b642e:	490e      	ldr	r1, [pc, #56]	; (b6468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6430:	68db      	ldr	r3, [r3, #12]
   b6432:	4620      	mov	r0, r4
   b6434:	2202      	movs	r2, #2
}
   b6436:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b643a:	4718      	bx	r3
   b643c:	000b8101 	.word	0x000b8101
   b6440:	000b8108 	.word	0x000b8108
   b6444:	000b810b 	.word	0x000b810b
   b6448:	000b810e 	.word	0x000b810e
   b644c:	000b8113 	.word	0x000b8113
   b6450:	2003e714 	.word	0x2003e714
   b6454:	000b8111 	.word	0x000b8111
   b6458:	000b8116 	.word	0x000b8116
   b645c:	000b8119 	.word	0x000b8119
   b6460:	000b7e61 	.word	0x000b7e61
   b6464:	000b8121 	.word	0x000b8121
   b6468:	000b812c 	.word	0x000b812c

000b646c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b646c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6470:	b085      	sub	sp, #20
    return stream_;
   b6472:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6476:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6478:	4605      	mov	r5, r0
   b647a:	460f      	mov	r7, r1
   b647c:	4690      	mov	r8, r2
   b647e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6480:	f000 fa3a 	bl	b68f8 <_Z16_fetch_usbserialv>
   b6484:	4581      	cmp	r9, r0
   b6486:	d105      	bne.n	b6494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6488:	4849      	ldr	r0, [pc, #292]	; (b65b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b648a:	f000 fbbe 	bl	b6c0a <_ZN5spark12NetworkClass9listeningEv>
   b648e:	2800      	cmp	r0, #0
   b6490:	f040 808a 	bne.w	b65a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6494:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6496:	4a47      	ldr	r2, [pc, #284]	; (b65b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6498:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b649a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b649e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b64a0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b64a2:	f88d 9008 	strb.w	r9, [sp, #8]
   b64a6:	f000 fd54 	bl	b6f52 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b64aa:	4649      	mov	r1, r9
   b64ac:	4640      	mov	r0, r8
   b64ae:	f7fe fe7d 	bl	b51ac <log_level_name>
    json.name("l", 1).value(s);
   b64b2:	4941      	ldr	r1, [pc, #260]	; (b65b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b64b4:	4680      	mov	r8, r0
   b64b6:	2201      	movs	r2, #1
   b64b8:	a801      	add	r0, sp, #4
   b64ba:	f000 fdd9 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b64be:	4641      	mov	r1, r8
   b64c0:	f7ff f97b 	bl	b57ba <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b64c4:	b13f      	cbz	r7, b64d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b64c6:	493d      	ldr	r1, [pc, #244]	; (b65bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b64c8:	2201      	movs	r2, #1
   b64ca:	a801      	add	r0, sp, #4
   b64cc:	f000 fdd0 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b64d0:	4639      	mov	r1, r7
   b64d2:	f7ff f972 	bl	b57ba <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b64d6:	b13e      	cbz	r6, b64e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b64d8:	4939      	ldr	r1, [pc, #228]	; (b65c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b64da:	2201      	movs	r2, #1
   b64dc:	a801      	add	r0, sp, #4
   b64de:	f000 fdc7 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b64e2:	4631      	mov	r1, r6
   b64e4:	f7ff f969 	bl	b57ba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b64e8:	7923      	ldrb	r3, [r4, #4]
   b64ea:	07df      	lsls	r7, r3, #31
   b64ec:	d50e      	bpl.n	b650c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b64ee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b64f0:	212f      	movs	r1, #47	; 0x2f
   b64f2:	4630      	mov	r0, r6
   b64f4:	f001 fb79 	bl	b7bea <strrchr>
    if (s1) {
   b64f8:	b100      	cbz	r0, b64fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b64fa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b64fc:	4931      	ldr	r1, [pc, #196]	; (b65c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b64fe:	2201      	movs	r2, #1
   b6500:	a801      	add	r0, sp, #4
   b6502:	f000 fdb5 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b6506:	4631      	mov	r1, r6
   b6508:	f7ff f957 	bl	b57ba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b650c:	7923      	ldrb	r3, [r4, #4]
   b650e:	079e      	lsls	r6, r3, #30
   b6510:	d507      	bpl.n	b6522 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6512:	492d      	ldr	r1, [pc, #180]	; (b65c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6514:	2202      	movs	r2, #2
   b6516:	a801      	add	r0, sp, #4
   b6518:	f000 fdaa 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b651c:	68e1      	ldr	r1, [r4, #12]
   b651e:	f000 fd25 	bl	b6f6c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6522:	7923      	ldrb	r3, [r4, #4]
   b6524:	0758      	lsls	r0, r3, #29
   b6526:	d514      	bpl.n	b6552 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6528:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b652a:	4633      	mov	r3, r6
   b652c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b652e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6532:	b12a      	cbz	r2, b6540 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6534:	2a20      	cmp	r2, #32
   b6536:	d101      	bne.n	b653c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6538:	461e      	mov	r6, r3
   b653a:	e7f7      	b.n	b652c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b653c:	2a28      	cmp	r2, #40	; 0x28
   b653e:	d1f5      	bne.n	b652c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6540:	4922      	ldr	r1, [pc, #136]	; (b65cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6542:	2202      	movs	r2, #2
   b6544:	a801      	add	r0, sp, #4
   b6546:	f000 fd93 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b654a:	1bba      	subs	r2, r7, r6
   b654c:	4631      	mov	r1, r6
   b654e:	f000 fd9f 	bl	b7090 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6552:	7923      	ldrb	r3, [r4, #4]
   b6554:	0719      	lsls	r1, r3, #28
   b6556:	d507      	bpl.n	b6568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6558:	491d      	ldr	r1, [pc, #116]	; (b65d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b655a:	2201      	movs	r2, #1
   b655c:	a801      	add	r0, sp, #4
   b655e:	f000 fd87 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b6562:	6961      	ldr	r1, [r4, #20]
   b6564:	f000 fd14 	bl	b6f90 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6568:	7923      	ldrb	r3, [r4, #4]
   b656a:	06da      	lsls	r2, r3, #27
   b656c:	d508      	bpl.n	b6580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b656e:	2204      	movs	r2, #4
   b6570:	4918      	ldr	r1, [pc, #96]	; (b65d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6572:	eb0d 0002 	add.w	r0, sp, r2
   b6576:	f000 fd7b 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b657a:	69a1      	ldr	r1, [r4, #24]
   b657c:	f000 fcf6 	bl	b6f6c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6580:	7923      	ldrb	r3, [r4, #4]
   b6582:	069b      	lsls	r3, r3, #26
   b6584:	d507      	bpl.n	b6596 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6586:	4914      	ldr	r1, [pc, #80]	; (b65d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6588:	2206      	movs	r2, #6
   b658a:	a801      	add	r0, sp, #4
   b658c:	f000 fd70 	bl	b7070 <_ZN5spark10JSONWriter4nameEPKcj>
   b6590:	69e1      	ldr	r1, [r4, #28]
   b6592:	f7ff f912 	bl	b57ba <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6596:	a801      	add	r0, sp, #4
   b6598:	f000 fcc5 	bl	b6f26 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b659c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b659e:	490f      	ldr	r1, [pc, #60]	; (b65dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b65a0:	6803      	ldr	r3, [r0, #0]
   b65a2:	2202      	movs	r2, #2
   b65a4:	68db      	ldr	r3, [r3, #12]
   b65a6:	4798      	blx	r3
}
   b65a8:	b005      	add	sp, #20
   b65aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b65ae:	bf00      	nop
   b65b0:	2003e714 	.word	0x2003e714
   b65b4:	000b814c 	.word	0x000b814c
   b65b8:	000b80de 	.word	0x000b80de
   b65bc:	000b7ef1 	.word	0x000b7ef1
   b65c0:	000b8388 	.word	0x000b8388
   b65c4:	000b812f 	.word	0x000b812f
   b65c8:	000b8131 	.word	0x000b8131
   b65cc:	000b8134 	.word	0x000b8134
   b65d0:	000b7fd4 	.word	0x000b7fd4
   b65d4:	000b8137 	.word	0x000b8137
   b65d8:	000b813c 	.word	0x000b813c
   b65dc:	000b812c 	.word	0x000b812c

000b65e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b65e0:	4b02      	ldr	r3, [pc, #8]	; (b65ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b65e2:	681a      	ldr	r2, [r3, #0]
   b65e4:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b65e6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b65e8:	4770      	bx	lr
   b65ea:	bf00      	nop
   b65ec:	2003e580 	.word	0x2003e580
   b65f0:	2003e6b0 	.word	0x2003e6b0

000b65f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b65f4:	2100      	movs	r1, #0
   b65f6:	f7fe bdf1 	b.w	b51dc <system_delay_ms>
	...

000b65fc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b65fc:	4b01      	ldr	r3, [pc, #4]	; (b6604 <_GLOBAL__sub_I_RGB+0x8>)
   b65fe:	2200      	movs	r2, #0
   b6600:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6602:	4770      	bx	lr
   b6604:	2003e6b4 	.word	0x2003e6b4

000b6608 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6608:	4b01      	ldr	r3, [pc, #4]	; (b6610 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b660a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b660c:	4770      	bx	lr
   b660e:	bf00      	nop
   b6610:	2003e584 	.word	0x2003e584

000b6614 <serialEventRun>:
{
   b6614:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6616:	4b0b      	ldr	r3, [pc, #44]	; (b6644 <serialEventRun+0x30>)
   b6618:	b143      	cbz	r3, b662c <serialEventRun+0x18>
   b661a:	f000 f96d 	bl	b68f8 <_Z16_fetch_usbserialv>
   b661e:	6803      	ldr	r3, [r0, #0]
   b6620:	691b      	ldr	r3, [r3, #16]
   b6622:	4798      	blx	r3
   b6624:	2800      	cmp	r0, #0
   b6626:	dd01      	ble.n	b662c <serialEventRun+0x18>
        serialEvent();
   b6628:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b662c:	4b06      	ldr	r3, [pc, #24]	; (b6648 <serialEventRun+0x34>)
   b662e:	b143      	cbz	r3, b6642 <serialEventRun+0x2e>
   b6630:	f000 fdd4 	bl	b71dc <_Z22__fetch_global_Serial1v>
   b6634:	6803      	ldr	r3, [r0, #0]
   b6636:	691b      	ldr	r3, [r3, #16]
   b6638:	4798      	blx	r3
   b663a:	2800      	cmp	r0, #0
   b663c:	dd01      	ble.n	b6642 <serialEventRun+0x2e>
        serialEvent1();
   b663e:	f3af 8000 	nop.w
}
   b6642:	bd08      	pop	{r3, pc}
	...

000b664c <_post_loop>:
{
   b664c:	b508      	push	{r3, lr}
	serialEventRun();
   b664e:	f7ff ffe1 	bl	b6614 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6652:	f7fe fc63 	bl	b4f1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6656:	4b01      	ldr	r3, [pc, #4]	; (b665c <_post_loop+0x10>)
   b6658:	6018      	str	r0, [r3, #0]
}
   b665a:	bd08      	pop	{r3, pc}
   b665c:	2003e740 	.word	0x2003e740

000b6660 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6660:	4805      	ldr	r0, [pc, #20]	; (b6678 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6662:	4a06      	ldr	r2, [pc, #24]	; (b667c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6664:	4906      	ldr	r1, [pc, #24]	; (b6680 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6666:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6668:	1a12      	subs	r2, r2, r0
   b666a:	f001 fa1b 	bl	b7aa4 <memcpy>
    __backup_sram_signature = signature;
   b666e:	4b05      	ldr	r3, [pc, #20]	; (b6684 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6670:	4a05      	ldr	r2, [pc, #20]	; (b6688 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6672:	601a      	str	r2, [r3, #0]
}
   b6674:	bd08      	pop	{r3, pc}
   b6676:	bf00      	nop
   b6678:	2003f400 	.word	0x2003f400
   b667c:	2003f404 	.word	0x2003f404
   b6680:	000b84e4 	.word	0x000b84e4
   b6684:	2003f400 	.word	0x2003f400
   b6688:	9a271c1e 	.word	0x9a271c1e

000b668c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b668c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b668e:	2300      	movs	r3, #0
   b6690:	9300      	str	r3, [sp, #0]
   b6692:	461a      	mov	r2, r3
   b6694:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6698:	f7fe fdba 	bl	b5210 <system_ctrl_set_result>
}
   b669c:	b003      	add	sp, #12
   b669e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b66a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b66a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b66a6:	8843      	ldrh	r3, [r0, #2]
   b66a8:	2b0a      	cmp	r3, #10
   b66aa:	d008      	beq.n	b66be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b66ac:	2b50      	cmp	r3, #80	; 0x50
   b66ae:	d10b      	bne.n	b66c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b66b0:	4b09      	ldr	r3, [pc, #36]	; (b66d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b66b2:	681b      	ldr	r3, [r3, #0]
   b66b4:	b14b      	cbz	r3, b66ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b66b6:	b003      	add	sp, #12
   b66b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b66bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b66be:	f7ff ffe5 	bl	b668c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b66c2:	b003      	add	sp, #12
   b66c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b66c8:	2300      	movs	r3, #0
   b66ca:	9300      	str	r3, [sp, #0]
   b66cc:	461a      	mov	r2, r3
   b66ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b66d2:	f7fe fd9d 	bl	b5210 <system_ctrl_set_result>
}
   b66d6:	e7f4      	b.n	b66c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b66d8:	2003e6c8 	.word	0x2003e6c8

000b66dc <module_user_init_hook>:
{
   b66dc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b66de:	4812      	ldr	r0, [pc, #72]	; (b6728 <module_user_init_hook+0x4c>)
   b66e0:	2100      	movs	r1, #0
   b66e2:	f7fe fe49 	bl	b5378 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b66e6:	4b11      	ldr	r3, [pc, #68]	; (b672c <module_user_init_hook+0x50>)
   b66e8:	681a      	ldr	r2, [r3, #0]
   b66ea:	4b11      	ldr	r3, [pc, #68]	; (b6730 <module_user_init_hook+0x54>)
   b66ec:	429a      	cmp	r2, r3
   b66ee:	4b11      	ldr	r3, [pc, #68]	; (b6734 <module_user_init_hook+0x58>)
   b66f0:	bf0c      	ite	eq
   b66f2:	2201      	moveq	r2, #1
   b66f4:	2200      	movne	r2, #0
   b66f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b66f8:	d001      	beq.n	b66fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b66fa:	f7ff ffb1 	bl	b6660 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b66fe:	f7fe fbfd 	bl	b4efc <HAL_RNG_GetRandomNumber>
   b6702:	4604      	mov	r4, r0
    srand(seed);
   b6704:	f001 f9fe 	bl	b7b04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6708:	4b0b      	ldr	r3, [pc, #44]	; (b6738 <module_user_init_hook+0x5c>)
   b670a:	b113      	cbz	r3, b6712 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b670c:	4620      	mov	r0, r4
   b670e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6712:	2100      	movs	r1, #0
   b6714:	4808      	ldr	r0, [pc, #32]	; (b6738 <module_user_init_hook+0x5c>)
   b6716:	f7fe fdf7 	bl	b5308 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b671a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b671e:	4807      	ldr	r0, [pc, #28]	; (b673c <module_user_init_hook+0x60>)
   b6720:	2100      	movs	r1, #0
   b6722:	f7fe bd6b 	b.w	b51fc <system_ctrl_set_app_request_handler>
   b6726:	bf00      	nop
   b6728:	000b6609 	.word	0x000b6609
   b672c:	2003f400 	.word	0x2003f400
   b6730:	9a271c1e 	.word	0x9a271c1e
   b6734:	2003e6c4 	.word	0x2003e6c4
   b6738:	00000000 	.word	0x00000000
   b673c:	000b66a5 	.word	0x000b66a5

000b6740 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6740:	4770      	bx	lr

000b6742 <_ZN9IPAddressD0Ev>:
   b6742:	b510      	push	{r4, lr}
   b6744:	2118      	movs	r1, #24
   b6746:	4604      	mov	r4, r0
   b6748:	f7fd fca7 	bl	b409a <_ZdlPvj>
   b674c:	4620      	mov	r0, r4
   b674e:	bd10      	pop	{r4, pc}

000b6750 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6750:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6752:	7d03      	ldrb	r3, [r0, #20]
   b6754:	2b06      	cmp	r3, #6
{
   b6756:	b08d      	sub	sp, #52	; 0x34
   b6758:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b675a:	f100 0704 	add.w	r7, r0, #4
   b675e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6762:	d012      	beq.n	b678a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6764:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6768:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b676c:	220a      	movs	r2, #10
   b676e:	4630      	mov	r0, r6
   b6770:	f7fe ff73 	bl	b565a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6774:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6776:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6778:	d019      	beq.n	b67ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b677a:	2c00      	cmp	r4, #0
   b677c:	d0f4      	beq.n	b6768 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b677e:	212e      	movs	r1, #46	; 0x2e
   b6780:	4630      	mov	r0, r6
   b6782:	f7fe ff5b 	bl	b563c <_ZN5Print5printEc>
   b6786:	4404      	add	r4, r0
   b6788:	e7ee      	b.n	b6768 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b678a:	232f      	movs	r3, #47	; 0x2f
   b678c:	466a      	mov	r2, sp
   b678e:	4639      	mov	r1, r7
   b6790:	200a      	movs	r0, #10
		buf[0] = 0;
   b6792:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6796:	f7fe fbf1 	bl	b4f7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b679a:	4668      	mov	r0, sp
   b679c:	f001 fa09 	bl	b7bb2 <strlen>
   b67a0:	6833      	ldr	r3, [r6, #0]
   b67a2:	4602      	mov	r2, r0
   b67a4:	68db      	ldr	r3, [r3, #12]
   b67a6:	4669      	mov	r1, sp
   b67a8:	4630      	mov	r0, r6
   b67aa:	4798      	blx	r3
   b67ac:	4604      	mov	r4, r0
    }
    return n;
}
   b67ae:	4620      	mov	r0, r4
   b67b0:	b00d      	add	sp, #52	; 0x34
   b67b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b67b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b67b4:	b510      	push	{r4, lr}
   b67b6:	4b05      	ldr	r3, [pc, #20]	; (b67cc <_ZN9IPAddressC1Ev+0x18>)
   b67b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b67ba:	2211      	movs	r2, #17
   b67bc:	f840 3b04 	str.w	r3, [r0], #4
   b67c0:	2100      	movs	r1, #0
   b67c2:	f001 f997 	bl	b7af4 <memset>
}
   b67c6:	4620      	mov	r0, r4
   b67c8:	bd10      	pop	{r4, pc}
   b67ca:	bf00      	nop
   b67cc:	000b81e0 	.word	0x000b81e0

000b67d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b67d0:	4603      	mov	r3, r0
   b67d2:	4a07      	ldr	r2, [pc, #28]	; (b67f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b67d4:	b510      	push	{r4, lr}
   b67d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b67da:	f101 0210 	add.w	r2, r1, #16
   b67de:	f851 4b04 	ldr.w	r4, [r1], #4
   b67e2:	f843 4b04 	str.w	r4, [r3], #4
   b67e6:	4291      	cmp	r1, r2
   b67e8:	d1f9      	bne.n	b67de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b67ea:	780a      	ldrb	r2, [r1, #0]
   b67ec:	701a      	strb	r2, [r3, #0]
}
   b67ee:	bd10      	pop	{r4, pc}
   b67f0:	000b81e0 	.word	0x000b81e0

000b67f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b67f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b67f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b67fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b67fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6802:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6806:	2304      	movs	r3, #4
   b6808:	6041      	str	r1, [r0, #4]
   b680a:	7503      	strb	r3, [r0, #20]
}
   b680c:	bd10      	pop	{r4, pc}
	...

000b6810 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6810:	b507      	push	{r0, r1, r2, lr}
   b6812:	4b06      	ldr	r3, [pc, #24]	; (b682c <_ZN9IPAddressC1EPKh+0x1c>)
   b6814:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6816:	78cb      	ldrb	r3, [r1, #3]
   b6818:	9300      	str	r3, [sp, #0]
   b681a:	788b      	ldrb	r3, [r1, #2]
   b681c:	784a      	ldrb	r2, [r1, #1]
   b681e:	7809      	ldrb	r1, [r1, #0]
   b6820:	f7ff ffe8 	bl	b67f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6824:	b003      	add	sp, #12
   b6826:	f85d fb04 	ldr.w	pc, [sp], #4
   b682a:	bf00      	nop
   b682c:	000b81e0 	.word	0x000b81e0

000b6830 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6830:	7441      	strb	r1, [r0, #17]
}
   b6832:	4770      	bx	lr

000b6834 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6834:	4770      	bx	lr

000b6836 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6836:	4770      	bx	lr

000b6838 <_ZN9USBSerial4readEv>:
{
   b6838:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b683a:	2100      	movs	r1, #0
   b683c:	7c00      	ldrb	r0, [r0, #16]
   b683e:	f7fe fc85 	bl	b514c <HAL_USB_USART_Receive_Data>
}
   b6842:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6846:	bd08      	pop	{r3, pc}

000b6848 <_ZN9USBSerial4peekEv>:
{
   b6848:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b684a:	2101      	movs	r1, #1
   b684c:	7c00      	ldrb	r0, [r0, #16]
   b684e:	f7fe fc7d 	bl	b514c <HAL_USB_USART_Receive_Data>
}
   b6852:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6856:	bd08      	pop	{r3, pc}

000b6858 <_ZN9USBSerial17availableForWriteEv>:
{
   b6858:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b685a:	7c00      	ldrb	r0, [r0, #16]
   b685c:	f7fe fc6e 	bl	b513c <HAL_USB_USART_Available_Data_For_Write>
}
   b6860:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6864:	bd08      	pop	{r3, pc}

000b6866 <_ZN9USBSerial9availableEv>:
{
   b6866:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6868:	7c00      	ldrb	r0, [r0, #16]
   b686a:	f7fe fc5f 	bl	b512c <HAL_USB_USART_Available_Data>
}
   b686e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6872:	bd08      	pop	{r3, pc}

000b6874 <_ZN9USBSerial5writeEh>:
{
   b6874:	b513      	push	{r0, r1, r4, lr}
   b6876:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6878:	7c00      	ldrb	r0, [r0, #16]
{
   b687a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b687c:	f7fe fc5e 	bl	b513c <HAL_USB_USART_Available_Data_For_Write>
   b6880:	2800      	cmp	r0, #0
   b6882:	9901      	ldr	r1, [sp, #4]
   b6884:	dc01      	bgt.n	b688a <_ZN9USBSerial5writeEh+0x16>
   b6886:	7c60      	ldrb	r0, [r4, #17]
   b6888:	b120      	cbz	r0, b6894 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b688a:	7c20      	ldrb	r0, [r4, #16]
   b688c:	f7fe fc66 	bl	b515c <HAL_USB_USART_Send_Data>
   b6890:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6894:	b002      	add	sp, #8
   b6896:	bd10      	pop	{r4, pc}

000b6898 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6898:	7c00      	ldrb	r0, [r0, #16]
   b689a:	f7fe bc67 	b.w	b516c <HAL_USB_USART_Flush_Data>

000b689e <_ZN9USBSerialD0Ev>:
   b689e:	b510      	push	{r4, lr}
   b68a0:	2114      	movs	r1, #20
   b68a2:	4604      	mov	r4, r0
   b68a4:	f7fd fbf9 	bl	b409a <_ZdlPvj>
   b68a8:	4620      	mov	r0, r4
   b68aa:	bd10      	pop	{r4, pc}

000b68ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b68ac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b68ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68b2:	4604      	mov	r4, r0
   b68b4:	4608      	mov	r0, r1
   b68b6:	2100      	movs	r1, #0
   b68b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b68bc:	4b04      	ldr	r3, [pc, #16]	; (b68d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b68be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b68c0:	2301      	movs	r3, #1
  _serial = serial;
   b68c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b68c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b68c6:	4611      	mov	r1, r2
   b68c8:	f7fe fc18 	bl	b50fc <HAL_USB_USART_Init>
}
   b68cc:	4620      	mov	r0, r4
   b68ce:	bd10      	pop	{r4, pc}
   b68d0:	000b81f4 	.word	0x000b81f4

000b68d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b68d4:	7c00      	ldrb	r0, [r0, #16]
   b68d6:	2200      	movs	r2, #0
   b68d8:	f7fe bc18 	b.w	b510c <HAL_USB_USART_Begin>

000b68dc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b68dc:	7c00      	ldrb	r0, [r0, #16]
   b68de:	f7fe bc1d 	b.w	b511c <HAL_USB_USART_End>

000b68e2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b68e2:	7c00      	ldrb	r0, [r0, #16]
   b68e4:	f7fe bc4a 	b.w	b517c <HAL_USB_USART_Is_Connected>

000b68e8 <_Z19acquireSerialBufferv>:
{
   b68e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b68ea:	2214      	movs	r2, #20
{
   b68ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b68ee:	2100      	movs	r1, #0
   b68f0:	f001 f900 	bl	b7af4 <memset>
}
   b68f4:	4620      	mov	r0, r4
   b68f6:	bd10      	pop	{r4, pc}

000b68f8 <_Z16_fetch_usbserialv>:
{
   b68f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68fa:	4c0f      	ldr	r4, [pc, #60]	; (b6938 <_Z16_fetch_usbserialv+0x40>)
{
   b68fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b68fe:	a803      	add	r0, sp, #12
   b6900:	f7ff fff2 	bl	b68e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6904:	7821      	ldrb	r1, [r4, #0]
   b6906:	f3bf 8f5b 	dmb	ish
   b690a:	f011 0101 	ands.w	r1, r1, #1
   b690e:	d10f      	bne.n	b6930 <_Z16_fetch_usbserialv+0x38>
   b6910:	4620      	mov	r0, r4
   b6912:	9101      	str	r1, [sp, #4]
   b6914:	f7fd fbd0 	bl	b40b8 <__cxa_guard_acquire>
   b6918:	9901      	ldr	r1, [sp, #4]
   b691a:	b148      	cbz	r0, b6930 <_Z16_fetch_usbserialv+0x38>
   b691c:	aa03      	add	r2, sp, #12
   b691e:	4807      	ldr	r0, [pc, #28]	; (b693c <_Z16_fetch_usbserialv+0x44>)
   b6920:	f7ff ffc4 	bl	b68ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6924:	4620      	mov	r0, r4
   b6926:	f7fd fbcc 	bl	b40c2 <__cxa_guard_release>
   b692a:	4805      	ldr	r0, [pc, #20]	; (b6940 <_Z16_fetch_usbserialv+0x48>)
   b692c:	f001 f8ac 	bl	b7a88 <atexit>
	return _usbserial;
}
   b6930:	4802      	ldr	r0, [pc, #8]	; (b693c <_Z16_fetch_usbserialv+0x44>)
   b6932:	b008      	add	sp, #32
   b6934:	bd10      	pop	{r4, pc}
   b6936:	bf00      	nop
   b6938:	2003e6cc 	.word	0x2003e6cc
   b693c:	2003e6d0 	.word	0x2003e6d0
   b6940:	000b6835 	.word	0x000b6835

000b6944 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6944:	2200      	movs	r2, #0
   b6946:	6840      	ldr	r0, [r0, #4]
   b6948:	4611      	mov	r1, r2
   b694a:	f7fe bc8d 	b.w	b5268 <network_ready>

000b694e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b694e:	2200      	movs	r2, #0
   b6950:	6840      	ldr	r0, [r0, #4]
   b6952:	4611      	mov	r1, r2
   b6954:	f7fe bca8 	b.w	b52a8 <network_listening>

000b6958 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6958:	2200      	movs	r2, #0
   b695a:	6840      	ldr	r0, [r0, #4]
   b695c:	4611      	mov	r1, r2
   b695e:	f7fe bcb3 	b.w	b52c8 <network_get_listen_timeout>

000b6962 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6962:	6840      	ldr	r0, [r0, #4]
   b6964:	2200      	movs	r2, #0
   b6966:	f7fe bca7 	b.w	b52b8 <network_set_listen_timeout>

000b696a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b696a:	6840      	ldr	r0, [r0, #4]
   b696c:	2200      	movs	r2, #0
   b696e:	f081 0101 	eor.w	r1, r1, #1
   b6972:	f7fe bc91 	b.w	b5298 <network_listen>

000b6976 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6976:	2300      	movs	r3, #0
   b6978:	6840      	ldr	r0, [r0, #4]
   b697a:	461a      	mov	r2, r3
   b697c:	4619      	mov	r1, r3
   b697e:	f7fe bc83 	b.w	b5288 <network_off>

000b6982 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6982:	2300      	movs	r3, #0
   b6984:	6840      	ldr	r0, [r0, #4]
   b6986:	461a      	mov	r2, r3
   b6988:	4619      	mov	r1, r3
   b698a:	f7fe bc75 	b.w	b5278 <network_on>

000b698e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b698e:	2200      	movs	r2, #0
   b6990:	6840      	ldr	r0, [r0, #4]
   b6992:	4611      	mov	r1, r2
   b6994:	f7fe bc58 	b.w	b5248 <network_connecting>

000b6998 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6998:	6840      	ldr	r0, [r0, #4]
   b699a:	2200      	movs	r2, #0
   b699c:	2102      	movs	r1, #2
   b699e:	f7fe bc5b 	b.w	b5258 <network_disconnect>

000b69a2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b69a2:	2300      	movs	r3, #0
   b69a4:	6840      	ldr	r0, [r0, #4]
   b69a6:	461a      	mov	r2, r3
   b69a8:	f7fe bc46 	b.w	b5238 <network_connect>

000b69ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b69ac:	4b08      	ldr	r3, [pc, #32]	; (b69d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b69ae:	b510      	push	{r4, lr}
   b69b0:	2428      	movs	r4, #40	; 0x28
   b69b2:	4622      	mov	r2, r4
   b69b4:	4618      	mov	r0, r3
   b69b6:	2100      	movs	r1, #0
   b69b8:	f001 f89c 	bl	b7af4 <memset>
   b69bc:	4b05      	ldr	r3, [pc, #20]	; (b69d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b69be:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b69c0:	f04f 32ff 	mov.w	r2, #4294967295
   b69c4:	6042      	str	r2, [r0, #4]
   b69c6:	2204      	movs	r2, #4
   b69c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b69ca:	4a03      	ldr	r2, [pc, #12]	; (b69d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b69cc:	601a      	str	r2, [r3, #0]
   b69ce:	bd10      	pop	{r4, pc}
   b69d0:	2003e6ec 	.word	0x2003e6ec
   b69d4:	2003e6e4 	.word	0x2003e6e4
   b69d8:	000b8224 	.word	0x000b8224

000b69dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b69dc:	4770      	bx	lr

000b69de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b69de:	7441      	strb	r1, [r0, #17]
}
   b69e0:	4770      	bx	lr

000b69e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b69e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b69e4:	7c00      	ldrb	r0, [r0, #16]
   b69e6:	f7fe fb09 	bl	b4ffc <hal_usart_available_data_for_write>
}
   b69ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69ee:	bd08      	pop	{r3, pc}

000b69f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b69f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b69f2:	7c00      	ldrb	r0, [r0, #16]
   b69f4:	f7fe fada 	bl	b4fac <hal_usart_available>
}
   b69f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69fc:	bd08      	pop	{r3, pc}

000b69fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b69fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6a00:	7c00      	ldrb	r0, [r0, #16]
   b6a02:	f7fe fae3 	bl	b4fcc <hal_usart_peek>
}
   b6a06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6a0a:	bd08      	pop	{r3, pc}

000b6a0c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6a0c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6a0e:	7c00      	ldrb	r0, [r0, #16]
   b6a10:	f7fe fad4 	bl	b4fbc <hal_usart_read>
}
   b6a14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6a18:	bd08      	pop	{r3, pc}

000b6a1a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6a1a:	7c00      	ldrb	r0, [r0, #16]
   b6a1c:	f7fe bade 	b.w	b4fdc <hal_usart_flush>

000b6a20 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a22:	7c45      	ldrb	r5, [r0, #17]
{
   b6a24:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a26:	b12d      	cbz	r5, b6a34 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6a28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6a2a:	b003      	add	sp, #12
   b6a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6a30:	f7fe bab4 	b.w	b4f9c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a34:	7c00      	ldrb	r0, [r0, #16]
   b6a36:	9101      	str	r1, [sp, #4]
   b6a38:	f7fe fae0 	bl	b4ffc <hal_usart_available_data_for_write>
   b6a3c:	2800      	cmp	r0, #0
   b6a3e:	9901      	ldr	r1, [sp, #4]
   b6a40:	dcf2      	bgt.n	b6a28 <_ZN11USARTSerial5writeEh+0x8>
}
   b6a42:	4628      	mov	r0, r5
   b6a44:	b003      	add	sp, #12
   b6a46:	bd30      	pop	{r4, r5, pc}

000b6a48 <_ZN11USARTSerialD0Ev>:
   b6a48:	b510      	push	{r4, lr}
   b6a4a:	2114      	movs	r1, #20
   b6a4c:	4604      	mov	r4, r0
   b6a4e:	f7fd fb24 	bl	b409a <_ZdlPvj>
   b6a52:	4620      	mov	r0, r4
   b6a54:	bd10      	pop	{r4, pc}
	...

000b6a58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6a58:	b510      	push	{r4, lr}
   b6a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a5e:	4604      	mov	r4, r0
   b6a60:	4608      	mov	r0, r1
   b6a62:	4611      	mov	r1, r2
   b6a64:	2200      	movs	r2, #0
   b6a66:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a6a:	4b04      	ldr	r3, [pc, #16]	; (b6a7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6a6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a6e:	2301      	movs	r3, #1
  _serial = serial;
   b6a70:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a72:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6a74:	f7fe fad2 	bl	b501c <hal_usart_init_ex>
}
   b6a78:	4620      	mov	r0, r4
   b6a7a:	bd10      	pop	{r4, pc}
   b6a7c:	000b8260 	.word	0x000b8260

000b6a80 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6a80:	7c00      	ldrb	r0, [r0, #16]
   b6a82:	2300      	movs	r3, #0
   b6a84:	f7fe bac2 	b.w	b500c <hal_usart_begin_config>

000b6a88 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6a88:	2200      	movs	r2, #0
   b6a8a:	f7ff bff9 	b.w	b6a80 <_ZN11USARTSerial5beginEmm>

000b6a8e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b6a8e:	7c00      	ldrb	r0, [r0, #16]
   b6a90:	f7fe ba7c 	b.w	b4f8c <hal_usart_end>

000b6a94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6a94:	4770      	bx	lr

000b6a96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a98:	4606      	mov	r6, r0
   b6a9a:	4615      	mov	r5, r2
   b6a9c:	460c      	mov	r4, r1
   b6a9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6aa0:	42bc      	cmp	r4, r7
   b6aa2:	d006      	beq.n	b6ab2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6aa4:	6833      	ldr	r3, [r6, #0]
   b6aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6aaa:	689b      	ldr	r3, [r3, #8]
   b6aac:	4630      	mov	r0, r6
   b6aae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6ab0:	e7f6      	b.n	b6aa0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6ab2:	4628      	mov	r0, r5
   b6ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ab6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6ab6:	7c00      	ldrb	r0, [r0, #16]
   b6ab8:	2200      	movs	r2, #0
   b6aba:	f7fe bacf 	b.w	b505c <hal_i2c_write>

000b6abe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6abe:	7c00      	ldrb	r0, [r0, #16]
   b6ac0:	2100      	movs	r1, #0
   b6ac2:	f7fe bad3 	b.w	b506c <hal_i2c_available>

000b6ac6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6ac6:	7c00      	ldrb	r0, [r0, #16]
   b6ac8:	2100      	movs	r1, #0
   b6aca:	f7fe bad7 	b.w	b507c <hal_i2c_read>

000b6ace <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6ace:	7c00      	ldrb	r0, [r0, #16]
   b6ad0:	2100      	movs	r1, #0
   b6ad2:	f7fe badb 	b.w	b508c <hal_i2c_peek>

000b6ad6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6ad6:	7c00      	ldrb	r0, [r0, #16]
   b6ad8:	2100      	movs	r1, #0
   b6ada:	f7fe badf 	b.w	b509c <hal_i2c_flush>

000b6ade <_ZN7TwoWireD0Ev>:
   b6ade:	b510      	push	{r4, lr}
   b6ae0:	2114      	movs	r1, #20
   b6ae2:	4604      	mov	r4, r0
   b6ae4:	f7fd fad9 	bl	b409a <_ZdlPvj>
   b6ae8:	4620      	mov	r0, r4
   b6aea:	bd10      	pop	{r4, pc}

000b6aec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6aec:	b538      	push	{r3, r4, r5, lr}
   b6aee:	4604      	mov	r4, r0
   b6af0:	4615      	mov	r5, r2
   b6af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6af6:	2200      	movs	r2, #0
   b6af8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6afc:	4b09      	ldr	r3, [pc, #36]	; (b6b24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6afe:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6b00:	4608      	mov	r0, r1
   b6b02:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6b04:	4629      	mov	r1, r5
   b6b06:	f7fe fad9 	bl	b50bc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6b0a:	30bf      	adds	r0, #191	; 0xbf
   b6b0c:	d108      	bne.n	b6b20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6b0e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6b10:	07db      	lsls	r3, r3, #31
   b6b12:	d505      	bpl.n	b6b20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6b14:	6868      	ldr	r0, [r5, #4]
   b6b16:	f7fe fc07 	bl	b5328 <free>
    free(conf.tx_buffer);
   b6b1a:	68e8      	ldr	r0, [r5, #12]
   b6b1c:	f7fe fc04 	bl	b5328 <free>
}
   b6b20:	4620      	mov	r0, r4
   b6b22:	bd38      	pop	{r3, r4, r5, pc}
   b6b24:	000b8290 	.word	0x000b8290

000b6b28 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6b28:	2300      	movs	r3, #0
   b6b2a:	7c00      	ldrb	r0, [r0, #16]
   b6b2c:	461a      	mov	r2, r3
   b6b2e:	4619      	mov	r1, r3
   b6b30:	f7fe ba7c 	b.w	b502c <hal_i2c_begin>

000b6b34 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6b36:	2200      	movs	r2, #0
   b6b38:	2314      	movs	r3, #20
   b6b3a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6b3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6b42:	780b      	ldrb	r3, [r1, #0]
   b6b44:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b48:	684b      	ldr	r3, [r1, #4]
   b6b4a:	9303      	str	r3, [sp, #12]
   b6b4c:	68cb      	ldr	r3, [r1, #12]
   b6b4e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6b50:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6b52:	7a0b      	ldrb	r3, [r1, #8]
   b6b54:	9305      	str	r3, [sp, #20]
   b6b56:	a901      	add	r1, sp, #4
   b6b58:	f7fe fab8 	bl	b50cc <hal_i2c_request_ex>
}
   b6b5c:	b007      	add	sp, #28
   b6b5e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b62 <_ZN7TwoWire11requestFromEhjh>:
{
   b6b62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6b64:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6b66:	f88d 1000 	strb.w	r1, [sp]
   b6b6a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6b6e:	9103      	str	r1, [sp, #12]
   b6b70:	bf18      	it	ne
   b6b72:	2301      	movne	r3, #1
   b6b74:	4669      	mov	r1, sp
    size_ = size;
   b6b76:	9201      	str	r2, [sp, #4]
   b6b78:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b7c:	f7ff ffda 	bl	b6b34 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6b80:	b005      	add	sp, #20
   b6b82:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b86 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6b86:	2301      	movs	r3, #1
   b6b88:	f7ff bfeb 	b.w	b6b62 <_ZN7TwoWire11requestFromEhjh>

000b6b8c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6b8c:	7c00      	ldrb	r0, [r0, #16]
   b6b8e:	2200      	movs	r2, #0
   b6b90:	f7fe ba54 	b.w	b503c <hal_i2c_begin_transmission>

000b6b94 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6b94:	7c00      	ldrb	r0, [r0, #16]
   b6b96:	2200      	movs	r2, #0
   b6b98:	f7fe ba58 	b.w	b504c <hal_i2c_end_transmission>

000b6b9c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6b9c:	2300      	movs	r3, #0
   b6b9e:	6840      	ldr	r0, [r0, #4]
   b6ba0:	461a      	mov	r2, r3
   b6ba2:	f7fe bb49 	b.w	b5238 <network_connect>

000b6ba6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6ba6:	6840      	ldr	r0, [r0, #4]
   b6ba8:	2200      	movs	r2, #0
   b6baa:	2102      	movs	r1, #2
   b6bac:	f7fe bb54 	b.w	b5258 <network_disconnect>

000b6bb0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6bb0:	2200      	movs	r2, #0
   b6bb2:	6840      	ldr	r0, [r0, #4]
   b6bb4:	4611      	mov	r1, r2
   b6bb6:	f7fe bb47 	b.w	b5248 <network_connecting>

000b6bba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6bba:	2200      	movs	r2, #0
   b6bbc:	6840      	ldr	r0, [r0, #4]
   b6bbe:	4611      	mov	r1, r2
   b6bc0:	f7fe bb52 	b.w	b5268 <network_ready>

000b6bc4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6bc4:	2300      	movs	r3, #0
   b6bc6:	6840      	ldr	r0, [r0, #4]
   b6bc8:	461a      	mov	r2, r3
   b6bca:	4619      	mov	r1, r3
   b6bcc:	f7fe bb54 	b.w	b5278 <network_on>

000b6bd0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6bd0:	2300      	movs	r3, #0
   b6bd2:	6840      	ldr	r0, [r0, #4]
   b6bd4:	461a      	mov	r2, r3
   b6bd6:	4619      	mov	r1, r3
   b6bd8:	f7fe bb56 	b.w	b5288 <network_off>

000b6bdc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6bdc:	6840      	ldr	r0, [r0, #4]
   b6bde:	2100      	movs	r1, #0
   b6be0:	f7fe bb7a 	b.w	b52d8 <network_is_on>

000b6be4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6be4:	6840      	ldr	r0, [r0, #4]
   b6be6:	2100      	movs	r1, #0
   b6be8:	f7fe bb7e 	b.w	b52e8 <network_is_off>

000b6bec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6bec:	6840      	ldr	r0, [r0, #4]
   b6bee:	2200      	movs	r2, #0
   b6bf0:	f081 0101 	eor.w	r1, r1, #1
   b6bf4:	f7fe bb50 	b.w	b5298 <network_listen>

000b6bf8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6bf8:	6840      	ldr	r0, [r0, #4]
   b6bfa:	2200      	movs	r2, #0
   b6bfc:	f7fe bb5c 	b.w	b52b8 <network_set_listen_timeout>

000b6c00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6c00:	2200      	movs	r2, #0
   b6c02:	6840      	ldr	r0, [r0, #4]
   b6c04:	4611      	mov	r1, r2
   b6c06:	f7fe bb5f 	b.w	b52c8 <network_get_listen_timeout>

000b6c0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6c0a:	2200      	movs	r2, #0
   b6c0c:	6840      	ldr	r0, [r0, #4]
   b6c0e:	4611      	mov	r1, r2
   b6c10:	f7fe bb4a 	b.w	b52a8 <network_listening>

000b6c14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c18:	b095      	sub	sp, #84	; 0x54
   b6c1a:	4614      	mov	r4, r2
   b6c1c:	460d      	mov	r5, r1
   b6c1e:	4607      	mov	r7, r0
    IPAddress addr;
   b6c20:	f7ff fdc8 	bl	b67b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c24:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c26:	221c      	movs	r2, #28
   b6c28:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c2a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c2c:	f000 ff62 	bl	b7af4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c30:	2340      	movs	r3, #64	; 0x40
   b6c32:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c34:	4620      	mov	r0, r4
   b6c36:	466b      	mov	r3, sp
   b6c38:	aa0c      	add	r2, sp, #48	; 0x30
   b6c3a:	2100      	movs	r1, #0
   b6c3c:	f7fe f936 	bl	b4eac <netdb_getaddrinfo>
    if (!r) {
   b6c40:	4604      	mov	r4, r0
   b6c42:	2800      	cmp	r0, #0
   b6c44:	d14b      	bne.n	b6cde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c46:	4602      	mov	r2, r0
   b6c48:	2101      	movs	r1, #1
   b6c4a:	6868      	ldr	r0, [r5, #4]
   b6c4c:	f7fe fb0c 	bl	b5268 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c50:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c52:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c54:	4622      	mov	r2, r4
   b6c56:	6868      	ldr	r0, [r5, #4]
   b6c58:	f7fe fb06 	bl	b5268 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c5c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c5e:	4681      	mov	r9, r0
        bool ok = false;
   b6c60:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c62:	2e00      	cmp	r6, #0
   b6c64:	d03b      	beq.n	b6cde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6c66:	2900      	cmp	r1, #0
   b6c68:	d139      	bne.n	b6cde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6c6a:	6873      	ldr	r3, [r6, #4]
   b6c6c:	2b02      	cmp	r3, #2
   b6c6e:	d003      	beq.n	b6c78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6c70:	2b0a      	cmp	r3, #10
   b6c72:	d011      	beq.n	b6c98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c74:	69f6      	ldr	r6, [r6, #28]
   b6c76:	e7f4      	b.n	b6c62 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6c78:	f1b8 0f00 	cmp.w	r8, #0
   b6c7c:	d0fa      	beq.n	b6c74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6c7e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6c80:	a806      	add	r0, sp, #24
   b6c82:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6c84:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6c86:	f7ff fdc3 	bl	b6810 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c8c:	1d3c      	adds	r4, r7, #4
   b6c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c90:	682b      	ldr	r3, [r5, #0]
   b6c92:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c94:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6c96:	e7ed      	b.n	b6c74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6c98:	f1b9 0f00 	cmp.w	r9, #0
   b6c9c:	d0ea      	beq.n	b6c74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6c9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ca0:	2210      	movs	r2, #16
   b6ca2:	a801      	add	r0, sp, #4
   b6ca4:	f000 ff26 	bl	b7af4 <memset>
                    a.v = 6;
   b6ca8:	2306      	movs	r3, #6
   b6caa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6cae:	ad01      	add	r5, sp, #4
   b6cb0:	f104 0308 	add.w	r3, r4, #8
   b6cb4:	3418      	adds	r4, #24
   b6cb6:	6818      	ldr	r0, [r3, #0]
   b6cb8:	6859      	ldr	r1, [r3, #4]
   b6cba:	462a      	mov	r2, r5
   b6cbc:	c203      	stmia	r2!, {r0, r1}
   b6cbe:	3308      	adds	r3, #8
   b6cc0:	42a3      	cmp	r3, r4
   b6cc2:	4615      	mov	r5, r2
   b6cc4:	d1f7      	bne.n	b6cb6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6cc6:	a901      	add	r1, sp, #4
   b6cc8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6cca:	ad07      	add	r5, sp, #28
   b6ccc:	f7ff fd80 	bl	b67d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cd2:	1d3c      	adds	r4, r7, #4
   b6cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cd6:	682b      	ldr	r3, [r5, #0]
   b6cd8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cda:	4649      	mov	r1, r9
   b6cdc:	e7ca      	b.n	b6c74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6cde:	9800      	ldr	r0, [sp, #0]
   b6ce0:	f7fe f8dc 	bl	b4e9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6ce4:	4638      	mov	r0, r7
   b6ce6:	b015      	add	sp, #84	; 0x54
   b6ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6cec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6cec:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6cee:	4a03      	ldr	r2, [pc, #12]	; (b6cfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6cf0:	601a      	str	r2, [r3, #0]
   b6cf2:	2200      	movs	r2, #0
   b6cf4:	605a      	str	r2, [r3, #4]

} // spark
   b6cf6:	4770      	bx	lr
   b6cf8:	2003e714 	.word	0x2003e714
   b6cfc:	000b82b8 	.word	0x000b82b8

000b6d00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6d00:	f100 0310 	add.w	r3, r0, #16
   b6d04:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6d06:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6d0a:	2901      	cmp	r1, #1
   b6d0c:	4618      	mov	r0, r3
   b6d0e:	d108      	bne.n	b6d22 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6d10:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6d14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6d18:	3a01      	subs	r2, #1
   b6d1a:	f103 0310 	add.w	r3, r3, #16
   b6d1e:	d1f2      	bne.n	b6d06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6d20:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6d22:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6d24:	bf04      	itt	eq
   b6d26:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6d2a:	1852      	addeq	r2, r2, r1
   b6d2c:	e7f4      	b.n	b6d18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6d2e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d2e:	b40e      	push	{r1, r2, r3}
   b6d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d32:	b088      	sub	sp, #32
   b6d34:	af00      	add	r7, sp, #0
   b6d36:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d3a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d3c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d40:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6d42:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d44:	462b      	mov	r3, r5
   b6d46:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6d48:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d4a:	f7fe fafd 	bl	b5348 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6d4e:	280f      	cmp	r0, #15
   b6d50:	687a      	ldr	r2, [r7, #4]
   b6d52:	d91a      	bls.n	b6d8a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6d54:	f100 0308 	add.w	r3, r0, #8
   b6d58:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6d5c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6d5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d62:	1c41      	adds	r1, r0, #1
   b6d64:	462b      	mov	r3, r5
   b6d66:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6d68:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d6a:	f7fe faed 	bl	b5348 <vsnprintf>
        if (n > 0) {
   b6d6e:	1e02      	subs	r2, r0, #0
   b6d70:	dd04      	ble.n	b6d7c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6d72:	6823      	ldr	r3, [r4, #0]
   b6d74:	4669      	mov	r1, sp
   b6d76:	689b      	ldr	r3, [r3, #8]
   b6d78:	4620      	mov	r0, r4
   b6d7a:	4798      	blx	r3
   b6d7c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6d7e:	3720      	adds	r7, #32
   b6d80:	46bd      	mov	sp, r7
   b6d82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6d86:	b003      	add	sp, #12
   b6d88:	4770      	bx	lr
    } else if (n > 0) {
   b6d8a:	2800      	cmp	r0, #0
   b6d8c:	d0f7      	beq.n	b6d7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6d8e:	6823      	ldr	r3, [r4, #0]
   b6d90:	4602      	mov	r2, r0
   b6d92:	689b      	ldr	r3, [r3, #8]
   b6d94:	f107 0110 	add.w	r1, r7, #16
   b6d98:	4620      	mov	r0, r4
   b6d9a:	4798      	blx	r3
}
   b6d9c:	e7ef      	b.n	b6d7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6d9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d9e:	b538      	push	{r3, r4, r5, lr}
   b6da0:	680b      	ldr	r3, [r1, #0]
   b6da2:	6003      	str	r3, [r0, #0]
   b6da4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6da6:	6843      	ldr	r3, [r0, #4]
   b6da8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6daa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6dac:	d008      	beq.n	b6dc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6dae:	b115      	cbz	r5, b6db6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6db0:	686b      	ldr	r3, [r5, #4]
   b6db2:	3301      	adds	r3, #1
   b6db4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6db6:	6860      	ldr	r0, [r4, #4]
   b6db8:	b108      	cbz	r0, b6dbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6dba:	f7fe fbe0 	bl	b557e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6dbe:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6dc0:	bd38      	pop	{r3, r4, r5, pc}

000b6dc2 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b6dc2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6dc4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6dc6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6dca:	689b      	ldr	r3, [r3, #8]
   b6dcc:	2201      	movs	r2, #1
   b6dce:	f10d 0107 	add.w	r1, sp, #7
   b6dd2:	4798      	blx	r3
}
   b6dd4:	b003      	add	sp, #12
   b6dd6:	f85d fb04 	ldr.w	pc, [sp], #4

000b6dda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6dda:	460b      	mov	r3, r1
   b6ddc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6dde:	2200      	movs	r2, #0
   b6de0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6de2:	e9c0 2200 	strd	r2, r2, [r0]
   b6de6:	4604      	mov	r4, r0
        t_ = t;
   b6de8:	6083      	str	r3, [r0, #8]
    if (t) {
   b6dea:	b90b      	cbnz	r3, b6df0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6dec:	4620      	mov	r0, r4
   b6dee:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6df0:	f7ff ffd5 	bl	b6d9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6df4:	e7fa      	b.n	b6dec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6df6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6df6:	6883      	ldr	r3, [r0, #8]
   b6df8:	b1eb      	cbz	r3, b6e36 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6dfa:	781a      	ldrb	r2, [r3, #0]
   b6dfc:	2a03      	cmp	r2, #3
   b6dfe:	d81a      	bhi.n	b6e36 <_ZNK5spark9JSONValue4typeEv+0x40>
   b6e00:	e8df f002 	tbb	[pc, r2]
   b6e04:	1b021704 	.word	0x1b021704
   b6e08:	2005      	movs	r0, #5
   b6e0a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6e0c:	6802      	ldr	r2, [r0, #0]
   b6e0e:	685b      	ldr	r3, [r3, #4]
   b6e10:	6852      	ldr	r2, [r2, #4]
   b6e12:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6e14:	282d      	cmp	r0, #45	; 0x2d
   b6e16:	d012      	beq.n	b6e3e <_ZNK5spark9JSONValue4typeEv+0x48>
   b6e18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6e1c:	2b09      	cmp	r3, #9
   b6e1e:	d90e      	bls.n	b6e3e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6e20:	2874      	cmp	r0, #116	; 0x74
   b6e22:	d00e      	beq.n	b6e42 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6e24:	2866      	cmp	r0, #102	; 0x66
   b6e26:	d00c      	beq.n	b6e42 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6e28:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6e2c:	4258      	negs	r0, r3
   b6e2e:	4158      	adcs	r0, r3
   b6e30:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6e32:	2006      	movs	r0, #6
   b6e34:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6e36:	2000      	movs	r0, #0
   b6e38:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6e3a:	2004      	movs	r0, #4
   b6e3c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6e3e:	2003      	movs	r0, #3
   b6e40:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6e42:	2002      	movs	r0, #2
}
   b6e44:	4770      	bx	lr

000b6e46 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6e46:	b510      	push	{r4, lr}
   b6e48:	4604      	mov	r4, r0
    switch (type()) {
   b6e4a:	f7ff ffd4 	bl	b6df6 <_ZNK5spark9JSONValue4typeEv>
   b6e4e:	2802      	cmp	r0, #2
   b6e50:	d00e      	beq.n	b6e70 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6e52:	1ec3      	subs	r3, r0, #3
   b6e54:	b2db      	uxtb	r3, r3
   b6e56:	2b01      	cmp	r3, #1
   b6e58:	d814      	bhi.n	b6e84 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6e5a:	6822      	ldr	r2, [r4, #0]
   b6e5c:	68a3      	ldr	r3, [r4, #8]
   b6e5e:	6850      	ldr	r0, [r2, #4]
   b6e60:	685b      	ldr	r3, [r3, #4]
}
   b6e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6e66:	220a      	movs	r2, #10
   b6e68:	2100      	movs	r1, #0
   b6e6a:	4418      	add	r0, r3
   b6e6c:	f000 bf54 	b.w	b7d18 <strtol>
        const char* const s = d_->json + t_->start;
   b6e70:	6822      	ldr	r2, [r4, #0]
   b6e72:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6e74:	6852      	ldr	r2, [r2, #4]
   b6e76:	685b      	ldr	r3, [r3, #4]
   b6e78:	5cd0      	ldrb	r0, [r2, r3]
   b6e7a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6e7e:	4258      	negs	r0, r3
   b6e80:	4158      	adcs	r0, r3
}
   b6e82:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6e84:	2000      	movs	r0, #0
   b6e86:	e7fc      	b.n	b6e82 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6e88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6e88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6e8a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6e8c:	e9c0 3300 	strd	r3, r3, [r0]
   b6e90:	4604      	mov	r4, r0
        n_(0) {
   b6e92:	480e      	ldr	r0, [pc, #56]	; (b6ecc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6e94:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6e98:	b1a9      	cbz	r1, b6ec6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6e9a:	780b      	ldrb	r3, [r1, #0]
   b6e9c:	2b03      	cmp	r3, #3
   b6e9e:	d006      	beq.n	b6eae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6ea0:	b98b      	cbnz	r3, b6ec6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6ea2:	6813      	ldr	r3, [r2, #0]
   b6ea4:	6858      	ldr	r0, [r3, #4]
   b6ea6:	684b      	ldr	r3, [r1, #4]
   b6ea8:	5cc3      	ldrb	r3, [r0, r3]
   b6eaa:	2b6e      	cmp	r3, #110	; 0x6e
   b6eac:	d007      	beq.n	b6ebe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6eae:	6813      	ldr	r3, [r2, #0]
   b6eb0:	684d      	ldr	r5, [r1, #4]
   b6eb2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6eb4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6eb6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6eb8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6eba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6ebc:	60e3      	str	r3, [r4, #12]
   b6ebe:	4611      	mov	r1, r2
   b6ec0:	4620      	mov	r0, r4
   b6ec2:	f7ff ff6c 	bl	b6d9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	bd38      	pop	{r3, r4, r5, pc}
   b6eca:	bf00      	nop
   b6ecc:	000b812e 	.word	0x000b812e

000b6ed0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6ed0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6ed2:	2500      	movs	r5, #0
   b6ed4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6ed6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6eda:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6ede:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6ee2:	4604      	mov	r4, r0
   b6ee4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6ee6:	b14b      	cbz	r3, b6efc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6ee8:	781a      	ldrb	r2, [r3, #0]
   b6eea:	2a01      	cmp	r2, #1
   b6eec:	d106      	bne.n	b6efc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6eee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6ef2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6ef4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6ef6:	6143      	str	r3, [r0, #20]
   b6ef8:	f7ff ff51 	bl	b6d9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6efc:	4620      	mov	r0, r4
   b6efe:	bd38      	pop	{r3, r4, r5, pc}

000b6f00 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6f00:	b510      	push	{r4, lr}
    if (!n_) {
   b6f02:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6f04:	4604      	mov	r4, r0
    if (!n_) {
   b6f06:	b163      	cbz	r3, b6f22 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6f08:	6880      	ldr	r0, [r0, #8]
   b6f0a:	60e0      	str	r0, [r4, #12]
    --n_;
   b6f0c:	3b01      	subs	r3, #1
    ++t_;
   b6f0e:	3010      	adds	r0, #16
   b6f10:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6f12:	6120      	str	r0, [r4, #16]
    --n_;
   b6f14:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6f16:	b113      	cbz	r3, b6f1e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6f18:	f7ff fef2 	bl	b6d00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6f1c:	60a0      	str	r0, [r4, #8]
    return true;
   b6f1e:	2001      	movs	r0, #1
   b6f20:	e000      	b.n	b6f24 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6f22:	4618      	mov	r0, r3
}
   b6f24:	bd10      	pop	{r4, pc}

000b6f26 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6f26:	b510      	push	{r4, lr}
    write('}');
   b6f28:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6f2a:	4604      	mov	r4, r0
    write('}');
   b6f2c:	f7ff ff49 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6f30:	2301      	movs	r3, #1
   b6f32:	7123      	strb	r3, [r4, #4]
}
   b6f34:	4620      	mov	r0, r4
   b6f36:	bd10      	pop	{r4, pc}

000b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6f38:	b508      	push	{r3, lr}
    switch (state_) {
   b6f3a:	7903      	ldrb	r3, [r0, #4]
   b6f3c:	2b01      	cmp	r3, #1
   b6f3e:	d002      	beq.n	b6f46 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6f40:	2b02      	cmp	r3, #2
   b6f42:	d004      	beq.n	b6f4e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6f44:	bd08      	pop	{r3, pc}
        write(',');
   b6f46:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6f48:	f7ff ff3b 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
}
   b6f4c:	e7fa      	b.n	b6f44 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6f4e:	213a      	movs	r1, #58	; 0x3a
   b6f50:	e7fa      	b.n	b6f48 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6f52 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6f52:	b510      	push	{r4, lr}
   b6f54:	4604      	mov	r4, r0
    writeSeparator();
   b6f56:	f7ff ffef 	bl	b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	217b      	movs	r1, #123	; 0x7b
   b6f5e:	f7ff ff30 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6f62:	2300      	movs	r3, #0
   b6f64:	7123      	strb	r3, [r4, #4]
}
   b6f66:	4620      	mov	r0, r4
   b6f68:	bd10      	pop	{r4, pc}
	...

000b6f6c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6f6c:	b513      	push	{r0, r1, r4, lr}
   b6f6e:	4604      	mov	r4, r0
   b6f70:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6f72:	f7ff ffe1 	bl	b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6f76:	6823      	ldr	r3, [r4, #0]
   b6f78:	9a01      	ldr	r2, [sp, #4]
   b6f7a:	68db      	ldr	r3, [r3, #12]
   b6f7c:	4903      	ldr	r1, [pc, #12]	; (b6f8c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6f7e:	4620      	mov	r0, r4
   b6f80:	4798      	blx	r3
    state_ = NEXT;
   b6f82:	2301      	movs	r3, #1
}
   b6f84:	4620      	mov	r0, r4
    state_ = NEXT;
   b6f86:	7123      	strb	r3, [r4, #4]
}
   b6f88:	b002      	add	sp, #8
   b6f8a:	bd10      	pop	{r4, pc}
   b6f8c:	000b810b 	.word	0x000b810b

000b6f90 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6f90:	b513      	push	{r0, r1, r4, lr}
   b6f92:	4604      	mov	r4, r0
   b6f94:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6f96:	f7ff ffcf 	bl	b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6f9a:	6823      	ldr	r3, [r4, #0]
   b6f9c:	9a01      	ldr	r2, [sp, #4]
   b6f9e:	68db      	ldr	r3, [r3, #12]
   b6fa0:	4903      	ldr	r1, [pc, #12]	; (b6fb0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6fa2:	4620      	mov	r0, r4
   b6fa4:	4798      	blx	r3
    state_ = NEXT;
   b6fa6:	2301      	movs	r3, #1
}
   b6fa8:	4620      	mov	r0, r4
    state_ = NEXT;
   b6faa:	7123      	strb	r3, [r4, #4]
}
   b6fac:	b002      	add	sp, #8
   b6fae:	bd10      	pop	{r4, pc}
   b6fb0:	000b82ec 	.word	0x000b82ec

000b6fb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6fb8:	460d      	mov	r5, r1
    write('"');
   b6fba:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6fbc:	4690      	mov	r8, r2
   b6fbe:	4604      	mov	r4, r0
    write('"');
   b6fc0:	f7ff feff 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6fc4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b706c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6fc8:	44a8      	add	r8, r5
    const char *s = str;
   b6fca:	462f      	mov	r7, r5
    while (s != end) {
   b6fcc:	4547      	cmp	r7, r8
   b6fce:	46ba      	mov	sl, r7
   b6fd0:	d03d      	beq.n	b704e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6fd2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6fd6:	2e22      	cmp	r6, #34	; 0x22
   b6fd8:	d006      	beq.n	b6fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6fda:	2e5c      	cmp	r6, #92	; 0x5c
   b6fdc:	d004      	beq.n	b6fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6fde:	4630      	mov	r0, r6
   b6fe0:	f000 fd58 	bl	b7a94 <isprint>
   b6fe4:	2800      	cmp	r0, #0
   b6fe6:	d1f1      	bne.n	b6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6fe8:	6823      	ldr	r3, [r4, #0]
   b6fea:	ebaa 0205 	sub.w	r2, sl, r5
   b6fee:	689b      	ldr	r3, [r3, #8]
   b6ff0:	4629      	mov	r1, r5
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	4798      	blx	r3
            write('\\');
   b6ff6:	215c      	movs	r1, #92	; 0x5c
   b6ff8:	4620      	mov	r0, r4
   b6ffa:	f7ff fee2 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6ffe:	2e0d      	cmp	r6, #13
   b7000:	d80a      	bhi.n	b7018 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7002:	2e07      	cmp	r6, #7
   b7004:	d91c      	bls.n	b7040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7006:	f1a6 0308 	sub.w	r3, r6, #8
   b700a:	2b05      	cmp	r3, #5
   b700c:	d818      	bhi.n	b7040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b700e:	e8df f003 	tbb	[pc, r3]
   b7012:	0f0d      	.short	0x0f0d
   b7014:	15131711 	.word	0x15131711
   b7018:	2e22      	cmp	r6, #34	; 0x22
   b701a:	d001      	beq.n	b7020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b701c:	2e5c      	cmp	r6, #92	; 0x5c
   b701e:	d10f      	bne.n	b7040 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7020:	4631      	mov	r1, r6
                write('b');
   b7022:	4620      	mov	r0, r4
   b7024:	f7ff fecd 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7028:	463d      	mov	r5, r7
    while (s != end) {
   b702a:	e7cf      	b.n	b6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b702c:	2162      	movs	r1, #98	; 0x62
   b702e:	e7f8      	b.n	b7022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7030:	2174      	movs	r1, #116	; 0x74
   b7032:	e7f6      	b.n	b7022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7034:	216e      	movs	r1, #110	; 0x6e
   b7036:	e7f4      	b.n	b7022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7038:	2166      	movs	r1, #102	; 0x66
   b703a:	e7f2      	b.n	b7022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b703c:	2172      	movs	r1, #114	; 0x72
   b703e:	e7f0      	b.n	b7022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7040:	6823      	ldr	r3, [r4, #0]
   b7042:	4632      	mov	r2, r6
   b7044:	68db      	ldr	r3, [r3, #12]
   b7046:	4649      	mov	r1, r9
   b7048:	4620      	mov	r0, r4
   b704a:	4798      	blx	r3
                break;
   b704c:	e7ec      	b.n	b7028 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b704e:	42bd      	cmp	r5, r7
   b7050:	d005      	beq.n	b705e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7052:	6823      	ldr	r3, [r4, #0]
   b7054:	1b7a      	subs	r2, r7, r5
   b7056:	689b      	ldr	r3, [r3, #8]
   b7058:	4629      	mov	r1, r5
   b705a:	4620      	mov	r0, r4
   b705c:	4798      	blx	r3
    }
    write('"');
   b705e:	2122      	movs	r1, #34	; 0x22
   b7060:	4620      	mov	r0, r4
   b7062:	f7ff feae 	bl	b6dc2 <_ZN5spark10JSONWriter5writeEc>
}
   b7066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b706a:	bf00      	nop
   b706c:	000b82ef 	.word	0x000b82ef

000b7070 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7070:	b513      	push	{r0, r1, r4, lr}
   b7072:	4604      	mov	r4, r0
   b7074:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7078:	f7ff ff5e 	bl	b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b707c:	4620      	mov	r0, r4
   b707e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7082:	f7ff ff97 	bl	b6fb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7086:	2302      	movs	r3, #2
}
   b7088:	4620      	mov	r0, r4
    state_ = VALUE;
   b708a:	7123      	strb	r3, [r4, #4]
}
   b708c:	b002      	add	sp, #8
   b708e:	bd10      	pop	{r4, pc}

000b7090 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7090:	b513      	push	{r0, r1, r4, lr}
   b7092:	4604      	mov	r4, r0
   b7094:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7098:	f7ff ff4e 	bl	b6f38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b709c:	4620      	mov	r0, r4
   b709e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b70a2:	f7ff ff87 	bl	b6fb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b70a6:	2301      	movs	r3, #1
}
   b70a8:	4620      	mov	r0, r4
    state_ = NEXT;
   b70aa:	7123      	strb	r3, [r4, #4]
}
   b70ac:	b002      	add	sp, #8
   b70ae:	bd10      	pop	{r4, pc}

000b70b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b70b0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b70b2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b70b4:	d902      	bls.n	b70bc <pinAvailable+0xc>
    return false;
   b70b6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b70b8:	b002      	add	sp, #8
   b70ba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b70bc:	f1a0 030b 	sub.w	r3, r0, #11
   b70c0:	2b02      	cmp	r3, #2
   b70c2:	d81a      	bhi.n	b70fa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b70c4:	4c17      	ldr	r4, [pc, #92]	; (b7124 <pinAvailable+0x74>)
   b70c6:	7821      	ldrb	r1, [r4, #0]
   b70c8:	f3bf 8f5b 	dmb	ish
   b70cc:	f011 0101 	ands.w	r1, r1, #1
   b70d0:	d10b      	bne.n	b70ea <pinAvailable+0x3a>
   b70d2:	4620      	mov	r0, r4
   b70d4:	9101      	str	r1, [sp, #4]
   b70d6:	f7fc ffef 	bl	b40b8 <__cxa_guard_acquire>
   b70da:	9901      	ldr	r1, [sp, #4]
   b70dc:	b128      	cbz	r0, b70ea <pinAvailable+0x3a>
   b70de:	4812      	ldr	r0, [pc, #72]	; (b7128 <pinAvailable+0x78>)
   b70e0:	f7fe f990 	bl	b5404 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b70e4:	4620      	mov	r0, r4
   b70e6:	f7fc ffec 	bl	b40c2 <__cxa_guard_release>
   b70ea:	4b0f      	ldr	r3, [pc, #60]	; (b7128 <pinAvailable+0x78>)
   b70ec:	7818      	ldrb	r0, [r3, #0]
   b70ee:	f7fd fffd 	bl	b50ec <hal_spi_is_enabled>
   b70f2:	2800      	cmp	r0, #0
   b70f4:	d1df      	bne.n	b70b6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b70f6:	2001      	movs	r0, #1
   b70f8:	e7de      	b.n	b70b8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b70fa:	2801      	cmp	r0, #1
   b70fc:	d809      	bhi.n	b7112 <pinAvailable+0x62>
   b70fe:	f000 f8ad 	bl	b725c <_Z19__fetch_global_Wirev>
   b7102:	2100      	movs	r1, #0
   b7104:	7c00      	ldrb	r0, [r0, #16]
   b7106:	f7fd ffd1 	bl	b50ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b710a:	f080 0001 	eor.w	r0, r0, #1
   b710e:	b2c0      	uxtb	r0, r0
   b7110:	e7d2      	b.n	b70b8 <pinAvailable+0x8>
   b7112:	3809      	subs	r0, #9
   b7114:	2801      	cmp	r0, #1
   b7116:	d8ee      	bhi.n	b70f6 <pinAvailable+0x46>
   b7118:	f000 f860 	bl	b71dc <_Z22__fetch_global_Serial1v>
   b711c:	7c00      	ldrb	r0, [r0, #16]
   b711e:	f7fd ff65 	bl	b4fec <hal_usart_is_enabled>
   b7122:	e7f2      	b.n	b710a <pinAvailable+0x5a>
   b7124:	2003e71c 	.word	0x2003e71c
   b7128:	2003e720 	.word	0x2003e720

000b712c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b712c:	2823      	cmp	r0, #35	; 0x23
{
   b712e:	b538      	push	{r3, r4, r5, lr}
   b7130:	4604      	mov	r4, r0
   b7132:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7134:	d80a      	bhi.n	b714c <pinMode+0x20>
   b7136:	29ff      	cmp	r1, #255	; 0xff
   b7138:	d008      	beq.n	b714c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b713a:	f7ff ffb9 	bl	b70b0 <pinAvailable>
   b713e:	b128      	cbz	r0, b714c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7140:	4629      	mov	r1, r5
   b7142:	4620      	mov	r0, r4
}
   b7144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7148:	f7fd beb8 	b.w	b4ebc <HAL_Pin_Mode>
}
   b714c:	bd38      	pop	{r3, r4, r5, pc}

000b714e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b714e:	b538      	push	{r3, r4, r5, lr}
   b7150:	4604      	mov	r4, r0
   b7152:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7154:	f7fd feba 	bl	b4ecc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7158:	28ff      	cmp	r0, #255	; 0xff
   b715a:	d010      	beq.n	b717e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b715c:	2806      	cmp	r0, #6
   b715e:	d804      	bhi.n	b716a <digitalWrite+0x1c>
   b7160:	234d      	movs	r3, #77	; 0x4d
   b7162:	fa23 f000 	lsr.w	r0, r3, r0
   b7166:	07c3      	lsls	r3, r0, #31
   b7168:	d409      	bmi.n	b717e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b716a:	4620      	mov	r0, r4
   b716c:	f7ff ffa0 	bl	b70b0 <pinAvailable>
   b7170:	b128      	cbz	r0, b717e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7172:	4629      	mov	r1, r5
   b7174:	4620      	mov	r0, r4
}
   b7176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b717a:	f7fd beaf 	b.w	b4edc <HAL_GPIO_Write>
}
   b717e:	bd38      	pop	{r3, r4, r5, pc}

000b7180 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7180:	b510      	push	{r4, lr}
   b7182:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7184:	f7fd fea2 	bl	b4ecc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7188:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b718a:	b2db      	uxtb	r3, r3
   b718c:	2b01      	cmp	r3, #1
   b718e:	d908      	bls.n	b71a2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7190:	4620      	mov	r0, r4
   b7192:	f7ff ff8d 	bl	b70b0 <pinAvailable>
   b7196:	b120      	cbz	r0, b71a2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7198:	4620      	mov	r0, r4
}
   b719a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b719e:	f7fd bea5 	b.w	b4eec <HAL_GPIO_Read>
}
   b71a2:	2000      	movs	r0, #0
   b71a4:	bd10      	pop	{r4, pc}

000b71a6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71a6:	4770      	bx	lr

000b71a8 <_Z20acquireSerial1Bufferv>:
{
   b71a8:	b538      	push	{r3, r4, r5, lr}
   b71aa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b71ac:	2514      	movs	r5, #20
   b71ae:	462a      	mov	r2, r5
   b71b0:	2100      	movs	r1, #0
   b71b2:	f000 fc9f 	bl	b7af4 <memset>
   b71b6:	8025      	strh	r5, [r4, #0]
   b71b8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71ba:	4907      	ldr	r1, [pc, #28]	; (b71d8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b71bc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71be:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b71c0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71c2:	f000 f871 	bl	b72a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71c6:	4904      	ldr	r1, [pc, #16]	; (b71d8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b71c8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71ca:	4628      	mov	r0, r5
   b71cc:	f000 f86c 	bl	b72a8 <_ZnajRKSt9nothrow_t>
    };
   b71d0:	60e0      	str	r0, [r4, #12]
}
   b71d2:	4620      	mov	r0, r4
   b71d4:	bd38      	pop	{r3, r4, r5, pc}
   b71d6:	bf00      	nop
   b71d8:	000b82f5 	.word	0x000b82f5

000b71dc <_Z22__fetch_global_Serial1v>:
{
   b71dc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71de:	4d0e      	ldr	r5, [pc, #56]	; (b7218 <_Z22__fetch_global_Serial1v+0x3c>)
   b71e0:	7829      	ldrb	r1, [r5, #0]
   b71e2:	f3bf 8f5b 	dmb	ish
   b71e6:	f011 0401 	ands.w	r4, r1, #1
{
   b71ea:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71ec:	d111      	bne.n	b7212 <_Z22__fetch_global_Serial1v+0x36>
   b71ee:	4628      	mov	r0, r5
   b71f0:	f7fc ff62 	bl	b40b8 <__cxa_guard_acquire>
   b71f4:	b168      	cbz	r0, b7212 <_Z22__fetch_global_Serial1v+0x36>
   b71f6:	a801      	add	r0, sp, #4
   b71f8:	f7ff ffd6 	bl	b71a8 <_Z20acquireSerial1Bufferv>
   b71fc:	aa01      	add	r2, sp, #4
   b71fe:	4621      	mov	r1, r4
   b7200:	4806      	ldr	r0, [pc, #24]	; (b721c <_Z22__fetch_global_Serial1v+0x40>)
   b7202:	f7ff fc29 	bl	b6a58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7206:	4628      	mov	r0, r5
   b7208:	f7fc ff5b 	bl	b40c2 <__cxa_guard_release>
   b720c:	4804      	ldr	r0, [pc, #16]	; (b7220 <_Z22__fetch_global_Serial1v+0x44>)
   b720e:	f000 fc3b 	bl	b7a88 <atexit>
    return serial1;
}
   b7212:	4802      	ldr	r0, [pc, #8]	; (b721c <_Z22__fetch_global_Serial1v+0x40>)
   b7214:	b007      	add	sp, #28
   b7216:	bd30      	pop	{r4, r5, pc}
   b7218:	2003e728 	.word	0x2003e728
   b721c:	2003e72c 	.word	0x2003e72c
   b7220:	000b71a7 	.word	0x000b71a7

000b7224 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7224:	4770      	bx	lr
	...

000b7228 <_Z17acquireWireBufferv>:
{
   b7228:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b722a:	4b0a      	ldr	r3, [pc, #40]	; (b7254 <_Z17acquireWireBufferv+0x2c>)
   b722c:	6003      	str	r3, [r0, #0]
   b722e:	2301      	movs	r3, #1
{
   b7230:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7232:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7234:	4908      	ldr	r1, [pc, #32]	; (b7258 <_Z17acquireWireBufferv+0x30>)
   b7236:	2020      	movs	r0, #32
   b7238:	f000 f836 	bl	b72a8 <_ZnajRKSt9nothrow_t>
	};
   b723c:	2520      	movs	r5, #32
   b723e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7240:	4905      	ldr	r1, [pc, #20]	; (b7258 <_Z17acquireWireBufferv+0x30>)
	};
   b7242:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7244:	4628      	mov	r0, r5
   b7246:	f000 f82f 	bl	b72a8 <_ZnajRKSt9nothrow_t>
	};
   b724a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b724e:	4620      	mov	r0, r4
   b7250:	bd38      	pop	{r3, r4, r5, pc}
   b7252:	bf00      	nop
   b7254:	00010018 	.word	0x00010018
   b7258:	000b82f5 	.word	0x000b82f5

000b725c <_Z19__fetch_global_Wirev>:
{
   b725c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b725e:	4d0e      	ldr	r5, [pc, #56]	; (b7298 <_Z19__fetch_global_Wirev+0x3c>)
   b7260:	7829      	ldrb	r1, [r5, #0]
   b7262:	f3bf 8f5b 	dmb	ish
   b7266:	f011 0401 	ands.w	r4, r1, #1
{
   b726a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b726c:	d111      	bne.n	b7292 <_Z19__fetch_global_Wirev+0x36>
   b726e:	4628      	mov	r0, r5
   b7270:	f7fc ff22 	bl	b40b8 <__cxa_guard_acquire>
   b7274:	b168      	cbz	r0, b7292 <_Z19__fetch_global_Wirev+0x36>
   b7276:	4668      	mov	r0, sp
   b7278:	f7ff ffd6 	bl	b7228 <_Z17acquireWireBufferv>
   b727c:	466a      	mov	r2, sp
   b727e:	4621      	mov	r1, r4
   b7280:	4806      	ldr	r0, [pc, #24]	; (b729c <_Z19__fetch_global_Wirev+0x40>)
   b7282:	f7ff fc33 	bl	b6aec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7286:	4628      	mov	r0, r5
   b7288:	f7fc ff1b 	bl	b40c2 <__cxa_guard_release>
   b728c:	4804      	ldr	r0, [pc, #16]	; (b72a0 <_Z19__fetch_global_Wirev+0x44>)
   b728e:	f000 fbfb 	bl	b7a88 <atexit>
	return wire;
}
   b7292:	4802      	ldr	r0, [pc, #8]	; (b729c <_Z19__fetch_global_Wirev+0x40>)
   b7294:	b007      	add	sp, #28
   b7296:	bd30      	pop	{r4, r5, pc}
   b7298:	2003e744 	.word	0x2003e744
   b729c:	2003e748 	.word	0x2003e748
   b72a0:	000b7225 	.word	0x000b7225

000b72a4 <_ZnwjRKSt9nothrow_t>:
   b72a4:	f7fc bef5 	b.w	b4092 <_Znwj>

000b72a8 <_ZnajRKSt9nothrow_t>:
   b72a8:	f7fc bef5 	b.w	b4096 <_Znaj>

000b72ac <__aeabi_drsub>:
   b72ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b72b0:	e002      	b.n	b72b8 <__adddf3>
   b72b2:	bf00      	nop

000b72b4 <__aeabi_dsub>:
   b72b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b72b8 <__adddf3>:
   b72b8:	b530      	push	{r4, r5, lr}
   b72ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b72be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b72c2:	ea94 0f05 	teq	r4, r5
   b72c6:	bf08      	it	eq
   b72c8:	ea90 0f02 	teqeq	r0, r2
   b72cc:	bf1f      	itttt	ne
   b72ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   b72d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b72d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b72da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b72de:	f000 80e2 	beq.w	b74a6 <__adddf3+0x1ee>
   b72e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b72e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b72ea:	bfb8      	it	lt
   b72ec:	426d      	neglt	r5, r5
   b72ee:	dd0c      	ble.n	b730a <__adddf3+0x52>
   b72f0:	442c      	add	r4, r5
   b72f2:	ea80 0202 	eor.w	r2, r0, r2
   b72f6:	ea81 0303 	eor.w	r3, r1, r3
   b72fa:	ea82 0000 	eor.w	r0, r2, r0
   b72fe:	ea83 0101 	eor.w	r1, r3, r1
   b7302:	ea80 0202 	eor.w	r2, r0, r2
   b7306:	ea81 0303 	eor.w	r3, r1, r3
   b730a:	2d36      	cmp	r5, #54	; 0x36
   b730c:	bf88      	it	hi
   b730e:	bd30      	pophi	{r4, r5, pc}
   b7310:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7314:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7318:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b731c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7320:	d002      	beq.n	b7328 <__adddf3+0x70>
   b7322:	4240      	negs	r0, r0
   b7324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7328:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b732c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7330:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7334:	d002      	beq.n	b733c <__adddf3+0x84>
   b7336:	4252      	negs	r2, r2
   b7338:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b733c:	ea94 0f05 	teq	r4, r5
   b7340:	f000 80a7 	beq.w	b7492 <__adddf3+0x1da>
   b7344:	f1a4 0401 	sub.w	r4, r4, #1
   b7348:	f1d5 0e20 	rsbs	lr, r5, #32
   b734c:	db0d      	blt.n	b736a <__adddf3+0xb2>
   b734e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7352:	fa22 f205 	lsr.w	r2, r2, r5
   b7356:	1880      	adds	r0, r0, r2
   b7358:	f141 0100 	adc.w	r1, r1, #0
   b735c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7360:	1880      	adds	r0, r0, r2
   b7362:	fa43 f305 	asr.w	r3, r3, r5
   b7366:	4159      	adcs	r1, r3
   b7368:	e00e      	b.n	b7388 <__adddf3+0xd0>
   b736a:	f1a5 0520 	sub.w	r5, r5, #32
   b736e:	f10e 0e20 	add.w	lr, lr, #32
   b7372:	2a01      	cmp	r2, #1
   b7374:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7378:	bf28      	it	cs
   b737a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b737e:	fa43 f305 	asr.w	r3, r3, r5
   b7382:	18c0      	adds	r0, r0, r3
   b7384:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b738c:	d507      	bpl.n	b739e <__adddf3+0xe6>
   b738e:	f04f 0e00 	mov.w	lr, #0
   b7392:	f1dc 0c00 	rsbs	ip, ip, #0
   b7396:	eb7e 0000 	sbcs.w	r0, lr, r0
   b739a:	eb6e 0101 	sbc.w	r1, lr, r1
   b739e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b73a2:	d31b      	bcc.n	b73dc <__adddf3+0x124>
   b73a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b73a8:	d30c      	bcc.n	b73c4 <__adddf3+0x10c>
   b73aa:	0849      	lsrs	r1, r1, #1
   b73ac:	ea5f 0030 	movs.w	r0, r0, rrx
   b73b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b73b4:	f104 0401 	add.w	r4, r4, #1
   b73b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b73bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b73c0:	f080 809a 	bcs.w	b74f8 <__adddf3+0x240>
   b73c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b73c8:	bf08      	it	eq
   b73ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b73ce:	f150 0000 	adcs.w	r0, r0, #0
   b73d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b73d6:	ea41 0105 	orr.w	r1, r1, r5
   b73da:	bd30      	pop	{r4, r5, pc}
   b73dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b73e0:	4140      	adcs	r0, r0
   b73e2:	eb41 0101 	adc.w	r1, r1, r1
   b73e6:	3c01      	subs	r4, #1
   b73e8:	bf28      	it	cs
   b73ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b73ee:	d2e9      	bcs.n	b73c4 <__adddf3+0x10c>
   b73f0:	f091 0f00 	teq	r1, #0
   b73f4:	bf04      	itt	eq
   b73f6:	4601      	moveq	r1, r0
   b73f8:	2000      	moveq	r0, #0
   b73fa:	fab1 f381 	clz	r3, r1
   b73fe:	bf08      	it	eq
   b7400:	3320      	addeq	r3, #32
   b7402:	f1a3 030b 	sub.w	r3, r3, #11
   b7406:	f1b3 0220 	subs.w	r2, r3, #32
   b740a:	da0c      	bge.n	b7426 <__adddf3+0x16e>
   b740c:	320c      	adds	r2, #12
   b740e:	dd08      	ble.n	b7422 <__adddf3+0x16a>
   b7410:	f102 0c14 	add.w	ip, r2, #20
   b7414:	f1c2 020c 	rsb	r2, r2, #12
   b7418:	fa01 f00c 	lsl.w	r0, r1, ip
   b741c:	fa21 f102 	lsr.w	r1, r1, r2
   b7420:	e00c      	b.n	b743c <__adddf3+0x184>
   b7422:	f102 0214 	add.w	r2, r2, #20
   b7426:	bfd8      	it	le
   b7428:	f1c2 0c20 	rsble	ip, r2, #32
   b742c:	fa01 f102 	lsl.w	r1, r1, r2
   b7430:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7434:	bfdc      	itt	le
   b7436:	ea41 010c 	orrle.w	r1, r1, ip
   b743a:	4090      	lslle	r0, r2
   b743c:	1ae4      	subs	r4, r4, r3
   b743e:	bfa2      	ittt	ge
   b7440:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7444:	4329      	orrge	r1, r5
   b7446:	bd30      	popge	{r4, r5, pc}
   b7448:	ea6f 0404 	mvn.w	r4, r4
   b744c:	3c1f      	subs	r4, #31
   b744e:	da1c      	bge.n	b748a <__adddf3+0x1d2>
   b7450:	340c      	adds	r4, #12
   b7452:	dc0e      	bgt.n	b7472 <__adddf3+0x1ba>
   b7454:	f104 0414 	add.w	r4, r4, #20
   b7458:	f1c4 0220 	rsb	r2, r4, #32
   b745c:	fa20 f004 	lsr.w	r0, r0, r4
   b7460:	fa01 f302 	lsl.w	r3, r1, r2
   b7464:	ea40 0003 	orr.w	r0, r0, r3
   b7468:	fa21 f304 	lsr.w	r3, r1, r4
   b746c:	ea45 0103 	orr.w	r1, r5, r3
   b7470:	bd30      	pop	{r4, r5, pc}
   b7472:	f1c4 040c 	rsb	r4, r4, #12
   b7476:	f1c4 0220 	rsb	r2, r4, #32
   b747a:	fa20 f002 	lsr.w	r0, r0, r2
   b747e:	fa01 f304 	lsl.w	r3, r1, r4
   b7482:	ea40 0003 	orr.w	r0, r0, r3
   b7486:	4629      	mov	r1, r5
   b7488:	bd30      	pop	{r4, r5, pc}
   b748a:	fa21 f004 	lsr.w	r0, r1, r4
   b748e:	4629      	mov	r1, r5
   b7490:	bd30      	pop	{r4, r5, pc}
   b7492:	f094 0f00 	teq	r4, #0
   b7496:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b749a:	bf06      	itte	eq
   b749c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b74a0:	3401      	addeq	r4, #1
   b74a2:	3d01      	subne	r5, #1
   b74a4:	e74e      	b.n	b7344 <__adddf3+0x8c>
   b74a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b74aa:	bf18      	it	ne
   b74ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b74b0:	d029      	beq.n	b7506 <__adddf3+0x24e>
   b74b2:	ea94 0f05 	teq	r4, r5
   b74b6:	bf08      	it	eq
   b74b8:	ea90 0f02 	teqeq	r0, r2
   b74bc:	d005      	beq.n	b74ca <__adddf3+0x212>
   b74be:	ea54 0c00 	orrs.w	ip, r4, r0
   b74c2:	bf04      	itt	eq
   b74c4:	4619      	moveq	r1, r3
   b74c6:	4610      	moveq	r0, r2
   b74c8:	bd30      	pop	{r4, r5, pc}
   b74ca:	ea91 0f03 	teq	r1, r3
   b74ce:	bf1e      	ittt	ne
   b74d0:	2100      	movne	r1, #0
   b74d2:	2000      	movne	r0, #0
   b74d4:	bd30      	popne	{r4, r5, pc}
   b74d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b74da:	d105      	bne.n	b74e8 <__adddf3+0x230>
   b74dc:	0040      	lsls	r0, r0, #1
   b74de:	4149      	adcs	r1, r1
   b74e0:	bf28      	it	cs
   b74e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b74e6:	bd30      	pop	{r4, r5, pc}
   b74e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b74ec:	bf3c      	itt	cc
   b74ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b74f2:	bd30      	popcc	{r4, r5, pc}
   b74f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b74fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7500:	f04f 0000 	mov.w	r0, #0
   b7504:	bd30      	pop	{r4, r5, pc}
   b7506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b750a:	bf1a      	itte	ne
   b750c:	4619      	movne	r1, r3
   b750e:	4610      	movne	r0, r2
   b7510:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7514:	bf1c      	itt	ne
   b7516:	460b      	movne	r3, r1
   b7518:	4602      	movne	r2, r0
   b751a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b751e:	bf06      	itte	eq
   b7520:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7524:	ea91 0f03 	teqeq	r1, r3
   b7528:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b752c:	bd30      	pop	{r4, r5, pc}
   b752e:	bf00      	nop

000b7530 <__aeabi_ui2d>:
   b7530:	f090 0f00 	teq	r0, #0
   b7534:	bf04      	itt	eq
   b7536:	2100      	moveq	r1, #0
   b7538:	4770      	bxeq	lr
   b753a:	b530      	push	{r4, r5, lr}
   b753c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7540:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7544:	f04f 0500 	mov.w	r5, #0
   b7548:	f04f 0100 	mov.w	r1, #0
   b754c:	e750      	b.n	b73f0 <__adddf3+0x138>
   b754e:	bf00      	nop

000b7550 <__aeabi_i2d>:
   b7550:	f090 0f00 	teq	r0, #0
   b7554:	bf04      	itt	eq
   b7556:	2100      	moveq	r1, #0
   b7558:	4770      	bxeq	lr
   b755a:	b530      	push	{r4, r5, lr}
   b755c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7560:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7564:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7568:	bf48      	it	mi
   b756a:	4240      	negmi	r0, r0
   b756c:	f04f 0100 	mov.w	r1, #0
   b7570:	e73e      	b.n	b73f0 <__adddf3+0x138>
   b7572:	bf00      	nop

000b7574 <__aeabi_f2d>:
   b7574:	0042      	lsls	r2, r0, #1
   b7576:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b757a:	ea4f 0131 	mov.w	r1, r1, rrx
   b757e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7582:	bf1f      	itttt	ne
   b7584:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7588:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b758c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7590:	4770      	bxne	lr
   b7592:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7596:	bf08      	it	eq
   b7598:	4770      	bxeq	lr
   b759a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b759e:	bf04      	itt	eq
   b75a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b75a4:	4770      	bxeq	lr
   b75a6:	b530      	push	{r4, r5, lr}
   b75a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b75ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b75b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b75b4:	e71c      	b.n	b73f0 <__adddf3+0x138>
   b75b6:	bf00      	nop

000b75b8 <__aeabi_ul2d>:
   b75b8:	ea50 0201 	orrs.w	r2, r0, r1
   b75bc:	bf08      	it	eq
   b75be:	4770      	bxeq	lr
   b75c0:	b530      	push	{r4, r5, lr}
   b75c2:	f04f 0500 	mov.w	r5, #0
   b75c6:	e00a      	b.n	b75de <__aeabi_l2d+0x16>

000b75c8 <__aeabi_l2d>:
   b75c8:	ea50 0201 	orrs.w	r2, r0, r1
   b75cc:	bf08      	it	eq
   b75ce:	4770      	bxeq	lr
   b75d0:	b530      	push	{r4, r5, lr}
   b75d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b75d6:	d502      	bpl.n	b75de <__aeabi_l2d+0x16>
   b75d8:	4240      	negs	r0, r0
   b75da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b75de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b75e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b75e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b75ea:	f43f aed8 	beq.w	b739e <__adddf3+0xe6>
   b75ee:	f04f 0203 	mov.w	r2, #3
   b75f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b75f6:	bf18      	it	ne
   b75f8:	3203      	addne	r2, #3
   b75fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b75fe:	bf18      	it	ne
   b7600:	3203      	addne	r2, #3
   b7602:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7606:	f1c2 0320 	rsb	r3, r2, #32
   b760a:	fa00 fc03 	lsl.w	ip, r0, r3
   b760e:	fa20 f002 	lsr.w	r0, r0, r2
   b7612:	fa01 fe03 	lsl.w	lr, r1, r3
   b7616:	ea40 000e 	orr.w	r0, r0, lr
   b761a:	fa21 f102 	lsr.w	r1, r1, r2
   b761e:	4414      	add	r4, r2
   b7620:	e6bd      	b.n	b739e <__adddf3+0xe6>
   b7622:	bf00      	nop

000b7624 <__aeabi_dmul>:
   b7624:	b570      	push	{r4, r5, r6, lr}
   b7626:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b762a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b762e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7632:	bf1d      	ittte	ne
   b7634:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7638:	ea94 0f0c 	teqne	r4, ip
   b763c:	ea95 0f0c 	teqne	r5, ip
   b7640:	f000 f8de 	bleq	b7800 <__aeabi_dmul+0x1dc>
   b7644:	442c      	add	r4, r5
   b7646:	ea81 0603 	eor.w	r6, r1, r3
   b764a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b764e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7652:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7656:	bf18      	it	ne
   b7658:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b765c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7664:	d038      	beq.n	b76d8 <__aeabi_dmul+0xb4>
   b7666:	fba0 ce02 	umull	ip, lr, r0, r2
   b766a:	f04f 0500 	mov.w	r5, #0
   b766e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7672:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7676:	fbe0 e503 	umlal	lr, r5, r0, r3
   b767a:	f04f 0600 	mov.w	r6, #0
   b767e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7682:	f09c 0f00 	teq	ip, #0
   b7686:	bf18      	it	ne
   b7688:	f04e 0e01 	orrne.w	lr, lr, #1
   b768c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7690:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7694:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7698:	d204      	bcs.n	b76a4 <__aeabi_dmul+0x80>
   b769a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b769e:	416d      	adcs	r5, r5
   b76a0:	eb46 0606 	adc.w	r6, r6, r6
   b76a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b76a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b76ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b76b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b76b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b76b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b76bc:	bf88      	it	hi
   b76be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b76c2:	d81e      	bhi.n	b7702 <__aeabi_dmul+0xde>
   b76c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b76c8:	bf08      	it	eq
   b76ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b76ce:	f150 0000 	adcs.w	r0, r0, #0
   b76d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b76d6:	bd70      	pop	{r4, r5, r6, pc}
   b76d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b76dc:	ea46 0101 	orr.w	r1, r6, r1
   b76e0:	ea40 0002 	orr.w	r0, r0, r2
   b76e4:	ea81 0103 	eor.w	r1, r1, r3
   b76e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b76ec:	bfc2      	ittt	gt
   b76ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   b76f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b76f6:	bd70      	popgt	{r4, r5, r6, pc}
   b76f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b76fc:	f04f 0e00 	mov.w	lr, #0
   b7700:	3c01      	subs	r4, #1
   b7702:	f300 80ab 	bgt.w	b785c <__aeabi_dmul+0x238>
   b7706:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b770a:	bfde      	ittt	le
   b770c:	2000      	movle	r0, #0
   b770e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7712:	bd70      	pople	{r4, r5, r6, pc}
   b7714:	f1c4 0400 	rsb	r4, r4, #0
   b7718:	3c20      	subs	r4, #32
   b771a:	da35      	bge.n	b7788 <__aeabi_dmul+0x164>
   b771c:	340c      	adds	r4, #12
   b771e:	dc1b      	bgt.n	b7758 <__aeabi_dmul+0x134>
   b7720:	f104 0414 	add.w	r4, r4, #20
   b7724:	f1c4 0520 	rsb	r5, r4, #32
   b7728:	fa00 f305 	lsl.w	r3, r0, r5
   b772c:	fa20 f004 	lsr.w	r0, r0, r4
   b7730:	fa01 f205 	lsl.w	r2, r1, r5
   b7734:	ea40 0002 	orr.w	r0, r0, r2
   b7738:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b773c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7744:	fa21 f604 	lsr.w	r6, r1, r4
   b7748:	eb42 0106 	adc.w	r1, r2, r6
   b774c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7750:	bf08      	it	eq
   b7752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7756:	bd70      	pop	{r4, r5, r6, pc}
   b7758:	f1c4 040c 	rsb	r4, r4, #12
   b775c:	f1c4 0520 	rsb	r5, r4, #32
   b7760:	fa00 f304 	lsl.w	r3, r0, r4
   b7764:	fa20 f005 	lsr.w	r0, r0, r5
   b7768:	fa01 f204 	lsl.w	r2, r1, r4
   b776c:	ea40 0002 	orr.w	r0, r0, r2
   b7770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7778:	f141 0100 	adc.w	r1, r1, #0
   b777c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7780:	bf08      	it	eq
   b7782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7786:	bd70      	pop	{r4, r5, r6, pc}
   b7788:	f1c4 0520 	rsb	r5, r4, #32
   b778c:	fa00 f205 	lsl.w	r2, r0, r5
   b7790:	ea4e 0e02 	orr.w	lr, lr, r2
   b7794:	fa20 f304 	lsr.w	r3, r0, r4
   b7798:	fa01 f205 	lsl.w	r2, r1, r5
   b779c:	ea43 0302 	orr.w	r3, r3, r2
   b77a0:	fa21 f004 	lsr.w	r0, r1, r4
   b77a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77a8:	fa21 f204 	lsr.w	r2, r1, r4
   b77ac:	ea20 0002 	bic.w	r0, r0, r2
   b77b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b77b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b77b8:	bf08      	it	eq
   b77ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b77be:	bd70      	pop	{r4, r5, r6, pc}
   b77c0:	f094 0f00 	teq	r4, #0
   b77c4:	d10f      	bne.n	b77e6 <__aeabi_dmul+0x1c2>
   b77c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b77ca:	0040      	lsls	r0, r0, #1
   b77cc:	eb41 0101 	adc.w	r1, r1, r1
   b77d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b77d4:	bf08      	it	eq
   b77d6:	3c01      	subeq	r4, #1
   b77d8:	d0f7      	beq.n	b77ca <__aeabi_dmul+0x1a6>
   b77da:	ea41 0106 	orr.w	r1, r1, r6
   b77de:	f095 0f00 	teq	r5, #0
   b77e2:	bf18      	it	ne
   b77e4:	4770      	bxne	lr
   b77e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b77ea:	0052      	lsls	r2, r2, #1
   b77ec:	eb43 0303 	adc.w	r3, r3, r3
   b77f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b77f4:	bf08      	it	eq
   b77f6:	3d01      	subeq	r5, #1
   b77f8:	d0f7      	beq.n	b77ea <__aeabi_dmul+0x1c6>
   b77fa:	ea43 0306 	orr.w	r3, r3, r6
   b77fe:	4770      	bx	lr
   b7800:	ea94 0f0c 	teq	r4, ip
   b7804:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7808:	bf18      	it	ne
   b780a:	ea95 0f0c 	teqne	r5, ip
   b780e:	d00c      	beq.n	b782a <__aeabi_dmul+0x206>
   b7810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7814:	bf18      	it	ne
   b7816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b781a:	d1d1      	bne.n	b77c0 <__aeabi_dmul+0x19c>
   b781c:	ea81 0103 	eor.w	r1, r1, r3
   b7820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7824:	f04f 0000 	mov.w	r0, #0
   b7828:	bd70      	pop	{r4, r5, r6, pc}
   b782a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b782e:	bf06      	itte	eq
   b7830:	4610      	moveq	r0, r2
   b7832:	4619      	moveq	r1, r3
   b7834:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7838:	d019      	beq.n	b786e <__aeabi_dmul+0x24a>
   b783a:	ea94 0f0c 	teq	r4, ip
   b783e:	d102      	bne.n	b7846 <__aeabi_dmul+0x222>
   b7840:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7844:	d113      	bne.n	b786e <__aeabi_dmul+0x24a>
   b7846:	ea95 0f0c 	teq	r5, ip
   b784a:	d105      	bne.n	b7858 <__aeabi_dmul+0x234>
   b784c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7850:	bf1c      	itt	ne
   b7852:	4610      	movne	r0, r2
   b7854:	4619      	movne	r1, r3
   b7856:	d10a      	bne.n	b786e <__aeabi_dmul+0x24a>
   b7858:	ea81 0103 	eor.w	r1, r1, r3
   b785c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7860:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7864:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7868:	f04f 0000 	mov.w	r0, #0
   b786c:	bd70      	pop	{r4, r5, r6, pc}
   b786e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7872:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7876:	bd70      	pop	{r4, r5, r6, pc}

000b7878 <__aeabi_ddiv>:
   b7878:	b570      	push	{r4, r5, r6, lr}
   b787a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b787e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7886:	bf1d      	ittte	ne
   b7888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b788c:	ea94 0f0c 	teqne	r4, ip
   b7890:	ea95 0f0c 	teqne	r5, ip
   b7894:	f000 f8a7 	bleq	b79e6 <__aeabi_ddiv+0x16e>
   b7898:	eba4 0405 	sub.w	r4, r4, r5
   b789c:	ea81 0e03 	eor.w	lr, r1, r3
   b78a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b78a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b78a8:	f000 8088 	beq.w	b79bc <__aeabi_ddiv+0x144>
   b78ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b78b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b78b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b78b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b78bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b78c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b78c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b78c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b78cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b78d0:	429d      	cmp	r5, r3
   b78d2:	bf08      	it	eq
   b78d4:	4296      	cmpeq	r6, r2
   b78d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b78da:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b78de:	d202      	bcs.n	b78e6 <__aeabi_ddiv+0x6e>
   b78e0:	085b      	lsrs	r3, r3, #1
   b78e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b78e6:	1ab6      	subs	r6, r6, r2
   b78e8:	eb65 0503 	sbc.w	r5, r5, r3
   b78ec:	085b      	lsrs	r3, r3, #1
   b78ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b78f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b78f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b78fa:	ebb6 0e02 	subs.w	lr, r6, r2
   b78fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7902:	bf22      	ittt	cs
   b7904:	1ab6      	subcs	r6, r6, r2
   b7906:	4675      	movcs	r5, lr
   b7908:	ea40 000c 	orrcs.w	r0, r0, ip
   b790c:	085b      	lsrs	r3, r3, #1
   b790e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7912:	ebb6 0e02 	subs.w	lr, r6, r2
   b7916:	eb75 0e03 	sbcs.w	lr, r5, r3
   b791a:	bf22      	ittt	cs
   b791c:	1ab6      	subcs	r6, r6, r2
   b791e:	4675      	movcs	r5, lr
   b7920:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7924:	085b      	lsrs	r3, r3, #1
   b7926:	ea4f 0232 	mov.w	r2, r2, rrx
   b792a:	ebb6 0e02 	subs.w	lr, r6, r2
   b792e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7932:	bf22      	ittt	cs
   b7934:	1ab6      	subcs	r6, r6, r2
   b7936:	4675      	movcs	r5, lr
   b7938:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b793c:	085b      	lsrs	r3, r3, #1
   b793e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7942:	ebb6 0e02 	subs.w	lr, r6, r2
   b7946:	eb75 0e03 	sbcs.w	lr, r5, r3
   b794a:	bf22      	ittt	cs
   b794c:	1ab6      	subcs	r6, r6, r2
   b794e:	4675      	movcs	r5, lr
   b7950:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7954:	ea55 0e06 	orrs.w	lr, r5, r6
   b7958:	d018      	beq.n	b798c <__aeabi_ddiv+0x114>
   b795a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b795e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7962:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7966:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b796a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b796e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7972:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7976:	d1c0      	bne.n	b78fa <__aeabi_ddiv+0x82>
   b7978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b797c:	d10b      	bne.n	b7996 <__aeabi_ddiv+0x11e>
   b797e:	ea41 0100 	orr.w	r1, r1, r0
   b7982:	f04f 0000 	mov.w	r0, #0
   b7986:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b798a:	e7b6      	b.n	b78fa <__aeabi_ddiv+0x82>
   b798c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7990:	bf04      	itt	eq
   b7992:	4301      	orreq	r1, r0
   b7994:	2000      	moveq	r0, #0
   b7996:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b799a:	bf88      	it	hi
   b799c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b79a0:	f63f aeaf 	bhi.w	b7702 <__aeabi_dmul+0xde>
   b79a4:	ebb5 0c03 	subs.w	ip, r5, r3
   b79a8:	bf04      	itt	eq
   b79aa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b79ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b79b2:	f150 0000 	adcs.w	r0, r0, #0
   b79b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b79ba:	bd70      	pop	{r4, r5, r6, pc}
   b79bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b79c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b79c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b79c8:	bfc2      	ittt	gt
   b79ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b79ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b79d2:	bd70      	popgt	{r4, r5, r6, pc}
   b79d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b79d8:	f04f 0e00 	mov.w	lr, #0
   b79dc:	3c01      	subs	r4, #1
   b79de:	e690      	b.n	b7702 <__aeabi_dmul+0xde>
   b79e0:	ea45 0e06 	orr.w	lr, r5, r6
   b79e4:	e68d      	b.n	b7702 <__aeabi_dmul+0xde>
   b79e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b79ea:	ea94 0f0c 	teq	r4, ip
   b79ee:	bf08      	it	eq
   b79f0:	ea95 0f0c 	teqeq	r5, ip
   b79f4:	f43f af3b 	beq.w	b786e <__aeabi_dmul+0x24a>
   b79f8:	ea94 0f0c 	teq	r4, ip
   b79fc:	d10a      	bne.n	b7a14 <__aeabi_ddiv+0x19c>
   b79fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7a02:	f47f af34 	bne.w	b786e <__aeabi_dmul+0x24a>
   b7a06:	ea95 0f0c 	teq	r5, ip
   b7a0a:	f47f af25 	bne.w	b7858 <__aeabi_dmul+0x234>
   b7a0e:	4610      	mov	r0, r2
   b7a10:	4619      	mov	r1, r3
   b7a12:	e72c      	b.n	b786e <__aeabi_dmul+0x24a>
   b7a14:	ea95 0f0c 	teq	r5, ip
   b7a18:	d106      	bne.n	b7a28 <__aeabi_ddiv+0x1b0>
   b7a1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7a1e:	f43f aefd 	beq.w	b781c <__aeabi_dmul+0x1f8>
   b7a22:	4610      	mov	r0, r2
   b7a24:	4619      	mov	r1, r3
   b7a26:	e722      	b.n	b786e <__aeabi_dmul+0x24a>
   b7a28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7a2c:	bf18      	it	ne
   b7a2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7a32:	f47f aec5 	bne.w	b77c0 <__aeabi_dmul+0x19c>
   b7a36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7a3a:	f47f af0d 	bne.w	b7858 <__aeabi_dmul+0x234>
   b7a3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7a42:	f47f aeeb 	bne.w	b781c <__aeabi_dmul+0x1f8>
   b7a46:	e712      	b.n	b786e <__aeabi_dmul+0x24a>

000b7a48 <__aeabi_d2uiz>:
   b7a48:	004a      	lsls	r2, r1, #1
   b7a4a:	d211      	bcs.n	b7a70 <__aeabi_d2uiz+0x28>
   b7a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7a50:	d211      	bcs.n	b7a76 <__aeabi_d2uiz+0x2e>
   b7a52:	d50d      	bpl.n	b7a70 <__aeabi_d2uiz+0x28>
   b7a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7a5c:	d40e      	bmi.n	b7a7c <__aeabi_d2uiz+0x34>
   b7a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7a6a:	fa23 f002 	lsr.w	r0, r3, r2
   b7a6e:	4770      	bx	lr
   b7a70:	f04f 0000 	mov.w	r0, #0
   b7a74:	4770      	bx	lr
   b7a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7a7a:	d102      	bne.n	b7a82 <__aeabi_d2uiz+0x3a>
   b7a7c:	f04f 30ff 	mov.w	r0, #4294967295
   b7a80:	4770      	bx	lr
   b7a82:	f04f 0000 	mov.w	r0, #0
   b7a86:	4770      	bx	lr

000b7a88 <atexit>:
   b7a88:	2300      	movs	r3, #0
   b7a8a:	4601      	mov	r1, r0
   b7a8c:	461a      	mov	r2, r3
   b7a8e:	4618      	mov	r0, r3
   b7a90:	f000 b94c 	b.w	b7d2c <__register_exitproc>

000b7a94 <isprint>:
   b7a94:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <isprint+0xc>)
   b7a96:	4418      	add	r0, r3
   b7a98:	7840      	ldrb	r0, [r0, #1]
   b7a9a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7a9e:	4770      	bx	lr
   b7aa0:	000b838a 	.word	0x000b838a

000b7aa4 <memcpy>:
   b7aa4:	440a      	add	r2, r1
   b7aa6:	4291      	cmp	r1, r2
   b7aa8:	f100 33ff 	add.w	r3, r0, #4294967295
   b7aac:	d100      	bne.n	b7ab0 <memcpy+0xc>
   b7aae:	4770      	bx	lr
   b7ab0:	b510      	push	{r4, lr}
   b7ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7aba:	4291      	cmp	r1, r2
   b7abc:	d1f9      	bne.n	b7ab2 <memcpy+0xe>
   b7abe:	bd10      	pop	{r4, pc}

000b7ac0 <memmove>:
   b7ac0:	4288      	cmp	r0, r1
   b7ac2:	b510      	push	{r4, lr}
   b7ac4:	eb01 0402 	add.w	r4, r1, r2
   b7ac8:	d902      	bls.n	b7ad0 <memmove+0x10>
   b7aca:	4284      	cmp	r4, r0
   b7acc:	4623      	mov	r3, r4
   b7ace:	d807      	bhi.n	b7ae0 <memmove+0x20>
   b7ad0:	1e43      	subs	r3, r0, #1
   b7ad2:	42a1      	cmp	r1, r4
   b7ad4:	d008      	beq.n	b7ae8 <memmove+0x28>
   b7ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ada:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ade:	e7f8      	b.n	b7ad2 <memmove+0x12>
   b7ae0:	4402      	add	r2, r0
   b7ae2:	4601      	mov	r1, r0
   b7ae4:	428a      	cmp	r2, r1
   b7ae6:	d100      	bne.n	b7aea <memmove+0x2a>
   b7ae8:	bd10      	pop	{r4, pc}
   b7aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7af2:	e7f7      	b.n	b7ae4 <memmove+0x24>

000b7af4 <memset>:
   b7af4:	4402      	add	r2, r0
   b7af6:	4603      	mov	r3, r0
   b7af8:	4293      	cmp	r3, r2
   b7afa:	d100      	bne.n	b7afe <memset+0xa>
   b7afc:	4770      	bx	lr
   b7afe:	f803 1b01 	strb.w	r1, [r3], #1
   b7b02:	e7f9      	b.n	b7af8 <memset+0x4>

000b7b04 <srand>:
   b7b04:	b538      	push	{r3, r4, r5, lr}
   b7b06:	4b10      	ldr	r3, [pc, #64]	; (b7b48 <srand+0x44>)
   b7b08:	681d      	ldr	r5, [r3, #0]
   b7b0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b0c:	4604      	mov	r4, r0
   b7b0e:	b9b3      	cbnz	r3, b7b3e <srand+0x3a>
   b7b10:	2018      	movs	r0, #24
   b7b12:	f7fd fc01 	bl	b5318 <malloc>
   b7b16:	4602      	mov	r2, r0
   b7b18:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b1a:	b920      	cbnz	r0, b7b26 <srand+0x22>
   b7b1c:	4b0b      	ldr	r3, [pc, #44]	; (b7b4c <srand+0x48>)
   b7b1e:	480c      	ldr	r0, [pc, #48]	; (b7b50 <srand+0x4c>)
   b7b20:	2142      	movs	r1, #66	; 0x42
   b7b22:	f7fd fc21 	bl	b5368 <__assert_func>
   b7b26:	490b      	ldr	r1, [pc, #44]	; (b7b54 <srand+0x50>)
   b7b28:	4b0b      	ldr	r3, [pc, #44]	; (b7b58 <srand+0x54>)
   b7b2a:	e9c0 1300 	strd	r1, r3, [r0]
   b7b2e:	4b0b      	ldr	r3, [pc, #44]	; (b7b5c <srand+0x58>)
   b7b30:	6083      	str	r3, [r0, #8]
   b7b32:	230b      	movs	r3, #11
   b7b34:	8183      	strh	r3, [r0, #12]
   b7b36:	2100      	movs	r1, #0
   b7b38:	2001      	movs	r0, #1
   b7b3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b40:	2200      	movs	r2, #0
   b7b42:	611c      	str	r4, [r3, #16]
   b7b44:	615a      	str	r2, [r3, #20]
   b7b46:	bd38      	pop	{r3, r4, r5, pc}
   b7b48:	2003e584 	.word	0x2003e584
   b7b4c:	000b82f6 	.word	0x000b82f6
   b7b50:	000b830d 	.word	0x000b830d
   b7b54:	abcd330e 	.word	0xabcd330e
   b7b58:	e66d1234 	.word	0xe66d1234
   b7b5c:	0005deec 	.word	0x0005deec

000b7b60 <strchr>:
   b7b60:	b2c9      	uxtb	r1, r1
   b7b62:	4603      	mov	r3, r0
   b7b64:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7b68:	b11a      	cbz	r2, b7b72 <strchr+0x12>
   b7b6a:	428a      	cmp	r2, r1
   b7b6c:	d1f9      	bne.n	b7b62 <strchr+0x2>
   b7b6e:	4618      	mov	r0, r3
   b7b70:	4770      	bx	lr
   b7b72:	2900      	cmp	r1, #0
   b7b74:	bf18      	it	ne
   b7b76:	2300      	movne	r3, #0
   b7b78:	e7f9      	b.n	b7b6e <strchr+0xe>

000b7b7a <strchrnul>:
   b7b7a:	b510      	push	{r4, lr}
   b7b7c:	4604      	mov	r4, r0
   b7b7e:	f7ff ffef 	bl	b7b60 <strchr>
   b7b82:	b918      	cbnz	r0, b7b8c <strchrnul+0x12>
   b7b84:	4620      	mov	r0, r4
   b7b86:	f000 f814 	bl	b7bb2 <strlen>
   b7b8a:	4420      	add	r0, r4
   b7b8c:	bd10      	pop	{r4, pc}

000b7b8e <strcmp>:
   b7b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7b92:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7b96:	2a01      	cmp	r2, #1
   b7b98:	bf28      	it	cs
   b7b9a:	429a      	cmpcs	r2, r3
   b7b9c:	d0f7      	beq.n	b7b8e <strcmp>
   b7b9e:	1ad0      	subs	r0, r2, r3
   b7ba0:	4770      	bx	lr

000b7ba2 <strcpy>:
   b7ba2:	4603      	mov	r3, r0
   b7ba4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ba8:	f803 2b01 	strb.w	r2, [r3], #1
   b7bac:	2a00      	cmp	r2, #0
   b7bae:	d1f9      	bne.n	b7ba4 <strcpy+0x2>
   b7bb0:	4770      	bx	lr

000b7bb2 <strlen>:
   b7bb2:	4603      	mov	r3, r0
   b7bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7bb8:	2a00      	cmp	r2, #0
   b7bba:	d1fb      	bne.n	b7bb4 <strlen+0x2>
   b7bbc:	1a18      	subs	r0, r3, r0
   b7bbe:	3801      	subs	r0, #1
   b7bc0:	4770      	bx	lr

000b7bc2 <strncmp>:
   b7bc2:	b510      	push	{r4, lr}
   b7bc4:	b17a      	cbz	r2, b7be6 <strncmp+0x24>
   b7bc6:	4603      	mov	r3, r0
   b7bc8:	3901      	subs	r1, #1
   b7bca:	1884      	adds	r4, r0, r2
   b7bcc:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7bd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7bd4:	4290      	cmp	r0, r2
   b7bd6:	d101      	bne.n	b7bdc <strncmp+0x1a>
   b7bd8:	42a3      	cmp	r3, r4
   b7bda:	d101      	bne.n	b7be0 <strncmp+0x1e>
   b7bdc:	1a80      	subs	r0, r0, r2
   b7bde:	bd10      	pop	{r4, pc}
   b7be0:	2800      	cmp	r0, #0
   b7be2:	d1f3      	bne.n	b7bcc <strncmp+0xa>
   b7be4:	e7fa      	b.n	b7bdc <strncmp+0x1a>
   b7be6:	4610      	mov	r0, r2
   b7be8:	e7f9      	b.n	b7bde <strncmp+0x1c>

000b7bea <strrchr>:
   b7bea:	b538      	push	{r3, r4, r5, lr}
   b7bec:	4603      	mov	r3, r0
   b7bee:	460c      	mov	r4, r1
   b7bf0:	b969      	cbnz	r1, b7c0e <strrchr+0x24>
   b7bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7bf6:	f7ff bfb3 	b.w	b7b60 <strchr>
   b7bfa:	1c43      	adds	r3, r0, #1
   b7bfc:	4605      	mov	r5, r0
   b7bfe:	4621      	mov	r1, r4
   b7c00:	4618      	mov	r0, r3
   b7c02:	f7ff ffad 	bl	b7b60 <strchr>
   b7c06:	2800      	cmp	r0, #0
   b7c08:	d1f7      	bne.n	b7bfa <strrchr+0x10>
   b7c0a:	4628      	mov	r0, r5
   b7c0c:	bd38      	pop	{r3, r4, r5, pc}
   b7c0e:	2500      	movs	r5, #0
   b7c10:	e7f5      	b.n	b7bfe <strrchr+0x14>
	...

000b7c14 <_strtol_l.constprop.0>:
   b7c14:	2b01      	cmp	r3, #1
   b7c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7c1a:	d001      	beq.n	b7c20 <_strtol_l.constprop.0+0xc>
   b7c1c:	2b24      	cmp	r3, #36	; 0x24
   b7c1e:	d906      	bls.n	b7c2e <_strtol_l.constprop.0+0x1a>
   b7c20:	f7fd fb9a 	bl	b5358 <__errno>
   b7c24:	2316      	movs	r3, #22
   b7c26:	6003      	str	r3, [r0, #0]
   b7c28:	2000      	movs	r0, #0
   b7c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7d14 <_strtol_l.constprop.0+0x100>
   b7c32:	460d      	mov	r5, r1
   b7c34:	462e      	mov	r6, r5
   b7c36:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7c3a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7c3e:	f017 0708 	ands.w	r7, r7, #8
   b7c42:	d1f7      	bne.n	b7c34 <_strtol_l.constprop.0+0x20>
   b7c44:	2c2d      	cmp	r4, #45	; 0x2d
   b7c46:	d132      	bne.n	b7cae <_strtol_l.constprop.0+0x9a>
   b7c48:	782c      	ldrb	r4, [r5, #0]
   b7c4a:	2701      	movs	r7, #1
   b7c4c:	1cb5      	adds	r5, r6, #2
   b7c4e:	2b00      	cmp	r3, #0
   b7c50:	d05b      	beq.n	b7d0a <_strtol_l.constprop.0+0xf6>
   b7c52:	2b10      	cmp	r3, #16
   b7c54:	d109      	bne.n	b7c6a <_strtol_l.constprop.0+0x56>
   b7c56:	2c30      	cmp	r4, #48	; 0x30
   b7c58:	d107      	bne.n	b7c6a <_strtol_l.constprop.0+0x56>
   b7c5a:	782c      	ldrb	r4, [r5, #0]
   b7c5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7c60:	2c58      	cmp	r4, #88	; 0x58
   b7c62:	d14d      	bne.n	b7d00 <_strtol_l.constprop.0+0xec>
   b7c64:	786c      	ldrb	r4, [r5, #1]
   b7c66:	2310      	movs	r3, #16
   b7c68:	3502      	adds	r5, #2
   b7c6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7c6e:	f108 38ff 	add.w	r8, r8, #4294967295
   b7c72:	f04f 0c00 	mov.w	ip, #0
   b7c76:	fbb8 f9f3 	udiv	r9, r8, r3
   b7c7a:	4666      	mov	r6, ip
   b7c7c:	fb03 8a19 	mls	sl, r3, r9, r8
   b7c80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7c84:	f1be 0f09 	cmp.w	lr, #9
   b7c88:	d816      	bhi.n	b7cb8 <_strtol_l.constprop.0+0xa4>
   b7c8a:	4674      	mov	r4, lr
   b7c8c:	42a3      	cmp	r3, r4
   b7c8e:	dd24      	ble.n	b7cda <_strtol_l.constprop.0+0xc6>
   b7c90:	f1bc 0f00 	cmp.w	ip, #0
   b7c94:	db1e      	blt.n	b7cd4 <_strtol_l.constprop.0+0xc0>
   b7c96:	45b1      	cmp	r9, r6
   b7c98:	d31c      	bcc.n	b7cd4 <_strtol_l.constprop.0+0xc0>
   b7c9a:	d101      	bne.n	b7ca0 <_strtol_l.constprop.0+0x8c>
   b7c9c:	45a2      	cmp	sl, r4
   b7c9e:	db19      	blt.n	b7cd4 <_strtol_l.constprop.0+0xc0>
   b7ca0:	fb06 4603 	mla	r6, r6, r3, r4
   b7ca4:	f04f 0c01 	mov.w	ip, #1
   b7ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7cac:	e7e8      	b.n	b7c80 <_strtol_l.constprop.0+0x6c>
   b7cae:	2c2b      	cmp	r4, #43	; 0x2b
   b7cb0:	bf04      	itt	eq
   b7cb2:	782c      	ldrbeq	r4, [r5, #0]
   b7cb4:	1cb5      	addeq	r5, r6, #2
   b7cb6:	e7ca      	b.n	b7c4e <_strtol_l.constprop.0+0x3a>
   b7cb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7cbc:	f1be 0f19 	cmp.w	lr, #25
   b7cc0:	d801      	bhi.n	b7cc6 <_strtol_l.constprop.0+0xb2>
   b7cc2:	3c37      	subs	r4, #55	; 0x37
   b7cc4:	e7e2      	b.n	b7c8c <_strtol_l.constprop.0+0x78>
   b7cc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7cca:	f1be 0f19 	cmp.w	lr, #25
   b7cce:	d804      	bhi.n	b7cda <_strtol_l.constprop.0+0xc6>
   b7cd0:	3c57      	subs	r4, #87	; 0x57
   b7cd2:	e7db      	b.n	b7c8c <_strtol_l.constprop.0+0x78>
   b7cd4:	f04f 3cff 	mov.w	ip, #4294967295
   b7cd8:	e7e6      	b.n	b7ca8 <_strtol_l.constprop.0+0x94>
   b7cda:	f1bc 0f00 	cmp.w	ip, #0
   b7cde:	da05      	bge.n	b7cec <_strtol_l.constprop.0+0xd8>
   b7ce0:	2322      	movs	r3, #34	; 0x22
   b7ce2:	6003      	str	r3, [r0, #0]
   b7ce4:	4646      	mov	r6, r8
   b7ce6:	b942      	cbnz	r2, b7cfa <_strtol_l.constprop.0+0xe6>
   b7ce8:	4630      	mov	r0, r6
   b7cea:	e79e      	b.n	b7c2a <_strtol_l.constprop.0+0x16>
   b7cec:	b107      	cbz	r7, b7cf0 <_strtol_l.constprop.0+0xdc>
   b7cee:	4276      	negs	r6, r6
   b7cf0:	2a00      	cmp	r2, #0
   b7cf2:	d0f9      	beq.n	b7ce8 <_strtol_l.constprop.0+0xd4>
   b7cf4:	f1bc 0f00 	cmp.w	ip, #0
   b7cf8:	d000      	beq.n	b7cfc <_strtol_l.constprop.0+0xe8>
   b7cfa:	1e69      	subs	r1, r5, #1
   b7cfc:	6011      	str	r1, [r2, #0]
   b7cfe:	e7f3      	b.n	b7ce8 <_strtol_l.constprop.0+0xd4>
   b7d00:	2430      	movs	r4, #48	; 0x30
   b7d02:	2b00      	cmp	r3, #0
   b7d04:	d1b1      	bne.n	b7c6a <_strtol_l.constprop.0+0x56>
   b7d06:	2308      	movs	r3, #8
   b7d08:	e7af      	b.n	b7c6a <_strtol_l.constprop.0+0x56>
   b7d0a:	2c30      	cmp	r4, #48	; 0x30
   b7d0c:	d0a5      	beq.n	b7c5a <_strtol_l.constprop.0+0x46>
   b7d0e:	230a      	movs	r3, #10
   b7d10:	e7ab      	b.n	b7c6a <_strtol_l.constprop.0+0x56>
   b7d12:	bf00      	nop
   b7d14:	000b838b 	.word	0x000b838b

000b7d18 <strtol>:
   b7d18:	4613      	mov	r3, r2
   b7d1a:	460a      	mov	r2, r1
   b7d1c:	4601      	mov	r1, r0
   b7d1e:	4802      	ldr	r0, [pc, #8]	; (b7d28 <strtol+0x10>)
   b7d20:	6800      	ldr	r0, [r0, #0]
   b7d22:	f7ff bf77 	b.w	b7c14 <_strtol_l.constprop.0>
   b7d26:	bf00      	nop
   b7d28:	2003e584 	.word	0x2003e584

000b7d2c <__register_exitproc>:
   b7d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7d30:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7dec <__register_exitproc+0xc0>
   b7d34:	4606      	mov	r6, r0
   b7d36:	f8d8 0000 	ldr.w	r0, [r8]
   b7d3a:	461f      	mov	r7, r3
   b7d3c:	460d      	mov	r5, r1
   b7d3e:	4691      	mov	r9, r2
   b7d40:	f000 f856 	bl	b7df0 <__retarget_lock_acquire_recursive>
   b7d44:	4b25      	ldr	r3, [pc, #148]	; (b7ddc <__register_exitproc+0xb0>)
   b7d46:	681c      	ldr	r4, [r3, #0]
   b7d48:	b934      	cbnz	r4, b7d58 <__register_exitproc+0x2c>
   b7d4a:	4c25      	ldr	r4, [pc, #148]	; (b7de0 <__register_exitproc+0xb4>)
   b7d4c:	601c      	str	r4, [r3, #0]
   b7d4e:	4b25      	ldr	r3, [pc, #148]	; (b7de4 <__register_exitproc+0xb8>)
   b7d50:	b113      	cbz	r3, b7d58 <__register_exitproc+0x2c>
   b7d52:	681b      	ldr	r3, [r3, #0]
   b7d54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7d58:	6863      	ldr	r3, [r4, #4]
   b7d5a:	2b1f      	cmp	r3, #31
   b7d5c:	dd07      	ble.n	b7d6e <__register_exitproc+0x42>
   b7d5e:	f8d8 0000 	ldr.w	r0, [r8]
   b7d62:	f000 f847 	bl	b7df4 <__retarget_lock_release_recursive>
   b7d66:	f04f 30ff 	mov.w	r0, #4294967295
   b7d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7d6e:	b34e      	cbz	r6, b7dc4 <__register_exitproc+0x98>
   b7d70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7d74:	b988      	cbnz	r0, b7d9a <__register_exitproc+0x6e>
   b7d76:	4b1c      	ldr	r3, [pc, #112]	; (b7de8 <__register_exitproc+0xbc>)
   b7d78:	b923      	cbnz	r3, b7d84 <__register_exitproc+0x58>
   b7d7a:	f8d8 0000 	ldr.w	r0, [r8]
   b7d7e:	f000 f838 	bl	b7df2 <__retarget_lock_release>
   b7d82:	e7f0      	b.n	b7d66 <__register_exitproc+0x3a>
   b7d84:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7d88:	f7fd fac6 	bl	b5318 <malloc>
   b7d8c:	2800      	cmp	r0, #0
   b7d8e:	d0f4      	beq.n	b7d7a <__register_exitproc+0x4e>
   b7d90:	2300      	movs	r3, #0
   b7d92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7d96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7d9a:	6863      	ldr	r3, [r4, #4]
   b7d9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7da0:	2201      	movs	r2, #1
   b7da2:	409a      	lsls	r2, r3
   b7da4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7da8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7dac:	4313      	orrs	r3, r2
   b7dae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7db2:	2e02      	cmp	r6, #2
   b7db4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7db8:	bf02      	ittt	eq
   b7dba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7dbe:	4313      	orreq	r3, r2
   b7dc0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7dc4:	6863      	ldr	r3, [r4, #4]
   b7dc6:	f8d8 0000 	ldr.w	r0, [r8]
   b7dca:	1c5a      	adds	r2, r3, #1
   b7dcc:	3302      	adds	r3, #2
   b7dce:	6062      	str	r2, [r4, #4]
   b7dd0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7dd4:	f000 f80e 	bl	b7df4 <__retarget_lock_release_recursive>
   b7dd8:	2000      	movs	r0, #0
   b7dda:	e7c6      	b.n	b7d6a <__register_exitproc+0x3e>
   b7ddc:	2003e7e8 	.word	0x2003e7e8
   b7de0:	2003e75c 	.word	0x2003e75c
   b7de4:	00000000 	.word	0x00000000
   b7de8:	000b5319 	.word	0x000b5319
   b7dec:	2003e5e8 	.word	0x2003e5e8

000b7df0 <__retarget_lock_acquire_recursive>:
   b7df0:	4770      	bx	lr

000b7df2 <__retarget_lock_release>:
   b7df2:	4770      	bx	lr

000b7df4 <__retarget_lock_release_recursive>:
   b7df4:	4770      	bx	lr

000b7df6 <link_code_end>:
	...

000b7df8 <dynalib_user>:
   b7df8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7e08:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7e18:	7620 7269 7574 6c61 6900 636e 6572 7361      virtual.increas
   b7e28:	6465 7420 006f 6564 7263 6165 6573 2064     ed to.decreased 
   b7e38:	6f74 4500 7272 726f 6920 206e 636f 7563     to.Error in occu
   b7e48:	6170 636e 2079 7473 7461 0065 634f 7563     pancy state.Occu
   b7e58:	6170 636e 2079 7325 2520 0069               pancy %s %i.

000b7e64 <_ZTV13PeopleCounter>:
	...
   b7e6c:	40c9 000b 40cb 000b 6553 736e 726f 5420     .@...@..Sensor T
   b7e7c:	6d69 6465 6f20 7475 4f00 6363 7075 6e61     imed out.Occupan
   b7e8c:	7963 7320 6174 6574 6320 6168 676e 6465     cy state changed
   b7e9c:	6620 6f72 206d 6425 7420 206f 6425 2820      from %d to %d (
   b7eac:	6925 6d6d 2f20 2520 6d69 296d 5400 7261     %imm / %imm).Tar
   b7ebc:	6567 2074 6f7a 656e 6920 2073 6c63 6165     get zone is clea
   b7ecc:	2072 6977 6874 7a20 6e6f 3165 6120 2074     r with zone1 at 
   b7edc:	6925 6d6d 6120 646e 7a20 6e6f 3265 6120     %imm and zone2 a
   b7eec:	2074 6925 6d6d 5400 7261 6567 2074 6f7a     t %imm.Target zo
   b7efc:	656e 6e20 746f 6320 656c 7261 2d20 7720     ne not clear - w
   b7f0c:	6c69 206c 6177 7469 7420 6e65 7320 6365     ill wait ten sec
   b7f1c:	6e6f 7364 6120 646e 7420 7972 6120 6167     onds and try aga
   b7f2c:	6e69 5300 6e65 6f73 2072 7265 6f72 2072     in.Sensor error 
   b7f3c:	6572 6573 2074 6e69 3120 2030 6573 6f63     reset in 10 seco
   b7f4c:	646e 0073 6553 736e 726f 6920 696e 2074     nds.Sensor init 
   b7f5c:	7573 6363 7365 6673 6c75 796c 4200 6675     successfully.Buf
   b7f6c:	6566 2072 7369 6620 6c75 206c 202d 6977     fer is full - wi
   b7f7c:	6c6c 6e20 776f 6320 6c61 6269 6172 6574     ll now calibrate
   b7f8c:	4300 6c61 6269 6172 6974 6e6f 4320 6d6f     .Calibration Com
   b7f9c:	6c70 7465 0065 6e49 7469 6169 206c 6163     plete.Initial ca
   b7fac:	696c 7262 7461 6f69 206e 6166 6c69 6465     libration failed
   b7fbc:	2d20 7720 6961 2074 3031 7320 6365 2073      - wait 10 secs 
   b7fcc:	6e61 2064 6572 6573 0074 0000               and reset...

000b7fd8 <_ZTV9TofSensor>:
	...
   b7fe0:	41e9 000b 41eb 000b                         .A...A..

000b7fe8 <_ZTVN5spark10LogHandlerE>:
	...
   b7ff8:	40a1 000b 446d 000b                         .@..mD..

000b8000 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8008:	4479 000b 44ad 000b 62c9 000b 446f 000b     yD...D...b..oD..

000b8018 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b8018:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b8028:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b8038:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b8048:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b8058:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b8068:	0200 ffc7 009b 0000 0001 0000               ............

000b8074 <_ZTV7VL53L1X>:
	...
   b807c:	4d9f 000b 4d7f 000b 4d69 000b 4d25 000b     .M...M..iM..%M..
   b808c:	4d5b 000b 4d41 000b 4d27 000b               [M..AM..'M..

000b8098 <_ZTVN5spark13EthernetClassE>:
	...
   b80a0:	53e7 000b 53dd 000b 53d3 000b 53c9 000b     .S...S...S...S..
   b80b0:	53bd 000b 53b1 000b 6bdd 000b 6be5 000b     .S...S...k...k..
   b80c0:	53a5 000b 539d 000b 5393 000b 5389 000b     .S...S...S...S..
   b80d0:	6c15 000b 6162 6475 5300 7265 6169 006c     .l..baud.Serial.
   b80e0:	6553 6972 6c61 0031 534a 4e4f 7453 6572     Serial1.JSONStre
   b80f0:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   b8100:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   b8110:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   b8120:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
   b8130:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   b8140:	6c69 0000                                   il..

000b8144 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b814c:	5715 000b 573b 000b 56f9 000b 6d2f 000b     .W..;W...V../m..

000b815c <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8164:	5b71 000b 5b89 000b 62c9 000b 446f 000b     q[...[...b..oD..

000b8174 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b817c:	5b9d 000b 5bb1 000b 646d 000b 5701 000b     .[...[..md...W..

000b818c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8194:	5713 000b 5749 000b 622d 000b 5703 000b     .W..IW..-b...W..

000b81a4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b81ac:	5711 000b 5757 000b 5ad9 000b 5779 000b     .W..WW...Z..yW..
   b81bc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b81cc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b81d8 <_ZTV9IPAddress>:
	...
   b81e0:	6751 000b 6741 000b 6743 000b               Qg..Ag..Cg..

000b81ec <_ZTV9USBSerial>:
	...
   b81f4:	6837 000b 689f 000b 6875 000b 55ed 000b     7h...h..uh...U..
   b8204:	6867 000b 6839 000b 6849 000b 6899 000b     gh..9h..Ih...h..
   b8214:	6859 000b 6831 000b                         Yh..1h..

000b821c <_ZTVN5spark13CellularClassE>:
	...
   b8224:	69a3 000b 6999 000b 698f 000b 6945 000b     .i...i...i..Ei..
   b8234:	6983 000b 6977 000b 6bdd 000b 6be5 000b     .i..wi...k...k..
   b8244:	696b 000b 6963 000b 6959 000b 694f 000b     ki..ci..Yi..Oi..
   b8254:	6c15 000b                                   .l..

000b8258 <_ZTV11USARTSerial>:
	...
   b8260:	69dd 000b 6a49 000b 6a21 000b 55ed 000b     .i..Ij..!j...U..
   b8270:	69f1 000b 6a0d 000b 69ff 000b 6a1b 000b     .i...j...i...j..
   b8280:	69df 000b 69e3 000b                         .i...i..

000b8288 <_ZTV7TwoWire>:
	...
   b8290:	6a95 000b 6adf 000b 6ab7 000b 6a97 000b     .j...j...j...j..
   b82a0:	6abf 000b 6ac7 000b 6acf 000b 6ad7 000b     .j...j...j...j..

000b82b0 <_ZTVN5spark12NetworkClassE>:
	...
   b82b8:	6b9d 000b 6ba7 000b 6bb1 000b 6bbb 000b     .k...k...k...k..
   b82c8:	6bc5 000b 6bd1 000b 6bdd 000b 6be5 000b     .k...k...k...k..
   b82d8:	6bed 000b 6bf9 000b 6c01 000b 6c0b 000b     .k...k...l...l..
   b82e8:	6c15 000b 7525 7500 3025 7834                .l..%u.u%04x.

000b82f5 <_ZSt7nothrow>:
   b82f5:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8305:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b8315:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b8325:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b8335:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b8345:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b8355:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b8365:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b8375:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b8385:	646e 632e                                    nd.c.

000b838a <_ctype_>:
   b838a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b839a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b83aa:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b83ba:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b83ca:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b83da:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b83ea:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b83fa:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b840a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b848b <link_const_variable_data_end>:
	...

000b848c <link_constructors_location>:
   b848c:	000b4451 	.word	0x000b4451
   b8490:	000b46a1 	.word	0x000b46a1
   b8494:	000b53f1 	.word	0x000b53f1
   b8498:	000b5441 	.word	0x000b5441
   b849c:	000b55dd 	.word	0x000b55dd
   b84a0:	000b62b9 	.word	0x000b62b9
   b84a4:	000b65e1 	.word	0x000b65e1
   b84a8:	000b65fd 	.word	0x000b65fd
   b84ac:	000b69ad 	.word	0x000b69ad
   b84b0:	000b6ced 	.word	0x000b6ced

000b84b4 <link_constructors_end>:
	...
