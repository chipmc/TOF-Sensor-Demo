
/Users/chipmc/Documents/Maker/Particle/Utilities/TOF-Sensor-Demo/target/4.0.2/boron/TOF-Sensor-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003be4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7c00  000b7c00  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7c24  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e53c  000b7c28  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000023c  2003e5b4  2003e5b4  0002e5b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7ca0  000b7ca0  00027ca0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7cc8  000b7cc8  00027cc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00139bd1  00000000  00000000  00027ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001578a  00000000  00000000  0016189d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b9dd  00000000  00000000  00177027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e8  00000000  00000000  001b2a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3a8  00000000  00000000  001b5aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e926  00000000  00000000  001bfe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00048091  00000000  00000000  001fe7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013824e  00000000  00000000  0024684b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008aa8  00000000  00000000  0037ea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f8f5 	bl	b721c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f917 	bl	b726c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e53c 	.word	0x2003e53c
   b4048:	000b7c28 	.word	0x000b7c28
   b404c:	2003e5b4 	.word	0x2003e5b4
   b4050:	2003e5b4 	.word	0x2003e5b4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 ff9f 	bl	b6fa0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7bd0 	.word	0x000b7bd0
   b407c:	000b7bf8 	.word	0x000b7bf8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b864 	b.w	b414c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8bf 	bl	b4208 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bf3f 	b.w	b6f10 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b8ed 	b.w	b5270 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b8eb 	b.w	b5270 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b8f1 	b.w	b5280 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f81c 	bl	b50e4 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4e45 	.word	0x000b4e45
   b40b4:	000b7584 	.word	0x000b7584

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b500      	push	{lr}
   b40cc:	b08c      	sub	sp, #48	; 0x30
   b40ce:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40d0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40d4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40d8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40da:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40de:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e0:	6801      	ldr	r1, [r0, #0]
   b40e2:	aa04      	add	r2, sp, #16
   b40e4:	201e      	movs	r0, #30
    attr.flags = 0;
   b40e6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ea:	f001 f803 	bl	b50f4 <log_message_v>
}
   b40ee:	b00c      	add	sp, #48	; 0x30
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b40f8:	4770      	bx	lr

000b40fa <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b40fa:	6a00      	ldr	r0, [r0, #32]
   b40fc:	6803      	ldr	r3, [r0, #0]
   b40fe:	68db      	ldr	r3, [r3, #12]
   b4100:	4718      	bx	r3
	...

000b4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4104:	4b0a      	ldr	r3, [pc, #40]	; (b4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0
   b410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b410c:	f001 fddc 	bl	b5cc8 <_ZN5spark10LogManager8instanceEv>
   b4110:	4621      	mov	r1, r4
   b4112:	f002 f814 	bl	b613e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4116:	f002 feb3 	bl	b6e80 <_Z16_fetch_usbserialv>
   b411a:	f002 fea3 	bl	b6e64 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b411e:	4620      	mov	r0, r4
   b4120:	4b04      	ldr	r3, [pc, #16]	; (b4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4122:	f840 3b04 	str.w	r3, [r0], #4
   b4126:	f001 fea5 	bl	b5e74 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b412a:	4620      	mov	r0, r4
   b412c:	bd10      	pop	{r4, pc}
   b412e:	bf00      	nop
   b4130:	000b75cc 	.word	0x000b75cc
   b4134:	000b75b4 	.word	0x000b75b4

000b4138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4138:	b510      	push	{r4, lr}
   b413a:	4604      	mov	r4, r0
    }
   b413c:	f7ff ffe2 	bl	b4104 <_ZN5spark16SerialLogHandlerD1Ev>
   b4140:	4620      	mov	r0, r4
   b4142:	2124      	movs	r1, #36	; 0x24
   b4144:	f7ff ffa9 	bl	b409a <_ZdlPvj>
   b4148:	4620      	mov	r0, r4
   b414a:	bd10      	pop	{r4, pc}

000b414c <setup>:
const int intPin =      D3;                       // Hardware interrupt - poliarity set in the library
const int blueLED =     D7;
char statusMsg[64];

void setup(void)
{
   b414c:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   b414e:	f002 ffef 	bl	b7130 <_Z19__fetch_global_Wirev>
   b4152:	f001 f9d3 	bl	b54fc <_ZN7TwoWire5beginEv>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4156:	2000      	movs	r0, #0
   b4158:	f000 fe84 	bl	b4e64 <hal_timer_millis>
        while (_while() && !_condition()) {
   b415c:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4160:	4604      	mov	r4, r0
   b4162:	2000      	movs	r0, #0
   b4164:	f000 fe7e 	bl	b4e64 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4168:	1b00      	subs	r0, r0, r4
   b416a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b416e:	42a8      	cmp	r0, r5
   b4170:	f171 0300 	sbcs.w	r3, r1, #0
   b4174:	d207      	bcs.n	b4186 <setup+0x3a>
  waitFor(Serial.isConnected, 10000);       // Primarily interface to this code is serial
   b4176:	f002 fe83 	bl	b6e80 <_Z16_fetch_usbserialv>
   b417a:	f002 fe76 	bl	b6e6a <_ZN9USBSerial11isConnectedEv>
   b417e:	b910      	cbnz	r0, b4186 <setup+0x3a>
            spark_process();
   b4180:	f001 f806 	bl	b5190 <spark_process>
        while (_while() && !_condition()) {
   b4184:	e7ed      	b.n	b4162 <setup+0x16>
   b4186:	f002 fe7b 	bl	b6e80 <_Z16_fetch_usbserialv>
   b418a:	f002 fe6e 	bl	b6e6a <_ZN9USBSerial11isConnectedEv>
  delay(1000);                              // Gives serial time to connect
   b418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4192:	f001 f8a5 	bl	b52e0 <delay>

  pinMode(blueLED,OUTPUT);                  // Set up pin names and modes
   b4196:	2101      	movs	r1, #1
   b4198:	2007      	movs	r0, #7
   b419a:	f002 ff71 	bl	b7080 <pinMode>
  pinMode(intPin,INPUT);
   b419e:	2100      	movs	r1, #0
   b41a0:	2003      	movs	r0, #3
   b41a2:	f002 ff6d 	bl	b7080 <pinMode>
  pinMode(shutdownPin,OUTPUT);              // Not sure if we can use this - messes with Boron i2c bus
   b41a6:	2101      	movs	r1, #1
   b41a8:	2002      	movs	r0, #2
   b41aa:	f002 ff69 	bl	b7080 <pinMode>
  digitalWrite(shutdownPin, LOW);           // Turns on the module
   b41ae:	2100      	movs	r1, #0
   b41b0:	2002      	movs	r0, #2
   b41b2:	f002 ff76 	bl	b70a2 <digitalWrite>
  digitalWrite(blueLED,HIGH);               // Blue led on for Setup
   b41b6:	2101      	movs	r1, #1
   b41b8:	2007      	movs	r0, #7
   b41ba:	f002 ff72 	bl	b70a2 <digitalWrite>

  delay(100);
   b41be:	2064      	movs	r0, #100	; 0x64
   b41c0:	f001 f88e 	bl	b52e0 <delay>

  TofSensor::instance().setup();
   b41c4:	f000 f92a 	bl	b441c <_ZN9TofSensor8instanceEv>
   b41c8:	f000 f9ca 	bl	b4560 <_ZN9TofSensor5setupEv>
  PeopleCounter::instance().setup();
   b41cc:	f000 fa2a 	bl	b4624 <_ZN13PeopleCounter8instanceEv>
   b41d0:	f000 fa3c 	bl	b464c <_ZN13PeopleCounter5setupEv>
  PeopleCounter::instance().setCount(1);
   b41d4:	f000 fa26 	bl	b4624 <_ZN13PeopleCounter8instanceEv>
   b41d8:	2101      	movs	r1, #1
   b41da:	f000 fa8d 	bl	b46f8 <_ZN13PeopleCounter8setCountEi>

  snprintf(statusMsg,sizeof(statusMsg),"Startup - Complete");
   b41de:	4907      	ldr	r1, [pc, #28]	; (b41fc <setup+0xb0>)
   b41e0:	4807      	ldr	r0, [pc, #28]	; (b4200 <setup+0xb4>)
   b41e2:	f003 f89a 	bl	b731a <strcpy>
  Log.info(statusMsg);
   b41e6:	4906      	ldr	r1, [pc, #24]	; (b4200 <setup+0xb4>)
   b41e8:	4806      	ldr	r0, [pc, #24]	; (b4204 <setup+0xb8>)
   b41ea:	f7ff ff6d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>

  digitalWrite(blueLED, LOW);                   // Signal setup complete
}
   b41ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(blueLED, LOW);                   // Signal setup complete
   b41f2:	2100      	movs	r1, #0
   b41f4:	2007      	movs	r0, #7
   b41f6:	f002 bf54 	b.w	b70a2 <digitalWrite>
   b41fa:	bf00      	nop
   b41fc:	000b7599 	.word	0x000b7599
   b4200:	2003e5e8 	.word	0x2003e5e8
   b4204:	2003e6a4 	.word	0x2003e6a4

000b4208 <loop>:

unsigned long lastLedUpdate = 0;

void loop(void)
{
   b4208:	b510      	push	{r4, lr}
  if( (millis() - lastLedUpdate) > 1000 ){
   b420a:	4c10      	ldr	r4, [pc, #64]	; (b424c <loop+0x44>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b420c:	f000 fe22 	bl	b4e54 <HAL_Timer_Get_Milli_Seconds>
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	1ac0      	subs	r0, r0, r3
   b4214:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4218:	d90b      	bls.n	b4232 <loop+0x2a>
    digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));
   b421a:	2007      	movs	r0, #7
   b421c:	f002 ff5a 	bl	b70d4 <digitalRead>
   b4220:	fab0 f180 	clz	r1, r0
   b4224:	0949      	lsrs	r1, r1, #5
   b4226:	2007      	movs	r0, #7
   b4228:	f002 ff3b 	bl	b70a2 <digitalWrite>
   b422c:	f000 fe12 	bl	b4e54 <HAL_Timer_Get_Milli_Seconds>
    lastLedUpdate = millis();
   b4230:	6020      	str	r0, [r4, #0]
  }

  if (TofSensor::instance().loop()) {         // If there is new data from the sensor
   b4232:	f000 f8f3 	bl	b441c <_ZN9TofSensor8instanceEv>
   b4236:	f000 f901 	bl	b443c <_ZN9TofSensor4loopEv>
   b423a:	b128      	cbz	r0, b4248 <loop+0x40>
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b423c:	f000 f9f2 	bl	b4624 <_ZN13PeopleCounter8instanceEv>
  }
}
   b4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b4244:	f000 ba04 	b.w	b4650 <_ZN13PeopleCounter4loopEv>
}
   b4248:	bd10      	pop	{r4, pc}
   b424a:	bf00      	nop
   b424c:	2003e5c0 	.word	0x2003e5c0

000b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4250:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4252:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4256:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4258:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b425a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b425e:	42ae      	cmp	r6, r5
   b4260:	d004      	beq.n	b426c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4262:	4628      	mov	r0, r5
   b4264:	f002 fc90 	bl	b6b88 <_ZN6StringD1Ev>
   b4268:	3514      	adds	r5, #20
   b426a:	e7f8      	b.n	b425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b426c:	6820      	ldr	r0, [r4, #0]
   b426e:	f001 f807 	bl	b5280 <free>
    AllocatorT::free(data_);
}
   b4272:	4620      	mov	r0, r4
   b4274:	bd70      	pop	{r4, r5, r6, pc}

000b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4276:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b427a:	4604      	mov	r4, r0
   b427c:	460d      	mov	r5, r1
   b427e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4280:	d916      	bls.n	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4282:	4290      	cmp	r0, r2
   b4284:	d215      	bcs.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4286:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b428a:	1a75      	subs	r5, r6, r1
   b428c:	f1a1 0714 	sub.w	r7, r1, #20
   b4290:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4292:	42b7      	cmp	r7, r6
   b4294:	d01c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4296:	b12c      	cbz	r4, b42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4298:	4631      	mov	r1, r6
   b429a:	4620      	mov	r0, r4
   b429c:	f002 fcdc 	bl	b6c58 <_ZN6StringC1EOS_>
   b42a0:	7c33      	ldrb	r3, [r6, #16]
   b42a2:	7423      	strb	r3, [r4, #16]
   b42a4:	4630      	mov	r0, r6
   b42a6:	f002 fc6f 	bl	b6b88 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42aa:	3e14      	subs	r6, #20
   b42ac:	3c14      	subs	r4, #20
   b42ae:	e7f0      	b.n	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42b0:	d00e      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42b2:	42b5      	cmp	r5, r6
   b42b4:	d00c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42b6:	b12c      	cbz	r4, b42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42b8:	4629      	mov	r1, r5
   b42ba:	4620      	mov	r0, r4
   b42bc:	f002 fccc 	bl	b6c58 <_ZN6StringC1EOS_>
   b42c0:	7c2b      	ldrb	r3, [r5, #16]
   b42c2:	7423      	strb	r3, [r4, #16]
   b42c4:	4628      	mov	r0, r5
   b42c6:	f002 fc5f 	bl	b6b88 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42ca:	3514      	adds	r5, #20
   b42cc:	3414      	adds	r4, #20
   b42ce:	e7f0      	b.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42d6:	2300      	movs	r3, #0
   b42d8:	e9c0 3300 	strd	r3, r3, [r0]
   b42dc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42de:	684f      	ldr	r7, [r1, #4]
   b42e0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42e2:	4604      	mov	r4, r0
   b42e4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42e6:	dd23      	ble.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42e8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42ec:	fb08 f007 	mul.w	r0, r8, r7
   b42f0:	f000 ffbe 	bl	b5270 <malloc>
            if (!d) {
   b42f4:	4605      	mov	r5, r0
   b42f6:	b1d8      	cbz	r0, b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42f8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42fc:	fb08 1202 	mla	r2, r8, r2, r1
   b4300:	f7ff ffb9 	bl	b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4304:	6820      	ldr	r0, [r4, #0]
   b4306:	f000 ffbb 	bl	b5280 <free>
        data_ = d;
   b430a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b430c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b430e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4312:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4316:	45b8      	cmp	r8, r7
   b4318:	d008      	beq.n	b432c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b431a:	4639      	mov	r1, r7
   b431c:	4628      	mov	r0, r5
   b431e:	f002 fcb5 	bl	b6c8c <_ZN6StringC1ERKS_>
   b4322:	7c3b      	ldrb	r3, [r7, #16]
   b4324:	742b      	strb	r3, [r5, #16]
   b4326:	3714      	adds	r7, #20
   b4328:	3514      	adds	r5, #20
   b432a:	e7f4      	b.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b432c:	6873      	ldr	r3, [r6, #4]
   b432e:	6063      	str	r3, [r4, #4]
}
   b4330:	4620      	mov	r0, r4
   b4332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4338 <_GLOBAL__sub_I_logHandler>:
   b4338:	b5f0      	push	{r4, r5, r6, r7, lr}
   b433a:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   b433c:	2400      	movs	r4, #0
   b433e:	e9cd 4400 	strd	r4, r4, [sp]
   b4342:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4344:	f002 fd9c 	bl	b6e80 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4348:	4d20      	ldr	r5, [pc, #128]	; (b43cc <_GLOBAL__sub_I_logHandler+0x94>)
   b434a:	4606      	mov	r6, r0
   b434c:	4669      	mov	r1, sp
   b434e:	a803      	add	r0, sp, #12
   b4350:	f7ff ffbf 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4354:	462f      	mov	r7, r5
        stream_(&stream) {
   b4356:	a903      	add	r1, sp, #12
   b4358:	a806      	add	r0, sp, #24
   b435a:	f7ff ffba 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b435e:	4b1c      	ldr	r3, [pc, #112]	; (b43d0 <_GLOBAL__sub_I_logHandler+0x98>)
   b4360:	f847 3b04 	str.w	r3, [r7], #4
   b4364:	a906      	add	r1, sp, #24
   b4366:	a809      	add	r0, sp, #36	; 0x24
   b4368:	f7ff ffb3 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b436c:	aa09      	add	r2, sp, #36	; 0x24
   b436e:	211e      	movs	r1, #30
   b4370:	4638      	mov	r0, r7
   b4372:	f001 ffc7 	bl	b6304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4376:	a809      	add	r0, sp, #36	; 0x24
   b4378:	f7ff ff6a 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b437c:	a806      	add	r0, sp, #24
   b437e:	f7ff ff67 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4382:	4b14      	ldr	r3, [pc, #80]	; (b43d4 <_GLOBAL__sub_I_logHandler+0x9c>)
   b4384:	602b      	str	r3, [r5, #0]
   b4386:	a803      	add	r0, sp, #12
   b4388:	622e      	str	r6, [r5, #32]
   b438a:	f7ff ff61 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b438e:	4b12      	ldr	r3, [pc, #72]	; (b43d8 <_GLOBAL__sub_I_logHandler+0xa0>)
   b4390:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4392:	f002 fd75 	bl	b6e80 <_Z16_fetch_usbserialv>
   b4396:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439a:	f002 fd5f 	bl	b6e5c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b439e:	f001 fc93 	bl	b5cc8 <_ZN5spark10LogManager8instanceEv>
   b43a2:	4629      	mov	r1, r5
   b43a4:	f001 fe84 	bl	b60b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b43a8:	4668      	mov	r0, sp
   b43aa:	f7ff ff51 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b43ae:	4b0b      	ldr	r3, [pc, #44]	; (b43dc <_GLOBAL__sub_I_logHandler+0xa4>)
    SleepResult() {}
   b43b0:	4a0b      	ldr	r2, [pc, #44]	; (b43e0 <_GLOBAL__sub_I_logHandler+0xa8>)
   b43b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b43b4:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b43b8:	2003      	movs	r0, #3
   b43ba:	f000 feb3 	bl	b5124 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b43be:	4621      	mov	r1, r4
   b43c0:	2001      	movs	r0, #1
}
   b43c2:	b00d      	add	sp, #52	; 0x34
   b43c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b43c8:	f000 bebc 	b.w	b5144 <system_thread_set_state>
   b43cc:	2003e5c4 	.word	0x2003e5c4
   b43d0:	000b75b4 	.word	0x000b75b4
   b43d4:	000b794c 	.word	0x000b794c
   b43d8:	000b75cc 	.word	0x000b75cc
   b43dc:	2003e5b4 	.word	0x2003e5b4
   b43e0:	ffff0000 	.word	0xffff0000

000b43e4 <_ZN9TofSensorD1Ev>:

TofSensor::TofSensor() {
}

TofSensor::~TofSensor() {
}
   b43e4:	4770      	bx	lr

000b43e6 <_ZN9TofSensorD0Ev>:
TofSensor::~TofSensor() {
   b43e6:	b510      	push	{r4, lr}
}
   b43e8:	2118      	movs	r1, #24
TofSensor::~TofSensor() {
   b43ea:	4604      	mov	r4, r0
}
   b43ec:	f7ff fe55 	bl	b409a <_ZdlPvj>
   b43f0:	4620      	mov	r0, r4
   b43f2:	bd10      	pop	{r4, pc}

000b43f4 <_ZN9TofSensorC1Ev>:
TofSensor::TofSensor() {
   b43f4:	b538      	push	{r3, r4, r5, lr}
   b43f6:	4605      	mov	r5, r0
   b43f8:	4b07      	ldr	r3, [pc, #28]	; (b4418 <_ZN9TofSensorC1Ev+0x24>)
   b43fa:	f845 3b04 	str.w	r3, [r5], #4
   b43fe:	4604      	mov	r4, r0
   b4400:	f002 fe96 	bl	b7130 <_Z19__fetch_global_Wirev>
   b4404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4408:	4601      	mov	r1, r0
   b440a:	461a      	mov	r2, r3
   b440c:	4628      	mov	r0, r5
   b440e:	f000 f9bb 	bl	b4788 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b4412:	4620      	mov	r0, r4
   b4414:	bd38      	pop	{r3, r4, r5, pc}
   b4416:	bf00      	nop
   b4418:	000b7724 	.word	0x000b7724

000b441c <_ZN9TofSensor8instanceEv>:
TofSensor &TofSensor::instance() {
   b441c:	b538      	push	{r3, r4, r5, lr}
  if (!_instance) {
   b441e:	4d06      	ldr	r5, [pc, #24]	; (b4438 <_ZN9TofSensor8instanceEv+0x1c>)
   b4420:	682b      	ldr	r3, [r5, #0]
   b4422:	b93b      	cbnz	r3, b4434 <_ZN9TofSensor8instanceEv+0x18>
      _instance = new TofSensor();
   b4424:	2018      	movs	r0, #24
   b4426:	f7ff fe34 	bl	b4092 <_Znwj>
   b442a:	4604      	mov	r4, r0
   b442c:	b108      	cbz	r0, b4432 <_ZN9TofSensor8instanceEv+0x16>
   b442e:	f7ff ffe1 	bl	b43f4 <_ZN9TofSensorC1Ev>
   b4432:	602c      	str	r4, [r5, #0]
}
   b4434:	6828      	ldr	r0, [r5, #0]
   b4436:	bd38      	pop	{r3, r4, r5, pc}
   b4438:	2003e628 	.word	0x2003e628

000b443c <_ZN9TofSensor4loopEv>:
  }
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
  return TRUE;
}

int TofSensor::loop(){                         // This function will update the current distance / occupancy for each zone.  It will return true if occupancy changes                    
   b443c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int oldOccupancyState = occupancyState;
   b4440:	4d2c      	ldr	r5, [pc, #176]	; (b44f4 <_ZN9TofSensor4loopEv+0xb8>)
   b4442:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b4504 <_ZN9TofSensor4loopEv+0xc8>
   b4446:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b4508 <_ZN9TofSensor4loopEv+0xcc>
   b444a:	682e      	ldr	r6, [r5, #0]
  occupancyState = 0;
   b444c:	2300      	movs	r3, #0
   b444e:	602b      	str	r3, [r5, #0]
   b4450:	2701      	movs	r7, #1
   b4452:	46c1      	mov	r9, r8
  unsigned long startedRanging;

  for (byte zone = 0; zone < 2; zone++){
    myTofSensor.stopRanging();
   b4454:	1d04      	adds	r4, r0, #4
   b4456:	4620      	mov	r0, r4
   b4458:	f000 f9e4 	bl	b4824 <_ZN10SFEVL53L1X11stopRangingEv>
    myTofSensor.clearInterrupt();
   b445c:	4620      	mov	r0, r4
   b445e:	f000 f9db 	bl	b4818 <_ZN10SFEVL53L1X14clearInterruptEv>
    myTofSensor.setROI(ZONE_X,ZONE_Y,opticalCenters[zone]);
   b4462:	f81a 3b01 	ldrb.w	r3, [sl], #1
   b4466:	2204      	movs	r2, #4
   b4468:	2108      	movs	r1, #8
   b446a:	4620      	mov	r0, r4
   b446c:	f000 f9fd 	bl	b486a <_ZN10SFEVL53L1X6setROIEhhh>
    delay(1);
   b4470:	2001      	movs	r0, #1
   b4472:	f000 ff35 	bl	b52e0 <delay>
    myTofSensor.startRanging();
   b4476:	4620      	mov	r0, r4
   b4478:	f000 f9d1 	bl	b481e <_ZN10SFEVL53L1X12startRangingEv>
   b447c:	f000 fcea 	bl	b4e54 <HAL_Timer_Get_Milli_Seconds>
   b4480:	4683      	mov	fp, r0

    startedRanging = millis();
    while(!myTofSensor.checkForDataReady()) {
   b4482:	4620      	mov	r0, r4
   b4484:	f000 f9d1 	bl	b482a <_ZN10SFEVL53L1X17checkForDataReadyEv>
   b4488:	b988      	cbnz	r0, b44ae <_ZN9TofSensor4loopEv+0x72>
   b448a:	f000 fce3 	bl	b4e54 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - startedRanging > SENSOR_TIMEOUT) {
   b448e:	eba0 000b 	sub.w	r0, r0, fp
   b4492:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b4496:	d9f4      	bls.n	b4482 <_ZN9TofSensor4loopEv+0x46>
        Log.info("Sensor Timed out");
   b4498:	4817      	ldr	r0, [pc, #92]	; (b44f8 <_ZN9TofSensor4loopEv+0xbc>)
   b449a:	4918      	ldr	r1, [pc, #96]	; (b44fc <_ZN9TofSensor4loopEv+0xc0>)
   b449c:	f7ff fe14 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
        return SENSOR_TIMEOUT_ERROR;
   b44a0:	f06f 0002 	mvn.w	r0, #2
  #if PEOPLECOUNTER_DEBUG
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneDistances[0], zoneDistances[1]);
  #endif

  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
}
   b44a4:	b003      	add	sp, #12
   b44a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b44aa:	2702      	movs	r7, #2
   b44ac:	e7d3      	b.n	b4456 <_ZN9TofSensor4loopEv+0x1a>
    zoneDistances[zone] = myTofSensor.getDistance();
   b44ae:	4620      	mov	r0, r4
   b44b0:	f000 f9d0 	bl	b4854 <_ZN10SFEVL53L1X11getDistanceEv>
    occupancyState += occupied * (zone + 1);
   b44b4:	f240 5212 	movw	r2, #1298	; 0x512
    zoneDistances[zone] = myTofSensor.getDistance();
   b44b8:	f848 0b04 	str.w	r0, [r8], #4
    bool occupied = ((zoneDistances[zone] < PERSON_THRESHOLD) && (zoneDistances[zone] > DOOR_THRESHOLD));
   b44bc:	38c9      	subs	r0, #201	; 0xc9
    occupancyState += occupied * (zone + 1);
   b44be:	4290      	cmp	r0, r2
   b44c0:	bf94      	ite	ls
   b44c2:	463b      	movls	r3, r7
   b44c4:	2300      	movhi	r3, #0
   b44c6:	682a      	ldr	r2, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b44c8:	2f02      	cmp	r7, #2
    occupancyState += occupied * (zone + 1);
   b44ca:	4413      	add	r3, r2
   b44cc:	602b      	str	r3, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b44ce:	d1ec      	bne.n	b44aa <_ZN9TofSensor4loopEv+0x6e>
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneDistances[0], zoneDistances[1]);
   b44d0:	42b3      	cmp	r3, r6
   b44d2:	d00a      	beq.n	b44ea <_ZN9TofSensor4loopEv+0xae>
   b44d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   b44d8:	9201      	str	r2, [sp, #4]
   b44da:	f8d9 2000 	ldr.w	r2, [r9]
   b44de:	9200      	str	r2, [sp, #0]
   b44e0:	4907      	ldr	r1, [pc, #28]	; (b4500 <_ZN9TofSensor4loopEv+0xc4>)
   b44e2:	4805      	ldr	r0, [pc, #20]	; (b44f8 <_ZN9TofSensor4loopEv+0xbc>)
   b44e4:	4632      	mov	r2, r6
   b44e6:	f7ff fdef 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
   b44ea:	6828      	ldr	r0, [r5, #0]
   b44ec:	1b80      	subs	r0, r0, r6
   b44ee:	bf18      	it	ne
   b44f0:	2001      	movne	r0, #1
   b44f2:	e7d7      	b.n	b44a4 <_ZN9TofSensor4loopEv+0x68>
   b44f4:	2003e640 	.word	0x2003e640
   b44f8:	2003e6a4 	.word	0x2003e6a4
   b44fc:	000b75dc 	.word	0x000b75dc
   b4500:	000b75ed 	.word	0x000b75ed
   b4504:	2003e644 	.word	0x2003e644
   b4508:	2003e53c 	.word	0x2003e53c

000b450c <_ZN9TofSensor18performCalibrationEv>:
bool TofSensor::performCalibration() {
   b450c:	b538      	push	{r3, r4, r5, lr}
  if (occupancyState != 0){
   b450e:	4d0f      	ldr	r5, [pc, #60]	; (b454c <_ZN9TofSensor18performCalibrationEv+0x40>)
bool TofSensor::performCalibration() {
   b4510:	4604      	mov	r4, r0
  TofSensor::loop();                  // Get the latest values
   b4512:	f7ff ff93 	bl	b443c <_ZN9TofSensor4loopEv>
  if (occupancyState != 0){
   b4516:	682b      	ldr	r3, [r5, #0]
   b4518:	b943      	cbnz	r3, b452c <_ZN9TofSensor18performCalibrationEv+0x20>
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
   b451a:	4a0d      	ldr	r2, [pc, #52]	; (b4550 <_ZN9TofSensor18performCalibrationEv+0x44>)
   b451c:	480d      	ldr	r0, [pc, #52]	; (b4554 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b451e:	490e      	ldr	r1, [pc, #56]	; (b4558 <_ZN9TofSensor18performCalibrationEv+0x4c>)
   b4520:	e9d2 2300 	ldrd	r2, r3, [r2]
   b4524:	f7ff fdd0 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
  return TRUE;
   b4528:	2001      	movs	r0, #1
}
   b452a:	bd38      	pop	{r3, r4, r5, pc}
    Log.info("Target zone not clear - will wait ten seconds and try again");
   b452c:	490b      	ldr	r1, [pc, #44]	; (b455c <_ZN9TofSensor18performCalibrationEv+0x50>)
   b452e:	4809      	ldr	r0, [pc, #36]	; (b4554 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b4530:	f7ff fdca 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4534:	f242 7010 	movw	r0, #10000	; 0x2710
   b4538:	f000 fed2 	bl	b52e0 <delay>
    TofSensor::loop();
   b453c:	4620      	mov	r0, r4
   b453e:	f7ff ff7d 	bl	b443c <_ZN9TofSensor4loopEv>
    if (occupancyState != 0) return FALSE;
   b4542:	682b      	ldr	r3, [r5, #0]
   b4544:	2b00      	cmp	r3, #0
   b4546:	d0e8      	beq.n	b451a <_ZN9TofSensor18performCalibrationEv+0xe>
   b4548:	2000      	movs	r0, #0
   b454a:	e7ee      	b.n	b452a <_ZN9TofSensor18performCalibrationEv+0x1e>
   b454c:	2003e640 	.word	0x2003e640
   b4550:	2003e644 	.word	0x2003e644
   b4554:	2003e6a4 	.word	0x2003e6a4
   b4558:	000b7621 	.word	0x000b7621
   b455c:	000b765b 	.word	0x000b765b

000b4560 <_ZN9TofSensor5setupEv>:
void TofSensor::setup(){
   b4560:	b538      	push	{r3, r4, r5, lr}
  if(myTofSensor.begin() != 0){
   b4562:	1d04      	adds	r4, r0, #4
void TofSensor::setup(){
   b4564:	4605      	mov	r5, r0
  if(myTofSensor.begin() != 0){
   b4566:	4620      	mov	r0, r4
   b4568:	f000 f948 	bl	b47fc <_ZN10SFEVL53L1X5beginEv>
   b456c:	b310      	cbz	r0, b45b4 <_ZN9TofSensor5setupEv+0x54>
    Log.info("Sensor error reset in 10 seconds");
   b456e:	491a      	ldr	r1, [pc, #104]	; (b45d8 <_ZN9TofSensor5setupEv+0x78>)
   b4570:	481a      	ldr	r0, [pc, #104]	; (b45dc <_ZN9TofSensor5setupEv+0x7c>)
   b4572:	f7ff fda9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4576:	f242 7010 	movw	r0, #10000	; 0x2710
   b457a:	f000 feb1 	bl	b52e0 <delay>
    System.reset();
   b457e:	f002 fba0 	bl	b6cc2 <_ZN11SystemClass5resetEv>
  myTofSensor.setDistanceModeLong();
   b4582:	4620      	mov	r0, r4
   b4584:	f000 f962 	bl	b484c <_ZN10SFEVL53L1X19setDistanceModeLongEv>
  myTofSensor.setSigmaThreshold(40);        // Default is 45 - this will make it harder to get a valid result - Range 1 - 16383
   b4588:	2128      	movs	r1, #40	; 0x28
   b458a:	4620      	mov	r0, r4
   b458c:	f000 f973 	bl	b4876 <_ZN10SFEVL53L1X17setSigmaThresholdEt>
  myTofSensor.setSignalThreshold(1000);     // Default is 1500 raising value makes it harder to get a valid results- Range 1-16383
   b4590:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4594:	4620      	mov	r0, r4
   b4596:	f000 f96b 	bl	b4870 <_ZN10SFEVL53L1X18setSignalThresholdEt>
  myTofSensor.setTimingBudgetInMs(15);      // Was 20mSec
   b459a:	4620      	mov	r0, r4
   b459c:	210f      	movs	r1, #15
   b459e:	f000 f952 	bl	b4846 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
  if (TofSensor::performCalibration()) Log.info("Calibration Complete");
   b45a2:	4628      	mov	r0, r5
   b45a4:	f7ff ffb2 	bl	b450c <_ZN9TofSensor18performCalibrationEv>
   b45a8:	b148      	cbz	r0, b45be <_ZN9TofSensor5setupEv+0x5e>
   b45aa:	490d      	ldr	r1, [pc, #52]	; (b45e0 <_ZN9TofSensor5setupEv+0x80>)
   b45ac:	480b      	ldr	r0, [pc, #44]	; (b45dc <_ZN9TofSensor5setupEv+0x7c>)
   b45ae:	f7ff fd8b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   b45b2:	bd38      	pop	{r3, r4, r5, pc}
  else Log.info("Sensor init successfully");
   b45b4:	490b      	ldr	r1, [pc, #44]	; (b45e4 <_ZN9TofSensor5setupEv+0x84>)
   b45b6:	4809      	ldr	r0, [pc, #36]	; (b45dc <_ZN9TofSensor5setupEv+0x7c>)
   b45b8:	f7ff fd86 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
   b45bc:	e7e1      	b.n	b4582 <_ZN9TofSensor5setupEv+0x22>
    Log.info("Initial calibration failed - wait 10 secs and reset");
   b45be:	490a      	ldr	r1, [pc, #40]	; (b45e8 <_ZN9TofSensor5setupEv+0x88>)
   b45c0:	4806      	ldr	r0, [pc, #24]	; (b45dc <_ZN9TofSensor5setupEv+0x7c>)
   b45c2:	f7ff fd81 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b45c6:	f242 7010 	movw	r0, #10000	; 0x2710
   b45ca:	f000 fe89 	bl	b52e0 <delay>
}
   b45ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    System.reset();
   b45d2:	f002 bb76 	b.w	b6cc2 <_ZN11SystemClass5resetEv>
   b45d6:	bf00      	nop
   b45d8:	000b7697 	.word	0x000b7697
   b45dc:	2003e6a4 	.word	0x2003e6a4
   b45e0:	000b76d1 	.word	0x000b76d1
   b45e4:	000b76b8 	.word	0x000b76b8
   b45e8:	000b76e6 	.word	0x000b76e6

000b45ec <_ZN9TofSensor17getOccupancyStateEv>:
  return zoneDistances[1];
}

int TofSensor::getOccupancyState() {
  return occupancyState;
}
   b45ec:	4b01      	ldr	r3, [pc, #4]	; (b45f4 <_ZN9TofSensor17getOccupancyStateEv+0x8>)
   b45ee:	6818      	ldr	r0, [r3, #0]
   b45f0:	4770      	bx	lr
   b45f2:	bf00      	nop
   b45f4:	2003e640 	.word	0x2003e640

000b45f8 <_GLOBAL__sub_I_opticalCenters>:
   b45f8:	b510      	push	{r4, lr}
SFEVL53L1X myTofSensor;
   b45fa:	f002 fd99 	bl	b7130 <_Z19__fetch_global_Wirev>
   b45fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4602:	4601      	mov	r1, r0
}
   b4604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SFEVL53L1X myTofSensor;
   b4608:	4801      	ldr	r0, [pc, #4]	; (b4610 <_GLOBAL__sub_I_opticalCenters+0x18>)
   b460a:	461a      	mov	r2, r3
   b460c:	f000 b8bc 	b.w	b4788 <_ZN10SFEVL53L1XC1ER7TwoWireii>
   b4610:	2003e62c 	.word	0x2003e62c

000b4614 <_ZN13PeopleCounterD1Ev>:

PeopleCounter::PeopleCounter() {
}

PeopleCounter::~PeopleCounter() {
}
   b4614:	4770      	bx	lr

000b4616 <_ZN13PeopleCounterD0Ev>:
PeopleCounter::~PeopleCounter() {
   b4616:	b510      	push	{r4, lr}
}
   b4618:	210c      	movs	r1, #12
PeopleCounter::~PeopleCounter() {
   b461a:	4604      	mov	r4, r0
}
   b461c:	f7ff fd3d 	bl	b409a <_ZdlPvj>
   b4620:	4620      	mov	r0, r4
   b4622:	bd10      	pop	{r4, pc}

000b4624 <_ZN13PeopleCounter8instanceEv>:
PeopleCounter &PeopleCounter::instance() {
   b4624:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b4626:	4c07      	ldr	r4, [pc, #28]	; (b4644 <_ZN13PeopleCounter8instanceEv+0x20>)
   b4628:	6825      	ldr	r5, [r4, #0]
   b462a:	b94d      	cbnz	r5, b4640 <_ZN13PeopleCounter8instanceEv+0x1c>
        _instance = new PeopleCounter();
   b462c:	200c      	movs	r0, #12
   b462e:	f7ff fd30 	bl	b4092 <_Znwj>
   b4632:	b120      	cbz	r0, b463e <_ZN13PeopleCounter8instanceEv+0x1a>
PeopleCounter::PeopleCounter() {
   b4634:	4b04      	ldr	r3, [pc, #16]	; (b4648 <_ZN13PeopleCounter8instanceEv+0x24>)
   b4636:	e9c0 3500 	strd	r3, r5, [r0]
   b463a:	2305      	movs	r3, #5
   b463c:	6083      	str	r3, [r0, #8]
        _instance = new PeopleCounter();
   b463e:	6020      	str	r0, [r4, #0]
}
   b4640:	6820      	ldr	r0, [r4, #0]
   b4642:	bd38      	pop	{r3, r4, r5, pc}
   b4644:	2003e650 	.word	0x2003e650
   b4648:	000b7778 	.word	0x000b7778

000b464c <_ZN13PeopleCounter5setupEv>:

void PeopleCounter::setup() {
}
   b464c:	4770      	bx	lr
	...

000b4650 <_ZN13PeopleCounter4loopEv>:

void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b4650:	b538      	push	{r3, r4, r5, lr}
    static int oldOccupancyState = 0;       // Need to remember these for past state path
    static bool atTheThreshold = false;
    int oldOccupancyCount = occupancyCount;
   b4652:	4c21      	ldr	r4, [pc, #132]	; (b46d8 <_ZN13PeopleCounter4loopEv+0x88>)
   b4654:	6825      	ldr	r5, [r4, #0]

    switch (TofSensor::instance().getOccupancyState()) {
   b4656:	f7ff fee1 	bl	b441c <_ZN9TofSensor8instanceEv>
   b465a:	f7ff ffc7 	bl	b45ec <_ZN9TofSensor17getOccupancyStateEv>
   b465e:	2803      	cmp	r0, #3
   b4660:	d835      	bhi.n	b46ce <_ZN13PeopleCounter4loopEv+0x7e>
   b4662:	e8df f000 	tbb	[pc, r0]
   b4666:	1202      	.short	0x1202
   b4668:	3021      	.short	0x3021

      case 0:                               // No occupancy detected
        oldOccupancyState = 0;
   b466a:	4a1c      	ldr	r2, [pc, #112]	; (b46dc <_ZN13PeopleCounter4loopEv+0x8c>)
   b466c:	2300      	movs	r3, #0
   b466e:	6013      	str	r3, [r2, #0]
        atTheThreshold = false;
   b4670:	4a1b      	ldr	r2, [pc, #108]	; (b46e0 <_ZN13PeopleCounter4loopEv+0x90>)
   b4672:	7013      	strb	r3, [r2, #0]
    }

   #if TENFOOTDISPLAY
    if (oldOccupancyCount != occupancyCount) printBigNumbers(occupancyCount);
   #else
    if (oldOccupancyCount != occupancyCount) Log.info("Occupancy %s %i",(occupancyCount > oldOccupancyCount) ? "increased to" : "decreased to", occupancyCount);
   b4674:	6823      	ldr	r3, [r4, #0]
   b4676:	42ab      	cmp	r3, r5
   b4678:	d006      	beq.n	b4688 <_ZN13PeopleCounter4loopEv+0x38>
   b467a:	bfd4      	ite	le
   b467c:	4a19      	ldrle	r2, [pc, #100]	; (b46e4 <_ZN13PeopleCounter4loopEv+0x94>)
   b467e:	4a1a      	ldrgt	r2, [pc, #104]	; (b46e8 <_ZN13PeopleCounter4loopEv+0x98>)
   b4680:	491a      	ldr	r1, [pc, #104]	; (b46ec <_ZN13PeopleCounter4loopEv+0x9c>)
   b4682:	481b      	ldr	r0, [pc, #108]	; (b46f0 <_ZN13PeopleCounter4loopEv+0xa0>)
   b4684:	f7ff fd20 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
   #endif
}
   b4688:	bd38      	pop	{r3, r4, r5, pc}
        if (atTheThreshold) {
   b468a:	4915      	ldr	r1, [pc, #84]	; (b46e0 <_ZN13PeopleCounter4loopEv+0x90>)
   b468c:	4a13      	ldr	r2, [pc, #76]	; (b46dc <_ZN13PeopleCounter4loopEv+0x8c>)
   b468e:	780b      	ldrb	r3, [r1, #0]
   b4690:	b13b      	cbz	r3, b46a2 <_ZN13PeopleCounter4loopEv+0x52>
          atTheThreshold = false;
   b4692:	2000      	movs	r0, #0
   b4694:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 2) {
   b4696:	6811      	ldr	r1, [r2, #0]
            occupancyCount++; 
   b4698:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 2) {
   b469a:	2902      	cmp	r1, #2
            occupancyCount++; 
   b469c:	bf04      	itt	eq
   b469e:	3301      	addeq	r3, #1
   b46a0:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 1;
   b46a2:	2301      	movs	r3, #1
        oldOccupancyState = 2;
   b46a4:	6013      	str	r3, [r2, #0]
      break;
   b46a6:	e7e5      	b.n	b4674 <_ZN13PeopleCounter4loopEv+0x24>
        if (atTheThreshold) {
   b46a8:	490d      	ldr	r1, [pc, #52]	; (b46e0 <_ZN13PeopleCounter4loopEv+0x90>)
   b46aa:	4a0c      	ldr	r2, [pc, #48]	; (b46dc <_ZN13PeopleCounter4loopEv+0x8c>)
   b46ac:	780b      	ldrb	r3, [r1, #0]
   b46ae:	b143      	cbz	r3, b46c2 <_ZN13PeopleCounter4loopEv+0x72>
          atTheThreshold = false;
   b46b0:	2000      	movs	r0, #0
   b46b2:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 1) {
   b46b4:	6811      	ldr	r1, [r2, #0]
            occupancyCount++; 
   b46b6:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 1) {
   b46b8:	2901      	cmp	r1, #1
            occupancyCount--;
   b46ba:	bf04      	itt	eq
   b46bc:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   b46c0:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 2;
   b46c2:	2302      	movs	r3, #2
   b46c4:	e7ee      	b.n	b46a4 <_ZN13PeopleCounter4loopEv+0x54>
        atTheThreshold = true;
   b46c6:	4b06      	ldr	r3, [pc, #24]	; (b46e0 <_ZN13PeopleCounter4loopEv+0x90>)
   b46c8:	2201      	movs	r2, #1
   b46ca:	701a      	strb	r2, [r3, #0]
      break;
   b46cc:	e7d2      	b.n	b4674 <_ZN13PeopleCounter4loopEv+0x24>
        Log.info("Error in occupancy state");
   b46ce:	4909      	ldr	r1, [pc, #36]	; (b46f4 <_ZN13PeopleCounter4loopEv+0xa4>)
   b46d0:	4807      	ldr	r0, [pc, #28]	; (b46f0 <_ZN13PeopleCounter4loopEv+0xa0>)
   b46d2:	f7ff fcf9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      break;
   b46d6:	e7cd      	b.n	b4674 <_ZN13PeopleCounter4loopEv+0x24>
   b46d8:	2003e64c 	.word	0x2003e64c
   b46dc:	2003e658 	.word	0x2003e658
   b46e0:	2003e654 	.word	0x2003e654
   b46e4:	000b7739 	.word	0x000b7739
   b46e8:	000b772c 	.word	0x000b772c
   b46ec:	000b775f 	.word	0x000b775f
   b46f0:	2003e6a4 	.word	0x2003e6a4
   b46f4:	000b7746 	.word	0x000b7746

000b46f8 <_ZN13PeopleCounter8setCountEi>:
  return occupancyCount;

}

void PeopleCounter::setCount(int value){
  occupancyCount = value;
   b46f8:	4b01      	ldr	r3, [pc, #4]	; (b4700 <_ZN13PeopleCounter8setCountEi+0x8>)
   b46fa:	6019      	str	r1, [r3, #0]
}
   b46fc:	4770      	bx	lr
   b46fe:	bf00      	nop
   b4700:	2003e64c 	.word	0x2003e64c

000b4704 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b4704:	4770      	bx	lr

000b4706 <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b4706:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b4708:	6880      	ldr	r0, [r0, #8]
   b470a:	2800      	cmp	r0, #0
   b470c:	db03      	blt.n	b4716 <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b470e:	2100      	movs	r1, #0
   b4710:	b280      	uxth	r0, r0
   b4712:	f002 fcc6 	bl	b70a2 <digitalWrite>
       }
       delay(10);
    }
   b4716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b471a:	200a      	movs	r0, #10
   b471c:	f000 bde0 	b.w	b52e0 <delay>

000b4720 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b4720:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b4722:	6880      	ldr	r0, [r0, #8]
   b4724:	2800      	cmp	r0, #0
   b4726:	db03      	blt.n	b4730 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b4728:	2101      	movs	r1, #1
   b472a:	b280      	uxth	r0, r0
   b472c:	f002 fcb9 	bl	b70a2 <digitalWrite>
    }
   b4730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4734:	200a      	movs	r0, #10
   b4736:	f000 bdd3 	b.w	b52e0 <delay>

000b473a <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b473a:	b510      	push	{r4, lr}
   b473c:	211c      	movs	r1, #28
   b473e:	4604      	mov	r4, r0
   b4740:	f7ff fcab 	bl	b409a <_ZdlPvj>
   b4744:	4620      	mov	r0, r4
   b4746:	bd10      	pop	{r4, pc}

000b4748 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b4748:	b513      	push	{r0, r1, r4, lr}
   b474a:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b474c:	f10d 0106 	add.w	r1, sp, #6
   b4750:	f000 fb43 	bl	b4dda <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b4754:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4758:	6023      	str	r3, [r4, #0]
	return status;
    }
   b475a:	b002      	add	sp, #8
   b475c:	bd10      	pop	{r4, pc}

000b475e <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b475e:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b4760:	f10d 0106 	add.w	r1, sp, #6
   b4764:	f000 fb28 	bl	b4db8 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b4768:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b476c:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b4770:	1ac0      	subs	r0, r0, r3
   b4772:	bf18      	it	ne
   b4774:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4778:	b003      	add	sp, #12
   b477a:	f85d fb04 	ldr.w	pc, [sp], #4

000b477e <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b477e:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b4780:	f000 f974 	bl	b4a6c <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b4784:	bd08      	pop	{r3, pc}
	...

000b4788 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b478c:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b4790:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4794:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b4798:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b479a:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b479c:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b479e:	460f      	mov	r7, r1
   b47a0:	4616      	mov	r6, r2
   b47a2:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b47a4:	f7ff fc75 	bl	b4092 <_Znwj>
   b47a8:	4604      	mov	r4, r0
   b47aa:	b180      	cbz	r0, b47ce <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b47ac:	4b0a      	ldr	r3, [pc, #40]	; (b47d8 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b47ae:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b47b2:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b47b6:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b47b8:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b47bc:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b47c0:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b47c2:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b47c4:	db03      	blt.n	b47ce <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b47c6:	2101      	movs	r1, #1
   b47c8:	b2b0      	uxth	r0, r6
   b47ca:	f002 fc59 	bl	b7080 <pinMode>
   b47ce:	612c      	str	r4, [r5, #16]
}
   b47d0:	4628      	mov	r0, r5
   b47d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b47d6:	bf00      	nop
   b47d8:	000b7788 	.word	0x000b7788

000b47dc <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   b47dc:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   b47de:	f10d 0106 	add.w	r1, sp, #6
   b47e2:	6900      	ldr	r0, [r0, #16]
   b47e4:	f000 fae8 	bl	b4db8 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   b47e8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   b47ec:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   b47f0:	1ac3      	subs	r3, r0, r3
   b47f2:	4258      	negs	r0, r3
   b47f4:	4158      	adcs	r0, r3
   b47f6:	b003      	add	sp, #12
   b47f8:	f85d fb04 	ldr.w	pc, [sp], #4

000b47fc <_ZN10SFEVL53L1X5beginEv>:
{
   b47fc:	b510      	push	{r4, lr}
   b47fe:	4604      	mov	r4, r0
	if (checkID() == false)
   b4800:	f7ff ffec 	bl	b47dc <_ZN10SFEVL53L1X7checkIDEv>
   b4804:	b130      	cbz	r0, b4814 <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
   b4806:	6920      	ldr	r0, [r4, #16]
   b4808:	f000 f930 	bl	b4a6c <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   b480c:	3800      	subs	r0, #0
   b480e:	bf18      	it	ne
   b4810:	2001      	movne	r0, #1
}
   b4812:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   b4814:	2001      	movs	r0, #1
   b4816:	e7fc      	b.n	b4812 <_ZN10SFEVL53L1X5beginEv+0x16>

000b4818 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   b4818:	6900      	ldr	r0, [r0, #16]
   b481a:	f000 b861 	b.w	b48e0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000b481e <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b481e:	6900      	ldr	r0, [r0, #16]
   b4820:	f000 b863 	b.w	b48ea <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b4824 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b4824:	6900      	ldr	r0, [r0, #16]
   b4826:	f000 b865 	b.w	b48f4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b482a <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   b482a:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   b482c:	f10d 0107 	add.w	r1, sp, #7
   b4830:	6900      	ldr	r0, [r0, #16]
   b4832:	f000 f8ff 	bl	b4a34 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   b4836:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   b483a:	3800      	subs	r0, #0
   b483c:	bf18      	it	ne
   b483e:	2001      	movne	r0, #1
   b4840:	b003      	add	sp, #12
   b4842:	f85d fb04 	ldr.w	pc, [sp], #4

000b4846 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b4846:	6900      	ldr	r0, [r0, #16]
   b4848:	f000 b962 	b.w	b4b10 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b484c <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b484c:	6900      	ldr	r0, [r0, #16]
   b484e:	2102      	movs	r1, #2
   b4850:	f000 ba57 	b.w	b4d02 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b4854 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   b4854:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   b4856:	f10d 0106 	add.w	r1, sp, #6
   b485a:	6900      	ldr	r0, [r0, #16]
   b485c:	f000 fabd 	bl	b4dda <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   b4860:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4864:	b003      	add	sp, #12
   b4866:	f85d fb04 	ldr.w	pc, [sp], #4

000b486a <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b486a:	6900      	ldr	r0, [r0, #16]
   b486c:	f000 b847 	b.w	b48fe <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b4870 <_ZN10SFEVL53L1X18setSignalThresholdEt>:
	return tempY;
}

void SFEVL53L1X::setSignalThreshold(uint16_t signalThreshold)
{
	_device->VL53L1X_SetSignalThreshold(signalThreshold);
   b4870:	6900      	ldr	r0, [r0, #16]
   b4872:	f000 b874 	b.w	b495e <_ZN7VL53L1X26VL53L1X_SetSignalThresholdEt>

000b4876 <_ZN10SFEVL53L1X17setSigmaThresholdEt>:
	return temp;
}

void SFEVL53L1X::setSigmaThreshold(uint16_t sigmaThreshold)
{
	_device->VL53L1X_SetSigmaThreshold(sigmaThreshold);
   b4876:	6900      	ldr	r0, [r0, #16]
   b4878:	f000 b879 	b.w	b496e <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt>

000b487c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b487c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b487e:	4604      	mov	r4, r0
   b4880:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4882:	6840      	ldr	r0, [r0, #4]
{
   b4884:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4888:	0849      	lsrs	r1, r1, #1
{
   b488a:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b488c:	f000 fe68 	bl	b5560 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b4890:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b4892:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b4894:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b4898:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b489c:	6803      	ldr	r3, [r0, #0]
   b489e:	2202      	movs	r2, #2
   b48a0:	68db      	ldr	r3, [r3, #12]
   b48a2:	a901      	add	r1, sp, #4
   b48a4:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b48a6:	2500      	movs	r5, #0
   b48a8:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b48aa:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b48ac:	dd05      	ble.n	b48ba <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b48ae:	6803      	ldr	r3, [r0, #0]
   b48b0:	5d71      	ldrb	r1, [r6, r5]
   b48b2:	689b      	ldr	r3, [r3, #8]
   b48b4:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b48b6:	3501      	adds	r5, #1
   b48b8:	e7f6      	b.n	b48a8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b48ba:	2101      	movs	r1, #1
   b48bc:	f000 fe54 	bl	b5568 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b48c0:	2000      	movs	r0, #0
   b48c2:	b003      	add	sp, #12
   b48c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b48c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b48c8:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b48cc:	2301      	movs	r3, #1
   b48ce:	7809      	ldrb	r1, [r1, #0]
   b48d0:	9300      	str	r3, [sp, #0]
   b48d2:	f10d 030f 	add.w	r3, sp, #15
   b48d6:	f7ff ffd1 	bl	b487c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b48da:	b005      	add	sp, #20
   b48dc:	f85d fb04 	ldr.w	pc, [sp], #4

000b48e0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b48e0:	6981      	ldr	r1, [r0, #24]
   b48e2:	2301      	movs	r3, #1
   b48e4:	2286      	movs	r2, #134	; 0x86
   b48e6:	f7ff bfee 	b.w	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b48ea <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b48ea:	6981      	ldr	r1, [r0, #24]
   b48ec:	2340      	movs	r3, #64	; 0x40
   b48ee:	2287      	movs	r2, #135	; 0x87
   b48f0:	f7ff bfe9 	b.w	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b48f4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b48f4:	6981      	ldr	r1, [r0, #24]
   b48f6:	2300      	movs	r3, #0
   b48f8:	2287      	movs	r2, #135	; 0x87
   b48fa:	f7ff bfe4 	b.w	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b48fe <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b48fe:	2910      	cmp	r1, #16
{
   b4900:	b570      	push	{r4, r5, r6, lr}
   b4902:	460d      	mov	r5, r1
   b4904:	bf28      	it	cs
   b4906:	2510      	movcs	r5, #16
	if (Y > 16)
   b4908:	2a10      	cmp	r2, #16
   b490a:	4616      	mov	r6, r2
   b490c:	bf28      	it	cs
   b490e:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b4910:	290a      	cmp	r1, #10
{
   b4912:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b4914:	d813      	bhi.n	b493e <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b4916:	2a0b      	cmp	r2, #11
   b4918:	bf28      	it	cs
   b491a:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b491c:	69a1      	ldr	r1, [r4, #24]
   b491e:	227f      	movs	r2, #127	; 0x7f
   b4920:	4620      	mov	r0, r4
   b4922:	f7ff ffd0 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b4926:	3d01      	subs	r5, #1
   b4928:	1e73      	subs	r3, r6, #1
   b492a:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b492e:	69a1      	ldr	r1, [r4, #24]
   b4930:	4620      	mov	r0, r4
   b4932:	b2db      	uxtb	r3, r3
}
   b4934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4938:	2280      	movs	r2, #128	; 0x80
   b493a:	f7ff bfc4 	b.w	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b493e:	23c7      	movs	r3, #199	; 0xc7
   b4940:	e7ec      	b.n	b491c <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b4942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b4944:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b4946:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b494a:	2302      	movs	r3, #2
   b494c:	7809      	ldrb	r1, [r1, #0]
   b494e:	9300      	str	r3, [sp, #0]
   b4950:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b4952:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4956:	f7ff ff91 	bl	b487c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b495a:	b004      	add	sp, #16
   b495c:	bd10      	pop	{r4, pc}

000b495e <_ZN7VL53L1X26VL53L1X_SetSignalThresholdEt>:
{
   b495e:	b508      	push	{r3, lr}
	VL53L1_WrWord(Device, RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, Signal >> 3);
   b4960:	2266      	movs	r2, #102	; 0x66
   b4962:	08cb      	lsrs	r3, r1, #3
   b4964:	6981      	ldr	r1, [r0, #24]
   b4966:	f7ff ffec 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b496a:	2000      	movs	r0, #0
   b496c:	bd08      	pop	{r3, pc}

000b496e <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt>:
	if (Sigma > (0xFFFF >> 2))
   b496e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
{
   b4972:	b410      	push	{r4}
	if (Sigma > (0xFFFF >> 2))
   b4974:	d207      	bcs.n	b4986 <_ZN7VL53L1X25VL53L1X_SetSigmaThresholdEt+0x18>
	status = VL53L1_WrWord(Device, RANGE_CONFIG__SIGMA_THRESH, Sigma << 2);
   b4976:	0089      	lsls	r1, r1, #2
   b4978:	b28b      	uxth	r3, r1
}
   b497a:	f85d 4b04 	ldr.w	r4, [sp], #4
	status = VL53L1_WrWord(Device, RANGE_CONFIG__SIGMA_THRESH, Sigma << 2);
   b497e:	6981      	ldr	r1, [r0, #24]
   b4980:	2264      	movs	r2, #100	; 0x64
   b4982:	f7ff bfde 	b.w	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4986:	2001      	movs	r0, #1
   b4988:	f85d 4b04 	ldr.w	r4, [sp], #4
   b498c:	4770      	bx	lr

000b498e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b498e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4992:	4604      	mov	r4, r0
   b4994:	4690      	mov	r8, r2
   b4996:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4998:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b499a:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b499e:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b49a0:	6860      	ldr	r0, [r4, #4]
   b49a2:	4639      	mov	r1, r7
   b49a4:	f000 fddc 	bl	b5560 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b49a8:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b49aa:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b49ae:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b49b2:	6803      	ldr	r3, [r0, #0]
   b49b4:	a901      	add	r1, sp, #4
   b49b6:	68db      	ldr	r3, [r3, #12]
   b49b8:	2202      	movs	r2, #2
   b49ba:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b49bc:	6860      	ldr	r0, [r4, #4]
   b49be:	2100      	movs	r1, #0
   b49c0:	f000 fdd2 	bl	b5568 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b49c4:	b118      	cbz	r0, b49ce <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b49c6:	3e01      	subs	r6, #1
   b49c8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b49cc:	d1e8      	bne.n	b49a0 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b49ce:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b49d2:	6860      	ldr	r0, [r4, #4]
   b49d4:	4639      	mov	r1, r7
   b49d6:	f000 fdc0 	bl	b555a <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b49da:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b49dc:	6860      	ldr	r0, [r4, #4]
   b49de:	6803      	ldr	r3, [r0, #0]
   b49e0:	691b      	ldr	r3, [r3, #16]
   b49e2:	4798      	blx	r3
   b49e4:	b130      	cbz	r0, b49f4 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b49e6:	6860      	ldr	r0, [r4, #4]
   b49e8:	6803      	ldr	r3, [r0, #0]
   b49ea:	695b      	ldr	r3, [r3, #20]
   b49ec:	4798      	blx	r3
   b49ee:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b49f2:	e7f3      	b.n	b49dc <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b49f4:	b003      	add	sp, #12
   b49f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b49fa <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b49fa:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b49fc:	2401      	movs	r4, #1
   b49fe:	7809      	ldrb	r1, [r1, #0]
   b4a00:	9400      	str	r4, [sp, #0]
   b4a02:	f7ff ffc4 	bl	b498e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b4a06:	3800      	subs	r0, #0
   b4a08:	bf18      	it	ne
   b4a0a:	2001      	movne	r0, #1
}
   b4a0c:	4240      	negs	r0, r0
   b4a0e:	b002      	add	sp, #8
   b4a10:	bd10      	pop	{r4, pc}

000b4a12 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b4a12:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4a14:	2230      	movs	r2, #48	; 0x30
{
   b4a16:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4a18:	f10d 0307 	add.w	r3, sp, #7
   b4a1c:	6981      	ldr	r1, [r0, #24]
   b4a1e:	f7ff ffec 	bl	b49fa <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b4a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4a26:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b4a2a:	f003 0301 	and.w	r3, r3, #1
   b4a2e:	7023      	strb	r3, [r4, #0]
}
   b4a30:	b002      	add	sp, #8
   b4a32:	bd10      	pop	{r4, pc}

000b4a34 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b4a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4a36:	4605      	mov	r5, r0
   b4a38:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b4a3a:	f10d 0107 	add.w	r1, sp, #7
   b4a3e:	f7ff ffe8 	bl	b4a12 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b4a42:	69a9      	ldr	r1, [r5, #24]
   b4a44:	f10d 0306 	add.w	r3, sp, #6
   b4a48:	2231      	movs	r2, #49	; 0x31
   b4a4a:	4628      	mov	r0, r5
   b4a4c:	f7ff ffd5 	bl	b49fa <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b4a50:	b950      	cbnz	r0, b4a68 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b4a52:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4a56:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b4a5a:	f003 0301 	and.w	r3, r3, #1
   b4a5e:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b4a60:	bf06      	itte	eq
   b4a62:	2301      	moveq	r3, #1
   b4a64:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b4a66:	7020      	strbne	r0, [r4, #0]
}
   b4a68:	b003      	add	sp, #12
   b4a6a:	bd30      	pop	{r4, r5, pc}

000b4a6c <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b4a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4a6e:	2300      	movs	r3, #0
   b4a70:	4e1c      	ldr	r6, [pc, #112]	; (b4ae4 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b4a72:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b4a76:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4a78:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4a7a:	b2aa      	uxth	r2, r5
   b4a7c:	f816 3b01 	ldrb.w	r3, [r6], #1
   b4a80:	69a1      	ldr	r1, [r4, #24]
   b4a82:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4a84:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4a86:	f7ff ff1e 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4a8a:	2d88      	cmp	r5, #136	; 0x88
   b4a8c:	d1f5      	bne.n	b4a7a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b4a8e:	4620      	mov	r0, r4
   b4a90:	f7ff ff2b 	bl	b48ea <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b4a94:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b4a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4a9a:	b963      	cbnz	r3, b4ab6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4a9c:	f10d 0107 	add.w	r1, sp, #7
   b4aa0:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b4aa2:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4aa4:	f7ff ffc6 	bl	b4a34 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b4aa8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4aac:	d017      	beq.n	b4ade <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b4aae:	2001      	movs	r0, #1
   b4ab0:	f000 fc16 	bl	b52e0 <delay>
	while (dataReady == 0)
   b4ab4:	e7ef      	b.n	b4a96 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b4ab6:	4620      	mov	r0, r4
   b4ab8:	f7ff ff12 	bl	b48e0 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b4abc:	4620      	mov	r0, r4
   b4abe:	f7ff ff19 	bl	b48f4 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b4ac2:	69a1      	ldr	r1, [r4, #24]
   b4ac4:	2309      	movs	r3, #9
   b4ac6:	2208      	movs	r2, #8
   b4ac8:	4620      	mov	r0, r4
   b4aca:	f7ff fefc 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b4ace:	69a1      	ldr	r1, [r4, #24]
   b4ad0:	2300      	movs	r3, #0
   b4ad2:	220b      	movs	r2, #11
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	f7ff fef6 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b4ada:	b002      	add	sp, #8
   b4adc:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b4ade:	f06f 0006 	mvn.w	r0, #6
   b4ae2:	e7fa      	b.n	b4ada <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b4ae4:	000b77a4 	.word	0x000b77a4

000b4ae8 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b4ae8:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4aea:	224b      	movs	r2, #75	; 0x4b
   b4aec:	f10d 0307 	add.w	r3, sp, #7
{
   b4af0:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4af2:	6981      	ldr	r1, [r0, #24]
   b4af4:	f7ff ff81 	bl	b49fa <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b4af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4afc:	2b14      	cmp	r3, #20
   b4afe:	d103      	bne.n	b4b08 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b4b00:	2301      	movs	r3, #1
		*DM = 2;
   b4b02:	8023      	strh	r3, [r4, #0]
}
   b4b04:	b002      	add	sp, #8
   b4b06:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b4b08:	2b0a      	cmp	r3, #10
   b4b0a:	d1fb      	bne.n	b4b04 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b4b0c:	2302      	movs	r3, #2
   b4b0e:	e7f8      	b.n	b4b02 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b4b10 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b4b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4b12:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b4b14:	f10d 0106 	add.w	r1, sp, #6
{
   b4b18:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b4b1a:	f7ff ffe5 	bl	b4ae8 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b4b1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b4b22:	4606      	mov	r6, r0
	if (DM == 0)
   b4b24:	b153      	cbz	r3, b4b3c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b4b26:	2b01      	cmp	r3, #1
   b4b28:	d152      	bne.n	b4bd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b4b2a:	2d32      	cmp	r5, #50	; 0x32
   b4b2c:	d032      	beq.n	b4b94 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b4b2e:	d807      	bhi.n	b4b40 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b4b30:	2d14      	cmp	r5, #20
   b4b32:	d025      	beq.n	b4b80 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b4b34:	2d21      	cmp	r5, #33	; 0x21
   b4b36:	d02b      	beq.n	b4b90 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b4b38:	2d0f      	cmp	r5, #15
   b4b3a:	d012      	beq.n	b4b62 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b4b3c:	2601      	movs	r6, #1
   b4b3e:	e01c      	b.n	b4b7a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b4b40:	2dc8      	cmp	r5, #200	; 0xc8
   b4b42:	d031      	beq.n	b4ba8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b4b44:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4b48:	d038      	beq.n	b4bbc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b4b4a:	2d64      	cmp	r5, #100	; 0x64
   b4b4c:	d1f6      	bne.n	b4b3c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b4e:	f240 23e1 	movw	r3, #737	; 0x2e1
   b4b52:	69a1      	ldr	r1, [r4, #24]
   b4b54:	225e      	movs	r2, #94	; 0x5e
   b4b56:	4620      	mov	r0, r4
   b4b58:	f7ff fef3 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b5c:	f44f 7362 	mov.w	r3, #904	; 0x388
   b4b60:	e006      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b62:	231d      	movs	r3, #29
   b4b64:	69a1      	ldr	r1, [r4, #24]
   b4b66:	225e      	movs	r2, #94	; 0x5e
   b4b68:	4620      	mov	r0, r4
   b4b6a:	f7ff feea 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b6e:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b70:	69a1      	ldr	r1, [r4, #24]
   b4b72:	2261      	movs	r2, #97	; 0x61
   b4b74:	4620      	mov	r0, r4
   b4b76:	f7ff fee4 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4b7a:	4630      	mov	r0, r6
   b4b7c:	b002      	add	sp, #8
   b4b7e:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b80:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b82:	69a1      	ldr	r1, [r4, #24]
   b4b84:	225e      	movs	r2, #94	; 0x5e
   b4b86:	4620      	mov	r0, r4
   b4b88:	f7ff fedb 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4b8c:	236e      	movs	r3, #110	; 0x6e
   b4b8e:	e7ef      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b90:	23d6      	movs	r3, #214	; 0xd6
   b4b92:	e7f6      	b.n	b4b82 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4b94:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b4b98:	69a1      	ldr	r1, [r4, #24]
   b4b9a:	225e      	movs	r2, #94	; 0x5e
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	f7ff fed0 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4ba2:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b4ba6:	e7e3      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ba8:	f240 33e1 	movw	r3, #993	; 0x3e1
   b4bac:	69a1      	ldr	r1, [r4, #24]
   b4bae:	225e      	movs	r2, #94	; 0x5e
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f7ff fec6 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4bb6:	f240 4396 	movw	r3, #1174	; 0x496
   b4bba:	e7d9      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4bbc:	f240 5391 	movw	r3, #1425	; 0x591
   b4bc0:	69a1      	ldr	r1, [r4, #24]
   b4bc2:	225e      	movs	r2, #94	; 0x5e
   b4bc4:	4620      	mov	r0, r4
   b4bc6:	f7ff febc 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4bca:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b4bce:	e7cf      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4bd0:	2d64      	cmp	r5, #100	; 0x64
   b4bd2:	d027      	beq.n	b4c24 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b4bd4:	d80d      	bhi.n	b4bf2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b4bd6:	2d21      	cmp	r5, #33	; 0x21
   b4bd8:	d01a      	beq.n	b4c10 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b4bda:	2d32      	cmp	r5, #50	; 0x32
   b4bdc:	d01a      	beq.n	b4c14 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b4bde:	2d14      	cmp	r5, #20
   b4be0:	d1ac      	bne.n	b4b3c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4be2:	231e      	movs	r3, #30
   b4be4:	69a1      	ldr	r1, [r4, #24]
   b4be6:	225e      	movs	r2, #94	; 0x5e
   b4be8:	4620      	mov	r0, r4
   b4bea:	f7ff feaa 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4bee:	2322      	movs	r3, #34	; 0x22
   b4bf0:	e7be      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4bf2:	2dc8      	cmp	r5, #200	; 0xc8
   b4bf4:	d020      	beq.n	b4c38 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b4bf6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4bfa:	d19f      	bne.n	b4b3c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4bfc:	f240 438f 	movw	r3, #1167	; 0x48f
   b4c00:	69a1      	ldr	r1, [r4, #24]
   b4c02:	225e      	movs	r2, #94	; 0x5e
   b4c04:	4620      	mov	r0, r4
   b4c06:	f7ff fe9c 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4c0a:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b4c0e:	e7af      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4c10:	2360      	movs	r3, #96	; 0x60
   b4c12:	e7b6      	b.n	b4b82 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4c14:	23ad      	movs	r3, #173	; 0xad
   b4c16:	69a1      	ldr	r1, [r4, #24]
   b4c18:	225e      	movs	r2, #94	; 0x5e
   b4c1a:	4620      	mov	r0, r4
   b4c1c:	f7ff fe91 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4c20:	23c6      	movs	r3, #198	; 0xc6
   b4c22:	e7a5      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4c24:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b4c28:	69a1      	ldr	r1, [r4, #24]
   b4c2a:	225e      	movs	r2, #94	; 0x5e
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f7ff fe88 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4c32:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b4c36:	e79b      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4c38:	f240 23d9 	movw	r3, #729	; 0x2d9
   b4c3c:	69a1      	ldr	r1, [r4, #24]
   b4c3e:	225e      	movs	r2, #94	; 0x5e
   b4c40:	4620      	mov	r0, r4
   b4c42:	f7ff fe7e 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4c46:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b4c4a:	e791      	b.n	b4b70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b4c4c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b4c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4c4e:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b4c50:	2300      	movs	r3, #0
   b4c52:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b4c56:	2302      	movs	r3, #2
   b4c58:	7809      	ldrb	r1, [r1, #0]
   b4c5a:	9300      	str	r3, [sp, #0]
   b4c5c:	ab03      	add	r3, sp, #12
   b4c5e:	f7ff fe96 	bl	b498e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b4c62:	b930      	cbnz	r0, b4c72 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b4c64:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b4c68:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b4c6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4c70:	8023      	strh	r3, [r4, #0]
}
   b4c72:	b004      	add	sp, #16
   b4c74:	bd10      	pop	{r4, pc}

000b4c76 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b4c76:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4c78:	225e      	movs	r2, #94	; 0x5e
   b4c7a:	f10d 0306 	add.w	r3, sp, #6
{
   b4c7e:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4c80:	6981      	ldr	r1, [r0, #24]
   b4c82:	f7ff ffe3 	bl	b4c4c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b4c86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4c8a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b4c8e:	d034      	beq.n	b4cfa <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4c90:	d810      	bhi.n	b4cb4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b4c92:	2b51      	cmp	r3, #81	; 0x51
   b4c94:	d02f      	beq.n	b4cf6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b4c96:	d805      	bhi.n	b4ca4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b4c98:	2b1d      	cmp	r3, #29
   b4c9a:	d028      	beq.n	b4cee <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b4c9c:	2b1e      	cmp	r3, #30
   b4c9e:	d02a      	beq.n	b4cf6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	e025      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4ca4:	2bad      	cmp	r3, #173	; 0xad
   b4ca6:	d028      	beq.n	b4cfa <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4ca8:	2bd6      	cmp	r3, #214	; 0xd6
   b4caa:	d001      	beq.n	b4cb0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b4cac:	2b60      	cmp	r3, #96	; 0x60
   b4cae:	d1f7      	bne.n	b4ca0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b4cb0:	2321      	movs	r3, #33	; 0x21
   b4cb2:	e01d      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4cb4:	f240 32e1 	movw	r2, #993	; 0x3e1
   b4cb8:	4293      	cmp	r3, r2
   b4cba:	d020      	beq.n	b4cfe <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b4cbc:	d80c      	bhi.n	b4cd8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b4cbe:	f240 22d9 	movw	r2, #729	; 0x2d9
   b4cc2:	4293      	cmp	r3, r2
   b4cc4:	d01b      	beq.n	b4cfe <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b4cc6:	f240 22e1 	movw	r2, #737	; 0x2e1
   b4cca:	4293      	cmp	r3, r2
   b4ccc:	d002      	beq.n	b4cd4 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b4cce:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b4cd2:	d1e5      	bne.n	b4ca0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b4cd4:	2364      	movs	r3, #100	; 0x64
   b4cd6:	e00b      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4cd8:	f240 428f 	movw	r2, #1167	; 0x48f
   b4cdc:	4293      	cmp	r3, r2
   b4cde:	d003      	beq.n	b4ce8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b4ce0:	f240 5291 	movw	r2, #1425	; 0x591
   b4ce4:	4293      	cmp	r3, r2
   b4ce6:	d1db      	bne.n	b4ca0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b4ce8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4cec:	e000      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b4cee:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b4cf0:	8023      	strh	r3, [r4, #0]
}
   b4cf2:	b002      	add	sp, #8
   b4cf4:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b4cf6:	2314      	movs	r3, #20
   b4cf8:	e7fa      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b4cfa:	2332      	movs	r3, #50	; 0x32
   b4cfc:	e7f8      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b4cfe:	23c8      	movs	r3, #200	; 0xc8
   b4d00:	e7f6      	b.n	b4cf0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b4d02 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b4d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d04:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b4d06:	f10d 0106 	add.w	r1, sp, #6
{
   b4d0a:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b4d0c:	f7ff ffb3 	bl	b4c76 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b4d10:	2d01      	cmp	r5, #1
   b4d12:	d008      	beq.n	b4d26 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b4d14:	2d02      	cmp	r5, #2
   b4d16:	d02d      	beq.n	b4d74 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b4d18:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f7ff fef7 	bl	b4b10 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b4d22:	b003      	add	sp, #12
   b4d24:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b4d26:	69a1      	ldr	r1, [r4, #24]
   b4d28:	2314      	movs	r3, #20
   b4d2a:	224b      	movs	r2, #75	; 0x4b
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	f7ff fdca 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b4d32:	69a1      	ldr	r1, [r4, #24]
   b4d34:	2307      	movs	r3, #7
   b4d36:	2260      	movs	r2, #96	; 0x60
   b4d38:	4620      	mov	r0, r4
   b4d3a:	f7ff fdc4 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b4d3e:	69a1      	ldr	r1, [r4, #24]
   b4d40:	2305      	movs	r3, #5
   b4d42:	2263      	movs	r2, #99	; 0x63
   b4d44:	4620      	mov	r0, r4
   b4d46:	f7ff fdbe 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b4d4a:	69a1      	ldr	r1, [r4, #24]
   b4d4c:	2338      	movs	r3, #56	; 0x38
   b4d4e:	2269      	movs	r2, #105	; 0x69
   b4d50:	4620      	mov	r0, r4
   b4d52:	f7ff fdb8 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b4d56:	f240 7305 	movw	r3, #1797	; 0x705
   b4d5a:	69a1      	ldr	r1, [r4, #24]
   b4d5c:	2278      	movs	r2, #120	; 0x78
   b4d5e:	4620      	mov	r0, r4
   b4d60:	f7ff fdef 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b4d64:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b4d68:	69a1      	ldr	r1, [r4, #24]
   b4d6a:	227a      	movs	r2, #122	; 0x7a
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	f7ff fde8 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b4d72:	e7d1      	b.n	b4d18 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b4d74:	69a1      	ldr	r1, [r4, #24]
   b4d76:	230a      	movs	r3, #10
   b4d78:	224b      	movs	r2, #75	; 0x4b
   b4d7a:	4620      	mov	r0, r4
   b4d7c:	f7ff fda3 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b4d80:	69a1      	ldr	r1, [r4, #24]
   b4d82:	230f      	movs	r3, #15
   b4d84:	2260      	movs	r2, #96	; 0x60
   b4d86:	4620      	mov	r0, r4
   b4d88:	f7ff fd9d 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b4d8c:	69a1      	ldr	r1, [r4, #24]
   b4d8e:	230d      	movs	r3, #13
   b4d90:	2263      	movs	r2, #99	; 0x63
   b4d92:	4620      	mov	r0, r4
   b4d94:	f7ff fd97 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b4d98:	69a1      	ldr	r1, [r4, #24]
   b4d9a:	23b8      	movs	r3, #184	; 0xb8
   b4d9c:	2269      	movs	r2, #105	; 0x69
   b4d9e:	4620      	mov	r0, r4
   b4da0:	f7ff fd91 	bl	b48c6 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b4da4:	f640 730d 	movw	r3, #3853	; 0xf0d
   b4da8:	69a1      	ldr	r1, [r4, #24]
   b4daa:	2278      	movs	r2, #120	; 0x78
   b4dac:	4620      	mov	r0, r4
   b4dae:	f7ff fdc8 	bl	b4942 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b4db2:	f640 630e 	movw	r3, #3598	; 0xe0e
   b4db6:	e7d7      	b.n	b4d68 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

000b4db8 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b4db8:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b4dba:	2300      	movs	r3, #0
{
   b4dbc:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b4dbe:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b4dc2:	6981      	ldr	r1, [r0, #24]
   b4dc4:	f10d 0306 	add.w	r3, sp, #6
   b4dc8:	f240 120f 	movw	r2, #271	; 0x10f
   b4dcc:	f7ff ff3e 	bl	b4c4c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b4dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4dd4:	8023      	strh	r3, [r4, #0]
}
   b4dd6:	b002      	add	sp, #8
   b4dd8:	bd10      	pop	{r4, pc}

000b4dda <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b4dda:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b4ddc:	2296      	movs	r2, #150	; 0x96
{
   b4dde:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b4de0:	f10d 0306 	add.w	r3, sp, #6
   b4de4:	6981      	ldr	r1, [r0, #24]
   b4de6:	f7ff ff31 	bl	b4c4c <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b4dea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4dee:	8023      	strh	r3, [r4, #0]
}
   b4df0:	b002      	add	sp, #8
   b4df2:	bd10      	pop	{r4, pc}

000b4df4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <os_mutex_recursive_create+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030248 	.word	0x00030248

000b4e04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <os_mutex_recursive_destroy+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030248 	.word	0x00030248

000b4e14 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <os_mutex_recursive_lock+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030248 	.word	0x00030248

000b4e24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <os_mutex_recursive_unlock+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030248 	.word	0x00030248

000b4e34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <HAL_RNG_GetRandomNumber+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	685b      	ldr	r3, [r3, #4]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030218 	.word	0x00030218

000b4e44 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <HAL_Delay_Microseconds+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	68db      	ldr	r3, [r3, #12]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030218 	.word	0x00030218

000b4e54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	695b      	ldr	r3, [r3, #20]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030218 	.word	0x00030218

000b4e64 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_timer_millis+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030218 	.word	0x00030218

000b4e74 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <HAL_Pin_Mode+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	689b      	ldr	r3, [r3, #8]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003022c 	.word	0x0003022c

000b4e84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <HAL_Get_Pin_Mode+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	68db      	ldr	r3, [r3, #12]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003022c 	.word	0x0003022c

000b4e94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <HAL_GPIO_Write+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	691b      	ldr	r3, [r3, #16]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003022c 	.word	0x0003022c

000b4ea4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <HAL_GPIO_Read+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	695b      	ldr	r3, [r3, #20]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	0003022c 	.word	0x0003022c

000b4eb4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_i2c_begin+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	68db      	ldr	r3, [r3, #12]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030228 	.word	0x00030228

000b4ec4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_i2c_begin_transmission+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	699b      	ldr	r3, [r3, #24]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030228 	.word	0x00030228

000b4ed4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_i2c_end_transmission+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	69db      	ldr	r3, [r3, #28]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030228 	.word	0x00030228

000b4ee4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_i2c_write+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6a1b      	ldr	r3, [r3, #32]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030228 	.word	0x00030228

000b4ef4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_i2c_available+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030228 	.word	0x00030228

000b4f04 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_i2c_read+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030228 	.word	0x00030228

000b4f14 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <hal_i2c_peek+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030228 	.word	0x00030228

000b4f24 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <hal_i2c_flush+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030228 	.word	0x00030228

000b4f34 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <hal_i2c_is_enabled+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030228 	.word	0x00030228

000b4f44 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_i2c_init+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030228 	.word	0x00030228

000b4f54 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_i2c_request_ex+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030228 	.word	0x00030228

000b4f64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <inet_inet_ntop+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	695b      	ldr	r3, [r3, #20]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030264 	.word	0x00030264

000b4f74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <netdb_freeaddrinfo+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	689b      	ldr	r3, [r3, #8]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030268 	.word	0x00030268

000b4f84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <netdb_getaddrinfo+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	68db      	ldr	r3, [r3, #12]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030268 	.word	0x00030268

000b4f94 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_spi_init+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	69db      	ldr	r3, [r3, #28]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030230 	.word	0x00030230

000b4fa4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_spi_is_enabled+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6a1b      	ldr	r3, [r3, #32]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030230 	.word	0x00030230

000b4fb4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_usart_end+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	689b      	ldr	r3, [r3, #8]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	0003023c 	.word	0x0003023c

000b4fc4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_usart_write+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	68db      	ldr	r3, [r3, #12]
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	0003023c 	.word	0x0003023c

000b4fd4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_usart_available+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	691b      	ldr	r3, [r3, #16]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	0003023c 	.word	0x0003023c

000b4fe4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_usart_read+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	695b      	ldr	r3, [r3, #20]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	0003023c 	.word	0x0003023c

000b4ff4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_usart_peek+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	699b      	ldr	r3, [r3, #24]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	0003023c 	.word	0x0003023c

000b5004 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_usart_flush+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	69db      	ldr	r3, [r3, #28]
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	0003023c 	.word	0x0003023c

000b5014 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_usart_is_enabled+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6a1b      	ldr	r3, [r3, #32]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003023c 	.word	0x0003023c

000b5024 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_usart_available_data_for_write+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003023c 	.word	0x0003023c

000b5034 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <hal_usart_begin_config+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	0003023c 	.word	0x0003023c

000b5044 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_usart_init_ex+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003023c 	.word	0x0003023c

000b5054 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <HAL_USB_USART_Init+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	681b      	ldr	r3, [r3, #0]
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	0003024c 	.word	0x0003024c

000b5064 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <HAL_USB_USART_Begin+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	685b      	ldr	r3, [r3, #4]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	0003024c 	.word	0x0003024c

000b5074 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <HAL_USB_USART_End+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	689b      	ldr	r3, [r3, #8]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	0003024c 	.word	0x0003024c

000b5084 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <HAL_USB_USART_Available_Data+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	691b      	ldr	r3, [r3, #16]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003024c 	.word	0x0003024c

000b5094 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	695b      	ldr	r3, [r3, #20]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	0003024c 	.word	0x0003024c

000b50a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <HAL_USB_USART_Receive_Data+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	699b      	ldr	r3, [r3, #24]
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	0003024c 	.word	0x0003024c

000b50b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <HAL_USB_USART_Send_Data+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	69db      	ldr	r3, [r3, #28]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	0003024c 	.word	0x0003024c

000b50c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <HAL_USB_USART_Flush_Data+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	6a1b      	ldr	r3, [r3, #32]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003024c 	.word	0x0003024c

000b50d4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <HAL_USB_USART_Is_Connected+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003024c 	.word	0x0003024c

000b50e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <panic_+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030260 	.word	0x00030260

000b50f4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <log_message_v+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030260 	.word	0x00030260

000b5104 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <log_level_name+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030260 	.word	0x00030260

000b5114 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <log_set_callbacks+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030260 	.word	0x00030260

000b5124 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <set_system_mode+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	685b      	ldr	r3, [r3, #4]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030220 	.word	0x00030220

000b5134 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <system_delay_ms+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	695b      	ldr	r3, [r3, #20]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030220 	.word	0x00030220

000b5144 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <system_thread_set_state+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030220 	.word	0x00030220

000b5154 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b03      	ldr	r3, [pc, #12]	; (b5164 <system_ctrl_set_app_request_handler+0x10>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b515e:	9301      	str	r3, [sp, #4]
   b5160:	bd08      	pop	{r3, pc}
   b5162:	0000      	.short	0x0000
   b5164:	00030220 	.word	0x00030220

000b5168 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b03      	ldr	r3, [pc, #12]	; (b5178 <system_ctrl_set_result+0x10>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5172:	9301      	str	r3, [sp, #4]
   b5174:	bd08      	pop	{r3, pc}
   b5176:	0000      	.short	0x0000
   b5178:	00030220 	.word	0x00030220

000b517c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b517c:	b508      	push	{r3, lr}
   b517e:	4b03      	ldr	r3, [pc, #12]	; (b518c <system_reset+0x10>)
   b5180:	681b      	ldr	r3, [r3, #0]
   b5182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b5186:	9301      	str	r3, [sp, #4]
   b5188:	bd08      	pop	{r3, pc}
   b518a:	0000      	.short	0x0000
   b518c:	00030220 	.word	0x00030220

000b5190 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <spark_process+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	689b      	ldr	r3, [r3, #8]
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030244 	.word	0x00030244

000b51a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <spark_set_random_seed_from_cloud_handler+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030244 	.word	0x00030244

000b51b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <network_connect+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	685b      	ldr	r3, [r3, #4]
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030240 	.word	0x00030240

000b51c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <network_connecting+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	689b      	ldr	r3, [r3, #8]
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	00030240 	.word	0x00030240

000b51d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <network_disconnect+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	68db      	ldr	r3, [r3, #12]
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	00030240 	.word	0x00030240

000b51e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <network_ready+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	691b      	ldr	r3, [r3, #16]
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	00030240 	.word	0x00030240

000b51f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <network_on+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	695b      	ldr	r3, [r3, #20]
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030240 	.word	0x00030240

000b5200 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <network_off+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	699b      	ldr	r3, [r3, #24]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030240 	.word	0x00030240

000b5210 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <network_listen+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	69db      	ldr	r3, [r3, #28]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030240 	.word	0x00030240

000b5220 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <network_listening+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	6a1b      	ldr	r3, [r3, #32]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030240 	.word	0x00030240

000b5230 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <network_set_listen_timeout+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030240 	.word	0x00030240

000b5240 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <network_get_listen_timeout+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	00030240 	.word	0x00030240

000b5250 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <network_is_on+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	00030240 	.word	0x00030240

000b5260 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <network_is_off+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	00030240 	.word	0x00030240

000b5270 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <malloc+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	681b      	ldr	r3, [r3, #0]
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	0003021c 	.word	0x0003021c

000b5280 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <free+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	685b      	ldr	r3, [r3, #4]
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	0003021c 	.word	0x0003021c

000b5290 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <realloc+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	689b      	ldr	r3, [r3, #8]
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	0003021c 	.word	0x0003021c

000b52a0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <vsnprintf+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	0003021c 	.word	0x0003021c

000b52b0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <__errno+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	0003021c 	.word	0x0003021c

000b52c0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <__assert_func+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	0003021c 	.word	0x0003021c

000b52d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <newlib_impure_ptr_callback+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	0003021c 	.word	0x0003021c

000b52e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b52e0:	2100      	movs	r1, #0
   b52e2:	f7ff bf27 	b.w	b5134 <system_delay_ms>

000b52e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b52e6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b52e8:	6843      	ldr	r3, [r0, #4]
   b52ea:	3b01      	subs	r3, #1
    {
   b52ec:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b52ee:	6043      	str	r3, [r0, #4]
   b52f0:	b963      	cbnz	r3, b530c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b52f2:	6803      	ldr	r3, [r0, #0]
   b52f4:	689b      	ldr	r3, [r3, #8]
   b52f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b52f8:	68a3      	ldr	r3, [r4, #8]
   b52fa:	3b01      	subs	r3, #1
   b52fc:	60a3      	str	r3, [r4, #8]
   b52fe:	b92b      	cbnz	r3, b530c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5300:	6823      	ldr	r3, [r4, #0]
   b5302:	4620      	mov	r0, r4
   b5304:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b530a:	4718      	bx	r3
    }
   b530c:	bd10      	pop	{r4, pc}

000b530e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b530e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5310:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5314:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5316:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b531a:	42ae      	cmp	r6, r5
   b531c:	d004      	beq.n	b5328 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b531e:	4628      	mov	r0, r5
   b5320:	f001 fc32 	bl	b6b88 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5324:	3510      	adds	r5, #16
   b5326:	e7f8      	b.n	b531a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5328:	6820      	ldr	r0, [r4, #0]
   b532a:	f7ff ffa9 	bl	b5280 <free>
    AllocatorT::free(data_);
}
   b532e:	4620      	mov	r0, r4
   b5330:	bd70      	pop	{r4, r5, r6, pc}

000b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5332:	b510      	push	{r4, lr}
   b5334:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b5336:	6800      	ldr	r0, [r0, #0]
   b5338:	b108      	cbz	r0, b533e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b533a:	f7ff ffd4 	bl	b52e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b533e:	4620      	mov	r0, r4
   b5340:	bd10      	pop	{r4, pc}
	...

000b5344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5344:	4802      	ldr	r0, [pc, #8]	; (b5350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5346:	2300      	movs	r3, #0
   b5348:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b534a:	f7ff bd53 	b.w	b4df4 <os_mutex_recursive_create>
   b534e:	bf00      	nop
   b5350:	2003e65c 	.word	0x2003e65c

000b5354 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5354:	2200      	movs	r2, #0
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	4611      	mov	r1, r2
   b535a:	f7ff bf41 	b.w	b51e0 <network_ready>

000b535e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b535e:	2200      	movs	r2, #0
   b5360:	6840      	ldr	r0, [r0, #4]
   b5362:	4611      	mov	r1, r2
   b5364:	f7ff bf5c 	b.w	b5220 <network_listening>

000b5368 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5368:	2200      	movs	r2, #0
   b536a:	6840      	ldr	r0, [r0, #4]
   b536c:	4611      	mov	r1, r2
   b536e:	f7ff bf67 	b.w	b5240 <network_get_listen_timeout>

000b5372 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5372:	6840      	ldr	r0, [r0, #4]
   b5374:	2200      	movs	r2, #0
   b5376:	f7ff bf5b 	b.w	b5230 <network_set_listen_timeout>

000b537a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b537a:	6840      	ldr	r0, [r0, #4]
   b537c:	2200      	movs	r2, #0
   b537e:	f081 0101 	eor.w	r1, r1, #1
   b5382:	f7ff bf45 	b.w	b5210 <network_listen>

000b5386 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5386:	2300      	movs	r3, #0
   b5388:	6840      	ldr	r0, [r0, #4]
   b538a:	461a      	mov	r2, r3
   b538c:	4619      	mov	r1, r3
   b538e:	f7ff bf37 	b.w	b5200 <network_off>

000b5392 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5392:	2300      	movs	r3, #0
   b5394:	6840      	ldr	r0, [r0, #4]
   b5396:	461a      	mov	r2, r3
   b5398:	4619      	mov	r1, r3
   b539a:	f7ff bf29 	b.w	b51f0 <network_on>

000b539e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b539e:	2200      	movs	r2, #0
   b53a0:	6840      	ldr	r0, [r0, #4]
   b53a2:	4611      	mov	r1, r2
   b53a4:	f7ff bf0c 	b.w	b51c0 <network_connecting>

000b53a8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b53a8:	6840      	ldr	r0, [r0, #4]
   b53aa:	2200      	movs	r2, #0
   b53ac:	2102      	movs	r1, #2
   b53ae:	f7ff bf0f 	b.w	b51d0 <network_disconnect>

000b53b2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b53b2:	2300      	movs	r3, #0
   b53b4:	6840      	ldr	r0, [r0, #4]
   b53b6:	461a      	mov	r2, r3
   b53b8:	f7ff befa 	b.w	b51b0 <network_connect>

000b53bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b53bc:	4b08      	ldr	r3, [pc, #32]	; (b53e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b53be:	b510      	push	{r4, lr}
   b53c0:	2428      	movs	r4, #40	; 0x28
   b53c2:	4622      	mov	r2, r4
   b53c4:	4618      	mov	r0, r3
   b53c6:	2100      	movs	r1, #0
   b53c8:	f001 ff50 	bl	b726c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b53cc:	4b05      	ldr	r3, [pc, #20]	; (b53e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b53ce:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b53d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b53d4:	6042      	str	r2, [r0, #4]
   b53d6:	2204      	movs	r2, #4
   b53d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b53da:	4a03      	ldr	r2, [pc, #12]	; (b53e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b53dc:	601a      	str	r2, [r3, #0]
   b53de:	bd10      	pop	{r4, pc}
   b53e0:	2003e668 	.word	0x2003e668
   b53e4:	2003e660 	.word	0x2003e660
   b53e8:	000b7808 	.word	0x000b7808

000b53ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b53ec:	2200      	movs	r2, #0
   b53ee:	6840      	ldr	r0, [r0, #4]
   b53f0:	4611      	mov	r1, r2
   b53f2:	f7ff bf15 	b.w	b5220 <network_listening>

000b53f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b53f6:	2200      	movs	r2, #0
   b53f8:	6840      	ldr	r0, [r0, #4]
   b53fa:	4611      	mov	r1, r2
   b53fc:	f7ff bf20 	b.w	b5240 <network_get_listen_timeout>

000b5400 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5400:	6840      	ldr	r0, [r0, #4]
   b5402:	2200      	movs	r2, #0
   b5404:	f7ff bf14 	b.w	b5230 <network_set_listen_timeout>

000b5408 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5408:	6840      	ldr	r0, [r0, #4]
   b540a:	2200      	movs	r2, #0
   b540c:	f081 0101 	eor.w	r1, r1, #1
   b5410:	f7ff befe 	b.w	b5210 <network_listen>

000b5414 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5414:	2300      	movs	r3, #0
   b5416:	6840      	ldr	r0, [r0, #4]
   b5418:	461a      	mov	r2, r3
   b541a:	4619      	mov	r1, r3
   b541c:	f7ff bef0 	b.w	b5200 <network_off>

000b5420 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5420:	2300      	movs	r3, #0
   b5422:	6840      	ldr	r0, [r0, #4]
   b5424:	461a      	mov	r2, r3
   b5426:	4619      	mov	r1, r3
   b5428:	f7ff bee2 	b.w	b51f0 <network_on>

000b542c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b542c:	2200      	movs	r2, #0
   b542e:	6840      	ldr	r0, [r0, #4]
   b5430:	4611      	mov	r1, r2
   b5432:	f7ff bed5 	b.w	b51e0 <network_ready>

000b5436 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5436:	2200      	movs	r2, #0
   b5438:	6840      	ldr	r0, [r0, #4]
   b543a:	4611      	mov	r1, r2
   b543c:	f7ff bec0 	b.w	b51c0 <network_connecting>

000b5440 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5440:	6840      	ldr	r0, [r0, #4]
   b5442:	2200      	movs	r2, #0
   b5444:	2102      	movs	r1, #2
   b5446:	f7ff bec3 	b.w	b51d0 <network_disconnect>

000b544a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b544a:	2300      	movs	r3, #0
   b544c:	6840      	ldr	r0, [r0, #4]
   b544e:	461a      	mov	r2, r3
   b5450:	f7ff beae 	b.w	b51b0 <network_connect>

000b5454 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5454:	4b02      	ldr	r3, [pc, #8]	; (b5460 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5456:	2203      	movs	r2, #3
   b5458:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b545a:	4a02      	ldr	r2, [pc, #8]	; (b5464 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b545c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b545e:	4770      	bx	lr
   b5460:	2003e690 	.word	0x2003e690
   b5464:	000b7844 	.word	0x000b7844

000b5468 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5468:	4770      	bx	lr

000b546a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b546c:	4606      	mov	r6, r0
   b546e:	4615      	mov	r5, r2
   b5470:	460c      	mov	r4, r1
   b5472:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5474:	42bc      	cmp	r4, r7
   b5476:	d006      	beq.n	b5486 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5478:	6833      	ldr	r3, [r6, #0]
   b547a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b547e:	689b      	ldr	r3, [r3, #8]
   b5480:	4630      	mov	r0, r6
   b5482:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5484:	e7f6      	b.n	b5474 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5486:	4628      	mov	r0, r5
   b5488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b548a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b548a:	7c00      	ldrb	r0, [r0, #16]
   b548c:	2200      	movs	r2, #0
   b548e:	f7ff bd29 	b.w	b4ee4 <hal_i2c_write>

000b5492 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5492:	7c00      	ldrb	r0, [r0, #16]
   b5494:	2100      	movs	r1, #0
   b5496:	f7ff bd2d 	b.w	b4ef4 <hal_i2c_available>

000b549a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b549a:	7c00      	ldrb	r0, [r0, #16]
   b549c:	2100      	movs	r1, #0
   b549e:	f7ff bd31 	b.w	b4f04 <hal_i2c_read>

000b54a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b54a2:	7c00      	ldrb	r0, [r0, #16]
   b54a4:	2100      	movs	r1, #0
   b54a6:	f7ff bd35 	b.w	b4f14 <hal_i2c_peek>

000b54aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b54aa:	7c00      	ldrb	r0, [r0, #16]
   b54ac:	2100      	movs	r1, #0
   b54ae:	f7ff bd39 	b.w	b4f24 <hal_i2c_flush>

000b54b2 <_ZN7TwoWireD0Ev>:
   b54b2:	b510      	push	{r4, lr}
   b54b4:	2114      	movs	r1, #20
   b54b6:	4604      	mov	r4, r0
   b54b8:	f7fe fdef 	bl	b409a <_ZdlPvj>
   b54bc:	4620      	mov	r0, r4
   b54be:	bd10      	pop	{r4, pc}

000b54c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b54c0:	b538      	push	{r3, r4, r5, lr}
   b54c2:	4604      	mov	r4, r0
   b54c4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b54c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54ca:	2200      	movs	r2, #0
   b54cc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b54d0:	4b09      	ldr	r3, [pc, #36]	; (b54f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b54d2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b54d4:	4608      	mov	r0, r1
   b54d6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b54d8:	4629      	mov	r1, r5
   b54da:	f7ff fd33 	bl	b4f44 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b54de:	30bf      	adds	r0, #191	; 0xbf
   b54e0:	d108      	bne.n	b54f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b54e2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b54e4:	07db      	lsls	r3, r3, #31
   b54e6:	d505      	bpl.n	b54f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b54e8:	6868      	ldr	r0, [r5, #4]
   b54ea:	f7ff fec9 	bl	b5280 <free>
    free(conf.tx_buffer);
   b54ee:	68e8      	ldr	r0, [r5, #12]
   b54f0:	f7ff fec6 	bl	b5280 <free>
}
   b54f4:	4620      	mov	r0, r4
   b54f6:	bd38      	pop	{r3, r4, r5, pc}
   b54f8:	000b7880 	.word	0x000b7880

000b54fc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b54fc:	2300      	movs	r3, #0
   b54fe:	7c00      	ldrb	r0, [r0, #16]
   b5500:	461a      	mov	r2, r3
   b5502:	4619      	mov	r1, r3
   b5504:	f7ff bcd6 	b.w	b4eb4 <hal_i2c_begin>

000b5508 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b550a:	2200      	movs	r2, #0
   b550c:	2314      	movs	r3, #20
   b550e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5512:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5516:	780b      	ldrb	r3, [r1, #0]
   b5518:	f88d 3008 	strb.w	r3, [sp, #8]
   b551c:	684b      	ldr	r3, [r1, #4]
   b551e:	9303      	str	r3, [sp, #12]
   b5520:	68cb      	ldr	r3, [r1, #12]
   b5522:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5524:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5526:	7a0b      	ldrb	r3, [r1, #8]
   b5528:	9305      	str	r3, [sp, #20]
   b552a:	a901      	add	r1, sp, #4
   b552c:	f7ff fd12 	bl	b4f54 <hal_i2c_request_ex>
}
   b5530:	b007      	add	sp, #28
   b5532:	f85d fb04 	ldr.w	pc, [sp], #4

000b5536 <_ZN7TwoWire11requestFromEhjh>:
{
   b5536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5538:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b553a:	f88d 1000 	strb.w	r1, [sp]
   b553e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5542:	9103      	str	r1, [sp, #12]
   b5544:	bf18      	it	ne
   b5546:	2301      	movne	r3, #1
   b5548:	4669      	mov	r1, sp
    size_ = size;
   b554a:	9201      	str	r2, [sp, #4]
   b554c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5550:	f7ff ffda 	bl	b5508 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5554:	b005      	add	sp, #20
   b5556:	f85d fb04 	ldr.w	pc, [sp], #4

000b555a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b555a:	2301      	movs	r3, #1
   b555c:	f7ff bfeb 	b.w	b5536 <_ZN7TwoWire11requestFromEhjh>

000b5560 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5560:	7c00      	ldrb	r0, [r0, #16]
   b5562:	2200      	movs	r2, #0
   b5564:	f7ff bcae 	b.w	b4ec4 <hal_i2c_begin_transmission>

000b5568 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5568:	7c00      	ldrb	r0, [r0, #16]
   b556a:	2200      	movs	r2, #0
   b556c:	f7ff bcb2 	b.w	b4ed4 <hal_i2c_end_transmission>

000b5570 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5570:	4770      	bx	lr

000b5572 <_ZN9IPAddressD0Ev>:
   b5572:	b510      	push	{r4, lr}
   b5574:	2118      	movs	r1, #24
   b5576:	4604      	mov	r4, r0
   b5578:	f7fe fd8f 	bl	b409a <_ZdlPvj>
   b557c:	4620      	mov	r0, r4
   b557e:	bd10      	pop	{r4, pc}

000b5580 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5580:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5582:	7d03      	ldrb	r3, [r0, #20]
   b5584:	2b06      	cmp	r3, #6
{
   b5586:	b08d      	sub	sp, #52	; 0x34
   b5588:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b558a:	f100 0704 	add.w	r7, r0, #4
   b558e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5592:	d012      	beq.n	b55ba <_ZNK9IPAddress7printToER5Print+0x3a>
   b5594:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5598:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b559c:	220a      	movs	r2, #10
   b559e:	4630      	mov	r0, r6
   b55a0:	f001 fa93 	bl	b6aca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b55a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b55a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b55a8:	d019      	beq.n	b55de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b55aa:	2c00      	cmp	r4, #0
   b55ac:	d0f4      	beq.n	b5598 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b55ae:	212e      	movs	r1, #46	; 0x2e
   b55b0:	4630      	mov	r0, r6
   b55b2:	f001 fa7b 	bl	b6aac <_ZN5Print5printEc>
   b55b6:	4404      	add	r4, r0
   b55b8:	e7ee      	b.n	b5598 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55ba:	232f      	movs	r3, #47	; 0x2f
   b55bc:	466a      	mov	r2, sp
   b55be:	4639      	mov	r1, r7
   b55c0:	200a      	movs	r0, #10
		buf[0] = 0;
   b55c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55c6:	f7ff fccd 	bl	b4f64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b55ca:	4668      	mov	r0, sp
   b55cc:	f001 fead 	bl	b732a <strlen>
   b55d0:	6833      	ldr	r3, [r6, #0]
   b55d2:	4602      	mov	r2, r0
   b55d4:	68db      	ldr	r3, [r3, #12]
   b55d6:	4669      	mov	r1, sp
   b55d8:	4630      	mov	r0, r6
   b55da:	4798      	blx	r3
   b55dc:	4604      	mov	r4, r0
    }
    return n;
}
   b55de:	4620      	mov	r0, r4
   b55e0:	b00d      	add	sp, #52	; 0x34
   b55e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b55e4:	b510      	push	{r4, lr}
   b55e6:	4b05      	ldr	r3, [pc, #20]	; (b55fc <_ZN9IPAddressC1Ev+0x18>)
   b55e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b55ea:	2211      	movs	r2, #17
   b55ec:	f840 3b04 	str.w	r3, [r0], #4
   b55f0:	2100      	movs	r1, #0
   b55f2:	f001 fe3b 	bl	b726c <memset>
}
   b55f6:	4620      	mov	r0, r4
   b55f8:	bd10      	pop	{r4, pc}
   b55fa:	bf00      	nop
   b55fc:	000b78a8 	.word	0x000b78a8

000b5600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5600:	4603      	mov	r3, r0
   b5602:	4a07      	ldr	r2, [pc, #28]	; (b5620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5604:	b510      	push	{r4, lr}
   b5606:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b560a:	f101 0210 	add.w	r2, r1, #16
   b560e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5612:	f843 4b04 	str.w	r4, [r3], #4
   b5616:	4291      	cmp	r1, r2
   b5618:	d1f9      	bne.n	b560e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b561a:	780a      	ldrb	r2, [r1, #0]
   b561c:	701a      	strb	r2, [r3, #0]
}
   b561e:	bd10      	pop	{r4, pc}
   b5620:	000b78a8 	.word	0x000b78a8

000b5624 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5624:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5626:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b562a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b562e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5632:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5636:	2304      	movs	r3, #4
   b5638:	6041      	str	r1, [r0, #4]
   b563a:	7503      	strb	r3, [r0, #20]
}
   b563c:	bd10      	pop	{r4, pc}
	...

000b5640 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5640:	b507      	push	{r0, r1, r2, lr}
   b5642:	4b06      	ldr	r3, [pc, #24]	; (b565c <_ZN9IPAddressC1EPKh+0x1c>)
   b5644:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5646:	78cb      	ldrb	r3, [r1, #3]
   b5648:	9300      	str	r3, [sp, #0]
   b564a:	788b      	ldrb	r3, [r1, #2]
   b564c:	784a      	ldrb	r2, [r1, #1]
   b564e:	7809      	ldrb	r1, [r1, #0]
   b5650:	f7ff ffe8 	bl	b5624 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5654:	b003      	add	sp, #12
   b5656:	f85d fb04 	ldr.w	pc, [sp], #4
   b565a:	bf00      	nop
   b565c:	000b78a8 	.word	0x000b78a8

000b5660 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5660:	f100 0310 	add.w	r3, r0, #16
   b5664:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b5666:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b566a:	2901      	cmp	r1, #1
   b566c:	4618      	mov	r0, r3
   b566e:	d108      	bne.n	b5682 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5670:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5674:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5678:	3a01      	subs	r2, #1
   b567a:	f103 0310 	add.w	r3, r3, #16
   b567e:	d1f2      	bne.n	b5666 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5680:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5682:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5684:	bf04      	itt	eq
   b5686:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b568a:	1852      	addeq	r2, r2, r1
   b568c:	e7f4      	b.n	b5678 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b568e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b568e:	b40e      	push	{r1, r2, r3}
   b5690:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5692:	b088      	sub	sp, #32
   b5694:	af00      	add	r7, sp, #0
   b5696:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b569a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b569c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56a0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b56a2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56a4:	462b      	mov	r3, r5
   b56a6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b56a8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56aa:	f7ff fdf9 	bl	b52a0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b56ae:	280f      	cmp	r0, #15
   b56b0:	687a      	ldr	r2, [r7, #4]
   b56b2:	d91a      	bls.n	b56ea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b56b4:	f100 0308 	add.w	r3, r0, #8
   b56b8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b56bc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b56be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56c2:	1c41      	adds	r1, r0, #1
   b56c4:	462b      	mov	r3, r5
   b56c6:	4668      	mov	r0, sp
        va_start(args, fmt);
   b56c8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56ca:	f7ff fde9 	bl	b52a0 <vsnprintf>
        if (n > 0) {
   b56ce:	1e02      	subs	r2, r0, #0
   b56d0:	dd04      	ble.n	b56dc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b56d2:	6823      	ldr	r3, [r4, #0]
   b56d4:	4669      	mov	r1, sp
   b56d6:	689b      	ldr	r3, [r3, #8]
   b56d8:	4620      	mov	r0, r4
   b56da:	4798      	blx	r3
   b56dc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b56de:	3720      	adds	r7, #32
   b56e0:	46bd      	mov	sp, r7
   b56e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b56e6:	b003      	add	sp, #12
   b56e8:	4770      	bx	lr
    } else if (n > 0) {
   b56ea:	2800      	cmp	r0, #0
   b56ec:	d0f7      	beq.n	b56de <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b56ee:	6823      	ldr	r3, [r4, #0]
   b56f0:	4602      	mov	r2, r0
   b56f2:	689b      	ldr	r3, [r3, #8]
   b56f4:	f107 0110 	add.w	r1, r7, #16
   b56f8:	4620      	mov	r0, r4
   b56fa:	4798      	blx	r3
}
   b56fc:	e7ef      	b.n	b56de <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b56fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b56fe:	b538      	push	{r3, r4, r5, lr}
   b5700:	680b      	ldr	r3, [r1, #0]
   b5702:	6003      	str	r3, [r0, #0]
   b5704:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5706:	6843      	ldr	r3, [r0, #4]
   b5708:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b570a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b570c:	d008      	beq.n	b5720 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b570e:	b115      	cbz	r5, b5716 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5710:	686b      	ldr	r3, [r5, #4]
   b5712:	3301      	adds	r3, #1
   b5714:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5716:	6860      	ldr	r0, [r4, #4]
   b5718:	b108      	cbz	r0, b571e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b571a:	f7ff fde4 	bl	b52e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b571e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5720:	bd38      	pop	{r3, r4, r5, pc}

000b5722 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5722:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5724:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5726:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b572a:	689b      	ldr	r3, [r3, #8]
   b572c:	2201      	movs	r2, #1
   b572e:	f10d 0107 	add.w	r1, sp, #7
   b5732:	4798      	blx	r3
}
   b5734:	b003      	add	sp, #12
   b5736:	f85d fb04 	ldr.w	pc, [sp], #4

000b573a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b573a:	460b      	mov	r3, r1
   b573c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b573e:	2200      	movs	r2, #0
   b5740:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5742:	e9c0 2200 	strd	r2, r2, [r0]
   b5746:	4604      	mov	r4, r0
        t_ = t;
   b5748:	6083      	str	r3, [r0, #8]
    if (t) {
   b574a:	b90b      	cbnz	r3, b5750 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b574c:	4620      	mov	r0, r4
   b574e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5750:	f7ff ffd5 	bl	b56fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5754:	e7fa      	b.n	b574c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5756 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5756:	6883      	ldr	r3, [r0, #8]
   b5758:	b1eb      	cbz	r3, b5796 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b575a:	781a      	ldrb	r2, [r3, #0]
   b575c:	2a03      	cmp	r2, #3
   b575e:	d81a      	bhi.n	b5796 <_ZNK5spark9JSONValue4typeEv+0x40>
   b5760:	e8df f002 	tbb	[pc, r2]
   b5764:	1b021704 	.word	0x1b021704
   b5768:	2005      	movs	r0, #5
   b576a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b576c:	6802      	ldr	r2, [r0, #0]
   b576e:	685b      	ldr	r3, [r3, #4]
   b5770:	6852      	ldr	r2, [r2, #4]
   b5772:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5774:	282d      	cmp	r0, #45	; 0x2d
   b5776:	d012      	beq.n	b579e <_ZNK5spark9JSONValue4typeEv+0x48>
   b5778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b577c:	2b09      	cmp	r3, #9
   b577e:	d90e      	bls.n	b579e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b5780:	2874      	cmp	r0, #116	; 0x74
   b5782:	d00e      	beq.n	b57a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5784:	2866      	cmp	r0, #102	; 0x66
   b5786:	d00c      	beq.n	b57a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5788:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b578c:	4258      	negs	r0, r3
   b578e:	4158      	adcs	r0, r3
   b5790:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b5792:	2006      	movs	r0, #6
   b5794:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5796:	2000      	movs	r0, #0
   b5798:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b579a:	2004      	movs	r0, #4
   b579c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b579e:	2003      	movs	r0, #3
   b57a0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b57a2:	2002      	movs	r0, #2
}
   b57a4:	4770      	bx	lr

000b57a6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b57a6:	b510      	push	{r4, lr}
   b57a8:	4604      	mov	r4, r0
    switch (type()) {
   b57aa:	f7ff ffd4 	bl	b5756 <_ZNK5spark9JSONValue4typeEv>
   b57ae:	2802      	cmp	r0, #2
   b57b0:	d00e      	beq.n	b57d0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b57b2:	1ec3      	subs	r3, r0, #3
   b57b4:	b2db      	uxtb	r3, r3
   b57b6:	2b01      	cmp	r3, #1
   b57b8:	d814      	bhi.n	b57e4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b57ba:	6822      	ldr	r2, [r4, #0]
   b57bc:	68a3      	ldr	r3, [r4, #8]
   b57be:	6850      	ldr	r0, [r2, #4]
   b57c0:	685b      	ldr	r3, [r3, #4]
}
   b57c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b57c6:	220a      	movs	r2, #10
   b57c8:	2100      	movs	r1, #0
   b57ca:	4418      	add	r0, r3
   b57cc:	f001 be60 	b.w	b7490 <strtol>
        const char* const s = d_->json + t_->start;
   b57d0:	6822      	ldr	r2, [r4, #0]
   b57d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b57d4:	6852      	ldr	r2, [r2, #4]
   b57d6:	685b      	ldr	r3, [r3, #4]
   b57d8:	5cd0      	ldrb	r0, [r2, r3]
   b57da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b57de:	4258      	negs	r0, r3
   b57e0:	4158      	adcs	r0, r3
}
   b57e2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b57e4:	2000      	movs	r0, #0
   b57e6:	e7fc      	b.n	b57e2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b57e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b57e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b57ea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b57ec:	e9c0 3300 	strd	r3, r3, [r0]
   b57f0:	4604      	mov	r4, r0
        n_(0) {
   b57f2:	480e      	ldr	r0, [pc, #56]	; (b582c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b57f4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b57f8:	b1a9      	cbz	r1, b5826 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b57fa:	780b      	ldrb	r3, [r1, #0]
   b57fc:	2b03      	cmp	r3, #3
   b57fe:	d006      	beq.n	b580e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5800:	b98b      	cbnz	r3, b5826 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5802:	6813      	ldr	r3, [r2, #0]
   b5804:	6858      	ldr	r0, [r3, #4]
   b5806:	684b      	ldr	r3, [r1, #4]
   b5808:	5cc3      	ldrb	r3, [r0, r3]
   b580a:	2b6e      	cmp	r3, #110	; 0x6e
   b580c:	d007      	beq.n	b581e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b580e:	6813      	ldr	r3, [r2, #0]
   b5810:	684d      	ldr	r5, [r1, #4]
   b5812:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5814:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5816:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5818:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b581a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b581c:	60e3      	str	r3, [r4, #12]
   b581e:	4611      	mov	r1, r2
   b5820:	4620      	mov	r0, r4
   b5822:	f7ff ff6c 	bl	b56fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5826:	4620      	mov	r0, r4
   b5828:	bd38      	pop	{r3, r4, r5, pc}
   b582a:	bf00      	nop
   b582c:	000b7917 	.word	0x000b7917

000b5830 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5830:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5832:	2500      	movs	r5, #0
   b5834:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5836:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b583a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b583e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5842:	4604      	mov	r4, r0
   b5844:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5846:	b14b      	cbz	r3, b585c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5848:	781a      	ldrb	r2, [r3, #0]
   b584a:	2a01      	cmp	r2, #1
   b584c:	d106      	bne.n	b585c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b584e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5852:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5854:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5856:	6143      	str	r3, [r0, #20]
   b5858:	f7ff ff51 	bl	b56fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b585c:	4620      	mov	r0, r4
   b585e:	bd38      	pop	{r3, r4, r5, pc}

000b5860 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5860:	b510      	push	{r4, lr}
    if (!n_) {
   b5862:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5864:	4604      	mov	r4, r0
    if (!n_) {
   b5866:	b163      	cbz	r3, b5882 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5868:	6880      	ldr	r0, [r0, #8]
   b586a:	60e0      	str	r0, [r4, #12]
    --n_;
   b586c:	3b01      	subs	r3, #1
    ++t_;
   b586e:	3010      	adds	r0, #16
   b5870:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5872:	6120      	str	r0, [r4, #16]
    --n_;
   b5874:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5876:	b113      	cbz	r3, b587e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5878:	f7ff fef2 	bl	b5660 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b587c:	60a0      	str	r0, [r4, #8]
    return true;
   b587e:	2001      	movs	r0, #1
   b5880:	e000      	b.n	b5884 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5882:	4618      	mov	r0, r3
}
   b5884:	bd10      	pop	{r4, pc}

000b5886 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5886:	b510      	push	{r4, lr}
    write('}');
   b5888:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b588a:	4604      	mov	r4, r0
    write('}');
   b588c:	f7ff ff49 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5890:	2301      	movs	r3, #1
   b5892:	7123      	strb	r3, [r4, #4]
}
   b5894:	4620      	mov	r0, r4
   b5896:	bd10      	pop	{r4, pc}

000b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5898:	b508      	push	{r3, lr}
    switch (state_) {
   b589a:	7903      	ldrb	r3, [r0, #4]
   b589c:	2b01      	cmp	r3, #1
   b589e:	d002      	beq.n	b58a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b58a0:	2b02      	cmp	r3, #2
   b58a2:	d004      	beq.n	b58ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b58a4:	bd08      	pop	{r3, pc}
        write(',');
   b58a6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b58a8:	f7ff ff3b 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
}
   b58ac:	e7fa      	b.n	b58a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b58ae:	213a      	movs	r1, #58	; 0x3a
   b58b0:	e7fa      	b.n	b58a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b58b2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b58b2:	b510      	push	{r4, lr}
   b58b4:	4604      	mov	r4, r0
    writeSeparator();
   b58b6:	f7ff ffef 	bl	b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b58ba:	4620      	mov	r0, r4
   b58bc:	217b      	movs	r1, #123	; 0x7b
   b58be:	f7ff ff30 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b58c2:	2300      	movs	r3, #0
   b58c4:	7123      	strb	r3, [r4, #4]
}
   b58c6:	4620      	mov	r0, r4
   b58c8:	bd10      	pop	{r4, pc}
	...

000b58cc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b58cc:	b513      	push	{r0, r1, r4, lr}
   b58ce:	4604      	mov	r4, r0
   b58d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b58d2:	f7ff ffe1 	bl	b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b58d6:	6823      	ldr	r3, [r4, #0]
   b58d8:	9a01      	ldr	r2, [sp, #4]
   b58da:	68db      	ldr	r3, [r3, #12]
   b58dc:	4903      	ldr	r1, [pc, #12]	; (b58ec <_ZN5spark10JSONWriter5valueEi+0x20>)
   b58de:	4620      	mov	r0, r4
   b58e0:	4798      	blx	r3
    state_ = NEXT;
   b58e2:	2301      	movs	r3, #1
}
   b58e4:	4620      	mov	r0, r4
    state_ = NEXT;
   b58e6:	7123      	strb	r3, [r4, #4]
}
   b58e8:	b002      	add	sp, #8
   b58ea:	bd10      	pop	{r4, pc}
   b58ec:	000b78b4 	.word	0x000b78b4

000b58f0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b58f0:	b513      	push	{r0, r1, r4, lr}
   b58f2:	4604      	mov	r4, r0
   b58f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b58f6:	f7ff ffcf 	bl	b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b58fa:	6823      	ldr	r3, [r4, #0]
   b58fc:	9a01      	ldr	r2, [sp, #4]
   b58fe:	68db      	ldr	r3, [r3, #12]
   b5900:	4903      	ldr	r1, [pc, #12]	; (b5910 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5902:	4620      	mov	r0, r4
   b5904:	4798      	blx	r3
    state_ = NEXT;
   b5906:	2301      	movs	r3, #1
}
   b5908:	4620      	mov	r0, r4
    state_ = NEXT;
   b590a:	7123      	strb	r3, [r4, #4]
}
   b590c:	b002      	add	sp, #8
   b590e:	bd10      	pop	{r4, pc}
   b5910:	000b78b7 	.word	0x000b78b7

000b5914 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5918:	460d      	mov	r5, r1
    write('"');
   b591a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b591c:	4690      	mov	r8, r2
   b591e:	4604      	mov	r4, r0
    write('"');
   b5920:	f7ff feff 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5924:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b59cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5928:	44a8      	add	r8, r5
    const char *s = str;
   b592a:	462f      	mov	r7, r5
    while (s != end) {
   b592c:	4547      	cmp	r7, r8
   b592e:	46ba      	mov	sl, r7
   b5930:	d03d      	beq.n	b59ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5932:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5936:	2e22      	cmp	r6, #34	; 0x22
   b5938:	d006      	beq.n	b5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b593a:	2e5c      	cmp	r6, #92	; 0x5c
   b593c:	d004      	beq.n	b5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b593e:	4630      	mov	r0, r6
   b5940:	f001 fc64 	bl	b720c <isprint>
   b5944:	2800      	cmp	r0, #0
   b5946:	d1f1      	bne.n	b592c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5948:	6823      	ldr	r3, [r4, #0]
   b594a:	ebaa 0205 	sub.w	r2, sl, r5
   b594e:	689b      	ldr	r3, [r3, #8]
   b5950:	4629      	mov	r1, r5
   b5952:	4620      	mov	r0, r4
   b5954:	4798      	blx	r3
            write('\\');
   b5956:	215c      	movs	r1, #92	; 0x5c
   b5958:	4620      	mov	r0, r4
   b595a:	f7ff fee2 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b595e:	2e0d      	cmp	r6, #13
   b5960:	d80a      	bhi.n	b5978 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5962:	2e07      	cmp	r6, #7
   b5964:	d91c      	bls.n	b59a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5966:	f1a6 0308 	sub.w	r3, r6, #8
   b596a:	2b05      	cmp	r3, #5
   b596c:	d818      	bhi.n	b59a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b596e:	e8df f003 	tbb	[pc, r3]
   b5972:	0f0d      	.short	0x0f0d
   b5974:	15131711 	.word	0x15131711
   b5978:	2e22      	cmp	r6, #34	; 0x22
   b597a:	d001      	beq.n	b5980 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b597c:	2e5c      	cmp	r6, #92	; 0x5c
   b597e:	d10f      	bne.n	b59a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5980:	4631      	mov	r1, r6
                write('b');
   b5982:	4620      	mov	r0, r4
   b5984:	f7ff fecd 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5988:	463d      	mov	r5, r7
    while (s != end) {
   b598a:	e7cf      	b.n	b592c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b598c:	2162      	movs	r1, #98	; 0x62
   b598e:	e7f8      	b.n	b5982 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5990:	2174      	movs	r1, #116	; 0x74
   b5992:	e7f6      	b.n	b5982 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5994:	216e      	movs	r1, #110	; 0x6e
   b5996:	e7f4      	b.n	b5982 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5998:	2166      	movs	r1, #102	; 0x66
   b599a:	e7f2      	b.n	b5982 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b599c:	2172      	movs	r1, #114	; 0x72
   b599e:	e7f0      	b.n	b5982 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b59a0:	6823      	ldr	r3, [r4, #0]
   b59a2:	4632      	mov	r2, r6
   b59a4:	68db      	ldr	r3, [r3, #12]
   b59a6:	4649      	mov	r1, r9
   b59a8:	4620      	mov	r0, r4
   b59aa:	4798      	blx	r3
                break;
   b59ac:	e7ec      	b.n	b5988 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b59ae:	42bd      	cmp	r5, r7
   b59b0:	d005      	beq.n	b59be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b59b2:	6823      	ldr	r3, [r4, #0]
   b59b4:	1b7a      	subs	r2, r7, r5
   b59b6:	689b      	ldr	r3, [r3, #8]
   b59b8:	4629      	mov	r1, r5
   b59ba:	4620      	mov	r0, r4
   b59bc:	4798      	blx	r3
    }
    write('"');
   b59be:	2122      	movs	r1, #34	; 0x22
   b59c0:	4620      	mov	r0, r4
   b59c2:	f7ff feae 	bl	b5722 <_ZN5spark10JSONWriter5writeEc>
}
   b59c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b59ca:	bf00      	nop
   b59cc:	000b78ba 	.word	0x000b78ba

000b59d0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b59d0:	b513      	push	{r0, r1, r4, lr}
   b59d2:	4604      	mov	r4, r0
   b59d4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b59d8:	f7ff ff5e 	bl	b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b59dc:	4620      	mov	r0, r4
   b59de:	e9dd 2100 	ldrd	r2, r1, [sp]
   b59e2:	f7ff ff97 	bl	b5914 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b59e6:	2302      	movs	r3, #2
}
   b59e8:	4620      	mov	r0, r4
    state_ = VALUE;
   b59ea:	7123      	strb	r3, [r4, #4]
}
   b59ec:	b002      	add	sp, #8
   b59ee:	bd10      	pop	{r4, pc}

000b59f0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b59f0:	b513      	push	{r0, r1, r4, lr}
   b59f2:	4604      	mov	r4, r0
   b59f4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b59f8:	f7ff ff4e 	bl	b5898 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b59fc:	4620      	mov	r0, r4
   b59fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5a02:	f7ff ff87 	bl	b5914 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5a06:	2301      	movs	r3, #1
}
   b5a08:	4620      	mov	r0, r4
    state_ = NEXT;
   b5a0a:	7123      	strb	r3, [r4, #4]
}
   b5a0c:	b002      	add	sp, #8
   b5a0e:	bd10      	pop	{r4, pc}

000b5a10 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5a10:	6880      	ldr	r0, [r0, #8]
   b5a12:	6803      	ldr	r3, [r0, #0]
   b5a14:	68db      	ldr	r3, [r3, #12]
   b5a16:	4718      	bx	r3

000b5a18 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5a18:	4770      	bx	lr

000b5a1a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5a1a:	4608      	mov	r0, r1
   b5a1c:	b111      	cbz	r1, b5a24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5a1e:	680b      	ldr	r3, [r1, #0]
   b5a20:	685b      	ldr	r3, [r3, #4]
   b5a22:	4718      	bx	r3
}
   b5a24:	4770      	bx	lr

000b5a26 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5a26:	4770      	bx	lr

000b5a28 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5a28:	4770      	bx	lr

000b5a2a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5a2a:	4770      	bx	lr

000b5a2c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5a2c:	4770      	bx	lr

000b5a2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5a2e:	b538      	push	{r3, r4, r5, lr}
   b5a30:	4604      	mov	r4, r0
   b5a32:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5a34:	6800      	ldr	r0, [r0, #0]
   b5a36:	212e      	movs	r1, #46	; 0x2e
   b5a38:	f001 fc5b 	bl	b72f2 <strchrnul>
    size = s - category;
   b5a3c:	6823      	ldr	r3, [r4, #0]
   b5a3e:	1ac3      	subs	r3, r0, r3
   b5a40:	602b      	str	r3, [r5, #0]
    if (size) {
   b5a42:	b123      	cbz	r3, b5a4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5a44:	7803      	ldrb	r3, [r0, #0]
   b5a46:	b103      	cbz	r3, b5a4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5a48:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5a4a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a4c:	6020      	str	r0, [r4, #0]
}
   b5a4e:	4618      	mov	r0, r3
   b5a50:	bd38      	pop	{r3, r4, r5, pc}

000b5a52 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5a52:	b510      	push	{r4, lr}
   b5a54:	210c      	movs	r1, #12
   b5a56:	4604      	mov	r4, r0
   b5a58:	f7fe fb1f 	bl	b409a <_ZdlPvj>
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	bd10      	pop	{r4, pc}

000b5a60 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5a60:	b510      	push	{r4, lr}
   b5a62:	2104      	movs	r1, #4
   b5a64:	4604      	mov	r4, r0
   b5a66:	f7fe fb18 	bl	b409a <_ZdlPvj>
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	bd10      	pop	{r4, pc}

000b5a6e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5a6e:	b510      	push	{r4, lr}
   b5a70:	2104      	movs	r1, #4
   b5a72:	4604      	mov	r4, r0
   b5a74:	f7fe fb11 	bl	b409a <_ZdlPvj>
   b5a78:	4620      	mov	r0, r4
   b5a7a:	bd10      	pop	{r4, pc}

000b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5a7c:	f7ff b9ca 	b.w	b4e14 <os_mutex_recursive_lock>

000b5a80 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5a80:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5a82:	f001 fc40 	bl	b7306 <strcmp>
}
   b5a86:	fab0 f080 	clz	r0, r0
   b5a8a:	0940      	lsrs	r0, r0, #5
   b5a8c:	bd08      	pop	{r3, pc}

000b5a8e <__tcf_1>:
   b5a8e:	4770      	bx	lr

000b5a90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5a90:	b510      	push	{r4, lr}
   b5a92:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5a94:	f001 f9f4 	bl	b6e80 <_Z16_fetch_usbserialv>
   b5a98:	4284      	cmp	r4, r0
   b5a9a:	d010      	beq.n	b5abe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5a9c:	f001 fb88 	bl	b71b0 <_Z22__fetch_global_Serial1v>
   b5aa0:	4284      	cmp	r4, r0
   b5aa2:	d105      	bne.n	b5ab0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5aa4:	f001 fb84 	bl	b71b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5aac:	f001 b981 	b.w	b6db2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5ab0:	b12c      	cbz	r4, b5abe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5ab2:	6823      	ldr	r3, [r4, #0]
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	685b      	ldr	r3, [r3, #4]
}
   b5ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5abc:	4718      	bx	r3
   b5abe:	bd10      	pop	{r4, pc}

000b5ac0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ac0:	680b      	ldr	r3, [r1, #0]
   b5ac2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5ac4:	684b      	ldr	r3, [r1, #4]
   b5ac6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5ac8:	b113      	cbz	r3, b5ad0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5aca:	685a      	ldr	r2, [r3, #4]
   b5acc:	3201      	adds	r2, #1
   b5ace:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ad0:	4770      	bx	lr

000b5ad2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5ad2:	b513      	push	{r0, r1, r4, lr}
   b5ad4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5ad6:	4608      	mov	r0, r1
   b5ad8:	9101      	str	r1, [sp, #4]
   b5ada:	f001 fc26 	bl	b732a <strlen>
   b5ade:	9901      	ldr	r1, [sp, #4]
   b5ae0:	4602      	mov	r2, r0
   b5ae2:	4620      	mov	r0, r4
}
   b5ae4:	b002      	add	sp, #8
   b5ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5aea:	f7ff bf81 	b.w	b59f0 <_ZN5spark10JSONWriter5valueEPKcj>

000b5aee <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5aee:	b513      	push	{r0, r1, r4, lr}
   b5af0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5af2:	4608      	mov	r0, r1
   b5af4:	9101      	str	r1, [sp, #4]
   b5af6:	f001 fc18 	bl	b732a <strlen>
   b5afa:	6823      	ldr	r3, [r4, #0]
   b5afc:	9901      	ldr	r1, [sp, #4]
   b5afe:	68db      	ldr	r3, [r3, #12]
   b5b00:	4602      	mov	r2, r0
   b5b02:	4620      	mov	r0, r4
}
   b5b04:	b002      	add	sp, #8
   b5b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5b0a:	4718      	bx	r3

000b5b0c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5b0c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5b0e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5b10:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5b14:	68db      	ldr	r3, [r3, #12]
   b5b16:	2201      	movs	r2, #1
   b5b18:	f10d 0107 	add.w	r1, sp, #7
   b5b1c:	4798      	blx	r3
}
   b5b1e:	b003      	add	sp, #12
   b5b20:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b24 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5b24:	b40e      	push	{r1, r2, r3}
   b5b26:	b503      	push	{r0, r1, lr}
   b5b28:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5b2a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5b2c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5b30:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5b32:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5b34:	f000 ffe7 	bl	b6b06 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5b38:	b002      	add	sp, #8
   b5b3a:	f85d eb04 	ldr.w	lr, [sp], #4
   b5b3e:	b003      	add	sp, #12
   b5b40:	4770      	bx	lr

000b5b42 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5b42:	680a      	ldr	r2, [r1, #0]
   b5b44:	6002      	str	r2, [r0, #0]
   b5b46:	684a      	ldr	r2, [r1, #4]
   b5b48:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5b4a:	2200      	movs	r2, #0
   b5b4c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5b50:	b510      	push	{r4, lr}
   b5b52:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5b54:	688c      	ldr	r4, [r1, #8]
   b5b56:	6084      	str	r4, [r0, #8]
   b5b58:	68cc      	ldr	r4, [r1, #12]
   b5b5a:	60c4      	str	r4, [r0, #12]
   b5b5c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b5e:	608a      	str	r2, [r1, #8]
   b5b60:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5b62:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b64:	610a      	str	r2, [r1, #16]
   b5b66:	bd10      	pop	{r4, pc}

000b5b68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5b6c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5b70:	f04f 0a14 	mov.w	sl, #20
   b5b74:	9300      	str	r3, [sp, #0]
   b5b76:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5b7a:	4b18      	ldr	r3, [pc, #96]	; (b5bdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5b7c:	10a4      	asrs	r4, r4, #2
   b5b7e:	4617      	mov	r7, r2
   b5b80:	435c      	muls	r4, r3
   b5b82:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5b84:	2c00      	cmp	r4, #0
   b5b86:	dd21      	ble.n	b5bcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5b88:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5b8a:	fb0a f006 	mul.w	r0, sl, r6
   b5b8e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5b92:	463a      	mov	r2, r7
   b5b94:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5b98:	5828      	ldr	r0, [r5, r0]
   b5b9a:	9101      	str	r1, [sp, #4]
   b5b9c:	455f      	cmp	r7, fp
   b5b9e:	bf28      	it	cs
   b5ba0:	465a      	movcs	r2, fp
   b5ba2:	f001 fbca 	bl	b733a <strncmp>
                if (cmp == 0) {
   b5ba6:	2800      	cmp	r0, #0
   b5ba8:	9901      	ldr	r1, [sp, #4]
   b5baa:	f04f 0301 	mov.w	r3, #1
   b5bae:	d10b      	bne.n	b5bc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5bb0:	455f      	cmp	r7, fp
   b5bb2:	d103      	bne.n	b5bbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5bb4:	9a00      	ldr	r2, [sp, #0]
   b5bb6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5bb8:	4634      	mov	r4, r6
   b5bba:	e7e3      	b.n	b5b84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5bbc:	d9fc      	bls.n	b5bb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5bbe:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5bc0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5bc4:	3e01      	subs	r6, #1
   b5bc6:	e7f7      	b.n	b5bb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5bc8:	dbf9      	blt.n	b5bbe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5bca:	e7f5      	b.n	b5bb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5bcc:	eba5 0508 	sub.w	r5, r5, r8
}
   b5bd0:	4802      	ldr	r0, [pc, #8]	; (b5bdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5bd2:	10ad      	asrs	r5, r5, #2
   b5bd4:	4368      	muls	r0, r5
   b5bd6:	b003      	add	sp, #12
   b5bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5bdc:	cccccccd 	.word	0xcccccccd

000b5be0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5be2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5be4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5be6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5be8:	b303      	cbz	r3, b5c2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5bea:	b1f9      	cbz	r1, b5c2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5bec:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5bee:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5bf2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5bf4:	a903      	add	r1, sp, #12
   b5bf6:	a801      	add	r0, sp, #4
   b5bf8:	f7ff ff19 	bl	b5a2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5bfc:	4601      	mov	r1, r0
   b5bfe:	b1a8      	cbz	r0, b5c2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5c00:	f10d 030b 	add.w	r3, sp, #11
   b5c04:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5c06:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	f7ff ffac 	bl	b5b68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5c10:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5c14:	b153      	cbz	r3, b5c2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5c16:	6823      	ldr	r3, [r4, #0]
   b5c18:	2414      	movs	r4, #20
   b5c1a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5c1e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5c20:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5c24:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5c26:	bfa8      	it	ge
   b5c28:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5c2a:	e7e3      	b.n	b5bf4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5c2c:	4628      	mov	r0, r5
   b5c2e:	b004      	add	sp, #16
   b5c30:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5c34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5c34:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5c36:	4c09      	ldr	r4, [pc, #36]	; (b5c5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5c38:	7823      	ldrb	r3, [r4, #0]
   b5c3a:	f3bf 8f5b 	dmb	ish
   b5c3e:	07db      	lsls	r3, r3, #31
   b5c40:	d409      	bmi.n	b5c56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5c42:	4620      	mov	r0, r4
   b5c44:	f7fe fa38 	bl	b40b8 <__cxa_guard_acquire>
   b5c48:	b128      	cbz	r0, b5c56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	f7fe fa39 	bl	b40c2 <__cxa_guard_release>
   b5c50:	4803      	ldr	r0, [pc, #12]	; (b5c60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5c52:	f001 fad5 	bl	b7200 <atexit>
}
   b5c56:	4803      	ldr	r0, [pc, #12]	; (b5c64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5c58:	bd10      	pop	{r4, pc}
   b5c5a:	bf00      	nop
   b5c5c:	2003e69c 	.word	0x2003e69c
   b5c60:	000b5a27 	.word	0x000b5a27
   b5c64:	2003e540 	.word	0x2003e540

000b5c68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5c68:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5c6a:	4c09      	ldr	r4, [pc, #36]	; (b5c90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5c6c:	7823      	ldrb	r3, [r4, #0]
   b5c6e:	f3bf 8f5b 	dmb	ish
   b5c72:	07db      	lsls	r3, r3, #31
   b5c74:	d409      	bmi.n	b5c8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5c76:	4620      	mov	r0, r4
   b5c78:	f7fe fa1e 	bl	b40b8 <__cxa_guard_acquire>
   b5c7c:	b128      	cbz	r0, b5c8a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f7fe fa1f 	bl	b40c2 <__cxa_guard_release>
   b5c84:	4803      	ldr	r0, [pc, #12]	; (b5c94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5c86:	f001 fabb 	bl	b7200 <atexit>
    return &factory;
}
   b5c8a:	4803      	ldr	r0, [pc, #12]	; (b5c98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5c8c:	bd10      	pop	{r4, pc}
   b5c8e:	bf00      	nop
   b5c90:	2003e6a0 	.word	0x2003e6a0
   b5c94:	000b5a8f 	.word	0x000b5a8f
   b5c98:	2003e544 	.word	0x2003e544

000b5c9c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5c9c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5c9e:	2500      	movs	r5, #0
   b5ca0:	4604      	mov	r4, r0
   b5ca2:	e9c0 5500 	strd	r5, r5, [r0]
   b5ca6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5caa:	6085      	str	r5, [r0, #8]
   b5cac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5cae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5cb2:	f7ff f89f 	bl	b4df4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b5cb6:	f7ff ffbd 	bl	b5c34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5cba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5cbc:	f7ff ffd4 	bl	b5c68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5cc0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5cc2:	6220      	str	r0, [r4, #32]
}
   b5cc4:	4620      	mov	r0, r4
   b5cc6:	bd38      	pop	{r3, r4, r5, pc}

000b5cc8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5cc8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5cca:	4c0a      	ldr	r4, [pc, #40]	; (b5cf4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5ccc:	7823      	ldrb	r3, [r4, #0]
   b5cce:	f3bf 8f5b 	dmb	ish
   b5cd2:	07db      	lsls	r3, r3, #31
   b5cd4:	d40c      	bmi.n	b5cf0 <_ZN5spark10LogManager8instanceEv+0x28>
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	f7fe f9ee 	bl	b40b8 <__cxa_guard_acquire>
   b5cdc:	b140      	cbz	r0, b5cf0 <_ZN5spark10LogManager8instanceEv+0x28>
   b5cde:	4806      	ldr	r0, [pc, #24]	; (b5cf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5ce0:	f7ff ffdc 	bl	b5c9c <_ZN5spark10LogManagerC1Ev>
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	f7fe f9ec 	bl	b40c2 <__cxa_guard_release>
   b5cea:	4804      	ldr	r0, [pc, #16]	; (b5cfc <_ZN5spark10LogManager8instanceEv+0x34>)
   b5cec:	f001 fa88 	bl	b7200 <atexit>
    return &mgr;
}
   b5cf0:	4801      	ldr	r0, [pc, #4]	; (b5cf8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5cf2:	bd10      	pop	{r4, pc}
   b5cf4:	2003e698 	.word	0x2003e698
   b5cf8:	2003e6a8 	.word	0x2003e6a8
   b5cfc:	000b621d 	.word	0x000b621d

000b5d00 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5d00:	4a02      	ldr	r2, [pc, #8]	; (b5d0c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5d02:	4903      	ldr	r1, [pc, #12]	; (b5d10 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5d04:	4803      	ldr	r0, [pc, #12]	; (b5d14 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5d06:	2300      	movs	r3, #0
   b5d08:	f7ff ba04 	b.w	b5114 <log_set_callbacks>
   b5d0c:	000b6001 	.word	0x000b6001
   b5d10:	000b5f8d 	.word	0x000b5f8d
   b5d14:	000b5f0d 	.word	0x000b5f0d

000b5d18 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5d18:	2300      	movs	r3, #0
   b5d1a:	461a      	mov	r2, r3
   b5d1c:	4619      	mov	r1, r3
   b5d1e:	4618      	mov	r0, r3
   b5d20:	f7ff b9f8 	b.w	b5114 <log_set_callbacks>

000b5d24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5d26:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5d28:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5d2a:	4668      	mov	r0, sp
   b5d2c:	f7ff fec8 	bl	b5ac0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5d30:	466a      	mov	r2, sp
   b5d32:	4629      	mov	r1, r5
   b5d34:	4620      	mov	r0, r4
   b5d36:	f7ff fd7b 	bl	b5830 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5d3a:	a801      	add	r0, sp, #4
   b5d3c:	f7ff faf9 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d40:	4620      	mov	r0, r4
   b5d42:	b003      	add	sp, #12
   b5d44:	bd30      	pop	{r4, r5, pc}

000b5d46 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5d48:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5d4a:	4604      	mov	r4, r0
   b5d4c:	4668      	mov	r0, sp
   b5d4e:	f7ff feb7 	bl	b5ac0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5d52:	466a      	mov	r2, sp
   b5d54:	4629      	mov	r1, r5
   b5d56:	4620      	mov	r0, r4
   b5d58:	f7ff fd46 	bl	b57e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5d5c:	a801      	add	r0, sp, #4
   b5d5e:	f7ff fae8 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d62:	4620      	mov	r0, r4
   b5d64:	b003      	add	sp, #12
   b5d66:	bd30      	pop	{r4, r5, pc}

000b5d68 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5d6a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5d6c:	4604      	mov	r4, r0
   b5d6e:	4668      	mov	r0, sp
   b5d70:	f7ff fea6 	bl	b5ac0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5d74:	466a      	mov	r2, sp
   b5d76:	4629      	mov	r1, r5
   b5d78:	4620      	mov	r0, r4
   b5d7a:	f7ff fcde 	bl	b573a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5d7e:	a801      	add	r0, sp, #4
   b5d80:	f7ff fad7 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d84:	4620      	mov	r0, r4
   b5d86:	b003      	add	sp, #12
   b5d88:	bd30      	pop	{r4, r5, pc}
	...

000b5d8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5d8c:	b570      	push	{r4, r5, r6, lr}
   b5d8e:	b08a      	sub	sp, #40	; 0x28
   b5d90:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5d92:	4601      	mov	r1, r0
   b5d94:	a804      	add	r0, sp, #16
   b5d96:	f7ff ffc5 	bl	b5d24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5d9a:	4e14      	ldr	r6, [pc, #80]	; (b5dec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5d9c:	a804      	add	r0, sp, #16
   b5d9e:	f7ff fd5f 	bl	b5860 <_ZN5spark18JSONObjectIterator4nextEv>
   b5da2:	b1e8      	cbz	r0, b5de0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5da4:	a904      	add	r1, sp, #16
   b5da6:	4668      	mov	r0, sp
   b5da8:	f7ff ffcd 	bl	b5d46 <_ZNK5spark18JSONObjectIterator4nameEv>
   b5dac:	9802      	ldr	r0, [sp, #8]
   b5dae:	4631      	mov	r1, r6
   b5db0:	f7ff fe66 	bl	b5a80 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5db4:	4604      	mov	r4, r0
   b5db6:	b110      	cbz	r0, b5dbe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5db8:	1e2c      	subs	r4, r5, #0
   b5dba:	bf18      	it	ne
   b5dbc:	2401      	movne	r4, #1
   b5dbe:	a801      	add	r0, sp, #4
   b5dc0:	f7ff fab7 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dc4:	2c00      	cmp	r4, #0
   b5dc6:	d0e9      	beq.n	b5d9c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5dc8:	a904      	add	r1, sp, #16
   b5dca:	4668      	mov	r0, sp
   b5dcc:	f7ff ffcc 	bl	b5d68 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5dd0:	4668      	mov	r0, sp
   b5dd2:	f7ff fce8 	bl	b57a6 <_ZNK5spark9JSONValue5toIntEv>
   b5dd6:	6028      	str	r0, [r5, #0]
   b5dd8:	a801      	add	r0, sp, #4
   b5dda:	f7ff faaa 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dde:	e7dd      	b.n	b5d9c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5de0:	a805      	add	r0, sp, #20
   b5de2:	f7ff faa6 	bl	b5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5de6:	b00a      	add	sp, #40	; 0x28
   b5de8:	bd70      	pop	{r4, r5, r6, pc}
   b5dea:	bf00      	nop
   b5dec:	000b78c0 	.word	0x000b78c0

000b5df0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5df2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5df4:	4620      	mov	r0, r4
   b5df6:	4913      	ldr	r1, [pc, #76]	; (b5e44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5df8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5dfa:	f001 fa84 	bl	b7306 <strcmp>
   b5dfe:	b950      	cbnz	r0, b5e16 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5e00:	f001 f83e 	bl	b6e80 <_Z16_fetch_usbserialv>
   b5e04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5e08:	f001 f828 	bl	b6e5c <_ZN9USBSerial5beginEl>
}
   b5e0c:	b003      	add	sp, #12
   b5e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5e12:	f001 b835 	b.w	b6e80 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5e16:	490c      	ldr	r1, [pc, #48]	; (b5e48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5e18:	4620      	mov	r0, r4
   b5e1a:	f001 fa74 	bl	b7306 <strcmp>
   b5e1e:	b978      	cbnz	r0, b5e40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5e20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5e24:	a901      	add	r1, sp, #4
   b5e26:	4628      	mov	r0, r5
        int baud = 9600;
   b5e28:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5e2a:	f7ff ffaf 	bl	b5d8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5e2e:	f001 f9bf 	bl	b71b0 <_Z22__fetch_global_Serial1v>
   b5e32:	9901      	ldr	r1, [sp, #4]
   b5e34:	f000 ffba 	bl	b6dac <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5e38:	f001 f9ba 	bl	b71b0 <_Z22__fetch_global_Serial1v>
}
   b5e3c:	b003      	add	sp, #12
   b5e3e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5e40:	2000      	movs	r0, #0
   b5e42:	e7fb      	b.n	b5e3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5e44:	000b78c5 	.word	0x000b78c5
   b5e48:	000b78cc 	.word	0x000b78cc

000b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5e4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5e4e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5e52:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5e54:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5e56:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e5a:	42ae      	cmp	r6, r5
   b5e5c:	d005      	beq.n	b5e6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5e5e:	f105 0008 	add.w	r0, r5, #8
   b5e62:	f7ff fff3 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5e66:	3514      	adds	r5, #20
   b5e68:	e7f7      	b.n	b5e5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5e6a:	6820      	ldr	r0, [r4, #0]
   b5e6c:	f7ff fa08 	bl	b5280 <free>
}
   b5e70:	4620      	mov	r0, r4
   b5e72:	bd70      	pop	{r4, r5, r6, pc}

000b5e74 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5e74:	b510      	push	{r4, lr}
   b5e76:	4604      	mov	r4, r0
   b5e78:	300c      	adds	r0, #12
   b5e7a:	f7ff ffe7 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5e7e:	4620      	mov	r0, r4
   b5e80:	f7ff fa45 	bl	b530e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5e84:	4620      	mov	r0, r4
   b5e86:	bd10      	pop	{r4, pc}

000b5e88 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5e88:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5e8a:	4b04      	ldr	r3, [pc, #16]	; (b5e9c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5e8c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5e8e:	f840 3b04 	str.w	r3, [r0], #4
   b5e92:	f7ff ffef 	bl	b5e74 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5e96:	4620      	mov	r0, r4
   b5e98:	bd10      	pop	{r4, pc}
   b5e9a:	bf00      	nop
   b5e9c:	000b75b4 	.word	0x000b75b4

000b5ea0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5ea0:	b510      	push	{r4, lr}
   b5ea2:	4604      	mov	r4, r0
   b5ea4:	f7ff fff0 	bl	b5e88 <_ZN5spark16StreamLogHandlerD1Ev>
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	2124      	movs	r1, #36	; 0x24
   b5eac:	f7fe f8f5 	bl	b409a <_ZdlPvj>
   b5eb0:	4620      	mov	r0, r4
   b5eb2:	bd10      	pop	{r4, pc}

000b5eb4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5eb4:	b510      	push	{r4, lr}
   b5eb6:	4b03      	ldr	r3, [pc, #12]	; (b5ec4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5eb8:	6003      	str	r3, [r0, #0]
   b5eba:	4604      	mov	r4, r0
   b5ebc:	f7ff ffe4 	bl	b5e88 <_ZN5spark16StreamLogHandlerD1Ev>
   b5ec0:	4620      	mov	r0, r4
   b5ec2:	bd10      	pop	{r4, pc}
   b5ec4:	000b7964 	.word	0x000b7964

000b5ec8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5ec8:	b510      	push	{r4, lr}
   b5eca:	4604      	mov	r4, r0
   b5ecc:	f7ff fff2 	bl	b5eb4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	2124      	movs	r1, #36	; 0x24
   b5ed4:	f7fe f8e1 	bl	b409a <_ZdlPvj>
   b5ed8:	4620      	mov	r0, r4
   b5eda:	bd10      	pop	{r4, pc}

000b5edc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5edc:	2200      	movs	r2, #0
   b5ede:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5ee2:	b510      	push	{r4, lr}
        capacity_(0) {
   b5ee4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5ee6:	680c      	ldr	r4, [r1, #0]
   b5ee8:	6004      	str	r4, [r0, #0]
   b5eea:	684c      	ldr	r4, [r1, #4]
   b5eec:	6044      	str	r4, [r0, #4]
   b5eee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ef0:	600a      	str	r2, [r1, #0]
   b5ef2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ef4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ef6:	608a      	str	r2, [r1, #8]
}
   b5ef8:	bd10      	pop	{r4, pc}

000b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5efa:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5efc:	6803      	ldr	r3, [r0, #0]
   b5efe:	4604      	mov	r4, r0
   b5f00:	6818      	ldr	r0, [r3, #0]
   b5f02:	f7fe ff8f 	bl	b4e24 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5f06:	4620      	mov	r0, r4
   b5f08:	bd10      	pop	{r4, pc}
	...

000b5f0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f10:	b087      	sub	sp, #28
   b5f12:	4680      	mov	r8, r0
   b5f14:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5f16:	4b1c      	ldr	r3, [pc, #112]	; (b5f88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5f18:	685b      	ldr	r3, [r3, #4]
   b5f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5f1e:	4689      	mov	r9, r1
   b5f20:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5f22:	b96b      	cbnz	r3, b5f40 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5f24:	f7ff fed0 	bl	b5cc8 <_ZN5spark10LogManager8instanceEv>
   b5f28:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5f2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5f2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5f30:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5f32:	f7ff fda3 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5f36:	7b23      	ldrb	r3, [r4, #12]
   b5f38:	b12b      	cbz	r3, b5f46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5f3a:	a805      	add	r0, sp, #20
   b5f3c:	f7ff ffdd 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5f40:	b007      	add	sp, #28
   b5f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5f46:	2301      	movs	r3, #1
   b5f48:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5f4a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5f4e:	fa5f f989 	uxtb.w	r9, r9
   b5f52:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5f56:	45aa      	cmp	sl, r5
   b5f58:	d012      	beq.n	b5f80 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5f5a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5f5e:	4631      	mov	r1, r6
   b5f60:	1d38      	adds	r0, r7, #4
   b5f62:	f7ff fe3d 	bl	b5be0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5f66:	4581      	cmp	r9, r0
   b5f68:	d3f5      	bcc.n	b5f56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5f6a:	683b      	ldr	r3, [r7, #0]
   b5f6c:	9a03      	ldr	r2, [sp, #12]
   b5f6e:	9200      	str	r2, [sp, #0]
   b5f70:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5f74:	464a      	mov	r2, r9
   b5f76:	4633      	mov	r3, r6
   b5f78:	4641      	mov	r1, r8
   b5f7a:	4638      	mov	r0, r7
   b5f7c:	47d8      	blx	fp
   b5f7e:	e7ea      	b.n	b5f56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5f80:	2300      	movs	r3, #0
   b5f82:	7323      	strb	r3, [r4, #12]
   b5f84:	e7d9      	b.n	b5f3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5f86:	bf00      	nop
   b5f88:	e000ed00 	.word	0xe000ed00

000b5f8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f90:	469b      	mov	fp, r3
   b5f92:	4b1a      	ldr	r3, [pc, #104]	; (b5ffc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5f94:	685b      	ldr	r3, [r3, #4]
   b5f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5f9a:	4680      	mov	r8, r0
   b5f9c:	4689      	mov	r9, r1
   b5f9e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b5fa0:	b96b      	cbnz	r3, b5fbe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5fa2:	f7ff fe91 	bl	b5cc8 <_ZN5spark10LogManager8instanceEv>
   b5fa6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5fa8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5fac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5fae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5fb0:	f7ff fd64 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5fb4:	7b23      	ldrb	r3, [r4, #12]
   b5fb6:	b12b      	cbz	r3, b5fc4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5fb8:	a801      	add	r0, sp, #4
   b5fba:	f7ff ff9e 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5fbe:	b003      	add	sp, #12
   b5fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5fc4:	2301      	movs	r3, #1
   b5fc6:	7323      	strb	r3, [r4, #12]
   b5fc8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5fcc:	b2f6      	uxtb	r6, r6
   b5fce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5fd2:	4555      	cmp	r5, sl
   b5fd4:	d00e      	beq.n	b5ff4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5fd6:	f855 7b04 	ldr.w	r7, [r5], #4
   b5fda:	4659      	mov	r1, fp
   b5fdc:	1d38      	adds	r0, r7, #4
   b5fde:	f7ff fdff 	bl	b5be0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5fe2:	4286      	cmp	r6, r0
   b5fe4:	d3f5      	bcc.n	b5fd2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5fe6:	683b      	ldr	r3, [r7, #0]
   b5fe8:	464a      	mov	r2, r9
   b5fea:	68db      	ldr	r3, [r3, #12]
   b5fec:	4641      	mov	r1, r8
   b5fee:	4638      	mov	r0, r7
   b5ff0:	4798      	blx	r3
   b5ff2:	e7ee      	b.n	b5fd2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5ff4:	2300      	movs	r3, #0
   b5ff6:	7323      	strb	r3, [r4, #12]
   b5ff8:	e7de      	b.n	b5fb8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5ffa:	bf00      	nop
   b5ffc:	e000ed00 	.word	0xe000ed00

000b6000 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6004:	4b16      	ldr	r3, [pc, #88]	; (b6060 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6006:	685b      	ldr	r3, [r3, #4]
   b6008:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b600c:	4605      	mov	r5, r0
   b600e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b6010:	bb1b      	cbnz	r3, b605a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6012:	f7ff fe59 	bl	b5cc8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6016:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b601a:	4604      	mov	r4, r0
   b601c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b601e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6020:	f7ff fd2c 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
   b6024:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6028:	2446      	movs	r4, #70	; 0x46
   b602a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b602e:	45b0      	cmp	r8, r6
   b6030:	d109      	bne.n	b6046 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6032:	a801      	add	r0, sp, #4
   b6034:	f7ff ff61 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6038:	42a5      	cmp	r5, r4
   b603a:	bfb4      	ite	lt
   b603c:	2000      	movlt	r0, #0
   b603e:	2001      	movge	r0, #1
}
   b6040:	b002      	add	sp, #8
   b6042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6046:	f856 0b04 	ldr.w	r0, [r6], #4
   b604a:	4639      	mov	r1, r7
   b604c:	3004      	adds	r0, #4
   b604e:	f7ff fdc7 	bl	b5be0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b6052:	4284      	cmp	r4, r0
   b6054:	bfa8      	it	ge
   b6056:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6058:	e7e9      	b.n	b602e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b605a:	2000      	movs	r0, #0
   b605c:	e7f0      	b.n	b6040 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b605e:	bf00      	nop
   b6060:	e000ed00 	.word	0xe000ed00

000b6064 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6066:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b606a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b606c:	4604      	mov	r4, r0
   b606e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6070:	db0d      	blt.n	b608e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b6072:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6074:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6076:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6078:	dd04      	ble.n	b6084 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b607a:	00b9      	lsls	r1, r7, #2
   b607c:	f7ff f908 	bl	b5290 <realloc>
            if (!d) {
   b6080:	b918      	cbnz	r0, b608a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6084:	f7ff f8fc 	bl	b5280 <free>
        T* d = nullptr;
   b6088:	2000      	movs	r0, #0
        data_ = d;
   b608a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b608c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b608e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6090:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6092:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b6096:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6098:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b609c:	1d08      	adds	r0, r1, #4
   b609e:	f001 f8cb 	bl	b7238 <memmove>
    new(p) T(std::move(value));
   b60a2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b60a6:	6863      	ldr	r3, [r4, #4]
   b60a8:	3301      	adds	r3, #1
   b60aa:	6063      	str	r3, [r4, #4]
    return true;
   b60ac:	2001      	movs	r0, #1
   b60ae:	e7e8      	b.n	b6082 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b60b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b60b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b60b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b60b6:	4604      	mov	r4, r0
   b60b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b60ba:	9301      	str	r3, [sp, #4]
   b60bc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b60be:	f7ff fcdd 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b60c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b60c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b60ca:	4293      	cmp	r3, r2
   b60cc:	4619      	mov	r1, r3
   b60ce:	d00b      	beq.n	b60e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b60d0:	6809      	ldr	r1, [r1, #0]
   b60d2:	42a9      	cmp	r1, r5
   b60d4:	f103 0304 	add.w	r3, r3, #4
   b60d8:	d1f7      	bne.n	b60ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b60da:	a801      	add	r0, sp, #4
   b60dc:	f7ff ff0d 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b60e0:	2500      	movs	r5, #0
}
   b60e2:	4628      	mov	r0, r5
   b60e4:	b003      	add	sp, #12
   b60e6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b60e8:	4629      	mov	r1, r5
   b60ea:	4620      	mov	r0, r4
   b60ec:	f7ff ffba 	bl	b6064 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b60f0:	4605      	mov	r5, r0
   b60f2:	2800      	cmp	r0, #0
   b60f4:	d0f1      	beq.n	b60da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b60f6:	6863      	ldr	r3, [r4, #4]
   b60f8:	2b01      	cmp	r3, #1
   b60fa:	d101      	bne.n	b6100 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b60fc:	f7ff fe00 	bl	b5d00 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6100:	a801      	add	r0, sp, #4
   b6102:	f7ff fefa 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6106:	e7ec      	b.n	b60e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6108 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6108:	b570      	push	{r4, r5, r6, lr}
   b610a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b610c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6110:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6112:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6116:	4282      	cmp	r2, r0
   b6118:	d00f      	beq.n	b613a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b611a:	4601      	mov	r1, r0
            if (*p == value) {
   b611c:	681d      	ldr	r5, [r3, #0]
   b611e:	f851 6b04 	ldr.w	r6, [r1], #4
   b6122:	42ae      	cmp	r6, r5
   b6124:	d107      	bne.n	b6136 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6126:	1a52      	subs	r2, r2, r1
   b6128:	f001 f886 	bl	b7238 <memmove>
    --size_;
   b612c:	6863      	ldr	r3, [r4, #4]
   b612e:	3b01      	subs	r3, #1
   b6130:	6063      	str	r3, [r4, #4]
    return true;
   b6132:	2001      	movs	r0, #1
}
   b6134:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6136:	4608      	mov	r0, r1
   b6138:	e7ed      	b.n	b6116 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b613a:	2000      	movs	r0, #0
   b613c:	e7fa      	b.n	b6134 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b613e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b613e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6140:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6144:	4604      	mov	r4, r0
   b6146:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6148:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b614a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b614c:	f7ff fc96 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b6150:	a901      	add	r1, sp, #4
   b6152:	4620      	mov	r0, r4
   b6154:	f7ff ffd8 	bl	b6108 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6158:	b118      	cbz	r0, b6162 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b615a:	6863      	ldr	r3, [r4, #4]
   b615c:	b90b      	cbnz	r3, b6162 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b615e:	f7ff fddb 	bl	b5d18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6162:	a803      	add	r0, sp, #12
   b6164:	f7ff fec9 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6168:	b004      	add	sp, #16
   b616a:	bd10      	pop	{r4, pc}

000b616c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b616c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b616e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b6172:	2318      	movs	r3, #24
   b6174:	4604      	mov	r4, r0
   b6176:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b617a:	42ae      	cmp	r6, r5
   b617c:	d015      	beq.n	b61aa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b617e:	f105 0110 	add.w	r1, r5, #16
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff ffc0 	bl	b6108 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6188:	6863      	ldr	r3, [r4, #4]
   b618a:	b90b      	cbnz	r3, b6190 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b618c:	f7ff fdc4 	bl	b5d18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6190:	69e0      	ldr	r0, [r4, #28]
   b6192:	6929      	ldr	r1, [r5, #16]
   b6194:	6803      	ldr	r3, [r0, #0]
   b6196:	68db      	ldr	r3, [r3, #12]
   b6198:	4798      	blx	r3
        if (h.stream) {
   b619a:	6969      	ldr	r1, [r5, #20]
   b619c:	b119      	cbz	r1, b61a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b619e:	6a20      	ldr	r0, [r4, #32]
   b61a0:	6803      	ldr	r3, [r0, #0]
   b61a2:	68db      	ldr	r3, [r3, #12]
   b61a4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b61a6:	3518      	adds	r5, #24
   b61a8:	e7e7      	b.n	b617a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b61aa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b61ae:	2618      	movs	r6, #24
   b61b0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b61b4:	42ae      	cmp	r6, r5
   b61b6:	d004      	beq.n	b61c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b61b8:	4628      	mov	r0, r5
   b61ba:	f000 fce5 	bl	b6b88 <_ZN6StringD1Ev>
   b61be:	3518      	adds	r5, #24
   b61c0:	e7f8      	b.n	b61b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b61c2:	2300      	movs	r3, #0
   b61c4:	6163      	str	r3, [r4, #20]
}
   b61c6:	bd70      	pop	{r4, r5, r6, pc}

000b61c8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b61c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b61ca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b61cc:	f7ff fda4 	bl	b5d18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b61d0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b61d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b61d6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b61d8:	f7ff fc50 	bl	b5a7c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b61dc:	4620      	mov	r0, r4
   b61de:	f7ff ffc5 	bl	b616c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b61e2:	a801      	add	r0, sp, #4
   b61e4:	f7ff fe89 	bl	b5efa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b61e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61ea:	b108      	cbz	r0, b61f0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b61ec:	f7fe fe0a 	bl	b4e04 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b61f0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b61f4:	2618      	movs	r6, #24
   b61f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b61fa:	42ae      	cmp	r6, r5
   b61fc:	d004      	beq.n	b6208 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b61fe:	4628      	mov	r0, r5
   b6200:	f000 fcc2 	bl	b6b88 <_ZN6StringD1Ev>
   b6204:	3518      	adds	r5, #24
   b6206:	e7f8      	b.n	b61fa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6208:	6920      	ldr	r0, [r4, #16]
   b620a:	f7ff f839 	bl	b5280 <free>
   b620e:	6820      	ldr	r0, [r4, #0]
   b6210:	f7ff f836 	bl	b5280 <free>
}
   b6214:	4620      	mov	r0, r4
   b6216:	b002      	add	sp, #8
   b6218:	bd70      	pop	{r4, r5, r6, pc}
	...

000b621c <__tcf_2>:
    static LogManager mgr;
   b621c:	4801      	ldr	r0, [pc, #4]	; (b6224 <__tcf_2+0x8>)
   b621e:	f7ff bfd3 	b.w	b61c8 <_ZN5spark10LogManagerD1Ev>
   b6222:	bf00      	nop
   b6224:	2003e6a8 	.word	0x2003e6a8

000b6228 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6228:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b622a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b622c:	4604      	mov	r4, r0
   b622e:	460d      	mov	r5, r1
   b6230:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6232:	d915      	bls.n	b6260 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6234:	4290      	cmp	r0, r2
   b6236:	d214      	bcs.n	b6262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6238:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b623c:	1a75      	subs	r5, r6, r1
   b623e:	f1a1 0714 	sub.w	r7, r1, #20
   b6242:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6244:	42b7      	cmp	r7, r6
   b6246:	d01a      	beq.n	b627e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6248:	b11c      	cbz	r4, b6252 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b624a:	4631      	mov	r1, r6
   b624c:	4620      	mov	r0, r4
   b624e:	f7ff fc78 	bl	b5b42 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6252:	f106 0008 	add.w	r0, r6, #8
   b6256:	f7ff fdf9 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b625a:	3e14      	subs	r6, #20
   b625c:	3c14      	subs	r4, #20
   b625e:	e7f1      	b.n	b6244 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6260:	d00d      	beq.n	b627e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6262:	42b5      	cmp	r5, r6
   b6264:	d00b      	beq.n	b627e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6266:	b11c      	cbz	r4, b6270 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6268:	4629      	mov	r1, r5
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff fc69 	bl	b5b42 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6270:	f105 0008 	add.w	r0, r5, #8
   b6274:	f7ff fdea 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6278:	3514      	adds	r5, #20
   b627a:	3414      	adds	r4, #20
   b627c:	e7f1      	b.n	b6262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6280:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6284:	4604      	mov	r4, r0
   b6286:	460d      	mov	r5, r1
   b6288:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b628a:	d914      	bls.n	b62b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b628c:	4290      	cmp	r0, r2
   b628e:	d213      	bcs.n	b62b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6290:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6294:	1a75      	subs	r5, r6, r1
   b6296:	f1a1 0710 	sub.w	r7, r1, #16
   b629a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b629c:	42b7      	cmp	r7, r6
   b629e:	d018      	beq.n	b62d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b62a0:	b11c      	cbz	r4, b62aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b62a2:	4631      	mov	r1, r6
   b62a4:	4620      	mov	r0, r4
   b62a6:	f000 fcd7 	bl	b6c58 <_ZN6StringC1EOS_>
                end->~T();
   b62aa:	4630      	mov	r0, r6
   b62ac:	f000 fc6c 	bl	b6b88 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b62b0:	3e10      	subs	r6, #16
   b62b2:	3c10      	subs	r4, #16
   b62b4:	e7f2      	b.n	b629c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b62b6:	d00c      	beq.n	b62d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b62b8:	42b5      	cmp	r5, r6
   b62ba:	d00a      	beq.n	b62d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b62bc:	b11c      	cbz	r4, b62c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b62be:	4629      	mov	r1, r5
   b62c0:	4620      	mov	r0, r4
   b62c2:	f000 fcc9 	bl	b6c58 <_ZN6StringC1EOS_>
                p->~T();
   b62c6:	4628      	mov	r0, r5
   b62c8:	f000 fc5e 	bl	b6b88 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b62cc:	3510      	adds	r5, #16
   b62ce:	3410      	adds	r4, #16
   b62d0:	e7f2      	b.n	b62b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b62d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b62d4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b62d6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b62d8:	4605      	mov	r5, r0
        if (n > 0) {
   b62da:	dd11      	ble.n	b6300 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b62dc:	0130      	lsls	r0, r6, #4
   b62de:	f7fe ffc7 	bl	b5270 <malloc>
            if (!d) {
   b62e2:	4604      	mov	r4, r0
   b62e4:	b158      	cbz	r0, b62fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b62e6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b62ea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b62ee:	f7ff ffc7 	bl	b6280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b62f2:	6828      	ldr	r0, [r5, #0]
   b62f4:	f7fe ffc4 	bl	b5280 <free>
        data_ = d;
   b62f8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b62fa:	60ae      	str	r6, [r5, #8]
        return true;
   b62fc:	2001      	movs	r0, #1
    }
   b62fe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6300:	2400      	movs	r4, #0
   b6302:	e7f6      	b.n	b62f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6308:	4690      	mov	r8, r2
   b630a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b630c:	2300      	movs	r3, #0
   b630e:	9103      	str	r1, [sp, #12]
    return size_;
   b6310:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6314:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6316:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6318:	4299      	cmp	r1, r3
        capacity_(0) {
   b631a:	e9c0 3300 	strd	r3, r3, [r0]
   b631e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6322:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6326:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b632a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b632c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b632e:	dc23      	bgt.n	b6378 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6330:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6334:	2314      	movs	r3, #20
   b6336:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b633a:	42af      	cmp	r7, r5
   b633c:	d03b      	beq.n	b63b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b633e:	4629      	mov	r1, r5
   b6340:	a80b      	add	r0, sp, #44	; 0x2c
   b6342:	f000 fc89 	bl	b6c58 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6346:	a90b      	add	r1, sp, #44	; 0x2c
   b6348:	a80f      	add	r0, sp, #60	; 0x3c
   b634a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b634c:	f000 fc84 	bl	b6c58 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6350:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6354:	4299      	cmp	r1, r3
   b6356:	da1b      	bge.n	b6390 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6358:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b635a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b635c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6360:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6364:	4631      	mov	r1, r6
   b6366:	f106 0010 	add.w	r0, r6, #16
   b636a:	f7ff ff89 	bl	b6280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b636e:	b9ee      	cbnz	r6, b63ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6370:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6372:	3301      	adds	r3, #1
   b6374:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6376:	e011      	b.n	b639c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6378:	a808      	add	r0, sp, #32
   b637a:	f7ff ffab 	bl	b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b637e:	2800      	cmp	r0, #0
   b6380:	d1d6      	bne.n	b6330 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6382:	a808      	add	r0, sp, #32
   b6384:	f7fe ffc3 	bl	b530e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6388:	4620      	mov	r0, r4
   b638a:	b015      	add	sp, #84	; 0x54
   b638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6390:	3101      	adds	r1, #1
   b6392:	a808      	add	r0, sp, #32
   b6394:	f7ff ff9e 	bl	b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6398:	2800      	cmp	r0, #0
   b639a:	d1dd      	bne.n	b6358 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b639c:	a80f      	add	r0, sp, #60	; 0x3c
   b639e:	f000 fbf3 	bl	b6b88 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b63a2:	a80b      	add	r0, sp, #44	; 0x2c
   b63a4:	f000 fbf0 	bl	b6b88 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b63a8:	3514      	adds	r5, #20
   b63aa:	e7c6      	b.n	b633a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b63ac:	a90f      	add	r1, sp, #60	; 0x3c
   b63ae:	4630      	mov	r0, r6
   b63b0:	f000 fc52 	bl	b6c58 <_ZN6StringC1EOS_>
   b63b4:	e7dc      	b.n	b6370 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b63b6:	2600      	movs	r6, #0
   b63b8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b63bc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b63be:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b63c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b63c6:	429e      	cmp	r6, r3
   b63c8:	da7c      	bge.n	b64c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b63ca:	0133      	lsls	r3, r6, #4
   b63cc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b63ce:	9306      	str	r3, [sp, #24]
        if (!category) {
   b63d0:	b90b      	cbnz	r3, b63d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b63d2:	3601      	adds	r6, #1
   b63d4:	e7f5      	b.n	b63c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b63d6:	2300      	movs	r3, #0
   b63d8:	9307      	str	r3, [sp, #28]
   b63da:	fb09 f306 	mul.w	r3, r9, r6
   b63de:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b63e0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b63e2:	a907      	add	r1, sp, #28
   b63e4:	a806      	add	r0, sp, #24
   b63e6:	f7ff fb22 	bl	b5a2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b63ea:	4682      	mov	sl, r0
   b63ec:	2800      	cmp	r0, #0
   b63ee:	d0f0      	beq.n	b63d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b63f0:	f04f 0300 	mov.w	r3, #0
   b63f4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b63f8:	4601      	mov	r1, r0
   b63fa:	9a07      	ldr	r2, [sp, #28]
   b63fc:	f10d 0317 	add.w	r3, sp, #23
   b6400:	4628      	mov	r0, r5
   b6402:	f7ff fbb1 	bl	b5b68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6406:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b640a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b640c:	2f00      	cmp	r7, #0
   b640e:	d14a      	bne.n	b64a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6410:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6414:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6418:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b641c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6420:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6424:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6428:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b642a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b642e:	4293      	cmp	r3, r2
   b6430:	db17      	blt.n	b6462 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6432:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6436:	f1ba 0f00 	cmp.w	sl, #0
   b643a:	dd30      	ble.n	b649e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b643c:	fb09 f00a 	mul.w	r0, r9, sl
   b6440:	f7fe ff16 	bl	b5270 <malloc>
            if (!d) {
   b6444:	4683      	mov	fp, r0
   b6446:	b360      	cbz	r0, b64a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6448:	e9d5 1200 	ldrd	r1, r2, [r5]
   b644c:	fb09 1202 	mla	r2, r9, r2, r1
   b6450:	f7ff feea 	bl	b6228 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6454:	6828      	ldr	r0, [r5, #0]
   b6456:	f7fe ff13 	bl	b5280 <free>
        data_ = d;
   b645a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b645e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6462:	682b      	ldr	r3, [r5, #0]
   b6464:	9a01      	ldr	r2, [sp, #4]
   b6466:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b646a:	686a      	ldr	r2, [r5, #4]
   b646c:	4651      	mov	r1, sl
   b646e:	fb09 3202 	mla	r2, r9, r2, r3
   b6472:	f10a 0014 	add.w	r0, sl, #20
   b6476:	f7ff fed7 	bl	b6228 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b647a:	f1ba 0f00 	cmp.w	sl, #0
   b647e:	d003      	beq.n	b6488 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6480:	a90f      	add	r1, sp, #60	; 0x3c
   b6482:	4650      	mov	r0, sl
   b6484:	f7ff fb5d 	bl	b5b42 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6488:	686b      	ldr	r3, [r5, #4]
   b648a:	3301      	adds	r3, #1
   b648c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b648e:	a811      	add	r0, sp, #68	; 0x44
   b6490:	f7ff fcdc 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6494:	b13f      	cbz	r7, b64a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6496:	a80b      	add	r0, sp, #44	; 0x2c
   b6498:	f7ff fcd8 	bl	b5e4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b649c:	e771      	b.n	b6382 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b649e:	46bb      	mov	fp, r7
   b64a0:	e7d8      	b.n	b6454 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b64a2:	2701      	movs	r7, #1
   b64a4:	e7f3      	b.n	b648e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b64a6:	9b01      	ldr	r3, [sp, #4]
   b64a8:	682d      	ldr	r5, [r5, #0]
   b64aa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b64ae:	9b06      	ldr	r3, [sp, #24]
   b64b0:	781b      	ldrb	r3, [r3, #0]
   b64b2:	b92b      	cbnz	r3, b64c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b64b4:	f8d8 3000 	ldr.w	r3, [r8]
   b64b8:	9a02      	ldr	r2, [sp, #8]
   b64ba:	4413      	add	r3, r2
   b64bc:	7c1b      	ldrb	r3, [r3, #16]
   b64be:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b64c0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b64c2:	e78e      	b.n	b63e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64c4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b64c6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64c8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64ca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64cc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b64ce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b64d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b64d2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64d4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b64d6:	60a2      	str	r2, [r4, #8]
   b64d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b64da:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64dc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b64de:	60e2      	str	r2, [r4, #12]
   b64e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b64e2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64e4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b64e6:	6122      	str	r2, [r4, #16]
   b64e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b64ea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b64ec:	9b03      	ldr	r3, [sp, #12]
   b64ee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b64f0:	6162      	str	r2, [r4, #20]
   b64f2:	7623      	strb	r3, [r4, #24]
   b64f4:	e7cf      	b.n	b6496 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b64f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b64fa:	4604      	mov	r4, r0
   b64fc:	b087      	sub	sp, #28
   b64fe:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6500:	4626      	mov	r6, r4
        stream_(&stream) {
   b6502:	4619      	mov	r1, r3
   b6504:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6506:	4617      	mov	r7, r2
        stream_(&stream) {
   b6508:	f7fd fee3 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b650c:	4b0b      	ldr	r3, [pc, #44]	; (b653c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b650e:	f846 3b04 	str.w	r3, [r6], #4
   b6512:	4669      	mov	r1, sp
   b6514:	a803      	add	r0, sp, #12
   b6516:	f7fd fedc 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b651a:	aa03      	add	r2, sp, #12
   b651c:	4639      	mov	r1, r7
   b651e:	4630      	mov	r0, r6
   b6520:	f7ff fef0 	bl	b6304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6524:	a803      	add	r0, sp, #12
   b6526:	f7fd fe93 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b652a:	4668      	mov	r0, sp
   b652c:	f7fd fe90 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6530:	4b03      	ldr	r3, [pc, #12]	; (b6540 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6532:	6023      	str	r3, [r4, #0]
}
   b6534:	4620      	mov	r0, r4
        stream_(&stream) {
   b6536:	6225      	str	r5, [r4, #32]
}
   b6538:	b007      	add	sp, #28
   b653a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b653c:	000b75b4 	.word	0x000b75b4
   b6540:	000b794c 	.word	0x000b794c

000b6544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6544:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6546:	460f      	mov	r7, r1
   b6548:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b654a:	491d      	ldr	r1, [pc, #116]	; (b65c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b654c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b654e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6550:	4616      	mov	r6, r2
   b6552:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6554:	f000 fed7 	bl	b7306 <strcmp>
   b6558:	b9c0      	cbnz	r0, b658c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b655a:	b1a4      	cbz	r4, b6586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b655c:	4629      	mov	r1, r5
   b655e:	a801      	add	r0, sp, #4
   b6560:	f7ff fcbc 	bl	b5edc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6564:	4917      	ldr	r1, [pc, #92]	; (b65c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6566:	2024      	movs	r0, #36	; 0x24
   b6568:	f000 fe46 	bl	b71f8 <_ZnwjRKSt9nothrow_t>
   b656c:	4605      	mov	r5, r0
   b656e:	b130      	cbz	r0, b657e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6570:	ab01      	add	r3, sp, #4
   b6572:	4632      	mov	r2, r6
   b6574:	4621      	mov	r1, r4
   b6576:	f7ff ffbf 	bl	b64f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b657a:	4b13      	ldr	r3, [pc, #76]	; (b65c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b657c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b657e:	a801      	add	r0, sp, #4
   b6580:	f7fd fe66 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6584:	462c      	mov	r4, r5
}
   b6586:	4620      	mov	r0, r4
   b6588:	b005      	add	sp, #20
   b658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b658c:	490f      	ldr	r1, [pc, #60]	; (b65cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b658e:	4638      	mov	r0, r7
   b6590:	f000 feb9 	bl	b7306 <strcmp>
   b6594:	b990      	cbnz	r0, b65bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6596:	2c00      	cmp	r4, #0
   b6598:	d0f5      	beq.n	b6586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b659a:	4629      	mov	r1, r5
   b659c:	a801      	add	r0, sp, #4
   b659e:	f7ff fc9d 	bl	b5edc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b65a2:	4908      	ldr	r1, [pc, #32]	; (b65c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b65a4:	2024      	movs	r0, #36	; 0x24
   b65a6:	f000 fe27 	bl	b71f8 <_ZnwjRKSt9nothrow_t>
   b65aa:	4605      	mov	r5, r0
   b65ac:	2800      	cmp	r0, #0
   b65ae:	d0e6      	beq.n	b657e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b65b0:	ab01      	add	r3, sp, #4
   b65b2:	4632      	mov	r2, r6
   b65b4:	4621      	mov	r1, r4
   b65b6:	f7ff ff9f 	bl	b64f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b65ba:	e7e0      	b.n	b657e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b65bc:	2400      	movs	r4, #0
   b65be:	e7e2      	b.n	b6586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b65c0:	000b78d4 	.word	0x000b78d4
   b65c4:	000b7a5c 	.word	0x000b7a5c
   b65c8:	000b7964 	.word	0x000b7964
   b65cc:	000b78d8 	.word	0x000b78d8

000b65d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b65d0:	4b01      	ldr	r3, [pc, #4]	; (b65d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b65d2:	4a02      	ldr	r2, [pc, #8]	; (b65dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b65d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b65d6:	4770      	bx	lr
   b65d8:	2003e6a4 	.word	0x2003e6a4
   b65dc:	000b78e9 	.word	0x000b78e9

000b65e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b65e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b65e4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b65e6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b65ea:	4604      	mov	r4, r0
   b65ec:	460e      	mov	r6, r1
   b65ee:	4617      	mov	r7, r2
   b65f0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b65f2:	f000 fc45 	bl	b6e80 <_Z16_fetch_usbserialv>
   b65f6:	4581      	cmp	r9, r0
   b65f8:	d04c      	beq.n	b6694 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b65fa:	792b      	ldrb	r3, [r5, #4]
   b65fc:	0719      	lsls	r1, r3, #28
   b65fe:	d504      	bpl.n	b660a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6600:	696a      	ldr	r2, [r5, #20]
   b6602:	4954      	ldr	r1, [pc, #336]	; (b6754 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6604:	4620      	mov	r0, r4
   b6606:	f7ff fa8d 	bl	b5b24 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b660a:	f1b8 0f00 	cmp.w	r8, #0
   b660e:	d00d      	beq.n	b662c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6610:	215b      	movs	r1, #91	; 0x5b
   b6612:	4620      	mov	r0, r4
   b6614:	f7ff fa7a 	bl	b5b0c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6618:	4641      	mov	r1, r8
   b661a:	4620      	mov	r0, r4
   b661c:	f7ff fa67 	bl	b5aee <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6620:	6823      	ldr	r3, [r4, #0]
   b6622:	494d      	ldr	r1, [pc, #308]	; (b6758 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6624:	68db      	ldr	r3, [r3, #12]
   b6626:	2202      	movs	r2, #2
   b6628:	4620      	mov	r0, r4
   b662a:	4798      	blx	r3
    if (attr.has_file) {
   b662c:	792b      	ldrb	r3, [r5, #4]
   b662e:	07da      	lsls	r2, r3, #31
   b6630:	d523      	bpl.n	b667a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6632:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6636:	212f      	movs	r1, #47	; 0x2f
   b6638:	4640      	mov	r0, r8
   b663a:	f000 fe92 	bl	b7362 <strrchr>
    if (s1) {
   b663e:	b108      	cbz	r0, b6644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6640:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6644:	4641      	mov	r1, r8
   b6646:	4620      	mov	r0, r4
   b6648:	f7ff fa51 	bl	b5aee <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b664c:	792b      	ldrb	r3, [r5, #4]
   b664e:	079b      	lsls	r3, r3, #30
   b6650:	d508      	bpl.n	b6664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6652:	213a      	movs	r1, #58	; 0x3a
   b6654:	4620      	mov	r0, r4
   b6656:	f7ff fa59 	bl	b5b0c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b665a:	68ea      	ldr	r2, [r5, #12]
   b665c:	493f      	ldr	r1, [pc, #252]	; (b675c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b665e:	4620      	mov	r0, r4
   b6660:	f7ff fa60 	bl	b5b24 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6664:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6666:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6668:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b666c:	68db      	ldr	r3, [r3, #12]
   b666e:	bf14      	ite	ne
   b6670:	493b      	ldrne	r1, [pc, #236]	; (b6760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6672:	493c      	ldreq	r1, [pc, #240]	; (b6764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6674:	2202      	movs	r2, #2
            write(": ", 2);
   b6676:	4620      	mov	r0, r4
   b6678:	4798      	blx	r3
    if (attr.has_function) {
   b667a:	792b      	ldrb	r3, [r5, #4]
   b667c:	0758      	lsls	r0, r3, #29
   b667e:	d51d      	bpl.n	b66bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6680:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6682:	460b      	mov	r3, r1
   b6684:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6686:	f813 0b01 	ldrb.w	r0, [r3], #1
   b668a:	b160      	cbz	r0, b66a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b668c:	2820      	cmp	r0, #32
   b668e:	d108      	bne.n	b66a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6690:	4619      	mov	r1, r3
   b6692:	e7f7      	b.n	b6684 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6694:	4834      	ldr	r0, [pc, #208]	; (b6768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6696:	f000 f966 	bl	b6966 <_ZN5spark12NetworkClass9listeningEv>
   b669a:	2800      	cmp	r0, #0
   b669c:	d0ad      	beq.n	b65fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b66a2:	2828      	cmp	r0, #40	; 0x28
   b66a4:	d1ee      	bne.n	b6684 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b66a6:	6823      	ldr	r3, [r4, #0]
   b66a8:	1a52      	subs	r2, r2, r1
   b66aa:	68db      	ldr	r3, [r3, #12]
   b66ac:	4620      	mov	r0, r4
   b66ae:	4798      	blx	r3
        write("(): ", 4);
   b66b0:	6823      	ldr	r3, [r4, #0]
   b66b2:	492e      	ldr	r1, [pc, #184]	; (b676c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b66b4:	68db      	ldr	r3, [r3, #12]
   b66b6:	2204      	movs	r2, #4
   b66b8:	4620      	mov	r0, r4
   b66ba:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b66bc:	2100      	movs	r1, #0
   b66be:	4638      	mov	r0, r7
   b66c0:	f7fe fd20 	bl	b5104 <log_level_name>
   b66c4:	4601      	mov	r1, r0
    write(s);
   b66c6:	4620      	mov	r0, r4
   b66c8:	f7ff fa11 	bl	b5aee <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b66cc:	6823      	ldr	r3, [r4, #0]
   b66ce:	4925      	ldr	r1, [pc, #148]	; (b6764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b66d0:	68db      	ldr	r3, [r3, #12]
   b66d2:	2202      	movs	r2, #2
   b66d4:	4620      	mov	r0, r4
   b66d6:	4798      	blx	r3
    if (msg) {
   b66d8:	b11e      	cbz	r6, b66e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b66da:	4631      	mov	r1, r6
   b66dc:	4620      	mov	r0, r4
   b66de:	f7ff fa06 	bl	b5aee <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b66e2:	792b      	ldrb	r3, [r5, #4]
   b66e4:	f013 0f30 	tst.w	r3, #48	; 0x30
   b66e8:	d02c      	beq.n	b6744 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b66ea:	6823      	ldr	r3, [r4, #0]
   b66ec:	4920      	ldr	r1, [pc, #128]	; (b6770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b66ee:	68db      	ldr	r3, [r3, #12]
   b66f0:	2202      	movs	r2, #2
   b66f2:	4620      	mov	r0, r4
   b66f4:	4798      	blx	r3
        if (attr.has_code) {
   b66f6:	792b      	ldrb	r3, [r5, #4]
   b66f8:	06d9      	lsls	r1, r3, #27
   b66fa:	d50a      	bpl.n	b6712 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b66fc:	6823      	ldr	r3, [r4, #0]
   b66fe:	491d      	ldr	r1, [pc, #116]	; (b6774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6700:	68db      	ldr	r3, [r3, #12]
   b6702:	2207      	movs	r2, #7
   b6704:	4620      	mov	r0, r4
   b6706:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6708:	69aa      	ldr	r2, [r5, #24]
   b670a:	491b      	ldr	r1, [pc, #108]	; (b6778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b670c:	4620      	mov	r0, r4
   b670e:	f7ff fa09 	bl	b5b24 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6712:	792b      	ldrb	r3, [r5, #4]
   b6714:	069a      	lsls	r2, r3, #26
   b6716:	d511      	bpl.n	b673c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6718:	06db      	lsls	r3, r3, #27
   b671a:	d505      	bpl.n	b6728 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b671c:	6823      	ldr	r3, [r4, #0]
   b671e:	4910      	ldr	r1, [pc, #64]	; (b6760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6720:	68db      	ldr	r3, [r3, #12]
   b6722:	2202      	movs	r2, #2
   b6724:	4620      	mov	r0, r4
   b6726:	4798      	blx	r3
            write("details = ", 10);
   b6728:	6823      	ldr	r3, [r4, #0]
   b672a:	4914      	ldr	r1, [pc, #80]	; (b677c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b672c:	68db      	ldr	r3, [r3, #12]
   b672e:	4620      	mov	r0, r4
   b6730:	220a      	movs	r2, #10
   b6732:	4798      	blx	r3
            write(attr.details);
   b6734:	69e9      	ldr	r1, [r5, #28]
   b6736:	4620      	mov	r0, r4
   b6738:	f7ff f9d9 	bl	b5aee <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b673c:	215d      	movs	r1, #93	; 0x5d
   b673e:	4620      	mov	r0, r4
   b6740:	f7ff f9e4 	bl	b5b0c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6744:	6823      	ldr	r3, [r4, #0]
   b6746:	490e      	ldr	r1, [pc, #56]	; (b6780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6748:	68db      	ldr	r3, [r3, #12]
   b674a:	4620      	mov	r0, r4
   b674c:	2202      	movs	r2, #2
}
   b674e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6752:	4718      	bx	r3
   b6754:	000b78ed 	.word	0x000b78ed
   b6758:	000b78f4 	.word	0x000b78f4
   b675c:	000b78b4 	.word	0x000b78b4
   b6760:	000b78f7 	.word	0x000b78f7
   b6764:	000b78fc 	.word	0x000b78fc
   b6768:	2003e6d0 	.word	0x2003e6d0
   b676c:	000b78fa 	.word	0x000b78fa
   b6770:	000b78ff 	.word	0x000b78ff
   b6774:	000b7902 	.word	0x000b7902
   b6778:	000b776c 	.word	0x000b776c
   b677c:	000b790a 	.word	0x000b790a
   b6780:	000b7915 	.word	0x000b7915

000b6784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6788:	b085      	sub	sp, #20
    return stream_;
   b678a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b678e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6790:	4605      	mov	r5, r0
   b6792:	460f      	mov	r7, r1
   b6794:	4690      	mov	r8, r2
   b6796:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6798:	f000 fb72 	bl	b6e80 <_Z16_fetch_usbserialv>
   b679c:	4581      	cmp	r9, r0
   b679e:	d105      	bne.n	b67ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b67a0:	4849      	ldr	r0, [pc, #292]	; (b68c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b67a2:	f000 f8e0 	bl	b6966 <_ZN5spark12NetworkClass9listeningEv>
   b67a6:	2800      	cmp	r0, #0
   b67a8:	f040 808a 	bne.w	b68c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b67ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b67ae:	4a47      	ldr	r2, [pc, #284]	; (b68cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b67b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b67b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b67b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b67b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b67ba:	f88d 9008 	strb.w	r9, [sp, #8]
   b67be:	f7ff f878 	bl	b58b2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b67c2:	4649      	mov	r1, r9
   b67c4:	4640      	mov	r0, r8
   b67c6:	f7fe fc9d 	bl	b5104 <log_level_name>
    json.name("l", 1).value(s);
   b67ca:	4941      	ldr	r1, [pc, #260]	; (b68d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b67cc:	4680      	mov	r8, r0
   b67ce:	2201      	movs	r2, #1
   b67d0:	a801      	add	r0, sp, #4
   b67d2:	f7ff f8fd 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b67d6:	4641      	mov	r1, r8
   b67d8:	f7ff f97b 	bl	b5ad2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b67dc:	b13f      	cbz	r7, b67ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b67de:	493d      	ldr	r1, [pc, #244]	; (b68d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b67e0:	2201      	movs	r2, #1
   b67e2:	a801      	add	r0, sp, #4
   b67e4:	f7ff f8f4 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b67e8:	4639      	mov	r1, r7
   b67ea:	f7ff f972 	bl	b5ad2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b67ee:	b13e      	cbz	r6, b6800 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b67f0:	4939      	ldr	r1, [pc, #228]	; (b68d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b67f2:	2201      	movs	r2, #1
   b67f4:	a801      	add	r0, sp, #4
   b67f6:	f7ff f8eb 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b67fa:	4631      	mov	r1, r6
   b67fc:	f7ff f969 	bl	b5ad2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6800:	7923      	ldrb	r3, [r4, #4]
   b6802:	07df      	lsls	r7, r3, #31
   b6804:	d50e      	bpl.n	b6824 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6806:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6808:	212f      	movs	r1, #47	; 0x2f
   b680a:	4630      	mov	r0, r6
   b680c:	f000 fda9 	bl	b7362 <strrchr>
    if (s1) {
   b6810:	b100      	cbz	r0, b6814 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6812:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6814:	4931      	ldr	r1, [pc, #196]	; (b68dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6816:	2201      	movs	r2, #1
   b6818:	a801      	add	r0, sp, #4
   b681a:	f7ff f8d9 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b681e:	4631      	mov	r1, r6
   b6820:	f7ff f957 	bl	b5ad2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6824:	7923      	ldrb	r3, [r4, #4]
   b6826:	079e      	lsls	r6, r3, #30
   b6828:	d507      	bpl.n	b683a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b682a:	492d      	ldr	r1, [pc, #180]	; (b68e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b682c:	2202      	movs	r2, #2
   b682e:	a801      	add	r0, sp, #4
   b6830:	f7ff f8ce 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6834:	68e1      	ldr	r1, [r4, #12]
   b6836:	f7ff f849 	bl	b58cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b683a:	7923      	ldrb	r3, [r4, #4]
   b683c:	0758      	lsls	r0, r3, #29
   b683e:	d514      	bpl.n	b686a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6840:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6842:	4633      	mov	r3, r6
   b6844:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6846:	f813 2b01 	ldrb.w	r2, [r3], #1
   b684a:	b12a      	cbz	r2, b6858 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b684c:	2a20      	cmp	r2, #32
   b684e:	d101      	bne.n	b6854 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6850:	461e      	mov	r6, r3
   b6852:	e7f7      	b.n	b6844 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6854:	2a28      	cmp	r2, #40	; 0x28
   b6856:	d1f5      	bne.n	b6844 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6858:	4922      	ldr	r1, [pc, #136]	; (b68e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b685a:	2202      	movs	r2, #2
   b685c:	a801      	add	r0, sp, #4
   b685e:	f7ff f8b7 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6862:	1bba      	subs	r2, r7, r6
   b6864:	4631      	mov	r1, r6
   b6866:	f7ff f8c3 	bl	b59f0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b686a:	7923      	ldrb	r3, [r4, #4]
   b686c:	0719      	lsls	r1, r3, #28
   b686e:	d507      	bpl.n	b6880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6870:	491d      	ldr	r1, [pc, #116]	; (b68e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6872:	2201      	movs	r2, #1
   b6874:	a801      	add	r0, sp, #4
   b6876:	f7ff f8ab 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b687a:	6961      	ldr	r1, [r4, #20]
   b687c:	f7ff f838 	bl	b58f0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6880:	7923      	ldrb	r3, [r4, #4]
   b6882:	06da      	lsls	r2, r3, #27
   b6884:	d508      	bpl.n	b6898 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6886:	2204      	movs	r2, #4
   b6888:	4918      	ldr	r1, [pc, #96]	; (b68ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b688a:	eb0d 0002 	add.w	r0, sp, r2
   b688e:	f7ff f89f 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6892:	69a1      	ldr	r1, [r4, #24]
   b6894:	f7ff f81a 	bl	b58cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6898:	7923      	ldrb	r3, [r4, #4]
   b689a:	069b      	lsls	r3, r3, #26
   b689c:	d507      	bpl.n	b68ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b689e:	4914      	ldr	r1, [pc, #80]	; (b68f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b68a0:	2206      	movs	r2, #6
   b68a2:	a801      	add	r0, sp, #4
   b68a4:	f7ff f894 	bl	b59d0 <_ZN5spark10JSONWriter4nameEPKcj>
   b68a8:	69e1      	ldr	r1, [r4, #28]
   b68aa:	f7ff f912 	bl	b5ad2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b68ae:	a801      	add	r0, sp, #4
   b68b0:	f7fe ffe9 	bl	b5886 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b68b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b68b6:	490f      	ldr	r1, [pc, #60]	; (b68f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b68b8:	6803      	ldr	r3, [r0, #0]
   b68ba:	2202      	movs	r2, #2
   b68bc:	68db      	ldr	r3, [r3, #12]
   b68be:	4798      	blx	r3
}
   b68c0:	b005      	add	sp, #20
   b68c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b68c6:	bf00      	nop
   b68c8:	2003e6d0 	.word	0x2003e6d0
   b68cc:	000b7934 	.word	0x000b7934
   b68d0:	000b78ca 	.word	0x000b78ca
   b68d4:	000b7659 	.word	0x000b7659
   b68d8:	000b7acb 	.word	0x000b7acb
   b68dc:	000b7918 	.word	0x000b7918
   b68e0:	000b791a 	.word	0x000b791a
   b68e4:	000b791d 	.word	0x000b791d
   b68e8:	000b7718 	.word	0x000b7718
   b68ec:	000b7920 	.word	0x000b7920
   b68f0:	000b7925 	.word	0x000b7925
   b68f4:	000b7915 	.word	0x000b7915

000b68f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b68f8:	2300      	movs	r3, #0
   b68fa:	6840      	ldr	r0, [r0, #4]
   b68fc:	461a      	mov	r2, r3
   b68fe:	f7fe bc57 	b.w	b51b0 <network_connect>

000b6902 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6902:	6840      	ldr	r0, [r0, #4]
   b6904:	2200      	movs	r2, #0
   b6906:	2102      	movs	r1, #2
   b6908:	f7fe bc62 	b.w	b51d0 <network_disconnect>

000b690c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b690c:	2200      	movs	r2, #0
   b690e:	6840      	ldr	r0, [r0, #4]
   b6910:	4611      	mov	r1, r2
   b6912:	f7fe bc55 	b.w	b51c0 <network_connecting>

000b6916 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6916:	2200      	movs	r2, #0
   b6918:	6840      	ldr	r0, [r0, #4]
   b691a:	4611      	mov	r1, r2
   b691c:	f7fe bc60 	b.w	b51e0 <network_ready>

000b6920 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6920:	2300      	movs	r3, #0
   b6922:	6840      	ldr	r0, [r0, #4]
   b6924:	461a      	mov	r2, r3
   b6926:	4619      	mov	r1, r3
   b6928:	f7fe bc62 	b.w	b51f0 <network_on>

000b692c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b692c:	2300      	movs	r3, #0
   b692e:	6840      	ldr	r0, [r0, #4]
   b6930:	461a      	mov	r2, r3
   b6932:	4619      	mov	r1, r3
   b6934:	f7fe bc64 	b.w	b5200 <network_off>

000b6938 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6938:	6840      	ldr	r0, [r0, #4]
   b693a:	2100      	movs	r1, #0
   b693c:	f7fe bc88 	b.w	b5250 <network_is_on>

000b6940 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6940:	6840      	ldr	r0, [r0, #4]
   b6942:	2100      	movs	r1, #0
   b6944:	f7fe bc8c 	b.w	b5260 <network_is_off>

000b6948 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6948:	6840      	ldr	r0, [r0, #4]
   b694a:	2200      	movs	r2, #0
   b694c:	f081 0101 	eor.w	r1, r1, #1
   b6950:	f7fe bc5e 	b.w	b5210 <network_listen>

000b6954 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6954:	6840      	ldr	r0, [r0, #4]
   b6956:	2200      	movs	r2, #0
   b6958:	f7fe bc6a 	b.w	b5230 <network_set_listen_timeout>

000b695c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b695c:	2200      	movs	r2, #0
   b695e:	6840      	ldr	r0, [r0, #4]
   b6960:	4611      	mov	r1, r2
   b6962:	f7fe bc6d 	b.w	b5240 <network_get_listen_timeout>

000b6966 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6966:	2200      	movs	r2, #0
   b6968:	6840      	ldr	r0, [r0, #4]
   b696a:	4611      	mov	r1, r2
   b696c:	f7fe bc58 	b.w	b5220 <network_listening>

000b6970 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6974:	b095      	sub	sp, #84	; 0x54
   b6976:	4614      	mov	r4, r2
   b6978:	460d      	mov	r5, r1
   b697a:	4607      	mov	r7, r0
    IPAddress addr;
   b697c:	f7fe fe32 	bl	b55e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6980:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6982:	221c      	movs	r2, #28
   b6984:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6986:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6988:	f000 fc70 	bl	b726c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b698c:	2340      	movs	r3, #64	; 0x40
   b698e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6990:	4620      	mov	r0, r4
   b6992:	466b      	mov	r3, sp
   b6994:	aa0c      	add	r2, sp, #48	; 0x30
   b6996:	2100      	movs	r1, #0
   b6998:	f7fe faf4 	bl	b4f84 <netdb_getaddrinfo>
    if (!r) {
   b699c:	4604      	mov	r4, r0
   b699e:	2800      	cmp	r0, #0
   b69a0:	d14b      	bne.n	b6a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b69a2:	4602      	mov	r2, r0
   b69a4:	2101      	movs	r1, #1
   b69a6:	6868      	ldr	r0, [r5, #4]
   b69a8:	f7fe fc1a 	bl	b51e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b69ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69b0:	4622      	mov	r2, r4
   b69b2:	6868      	ldr	r0, [r5, #4]
   b69b4:	f7fe fc14 	bl	b51e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69ba:	4681      	mov	r9, r0
        bool ok = false;
   b69bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69be:	2e00      	cmp	r6, #0
   b69c0:	d03b      	beq.n	b6a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b69c2:	2900      	cmp	r1, #0
   b69c4:	d139      	bne.n	b6a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b69c6:	6873      	ldr	r3, [r6, #4]
   b69c8:	2b02      	cmp	r3, #2
   b69ca:	d003      	beq.n	b69d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b69cc:	2b0a      	cmp	r3, #10
   b69ce:	d011      	beq.n	b69f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69d0:	69f6      	ldr	r6, [r6, #28]
   b69d2:	e7f4      	b.n	b69be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b69d4:	f1b8 0f00 	cmp.w	r8, #0
   b69d8:	d0fa      	beq.n	b69d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b69da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b69dc:	a806      	add	r0, sp, #24
   b69de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b69e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b69e2:	f7fe fe2d 	bl	b5640 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b69e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69e8:	1d3c      	adds	r4, r7, #4
   b69ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69ec:	682b      	ldr	r3, [r5, #0]
   b69ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b69f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b69f2:	e7ed      	b.n	b69d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b69f4:	f1b9 0f00 	cmp.w	r9, #0
   b69f8:	d0ea      	beq.n	b69d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b69fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b69fc:	2210      	movs	r2, #16
   b69fe:	a801      	add	r0, sp, #4
   b6a00:	f000 fc34 	bl	b726c <memset>
                    a.v = 6;
   b6a04:	2306      	movs	r3, #6
   b6a06:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6a0a:	ad01      	add	r5, sp, #4
   b6a0c:	f104 0308 	add.w	r3, r4, #8
   b6a10:	3418      	adds	r4, #24
   b6a12:	6818      	ldr	r0, [r3, #0]
   b6a14:	6859      	ldr	r1, [r3, #4]
   b6a16:	462a      	mov	r2, r5
   b6a18:	c203      	stmia	r2!, {r0, r1}
   b6a1a:	3308      	adds	r3, #8
   b6a1c:	42a3      	cmp	r3, r4
   b6a1e:	4615      	mov	r5, r2
   b6a20:	d1f7      	bne.n	b6a12 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6a22:	a901      	add	r1, sp, #4
   b6a24:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6a26:	ad07      	add	r5, sp, #28
   b6a28:	f7fe fdea 	bl	b5600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a2e:	1d3c      	adds	r4, r7, #4
   b6a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a32:	682b      	ldr	r3, [r5, #0]
   b6a34:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a36:	4649      	mov	r1, r9
   b6a38:	e7ca      	b.n	b69d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6a3a:	9800      	ldr	r0, [sp, #0]
   b6a3c:	f7fe fa9a 	bl	b4f74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6a40:	4638      	mov	r0, r7
   b6a42:	b015      	add	sp, #84	; 0x54
   b6a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6a48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6a48:	4b02      	ldr	r3, [pc, #8]	; (b6a54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6a4a:	4a03      	ldr	r2, [pc, #12]	; (b6a58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6a4c:	601a      	str	r2, [r3, #0]
   b6a4e:	2200      	movs	r2, #0
   b6a50:	605a      	str	r2, [r3, #4]

} // spark
   b6a52:	4770      	bx	lr
   b6a54:	2003e6d0 	.word	0x2003e6d0
   b6a58:	000b79ac 	.word	0x000b79ac

000b6a5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a5e:	4606      	mov	r6, r0
   b6a60:	460d      	mov	r5, r1
  size_t n = 0;
   b6a62:	188f      	adds	r7, r1, r2
   b6a64:	2400      	movs	r4, #0
  while (size--) {
   b6a66:	42bd      	cmp	r5, r7
   b6a68:	d00c      	beq.n	b6a84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a6a:	6833      	ldr	r3, [r6, #0]
   b6a6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a70:	689b      	ldr	r3, [r3, #8]
   b6a72:	4630      	mov	r0, r6
   b6a74:	4798      	blx	r3
     if (chunk>=0)
   b6a76:	1e03      	subs	r3, r0, #0
   b6a78:	db01      	blt.n	b6a7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6a7a:	441c      	add	r4, r3
  while (size--) {
   b6a7c:	e7f3      	b.n	b6a66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6a7e:	2c00      	cmp	r4, #0
   b6a80:	bf08      	it	eq
   b6a82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6a84:	4620      	mov	r0, r4
   b6a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a88 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a88:	b513      	push	{r0, r1, r4, lr}
   b6a8a:	4604      	mov	r4, r0
    }
   b6a8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a8e:	b159      	cbz	r1, b6aa8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a90:	9101      	str	r1, [sp, #4]
   b6a92:	f000 fc4a 	bl	b732a <strlen>
   b6a96:	6823      	ldr	r3, [r4, #0]
   b6a98:	9901      	ldr	r1, [sp, #4]
   b6a9a:	68db      	ldr	r3, [r3, #12]
   b6a9c:	4602      	mov	r2, r0
   b6a9e:	4620      	mov	r0, r4
    }
   b6aa0:	b002      	add	sp, #8
   b6aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6aa6:	4718      	bx	r3
    }
   b6aa8:	b002      	add	sp, #8
   b6aaa:	bd10      	pop	{r4, pc}

000b6aac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6aac:	6803      	ldr	r3, [r0, #0]
   b6aae:	689b      	ldr	r3, [r3, #8]
   b6ab0:	4718      	bx	r3

000b6ab2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6ab2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ab4:	210d      	movs	r1, #13
{
   b6ab6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6ab8:	f7ff fff8 	bl	b6aac <_ZN5Print5printEc>
  n += print('\n');
   b6abc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6abe:	4604      	mov	r4, r0
  n += print('\n');
   b6ac0:	4628      	mov	r0, r5
   b6ac2:	f7ff fff3 	bl	b6aac <_ZN5Print5printEc>
  return n;
}
   b6ac6:	4420      	add	r0, r4
   b6ac8:	bd38      	pop	{r3, r4, r5, pc}

000b6aca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6aca:	b530      	push	{r4, r5, lr}
   b6acc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6ace:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6ad0:	2a01      	cmp	r2, #1
  *str = '\0';
   b6ad2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6ad6:	bf98      	it	ls
   b6ad8:	220a      	movls	r2, #10
   b6ada:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6adc:	460d      	mov	r5, r1
   b6ade:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6ae2:	fb01 5312 	mls	r3, r1, r2, r5
   b6ae6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6aea:	2b09      	cmp	r3, #9
   b6aec:	bf94      	ite	ls
   b6aee:	3330      	addls	r3, #48	; 0x30
   b6af0:	3337      	addhi	r3, #55	; 0x37
   b6af2:	b2db      	uxtb	r3, r3
  } while(n);
   b6af4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6af6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6afa:	d9ef      	bls.n	b6adc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6afc:	4621      	mov	r1, r4
   b6afe:	f7ff ffc3 	bl	b6a88 <_ZN5Print5writeEPKc>
}
   b6b02:	b00b      	add	sp, #44	; 0x2c
   b6b04:	bd30      	pop	{r4, r5, pc}

000b6b06 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b0a:	b086      	sub	sp, #24
   b6b0c:	af00      	add	r7, sp, #0
   b6b0e:	4605      	mov	r5, r0
   b6b10:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b12:	1d38      	adds	r0, r7, #4
   b6b14:	2114      	movs	r1, #20
{
   b6b16:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b18:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b1a:	f7fe fbc1 	bl	b52a0 <vsnprintf>

    if (n<bufsize)
   b6b1e:	2813      	cmp	r0, #19
   b6b20:	d80e      	bhi.n	b6b40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b22:	1d39      	adds	r1, r7, #4
   b6b24:	4628      	mov	r0, r5
   b6b26:	f7ff ffaf 	bl	b6a88 <_ZN5Print5writeEPKc>
   b6b2a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b2c:	b11e      	cbz	r6, b6b36 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b2e:	4628      	mov	r0, r5
   b6b30:	f7ff ffbf 	bl	b6ab2 <_ZN5Print7printlnEv>
   b6b34:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b36:	4620      	mov	r0, r4
   b6b38:	3718      	adds	r7, #24
   b6b3a:	46bd      	mov	sp, r7
   b6b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b40:	f100 0308 	add.w	r3, r0, #8
   b6b44:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b48:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b4a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b4e:	4622      	mov	r2, r4
   b6b50:	1c41      	adds	r1, r0, #1
   b6b52:	683b      	ldr	r3, [r7, #0]
   b6b54:	4668      	mov	r0, sp
   b6b56:	f7fe fba3 	bl	b52a0 <vsnprintf>
  return write(str);
   b6b5a:	4669      	mov	r1, sp
   b6b5c:	4628      	mov	r0, r5
   b6b5e:	f7ff ff93 	bl	b6a88 <_ZN5Print5writeEPKc>
   b6b62:	4604      	mov	r4, r0
   b6b64:	46c5      	mov	sp, r8
   b6b66:	e7e1      	b.n	b6b2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b68 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6b68:	4b01      	ldr	r3, [pc, #4]	; (b6b70 <_GLOBAL__sub_I_RGB+0x8>)
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6b6e:	4770      	bx	lr
   b6b70:	2003e6d8 	.word	0x2003e6d8

000b6b74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6b74:	b510      	push	{r4, lr}
   b6b76:	4604      	mov	r4, r0
   b6b78:	4608      	mov	r0, r1
{
    _spi = spi;
   b6b7a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6b7c:	f7fe fa0a 	bl	b4f94 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6b80:	2300      	movs	r3, #0
   b6b82:	6063      	str	r3, [r4, #4]
}
   b6b84:	4620      	mov	r0, r4
   b6b86:	bd10      	pop	{r4, pc}

000b6b88 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6b88:	b510      	push	{r4, lr}
   b6b8a:	4604      	mov	r4, r0
{
	free(buffer);
   b6b8c:	6800      	ldr	r0, [r0, #0]
   b6b8e:	f7fe fb77 	bl	b5280 <free>
}
   b6b92:	4620      	mov	r0, r4
   b6b94:	bd10      	pop	{r4, pc}

000b6b96 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6b96:	b510      	push	{r4, lr}
   b6b98:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6b9a:	6800      	ldr	r0, [r0, #0]
   b6b9c:	b108      	cbz	r0, b6ba2 <_ZN6String10invalidateEv+0xc>
   b6b9e:	f7fe fb6f 	bl	b5280 <free>
	buffer = NULL;
   b6ba2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ba4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ba8:	6023      	str	r3, [r4, #0]
}
   b6baa:	bd10      	pop	{r4, pc}

000b6bac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6bac:	b538      	push	{r3, r4, r5, lr}
   b6bae:	4604      	mov	r4, r0
   b6bb0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6bb2:	6800      	ldr	r0, [r0, #0]
   b6bb4:	3101      	adds	r1, #1
   b6bb6:	f7fe fb6b 	bl	b5290 <realloc>
	if (newbuffer) {
   b6bba:	b110      	cbz	r0, b6bc2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6bbc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6bc0:	2001      	movs	r0, #1
	}
	return 0;
}
   b6bc2:	bd38      	pop	{r3, r4, r5, pc}

000b6bc4 <_ZN6String7reserveEj>:
{
   b6bc4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6bc6:	6803      	ldr	r3, [r0, #0]
{
   b6bc8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6bca:	b123      	cbz	r3, b6bd6 <_ZN6String7reserveEj+0x12>
   b6bcc:	6843      	ldr	r3, [r0, #4]
   b6bce:	428b      	cmp	r3, r1
   b6bd0:	d301      	bcc.n	b6bd6 <_ZN6String7reserveEj+0x12>
   b6bd2:	2001      	movs	r0, #1
}
   b6bd4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6bd6:	4620      	mov	r0, r4
   b6bd8:	f7ff ffe8 	bl	b6bac <_ZN6String12changeBufferEj>
   b6bdc:	2800      	cmp	r0, #0
   b6bde:	d0f9      	beq.n	b6bd4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6be0:	68a3      	ldr	r3, [r4, #8]
   b6be2:	2b00      	cmp	r3, #0
   b6be4:	d1f5      	bne.n	b6bd2 <_ZN6String7reserveEj+0xe>
   b6be6:	6822      	ldr	r2, [r4, #0]
   b6be8:	7013      	strb	r3, [r2, #0]
   b6bea:	e7f2      	b.n	b6bd2 <_ZN6String7reserveEj+0xe>

000b6bec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6bee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6bf0:	4611      	mov	r1, r2
   b6bf2:	9201      	str	r2, [sp, #4]
{
   b6bf4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6bf6:	f7ff ffe5 	bl	b6bc4 <_ZN6String7reserveEj>
   b6bfa:	9a01      	ldr	r2, [sp, #4]
   b6bfc:	b928      	cbnz	r0, b6c0a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6bfe:	4620      	mov	r0, r4
   b6c00:	f7ff ffc9 	bl	b6b96 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6c04:	4620      	mov	r0, r4
   b6c06:	b003      	add	sp, #12
   b6c08:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6c0a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c0c:	4629      	mov	r1, r5
   b6c0e:	6820      	ldr	r0, [r4, #0]
   b6c10:	f000 fb04 	bl	b721c <memcpy>
	buffer[len] = 0;
   b6c14:	6822      	ldr	r2, [r4, #0]
   b6c16:	68a3      	ldr	r3, [r4, #8]
   b6c18:	2100      	movs	r1, #0
   b6c1a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c1c:	e7f2      	b.n	b6c04 <_ZN6String4copyEPKcj+0x18>

000b6c1e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6c1e:	b538      	push	{r3, r4, r5, lr}
   b6c20:	4605      	mov	r5, r0
	if (buffer) {
   b6c22:	6800      	ldr	r0, [r0, #0]
{
   b6c24:	460c      	mov	r4, r1
	if (buffer) {
   b6c26:	b168      	cbz	r0, b6c44 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6c28:	686a      	ldr	r2, [r5, #4]
   b6c2a:	688b      	ldr	r3, [r1, #8]
   b6c2c:	429a      	cmp	r2, r3
   b6c2e:	d307      	bcc.n	b6c40 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6c30:	6809      	ldr	r1, [r1, #0]
   b6c32:	f000 fb72 	bl	b731a <strcpy>
			len = rhs.len;
   b6c36:	68a3      	ldr	r3, [r4, #8]
   b6c38:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6c3a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6c3c:	60a3      	str	r3, [r4, #8]
}
   b6c3e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6c40:	f7fe fb1e 	bl	b5280 <free>
	buffer = rhs.buffer;
   b6c44:	6823      	ldr	r3, [r4, #0]
   b6c46:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6c48:	6863      	ldr	r3, [r4, #4]
   b6c4a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6c4c:	68a3      	ldr	r3, [r4, #8]
   b6c4e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6c50:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6c52:	e9c4 3300 	strd	r3, r3, [r4]
   b6c56:	e7f1      	b.n	b6c3c <_ZN6String4moveERS_+0x1e>

000b6c58 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b6c58:	b510      	push	{r4, lr}
	buffer = NULL;
   b6c5a:	2300      	movs	r3, #0
	capacity = 0;
   b6c5c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6c60:	4604      	mov	r4, r0
	len = 0;
   b6c62:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c64:	7303      	strb	r3, [r0, #12]
	move(rval);
   b6c66:	f7ff ffda 	bl	b6c1e <_ZN6String4moveERS_>
}
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	bd10      	pop	{r4, pc}

000b6c6e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6c6e:	4288      	cmp	r0, r1
{
   b6c70:	b510      	push	{r4, lr}
   b6c72:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6c74:	d005      	beq.n	b6c82 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6c76:	680b      	ldr	r3, [r1, #0]
   b6c78:	b12b      	cbz	r3, b6c86 <_ZN6StringaSERKS_+0x18>
   b6c7a:	688a      	ldr	r2, [r1, #8]
   b6c7c:	4619      	mov	r1, r3
   b6c7e:	f7ff ffb5 	bl	b6bec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6c82:	4620      	mov	r0, r4
   b6c84:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c86:	f7ff ff86 	bl	b6b96 <_ZN6String10invalidateEv>
   b6c8a:	e7fa      	b.n	b6c82 <_ZN6StringaSERKS_+0x14>

000b6c8c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6c8c:	b510      	push	{r4, lr}
	buffer = NULL;
   b6c8e:	2300      	movs	r3, #0
String::String(const String &value)
   b6c90:	4604      	mov	r4, r0
	capacity = 0;
   b6c92:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6c96:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c98:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6c9a:	f7ff ffe8 	bl	b6c6e <_ZN6StringaSERKS_>
}
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	bd10      	pop	{r4, pc}

000b6ca2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b6ca2:	b507      	push	{r0, r1, r2, lr}
   b6ca4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6ca6:	2100      	movs	r1, #0
{
   b6ca8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6caa:	9100      	str	r1, [sp, #0]
   b6cac:	2001      	movs	r0, #1
   b6cae:	218c      	movs	r1, #140	; 0x8c
   b6cb0:	f7fe fa64 	bl	b517c <system_reset>
}
   b6cb4:	b003      	add	sp, #12
   b6cb6:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b6cba:	4601      	mov	r1, r0
    reset(0, flags);
   b6cbc:	2000      	movs	r0, #0
   b6cbe:	f7ff bff0 	b.w	b6ca2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b6cc2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b6cc2:	2000      	movs	r0, #0
   b6cc4:	f7ff bff9 	b.w	b6cba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b6cc8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6cc8:	4b05      	ldr	r3, [pc, #20]	; (b6ce0 <_GLOBAL__sub_I_System+0x18>)
   b6cca:	2202      	movs	r2, #2
   b6ccc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6cce:	4b05      	ldr	r3, [pc, #20]	; (b6ce4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6cd0:	4a05      	ldr	r2, [pc, #20]	; (b6ce8 <_GLOBAL__sub_I_System+0x20>)
   b6cd2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6cd4:	2000      	movs	r0, #0
   b6cd6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6cda:	f7fe ba23 	b.w	b5124 <set_system_mode>
   b6cde:	bf00      	nop
   b6ce0:	2003e6f4 	.word	0x2003e6f4
   b6ce4:	2003e6e8 	.word	0x2003e6e8
   b6ce8:	ffff0000 	.word	0xffff0000

000b6cec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6cec:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6cee:	681a      	ldr	r2, [r3, #0]
   b6cf0:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6cf2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6cf4:	4770      	bx	lr
   b6cf6:	bf00      	nop
   b6cf8:	2003e548 	.word	0x2003e548
   b6cfc:	2003e6f8 	.word	0x2003e6f8

000b6d00 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d00:	4770      	bx	lr

000b6d02 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d02:	7441      	strb	r1, [r0, #17]
}
   b6d04:	4770      	bx	lr

000b6d06 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d06:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d08:	7c00      	ldrb	r0, [r0, #16]
   b6d0a:	f7fe f98b 	bl	b5024 <hal_usart_available_data_for_write>
}
   b6d0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d12:	bd08      	pop	{r3, pc}

000b6d14 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6d14:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6d16:	7c00      	ldrb	r0, [r0, #16]
   b6d18:	f7fe f95c 	bl	b4fd4 <hal_usart_available>
}
   b6d1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d20:	bd08      	pop	{r3, pc}

000b6d22 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6d22:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6d24:	7c00      	ldrb	r0, [r0, #16]
   b6d26:	f7fe f965 	bl	b4ff4 <hal_usart_peek>
}
   b6d2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d2e:	bd08      	pop	{r3, pc}

000b6d30 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6d30:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6d32:	7c00      	ldrb	r0, [r0, #16]
   b6d34:	f7fe f956 	bl	b4fe4 <hal_usart_read>
}
   b6d38:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d3c:	bd08      	pop	{r3, pc}

000b6d3e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6d3e:	7c00      	ldrb	r0, [r0, #16]
   b6d40:	f7fe b960 	b.w	b5004 <hal_usart_flush>

000b6d44 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d46:	7c45      	ldrb	r5, [r0, #17]
{
   b6d48:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d4a:	b12d      	cbz	r5, b6d58 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6d4c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6d4e:	b003      	add	sp, #12
   b6d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6d54:	f7fe b936 	b.w	b4fc4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d58:	7c00      	ldrb	r0, [r0, #16]
   b6d5a:	9101      	str	r1, [sp, #4]
   b6d5c:	f7fe f962 	bl	b5024 <hal_usart_available_data_for_write>
   b6d60:	2800      	cmp	r0, #0
   b6d62:	9901      	ldr	r1, [sp, #4]
   b6d64:	dcf2      	bgt.n	b6d4c <_ZN11USARTSerial5writeEh+0x8>
}
   b6d66:	4628      	mov	r0, r5
   b6d68:	b003      	add	sp, #12
   b6d6a:	bd30      	pop	{r4, r5, pc}

000b6d6c <_ZN11USARTSerialD0Ev>:
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	2114      	movs	r1, #20
   b6d70:	4604      	mov	r4, r0
   b6d72:	f7fd f992 	bl	b409a <_ZdlPvj>
   b6d76:	4620      	mov	r0, r4
   b6d78:	bd10      	pop	{r4, pc}
	...

000b6d7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6d7c:	b510      	push	{r4, lr}
   b6d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d82:	4604      	mov	r4, r0
   b6d84:	4608      	mov	r0, r1
   b6d86:	4611      	mov	r1, r2
   b6d88:	2200      	movs	r2, #0
   b6d8a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6d8e:	4b04      	ldr	r3, [pc, #16]	; (b6da0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6d90:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d92:	2301      	movs	r3, #1
  _serial = serial;
   b6d94:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d96:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6d98:	f7fe f954 	bl	b5044 <hal_usart_init_ex>
}
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	bd10      	pop	{r4, pc}
   b6da0:	000b7a04 	.word	0x000b7a04

000b6da4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6da4:	7c00      	ldrb	r0, [r0, #16]
   b6da6:	2300      	movs	r3, #0
   b6da8:	f7fe b944 	b.w	b5034 <hal_usart_begin_config>

000b6dac <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6dac:	2200      	movs	r2, #0
   b6dae:	f7ff bff9 	b.w	b6da4 <_ZN11USARTSerial5beginEmm>

000b6db2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b6db2:	7c00      	ldrb	r0, [r0, #16]
   b6db4:	f7fe b8fe 	b.w	b4fb4 <hal_usart_end>

000b6db8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6db8:	7441      	strb	r1, [r0, #17]
}
   b6dba:	4770      	bx	lr

000b6dbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6dbc:	4770      	bx	lr

000b6dbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6dbe:	4770      	bx	lr

000b6dc0 <_ZN9USBSerial4readEv>:
{
   b6dc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6dc2:	2100      	movs	r1, #0
   b6dc4:	7c00      	ldrb	r0, [r0, #16]
   b6dc6:	f7fe f96d 	bl	b50a4 <HAL_USB_USART_Receive_Data>
}
   b6dca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dce:	bd08      	pop	{r3, pc}

000b6dd0 <_ZN9USBSerial4peekEv>:
{
   b6dd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6dd2:	2101      	movs	r1, #1
   b6dd4:	7c00      	ldrb	r0, [r0, #16]
   b6dd6:	f7fe f965 	bl	b50a4 <HAL_USB_USART_Receive_Data>
}
   b6dda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dde:	bd08      	pop	{r3, pc}

000b6de0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6de0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6de2:	7c00      	ldrb	r0, [r0, #16]
   b6de4:	f7fe f956 	bl	b5094 <HAL_USB_USART_Available_Data_For_Write>
}
   b6de8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6dec:	bd08      	pop	{r3, pc}

000b6dee <_ZN9USBSerial9availableEv>:
{
   b6dee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6df0:	7c00      	ldrb	r0, [r0, #16]
   b6df2:	f7fe f947 	bl	b5084 <HAL_USB_USART_Available_Data>
}
   b6df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6dfa:	bd08      	pop	{r3, pc}

000b6dfc <_ZN9USBSerial5writeEh>:
{
   b6dfc:	b513      	push	{r0, r1, r4, lr}
   b6dfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e00:	7c00      	ldrb	r0, [r0, #16]
{
   b6e02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e04:	f7fe f946 	bl	b5094 <HAL_USB_USART_Available_Data_For_Write>
   b6e08:	2800      	cmp	r0, #0
   b6e0a:	9901      	ldr	r1, [sp, #4]
   b6e0c:	dc01      	bgt.n	b6e12 <_ZN9USBSerial5writeEh+0x16>
   b6e0e:	7c60      	ldrb	r0, [r4, #17]
   b6e10:	b120      	cbz	r0, b6e1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e12:	7c20      	ldrb	r0, [r4, #16]
   b6e14:	f7fe f94e 	bl	b50b4 <HAL_USB_USART_Send_Data>
   b6e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e1c:	b002      	add	sp, #8
   b6e1e:	bd10      	pop	{r4, pc}

000b6e20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e20:	7c00      	ldrb	r0, [r0, #16]
   b6e22:	f7fe b94f 	b.w	b50c4 <HAL_USB_USART_Flush_Data>

000b6e26 <_ZN9USBSerialD0Ev>:
   b6e26:	b510      	push	{r4, lr}
   b6e28:	2114      	movs	r1, #20
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	f7fd f935 	bl	b409a <_ZdlPvj>
   b6e30:	4620      	mov	r0, r4
   b6e32:	bd10      	pop	{r4, pc}

000b6e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6e34:	b510      	push	{r4, lr}
   b6e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e3a:	4604      	mov	r4, r0
   b6e3c:	4608      	mov	r0, r1
   b6e3e:	2100      	movs	r1, #0
   b6e40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6e44:	4b04      	ldr	r3, [pc, #16]	; (b6e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6e46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e48:	2301      	movs	r3, #1
  _serial = serial;
   b6e4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6e4e:	4611      	mov	r1, r2
   b6e50:	f7fe f900 	bl	b5054 <HAL_USB_USART_Init>
}
   b6e54:	4620      	mov	r0, r4
   b6e56:	bd10      	pop	{r4, pc}
   b6e58:	000b7a34 	.word	0x000b7a34

000b6e5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6e5c:	7c00      	ldrb	r0, [r0, #16]
   b6e5e:	2200      	movs	r2, #0
   b6e60:	f7fe b900 	b.w	b5064 <HAL_USB_USART_Begin>

000b6e64 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6e64:	7c00      	ldrb	r0, [r0, #16]
   b6e66:	f7fe b905 	b.w	b5074 <HAL_USB_USART_End>

000b6e6a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6e6a:	7c00      	ldrb	r0, [r0, #16]
   b6e6c:	f7fe b932 	b.w	b50d4 <HAL_USB_USART_Is_Connected>

000b6e70 <_Z19acquireSerialBufferv>:
{
   b6e70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6e72:	2214      	movs	r2, #20
{
   b6e74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6e76:	2100      	movs	r1, #0
   b6e78:	f000 f9f8 	bl	b726c <memset>
}
   b6e7c:	4620      	mov	r0, r4
   b6e7e:	bd10      	pop	{r4, pc}

000b6e80 <_Z16_fetch_usbserialv>:
{
   b6e80:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e82:	4c0f      	ldr	r4, [pc, #60]	; (b6ec0 <_Z16_fetch_usbserialv+0x40>)
{
   b6e84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6e86:	a803      	add	r0, sp, #12
   b6e88:	f7ff fff2 	bl	b6e70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e8c:	7821      	ldrb	r1, [r4, #0]
   b6e8e:	f3bf 8f5b 	dmb	ish
   b6e92:	f011 0101 	ands.w	r1, r1, #1
   b6e96:	d10f      	bne.n	b6eb8 <_Z16_fetch_usbserialv+0x38>
   b6e98:	4620      	mov	r0, r4
   b6e9a:	9101      	str	r1, [sp, #4]
   b6e9c:	f7fd f90c 	bl	b40b8 <__cxa_guard_acquire>
   b6ea0:	9901      	ldr	r1, [sp, #4]
   b6ea2:	b148      	cbz	r0, b6eb8 <_Z16_fetch_usbserialv+0x38>
   b6ea4:	aa03      	add	r2, sp, #12
   b6ea6:	4807      	ldr	r0, [pc, #28]	; (b6ec4 <_Z16_fetch_usbserialv+0x44>)
   b6ea8:	f7ff ffc4 	bl	b6e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6eac:	4620      	mov	r0, r4
   b6eae:	f7fd f908 	bl	b40c2 <__cxa_guard_release>
   b6eb2:	4805      	ldr	r0, [pc, #20]	; (b6ec8 <_Z16_fetch_usbserialv+0x48>)
   b6eb4:	f000 f9a4 	bl	b7200 <atexit>
	return _usbserial;
}
   b6eb8:	4802      	ldr	r0, [pc, #8]	; (b6ec4 <_Z16_fetch_usbserialv+0x44>)
   b6eba:	b008      	add	sp, #32
   b6ebc:	bd10      	pop	{r4, pc}
   b6ebe:	bf00      	nop
   b6ec0:	2003e6fc 	.word	0x2003e6fc
   b6ec4:	2003e700 	.word	0x2003e700
   b6ec8:	000b6dbd 	.word	0x000b6dbd

000b6ecc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6ecc:	4b01      	ldr	r3, [pc, #4]	; (b6ed4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6ece:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6ed0:	4770      	bx	lr
   b6ed2:	bf00      	nop
   b6ed4:	2003e54c 	.word	0x2003e54c

000b6ed8 <serialEventRun>:
{
   b6ed8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6eda:	4b0b      	ldr	r3, [pc, #44]	; (b6f08 <serialEventRun+0x30>)
   b6edc:	b143      	cbz	r3, b6ef0 <serialEventRun+0x18>
   b6ede:	f7ff ffcf 	bl	b6e80 <_Z16_fetch_usbserialv>
   b6ee2:	6803      	ldr	r3, [r0, #0]
   b6ee4:	691b      	ldr	r3, [r3, #16]
   b6ee6:	4798      	blx	r3
   b6ee8:	2800      	cmp	r0, #0
   b6eea:	dd01      	ble.n	b6ef0 <serialEventRun+0x18>
        serialEvent();
   b6eec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6ef0:	4b06      	ldr	r3, [pc, #24]	; (b6f0c <serialEventRun+0x34>)
   b6ef2:	b143      	cbz	r3, b6f06 <serialEventRun+0x2e>
   b6ef4:	f000 f95c 	bl	b71b0 <_Z22__fetch_global_Serial1v>
   b6ef8:	6803      	ldr	r3, [r0, #0]
   b6efa:	691b      	ldr	r3, [r3, #16]
   b6efc:	4798      	blx	r3
   b6efe:	2800      	cmp	r0, #0
   b6f00:	dd01      	ble.n	b6f06 <serialEventRun+0x2e>
        serialEvent1();
   b6f02:	f3af 8000 	nop.w
}
   b6f06:	bd08      	pop	{r3, pc}
	...

000b6f10 <_post_loop>:
{
   b6f10:	b508      	push	{r3, lr}
	serialEventRun();
   b6f12:	f7ff ffe1 	bl	b6ed8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6f16:	f7fd ff9d 	bl	b4e54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6f1a:	4b01      	ldr	r3, [pc, #4]	; (b6f20 <_post_loop+0x10>)
   b6f1c:	6018      	str	r0, [r3, #0]
}
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	2003e728 	.word	0x2003e728

000b6f24 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6f24:	4805      	ldr	r0, [pc, #20]	; (b6f3c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6f26:	4a06      	ldr	r2, [pc, #24]	; (b6f40 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6f28:	4906      	ldr	r1, [pc, #24]	; (b6f44 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6f2a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6f2c:	1a12      	subs	r2, r2, r0
   b6f2e:	f000 f975 	bl	b721c <memcpy>
    __backup_sram_signature = signature;
   b6f32:	4b05      	ldr	r3, [pc, #20]	; (b6f48 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6f34:	4a05      	ldr	r2, [pc, #20]	; (b6f4c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6f36:	601a      	str	r2, [r3, #0]
}
   b6f38:	bd08      	pop	{r3, pc}
   b6f3a:	bf00      	nop
   b6f3c:	2003f400 	.word	0x2003f400
   b6f40:	2003f404 	.word	0x2003f404
   b6f44:	000b7c24 	.word	0x000b7c24
   b6f48:	2003f400 	.word	0x2003f400
   b6f4c:	9a271c1e 	.word	0x9a271c1e

000b6f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6f50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6f52:	2300      	movs	r3, #0
   b6f54:	9300      	str	r3, [sp, #0]
   b6f56:	461a      	mov	r2, r3
   b6f58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6f5c:	f7fe f904 	bl	b5168 <system_ctrl_set_result>
}
   b6f60:	b003      	add	sp, #12
   b6f62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6f68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6f68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6f6a:	8843      	ldrh	r3, [r0, #2]
   b6f6c:	2b0a      	cmp	r3, #10
   b6f6e:	d008      	beq.n	b6f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6f70:	2b50      	cmp	r3, #80	; 0x50
   b6f72:	d10b      	bne.n	b6f8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6f74:	4b09      	ldr	r3, [pc, #36]	; (b6f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6f76:	681b      	ldr	r3, [r3, #0]
   b6f78:	b14b      	cbz	r3, b6f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6f7a:	b003      	add	sp, #12
   b6f7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6f80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6f82:	f7ff ffe5 	bl	b6f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6f86:	b003      	add	sp, #12
   b6f88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6f8c:	2300      	movs	r3, #0
   b6f8e:	9300      	str	r3, [sp, #0]
   b6f90:	461a      	mov	r2, r3
   b6f92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6f96:	f7fe f8e7 	bl	b5168 <system_ctrl_set_result>
}
   b6f9a:	e7f4      	b.n	b6f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6f9c:	2003e718 	.word	0x2003e718

000b6fa0 <module_user_init_hook>:
{
   b6fa0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6fa2:	4812      	ldr	r0, [pc, #72]	; (b6fec <module_user_init_hook+0x4c>)
   b6fa4:	2100      	movs	r1, #0
   b6fa6:	f7fe f993 	bl	b52d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6faa:	4b11      	ldr	r3, [pc, #68]	; (b6ff0 <module_user_init_hook+0x50>)
   b6fac:	681a      	ldr	r2, [r3, #0]
   b6fae:	4b11      	ldr	r3, [pc, #68]	; (b6ff4 <module_user_init_hook+0x54>)
   b6fb0:	429a      	cmp	r2, r3
   b6fb2:	4b11      	ldr	r3, [pc, #68]	; (b6ff8 <module_user_init_hook+0x58>)
   b6fb4:	bf0c      	ite	eq
   b6fb6:	2201      	moveq	r2, #1
   b6fb8:	2200      	movne	r2, #0
   b6fba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6fbc:	d001      	beq.n	b6fc2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6fbe:	f7ff ffb1 	bl	b6f24 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6fc2:	f7fd ff37 	bl	b4e34 <HAL_RNG_GetRandomNumber>
   b6fc6:	4604      	mov	r4, r0
    srand(seed);
   b6fc8:	f000 f958 	bl	b727c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6fcc:	4b0b      	ldr	r3, [pc, #44]	; (b6ffc <module_user_init_hook+0x5c>)
   b6fce:	b113      	cbz	r3, b6fd6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6fd0:	4620      	mov	r0, r4
   b6fd2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6fd6:	2100      	movs	r1, #0
   b6fd8:	4808      	ldr	r0, [pc, #32]	; (b6ffc <module_user_init_hook+0x5c>)
   b6fda:	f7fe f8e1 	bl	b51a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6fe2:	4807      	ldr	r0, [pc, #28]	; (b7000 <module_user_init_hook+0x60>)
   b6fe4:	2100      	movs	r1, #0
   b6fe6:	f7fe b8b5 	b.w	b5154 <system_ctrl_set_app_request_handler>
   b6fea:	bf00      	nop
   b6fec:	000b6ecd 	.word	0x000b6ecd
   b6ff0:	2003f400 	.word	0x2003f400
   b6ff4:	9a271c1e 	.word	0x9a271c1e
   b6ff8:	2003e714 	.word	0x2003e714
   b6ffc:	00000000 	.word	0x00000000
   b7000:	000b6f69 	.word	0x000b6f69

000b7004 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7004:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7006:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7008:	d902      	bls.n	b7010 <pinAvailable+0xc>
    return false;
   b700a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b700c:	b002      	add	sp, #8
   b700e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7010:	f1a0 030b 	sub.w	r3, r0, #11
   b7014:	2b02      	cmp	r3, #2
   b7016:	d81a      	bhi.n	b704e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7018:	4c17      	ldr	r4, [pc, #92]	; (b7078 <pinAvailable+0x74>)
   b701a:	7821      	ldrb	r1, [r4, #0]
   b701c:	f3bf 8f5b 	dmb	ish
   b7020:	f011 0101 	ands.w	r1, r1, #1
   b7024:	d10b      	bne.n	b703e <pinAvailable+0x3a>
   b7026:	4620      	mov	r0, r4
   b7028:	9101      	str	r1, [sp, #4]
   b702a:	f7fd f845 	bl	b40b8 <__cxa_guard_acquire>
   b702e:	9901      	ldr	r1, [sp, #4]
   b7030:	b128      	cbz	r0, b703e <pinAvailable+0x3a>
   b7032:	4812      	ldr	r0, [pc, #72]	; (b707c <pinAvailable+0x78>)
   b7034:	f7ff fd9e 	bl	b6b74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7038:	4620      	mov	r0, r4
   b703a:	f7fd f842 	bl	b40c2 <__cxa_guard_release>
   b703e:	4b0f      	ldr	r3, [pc, #60]	; (b707c <pinAvailable+0x78>)
   b7040:	7818      	ldrb	r0, [r3, #0]
   b7042:	f7fd ffaf 	bl	b4fa4 <hal_spi_is_enabled>
   b7046:	2800      	cmp	r0, #0
   b7048:	d1df      	bne.n	b700a <pinAvailable+0x6>
  return true; // 'pin' is available
   b704a:	2001      	movs	r0, #1
   b704c:	e7de      	b.n	b700c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b704e:	2801      	cmp	r0, #1
   b7050:	d809      	bhi.n	b7066 <pinAvailable+0x62>
   b7052:	f000 f86d 	bl	b7130 <_Z19__fetch_global_Wirev>
   b7056:	2100      	movs	r1, #0
   b7058:	7c00      	ldrb	r0, [r0, #16]
   b705a:	f7fd ff6b 	bl	b4f34 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b705e:	f080 0001 	eor.w	r0, r0, #1
   b7062:	b2c0      	uxtb	r0, r0
   b7064:	e7d2      	b.n	b700c <pinAvailable+0x8>
   b7066:	3809      	subs	r0, #9
   b7068:	2801      	cmp	r0, #1
   b706a:	d8ee      	bhi.n	b704a <pinAvailable+0x46>
   b706c:	f000 f8a0 	bl	b71b0 <_Z22__fetch_global_Serial1v>
   b7070:	7c00      	ldrb	r0, [r0, #16]
   b7072:	f7fd ffcf 	bl	b5014 <hal_usart_is_enabled>
   b7076:	e7f2      	b.n	b705e <pinAvailable+0x5a>
   b7078:	2003e71c 	.word	0x2003e71c
   b707c:	2003e720 	.word	0x2003e720

000b7080 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7080:	2823      	cmp	r0, #35	; 0x23
{
   b7082:	b538      	push	{r3, r4, r5, lr}
   b7084:	4604      	mov	r4, r0
   b7086:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7088:	d80a      	bhi.n	b70a0 <pinMode+0x20>
   b708a:	29ff      	cmp	r1, #255	; 0xff
   b708c:	d008      	beq.n	b70a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b708e:	f7ff ffb9 	bl	b7004 <pinAvailable>
   b7092:	b128      	cbz	r0, b70a0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7094:	4629      	mov	r1, r5
   b7096:	4620      	mov	r0, r4
}
   b7098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b709c:	f7fd beea 	b.w	b4e74 <HAL_Pin_Mode>
}
   b70a0:	bd38      	pop	{r3, r4, r5, pc}

000b70a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b70a2:	b538      	push	{r3, r4, r5, lr}
   b70a4:	4604      	mov	r4, r0
   b70a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b70a8:	f7fd feec 	bl	b4e84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b70ac:	28ff      	cmp	r0, #255	; 0xff
   b70ae:	d010      	beq.n	b70d2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b70b0:	2806      	cmp	r0, #6
   b70b2:	d804      	bhi.n	b70be <digitalWrite+0x1c>
   b70b4:	234d      	movs	r3, #77	; 0x4d
   b70b6:	fa23 f000 	lsr.w	r0, r3, r0
   b70ba:	07c3      	lsls	r3, r0, #31
   b70bc:	d409      	bmi.n	b70d2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b70be:	4620      	mov	r0, r4
   b70c0:	f7ff ffa0 	bl	b7004 <pinAvailable>
   b70c4:	b128      	cbz	r0, b70d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b70c6:	4629      	mov	r1, r5
   b70c8:	4620      	mov	r0, r4
}
   b70ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b70ce:	f7fd bee1 	b.w	b4e94 <HAL_GPIO_Write>
}
   b70d2:	bd38      	pop	{r3, r4, r5, pc}

000b70d4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b70d4:	b510      	push	{r4, lr}
   b70d6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b70d8:	f7fd fed4 	bl	b4e84 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b70dc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b70de:	b2db      	uxtb	r3, r3
   b70e0:	2b01      	cmp	r3, #1
   b70e2:	d908      	bls.n	b70f6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b70e4:	4620      	mov	r0, r4
   b70e6:	f7ff ff8d 	bl	b7004 <pinAvailable>
   b70ea:	b120      	cbz	r0, b70f6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b70ec:	4620      	mov	r0, r4
}
   b70ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b70f2:	f7fd bed7 	b.w	b4ea4 <HAL_GPIO_Read>
}
   b70f6:	2000      	movs	r0, #0
   b70f8:	bd10      	pop	{r4, pc}

000b70fa <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70fa:	4770      	bx	lr

000b70fc <_Z17acquireWireBufferv>:
{
   b70fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70fe:	4b0a      	ldr	r3, [pc, #40]	; (b7128 <_Z17acquireWireBufferv+0x2c>)
   b7100:	6003      	str	r3, [r0, #0]
   b7102:	2301      	movs	r3, #1
{
   b7104:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7106:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7108:	4908      	ldr	r1, [pc, #32]	; (b712c <_Z17acquireWireBufferv+0x30>)
   b710a:	2020      	movs	r0, #32
   b710c:	f000 f876 	bl	b71fc <_ZnajRKSt9nothrow_t>
	};
   b7110:	2520      	movs	r5, #32
   b7112:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7114:	4905      	ldr	r1, [pc, #20]	; (b712c <_Z17acquireWireBufferv+0x30>)
	};
   b7116:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7118:	4628      	mov	r0, r5
   b711a:	f000 f86f 	bl	b71fc <_ZnajRKSt9nothrow_t>
	};
   b711e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7122:	4620      	mov	r0, r4
   b7124:	bd38      	pop	{r3, r4, r5, pc}
   b7126:	bf00      	nop
   b7128:	00010018 	.word	0x00010018
   b712c:	000b7a5c 	.word	0x000b7a5c

000b7130 <_Z19__fetch_global_Wirev>:
{
   b7130:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7132:	4d0e      	ldr	r5, [pc, #56]	; (b716c <_Z19__fetch_global_Wirev+0x3c>)
   b7134:	7829      	ldrb	r1, [r5, #0]
   b7136:	f3bf 8f5b 	dmb	ish
   b713a:	f011 0401 	ands.w	r4, r1, #1
{
   b713e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7140:	d111      	bne.n	b7166 <_Z19__fetch_global_Wirev+0x36>
   b7142:	4628      	mov	r0, r5
   b7144:	f7fc ffb8 	bl	b40b8 <__cxa_guard_acquire>
   b7148:	b168      	cbz	r0, b7166 <_Z19__fetch_global_Wirev+0x36>
   b714a:	4668      	mov	r0, sp
   b714c:	f7ff ffd6 	bl	b70fc <_Z17acquireWireBufferv>
   b7150:	466a      	mov	r2, sp
   b7152:	4621      	mov	r1, r4
   b7154:	4806      	ldr	r0, [pc, #24]	; (b7170 <_Z19__fetch_global_Wirev+0x40>)
   b7156:	f7fe f9b3 	bl	b54c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b715a:	4628      	mov	r0, r5
   b715c:	f7fc ffb1 	bl	b40c2 <__cxa_guard_release>
   b7160:	4804      	ldr	r0, [pc, #16]	; (b7174 <_Z19__fetch_global_Wirev+0x44>)
   b7162:	f000 f84d 	bl	b7200 <atexit>
	return wire;
}
   b7166:	4802      	ldr	r0, [pc, #8]	; (b7170 <_Z19__fetch_global_Wirev+0x40>)
   b7168:	b007      	add	sp, #28
   b716a:	bd30      	pop	{r4, r5, pc}
   b716c:	2003e72c 	.word	0x2003e72c
   b7170:	2003e730 	.word	0x2003e730
   b7174:	000b70fb 	.word	0x000b70fb

000b7178 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7178:	4770      	bx	lr
	...

000b717c <_Z20acquireSerial1Bufferv>:
{
   b717c:	b538      	push	{r3, r4, r5, lr}
   b717e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7180:	2514      	movs	r5, #20
   b7182:	462a      	mov	r2, r5
   b7184:	2100      	movs	r1, #0
   b7186:	f000 f871 	bl	b726c <memset>
   b718a:	8025      	strh	r5, [r4, #0]
   b718c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b718e:	4907      	ldr	r1, [pc, #28]	; (b71ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7190:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7192:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7194:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7196:	f000 f831 	bl	b71fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b719a:	4904      	ldr	r1, [pc, #16]	; (b71ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   b719c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b719e:	4628      	mov	r0, r5
   b71a0:	f000 f82c 	bl	b71fc <_ZnajRKSt9nothrow_t>
    };
   b71a4:	60e0      	str	r0, [r4, #12]
}
   b71a6:	4620      	mov	r0, r4
   b71a8:	bd38      	pop	{r3, r4, r5, pc}
   b71aa:	bf00      	nop
   b71ac:	000b7a5c 	.word	0x000b7a5c

000b71b0 <_Z22__fetch_global_Serial1v>:
{
   b71b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71b2:	4d0e      	ldr	r5, [pc, #56]	; (b71ec <_Z22__fetch_global_Serial1v+0x3c>)
   b71b4:	7829      	ldrb	r1, [r5, #0]
   b71b6:	f3bf 8f5b 	dmb	ish
   b71ba:	f011 0401 	ands.w	r4, r1, #1
{
   b71be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71c0:	d111      	bne.n	b71e6 <_Z22__fetch_global_Serial1v+0x36>
   b71c2:	4628      	mov	r0, r5
   b71c4:	f7fc ff78 	bl	b40b8 <__cxa_guard_acquire>
   b71c8:	b168      	cbz	r0, b71e6 <_Z22__fetch_global_Serial1v+0x36>
   b71ca:	a801      	add	r0, sp, #4
   b71cc:	f7ff ffd6 	bl	b717c <_Z20acquireSerial1Bufferv>
   b71d0:	aa01      	add	r2, sp, #4
   b71d2:	4621      	mov	r1, r4
   b71d4:	4806      	ldr	r0, [pc, #24]	; (b71f0 <_Z22__fetch_global_Serial1v+0x40>)
   b71d6:	f7ff fdd1 	bl	b6d7c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b71da:	4628      	mov	r0, r5
   b71dc:	f7fc ff71 	bl	b40c2 <__cxa_guard_release>
   b71e0:	4804      	ldr	r0, [pc, #16]	; (b71f4 <_Z22__fetch_global_Serial1v+0x44>)
   b71e2:	f000 f80d 	bl	b7200 <atexit>
    return serial1;
}
   b71e6:	4802      	ldr	r0, [pc, #8]	; (b71f0 <_Z22__fetch_global_Serial1v+0x40>)
   b71e8:	b007      	add	sp, #28
   b71ea:	bd30      	pop	{r4, r5, pc}
   b71ec:	2003e744 	.word	0x2003e744
   b71f0:	2003e748 	.word	0x2003e748
   b71f4:	000b7179 	.word	0x000b7179

000b71f8 <_ZnwjRKSt9nothrow_t>:
   b71f8:	f7fc bf4b 	b.w	b4092 <_Znwj>

000b71fc <_ZnajRKSt9nothrow_t>:
   b71fc:	f7fc bf4b 	b.w	b4096 <_Znaj>

000b7200 <atexit>:
   b7200:	2300      	movs	r3, #0
   b7202:	4601      	mov	r1, r0
   b7204:	461a      	mov	r2, r3
   b7206:	4618      	mov	r0, r3
   b7208:	f000 b94c 	b.w	b74a4 <__register_exitproc>

000b720c <isprint>:
   b720c:	4b02      	ldr	r3, [pc, #8]	; (b7218 <isprint+0xc>)
   b720e:	4418      	add	r0, r3
   b7210:	7840      	ldrb	r0, [r0, #1]
   b7212:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7216:	4770      	bx	lr
   b7218:	000b7acd 	.word	0x000b7acd

000b721c <memcpy>:
   b721c:	440a      	add	r2, r1
   b721e:	4291      	cmp	r1, r2
   b7220:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7224:	d100      	bne.n	b7228 <memcpy+0xc>
   b7226:	4770      	bx	lr
   b7228:	b510      	push	{r4, lr}
   b722a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b722e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7232:	4291      	cmp	r1, r2
   b7234:	d1f9      	bne.n	b722a <memcpy+0xe>
   b7236:	bd10      	pop	{r4, pc}

000b7238 <memmove>:
   b7238:	4288      	cmp	r0, r1
   b723a:	b510      	push	{r4, lr}
   b723c:	eb01 0402 	add.w	r4, r1, r2
   b7240:	d902      	bls.n	b7248 <memmove+0x10>
   b7242:	4284      	cmp	r4, r0
   b7244:	4623      	mov	r3, r4
   b7246:	d807      	bhi.n	b7258 <memmove+0x20>
   b7248:	1e43      	subs	r3, r0, #1
   b724a:	42a1      	cmp	r1, r4
   b724c:	d008      	beq.n	b7260 <memmove+0x28>
   b724e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7252:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7256:	e7f8      	b.n	b724a <memmove+0x12>
   b7258:	4402      	add	r2, r0
   b725a:	4601      	mov	r1, r0
   b725c:	428a      	cmp	r2, r1
   b725e:	d100      	bne.n	b7262 <memmove+0x2a>
   b7260:	bd10      	pop	{r4, pc}
   b7262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7266:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b726a:	e7f7      	b.n	b725c <memmove+0x24>

000b726c <memset>:
   b726c:	4402      	add	r2, r0
   b726e:	4603      	mov	r3, r0
   b7270:	4293      	cmp	r3, r2
   b7272:	d100      	bne.n	b7276 <memset+0xa>
   b7274:	4770      	bx	lr
   b7276:	f803 1b01 	strb.w	r1, [r3], #1
   b727a:	e7f9      	b.n	b7270 <memset+0x4>

000b727c <srand>:
   b727c:	b538      	push	{r3, r4, r5, lr}
   b727e:	4b10      	ldr	r3, [pc, #64]	; (b72c0 <srand+0x44>)
   b7280:	681d      	ldr	r5, [r3, #0]
   b7282:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7284:	4604      	mov	r4, r0
   b7286:	b9b3      	cbnz	r3, b72b6 <srand+0x3a>
   b7288:	2018      	movs	r0, #24
   b728a:	f7fd fff1 	bl	b5270 <malloc>
   b728e:	4602      	mov	r2, r0
   b7290:	63a8      	str	r0, [r5, #56]	; 0x38
   b7292:	b920      	cbnz	r0, b729e <srand+0x22>
   b7294:	4b0b      	ldr	r3, [pc, #44]	; (b72c4 <srand+0x48>)
   b7296:	480c      	ldr	r0, [pc, #48]	; (b72c8 <srand+0x4c>)
   b7298:	2142      	movs	r1, #66	; 0x42
   b729a:	f7fe f811 	bl	b52c0 <__assert_func>
   b729e:	490b      	ldr	r1, [pc, #44]	; (b72cc <srand+0x50>)
   b72a0:	4b0b      	ldr	r3, [pc, #44]	; (b72d0 <srand+0x54>)
   b72a2:	e9c0 1300 	strd	r1, r3, [r0]
   b72a6:	4b0b      	ldr	r3, [pc, #44]	; (b72d4 <srand+0x58>)
   b72a8:	6083      	str	r3, [r0, #8]
   b72aa:	230b      	movs	r3, #11
   b72ac:	8183      	strh	r3, [r0, #12]
   b72ae:	2100      	movs	r1, #0
   b72b0:	2001      	movs	r0, #1
   b72b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72b8:	2200      	movs	r2, #0
   b72ba:	611c      	str	r4, [r3, #16]
   b72bc:	615a      	str	r2, [r3, #20]
   b72be:	bd38      	pop	{r3, r4, r5, pc}
   b72c0:	2003e54c 	.word	0x2003e54c
   b72c4:	000b7a5d 	.word	0x000b7a5d
   b72c8:	000b7a74 	.word	0x000b7a74
   b72cc:	abcd330e 	.word	0xabcd330e
   b72d0:	e66d1234 	.word	0xe66d1234
   b72d4:	0005deec 	.word	0x0005deec

000b72d8 <strchr>:
   b72d8:	b2c9      	uxtb	r1, r1
   b72da:	4603      	mov	r3, r0
   b72dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b72e0:	b11a      	cbz	r2, b72ea <strchr+0x12>
   b72e2:	428a      	cmp	r2, r1
   b72e4:	d1f9      	bne.n	b72da <strchr+0x2>
   b72e6:	4618      	mov	r0, r3
   b72e8:	4770      	bx	lr
   b72ea:	2900      	cmp	r1, #0
   b72ec:	bf18      	it	ne
   b72ee:	2300      	movne	r3, #0
   b72f0:	e7f9      	b.n	b72e6 <strchr+0xe>

000b72f2 <strchrnul>:
   b72f2:	b510      	push	{r4, lr}
   b72f4:	4604      	mov	r4, r0
   b72f6:	f7ff ffef 	bl	b72d8 <strchr>
   b72fa:	b918      	cbnz	r0, b7304 <strchrnul+0x12>
   b72fc:	4620      	mov	r0, r4
   b72fe:	f000 f814 	bl	b732a <strlen>
   b7302:	4420      	add	r0, r4
   b7304:	bd10      	pop	{r4, pc}

000b7306 <strcmp>:
   b7306:	f810 2b01 	ldrb.w	r2, [r0], #1
   b730a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b730e:	2a01      	cmp	r2, #1
   b7310:	bf28      	it	cs
   b7312:	429a      	cmpcs	r2, r3
   b7314:	d0f7      	beq.n	b7306 <strcmp>
   b7316:	1ad0      	subs	r0, r2, r3
   b7318:	4770      	bx	lr

000b731a <strcpy>:
   b731a:	4603      	mov	r3, r0
   b731c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7320:	f803 2b01 	strb.w	r2, [r3], #1
   b7324:	2a00      	cmp	r2, #0
   b7326:	d1f9      	bne.n	b731c <strcpy+0x2>
   b7328:	4770      	bx	lr

000b732a <strlen>:
   b732a:	4603      	mov	r3, r0
   b732c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7330:	2a00      	cmp	r2, #0
   b7332:	d1fb      	bne.n	b732c <strlen+0x2>
   b7334:	1a18      	subs	r0, r3, r0
   b7336:	3801      	subs	r0, #1
   b7338:	4770      	bx	lr

000b733a <strncmp>:
   b733a:	b510      	push	{r4, lr}
   b733c:	b17a      	cbz	r2, b735e <strncmp+0x24>
   b733e:	4603      	mov	r3, r0
   b7340:	3901      	subs	r1, #1
   b7342:	1884      	adds	r4, r0, r2
   b7344:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7348:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b734c:	4290      	cmp	r0, r2
   b734e:	d101      	bne.n	b7354 <strncmp+0x1a>
   b7350:	42a3      	cmp	r3, r4
   b7352:	d101      	bne.n	b7358 <strncmp+0x1e>
   b7354:	1a80      	subs	r0, r0, r2
   b7356:	bd10      	pop	{r4, pc}
   b7358:	2800      	cmp	r0, #0
   b735a:	d1f3      	bne.n	b7344 <strncmp+0xa>
   b735c:	e7fa      	b.n	b7354 <strncmp+0x1a>
   b735e:	4610      	mov	r0, r2
   b7360:	e7f9      	b.n	b7356 <strncmp+0x1c>

000b7362 <strrchr>:
   b7362:	b538      	push	{r3, r4, r5, lr}
   b7364:	4603      	mov	r3, r0
   b7366:	460c      	mov	r4, r1
   b7368:	b969      	cbnz	r1, b7386 <strrchr+0x24>
   b736a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b736e:	f7ff bfb3 	b.w	b72d8 <strchr>
   b7372:	1c43      	adds	r3, r0, #1
   b7374:	4605      	mov	r5, r0
   b7376:	4621      	mov	r1, r4
   b7378:	4618      	mov	r0, r3
   b737a:	f7ff ffad 	bl	b72d8 <strchr>
   b737e:	2800      	cmp	r0, #0
   b7380:	d1f7      	bne.n	b7372 <strrchr+0x10>
   b7382:	4628      	mov	r0, r5
   b7384:	bd38      	pop	{r3, r4, r5, pc}
   b7386:	2500      	movs	r5, #0
   b7388:	e7f5      	b.n	b7376 <strrchr+0x14>
	...

000b738c <_strtol_l.constprop.0>:
   b738c:	2b01      	cmp	r3, #1
   b738e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7392:	d001      	beq.n	b7398 <_strtol_l.constprop.0+0xc>
   b7394:	2b24      	cmp	r3, #36	; 0x24
   b7396:	d906      	bls.n	b73a6 <_strtol_l.constprop.0+0x1a>
   b7398:	f7fd ff8a 	bl	b52b0 <__errno>
   b739c:	2316      	movs	r3, #22
   b739e:	6003      	str	r3, [r0, #0]
   b73a0:	2000      	movs	r0, #0
   b73a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b73a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b748c <_strtol_l.constprop.0+0x100>
   b73aa:	460d      	mov	r5, r1
   b73ac:	462e      	mov	r6, r5
   b73ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   b73b2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b73b6:	f017 0708 	ands.w	r7, r7, #8
   b73ba:	d1f7      	bne.n	b73ac <_strtol_l.constprop.0+0x20>
   b73bc:	2c2d      	cmp	r4, #45	; 0x2d
   b73be:	d132      	bne.n	b7426 <_strtol_l.constprop.0+0x9a>
   b73c0:	782c      	ldrb	r4, [r5, #0]
   b73c2:	2701      	movs	r7, #1
   b73c4:	1cb5      	adds	r5, r6, #2
   b73c6:	2b00      	cmp	r3, #0
   b73c8:	d05b      	beq.n	b7482 <_strtol_l.constprop.0+0xf6>
   b73ca:	2b10      	cmp	r3, #16
   b73cc:	d109      	bne.n	b73e2 <_strtol_l.constprop.0+0x56>
   b73ce:	2c30      	cmp	r4, #48	; 0x30
   b73d0:	d107      	bne.n	b73e2 <_strtol_l.constprop.0+0x56>
   b73d2:	782c      	ldrb	r4, [r5, #0]
   b73d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b73d8:	2c58      	cmp	r4, #88	; 0x58
   b73da:	d14d      	bne.n	b7478 <_strtol_l.constprop.0+0xec>
   b73dc:	786c      	ldrb	r4, [r5, #1]
   b73de:	2310      	movs	r3, #16
   b73e0:	3502      	adds	r5, #2
   b73e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b73e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b73ea:	f04f 0c00 	mov.w	ip, #0
   b73ee:	fbb8 f9f3 	udiv	r9, r8, r3
   b73f2:	4666      	mov	r6, ip
   b73f4:	fb03 8a19 	mls	sl, r3, r9, r8
   b73f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b73fc:	f1be 0f09 	cmp.w	lr, #9
   b7400:	d816      	bhi.n	b7430 <_strtol_l.constprop.0+0xa4>
   b7402:	4674      	mov	r4, lr
   b7404:	42a3      	cmp	r3, r4
   b7406:	dd24      	ble.n	b7452 <_strtol_l.constprop.0+0xc6>
   b7408:	f1bc 0f00 	cmp.w	ip, #0
   b740c:	db1e      	blt.n	b744c <_strtol_l.constprop.0+0xc0>
   b740e:	45b1      	cmp	r9, r6
   b7410:	d31c      	bcc.n	b744c <_strtol_l.constprop.0+0xc0>
   b7412:	d101      	bne.n	b7418 <_strtol_l.constprop.0+0x8c>
   b7414:	45a2      	cmp	sl, r4
   b7416:	db19      	blt.n	b744c <_strtol_l.constprop.0+0xc0>
   b7418:	fb06 4603 	mla	r6, r6, r3, r4
   b741c:	f04f 0c01 	mov.w	ip, #1
   b7420:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7424:	e7e8      	b.n	b73f8 <_strtol_l.constprop.0+0x6c>
   b7426:	2c2b      	cmp	r4, #43	; 0x2b
   b7428:	bf04      	itt	eq
   b742a:	782c      	ldrbeq	r4, [r5, #0]
   b742c:	1cb5      	addeq	r5, r6, #2
   b742e:	e7ca      	b.n	b73c6 <_strtol_l.constprop.0+0x3a>
   b7430:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7434:	f1be 0f19 	cmp.w	lr, #25
   b7438:	d801      	bhi.n	b743e <_strtol_l.constprop.0+0xb2>
   b743a:	3c37      	subs	r4, #55	; 0x37
   b743c:	e7e2      	b.n	b7404 <_strtol_l.constprop.0+0x78>
   b743e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7442:	f1be 0f19 	cmp.w	lr, #25
   b7446:	d804      	bhi.n	b7452 <_strtol_l.constprop.0+0xc6>
   b7448:	3c57      	subs	r4, #87	; 0x57
   b744a:	e7db      	b.n	b7404 <_strtol_l.constprop.0+0x78>
   b744c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7450:	e7e6      	b.n	b7420 <_strtol_l.constprop.0+0x94>
   b7452:	f1bc 0f00 	cmp.w	ip, #0
   b7456:	da05      	bge.n	b7464 <_strtol_l.constprop.0+0xd8>
   b7458:	2322      	movs	r3, #34	; 0x22
   b745a:	6003      	str	r3, [r0, #0]
   b745c:	4646      	mov	r6, r8
   b745e:	b942      	cbnz	r2, b7472 <_strtol_l.constprop.0+0xe6>
   b7460:	4630      	mov	r0, r6
   b7462:	e79e      	b.n	b73a2 <_strtol_l.constprop.0+0x16>
   b7464:	b107      	cbz	r7, b7468 <_strtol_l.constprop.0+0xdc>
   b7466:	4276      	negs	r6, r6
   b7468:	2a00      	cmp	r2, #0
   b746a:	d0f9      	beq.n	b7460 <_strtol_l.constprop.0+0xd4>
   b746c:	f1bc 0f00 	cmp.w	ip, #0
   b7470:	d000      	beq.n	b7474 <_strtol_l.constprop.0+0xe8>
   b7472:	1e69      	subs	r1, r5, #1
   b7474:	6011      	str	r1, [r2, #0]
   b7476:	e7f3      	b.n	b7460 <_strtol_l.constprop.0+0xd4>
   b7478:	2430      	movs	r4, #48	; 0x30
   b747a:	2b00      	cmp	r3, #0
   b747c:	d1b1      	bne.n	b73e2 <_strtol_l.constprop.0+0x56>
   b747e:	2308      	movs	r3, #8
   b7480:	e7af      	b.n	b73e2 <_strtol_l.constprop.0+0x56>
   b7482:	2c30      	cmp	r4, #48	; 0x30
   b7484:	d0a5      	beq.n	b73d2 <_strtol_l.constprop.0+0x46>
   b7486:	230a      	movs	r3, #10
   b7488:	e7ab      	b.n	b73e2 <_strtol_l.constprop.0+0x56>
   b748a:	bf00      	nop
   b748c:	000b7ace 	.word	0x000b7ace

000b7490 <strtol>:
   b7490:	4613      	mov	r3, r2
   b7492:	460a      	mov	r2, r1
   b7494:	4601      	mov	r1, r0
   b7496:	4802      	ldr	r0, [pc, #8]	; (b74a0 <strtol+0x10>)
   b7498:	6800      	ldr	r0, [r0, #0]
   b749a:	f7ff bf77 	b.w	b738c <_strtol_l.constprop.0>
   b749e:	bf00      	nop
   b74a0:	2003e54c 	.word	0x2003e54c

000b74a4 <__register_exitproc>:
   b74a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7564 <__register_exitproc+0xc0>
   b74ac:	4606      	mov	r6, r0
   b74ae:	f8d8 0000 	ldr.w	r0, [r8]
   b74b2:	461f      	mov	r7, r3
   b74b4:	460d      	mov	r5, r1
   b74b6:	4691      	mov	r9, r2
   b74b8:	f000 f856 	bl	b7568 <__retarget_lock_acquire_recursive>
   b74bc:	4b25      	ldr	r3, [pc, #148]	; (b7554 <__register_exitproc+0xb0>)
   b74be:	681c      	ldr	r4, [r3, #0]
   b74c0:	b934      	cbnz	r4, b74d0 <__register_exitproc+0x2c>
   b74c2:	4c25      	ldr	r4, [pc, #148]	; (b7558 <__register_exitproc+0xb4>)
   b74c4:	601c      	str	r4, [r3, #0]
   b74c6:	4b25      	ldr	r3, [pc, #148]	; (b755c <__register_exitproc+0xb8>)
   b74c8:	b113      	cbz	r3, b74d0 <__register_exitproc+0x2c>
   b74ca:	681b      	ldr	r3, [r3, #0]
   b74cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b74d0:	6863      	ldr	r3, [r4, #4]
   b74d2:	2b1f      	cmp	r3, #31
   b74d4:	dd07      	ble.n	b74e6 <__register_exitproc+0x42>
   b74d6:	f8d8 0000 	ldr.w	r0, [r8]
   b74da:	f000 f847 	bl	b756c <__retarget_lock_release_recursive>
   b74de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b74e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b74e6:	b34e      	cbz	r6, b753c <__register_exitproc+0x98>
   b74e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b74ec:	b988      	cbnz	r0, b7512 <__register_exitproc+0x6e>
   b74ee:	4b1c      	ldr	r3, [pc, #112]	; (b7560 <__register_exitproc+0xbc>)
   b74f0:	b923      	cbnz	r3, b74fc <__register_exitproc+0x58>
   b74f2:	f8d8 0000 	ldr.w	r0, [r8]
   b74f6:	f000 f838 	bl	b756a <__retarget_lock_release>
   b74fa:	e7f0      	b.n	b74de <__register_exitproc+0x3a>
   b74fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7500:	f7fd feb6 	bl	b5270 <malloc>
   b7504:	2800      	cmp	r0, #0
   b7506:	d0f4      	beq.n	b74f2 <__register_exitproc+0x4e>
   b7508:	2300      	movs	r3, #0
   b750a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b750e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7512:	6863      	ldr	r3, [r4, #4]
   b7514:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7518:	2201      	movs	r2, #1
   b751a:	409a      	lsls	r2, r3
   b751c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7520:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7524:	4313      	orrs	r3, r2
   b7526:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b752a:	2e02      	cmp	r6, #2
   b752c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7530:	bf02      	ittt	eq
   b7532:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7536:	4313      	orreq	r3, r2
   b7538:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b753c:	6863      	ldr	r3, [r4, #4]
   b753e:	f8d8 0000 	ldr.w	r0, [r8]
   b7542:	1c5a      	adds	r2, r3, #1
   b7544:	3302      	adds	r3, #2
   b7546:	6062      	str	r2, [r4, #4]
   b7548:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b754c:	f000 f80e 	bl	b756c <__retarget_lock_release_recursive>
   b7550:	2000      	movs	r0, #0
   b7552:	e7c6      	b.n	b74e2 <__register_exitproc+0x3e>
   b7554:	2003e7e8 	.word	0x2003e7e8
   b7558:	2003e75c 	.word	0x2003e75c
   b755c:	00000000 	.word	0x00000000
   b7560:	000b5271 	.word	0x000b5271
   b7564:	2003e5b0 	.word	0x2003e5b0

000b7568 <__retarget_lock_acquire_recursive>:
   b7568:	4770      	bx	lr

000b756a <__retarget_lock_release>:
   b756a:	4770      	bx	lr

000b756c <__retarget_lock_release_recursive>:
   b756c:	4770      	bx	lr

000b756e <link_code_end>:
	...

000b7570 <dynalib_user>:
   b7570:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7580:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7590:	7620 7269 7574 6c61 5300 6174 7472 7075      virtual.Startup
   b75a0:	2d20 4320 6d6f 6c70 7465 0065                - Complete.

000b75ac <_ZTVN5spark10LogHandlerE>:
	...
   b75bc:	40a1 000b 40f9 000b                         .@...@..

000b75c4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b75cc:	4105 000b 4139 000b 65e1 000b 40fb 000b     .A..9A...e...@..
   b75dc:	6553 736e 726f 5420 6d69 6465 6f20 7475     Sensor Timed out
   b75ec:	4f00 6363 7075 6e61 7963 7320 6174 6574     .Occupancy state
   b75fc:	6320 6168 676e 6465 6620 6f72 206d 6425      changed from %d
   b760c:	7420 206f 6425 2820 6925 6d6d 2f20 2520      to %d (%imm / %
   b761c:	6d69 296d 5400 7261 6567 2074 6f7a 656e     imm).Target zone
   b762c:	6920 2073 6c63 6165 2072 6977 6874 7a20      is clear with z
   b763c:	6e6f 3165 6120 2074 6925 6d6d 6120 646e     one1 at %imm and
   b764c:	7a20 6e6f 3265 6120 2074 6925 6d6d 5400      zone2 at %imm.T
   b765c:	7261 6567 2074 6f7a 656e 6e20 746f 6320     arget zone not c
   b766c:	656c 7261 2d20 7720 6c69 206c 6177 7469     lear - will wait
   b767c:	7420 6e65 7320 6365 6e6f 7364 6120 646e      ten seconds and
   b768c:	7420 7972 6120 6167 6e69 5300 6e65 6f73      try again.Senso
   b769c:	2072 7265 6f72 2072 6572 6573 2074 6e69     r error reset in
   b76ac:	3120 2030 6573 6f63 646e 0073 6553 736e      10 seconds.Sens
   b76bc:	726f 6920 696e 2074 7573 6363 7365 6673     or init successf
   b76cc:	6c75 796c 4300 6c61 6269 6172 6974 6e6f     ully.Calibration
   b76dc:	4320 6d6f 6c70 7465 0065 6e49 7469 6169      Complete.Initia
   b76ec:	206c 6163 696c 7262 7461 6f69 206e 6166     l calibration fa
   b76fc:	6c69 6465 2d20 7720 6961 2074 3031 7320     iled - wait 10 s
   b770c:	6365 2073 6e61 2064 6572 6573 0074 0000     ecs and reset...

000b771c <_ZTV9TofSensor>:
	...
   b7724:	43e5 000b 43e7 000b 6e69 7263 6165 6573     .C...C..increase
   b7734:	2064 6f74 6400 6365 6572 7361 6465 7420     d to.decreased t
   b7744:	006f 7245 6f72 2072 6e69 6f20 6363 7075     o.Error in occup
   b7754:	6e61 7963 7320 6174 6574 4f00 6363 7075     ancy state.Occup
   b7764:	6e61 7963 2520 2073 6925 0000               ancy %s %i..

000b7770 <_ZTV13PeopleCounter>:
	...
   b7778:	4615 000b 4617 000b                         .F...F..

000b7780 <_ZTV7VL53L1X>:
	...
   b7788:	477f 000b 475f 000b 4749 000b 4705 000b     .G.._G..IG...G..
   b7798:	473b 000b 4721 000b 4707 000b               ;G..!G...G..

000b77a4 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b77a4:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b77b4:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b77c4:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b77d4:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b77e4:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b77f4:	0200 ffc7 009b 0000 0001 0000               ............

000b7800 <_ZTVN5spark13CellularClassE>:
	...
   b7808:	53b3 000b 53a9 000b 539f 000b 5355 000b     .S...S...S..US..
   b7818:	5393 000b 5387 000b 6939 000b 6941 000b     .S...S..9i..Ai..
   b7828:	537b 000b 5373 000b 5369 000b 535f 000b     {S..sS..iS.._S..
   b7838:	6971 000b                                   qi..

000b783c <_ZTVN5spark13EthernetClassE>:
	...
   b7844:	544b 000b 5441 000b 5437 000b 542d 000b     KT..AT..7T..-T..
   b7854:	5421 000b 5415 000b 6939 000b 6941 000b     !T...T..9i..Ai..
   b7864:	5409 000b 5401 000b 53f7 000b 53ed 000b     .T...T...S...S..
   b7874:	6971 000b                                   qi..

000b7878 <_ZTV7TwoWire>:
	...
   b7880:	5469 000b 54b3 000b 548b 000b 546b 000b     iT...T...T..kT..
   b7890:	5493 000b 549b 000b 54a3 000b 54ab 000b     .T...T...T...T..

000b78a0 <_ZTV9IPAddress>:
	...
   b78a8:	5581 000b 5571 000b 5573 000b 6425 2500     .U..qU..sU..%d.%
   b78b8:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b78c8:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b78d8:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b78e8:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b78f8:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b7908:	0020 6564 6174 6c69 2073 203d 0d00 000a      .details = ....
   b7918:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   b7928:	6961 006c                                   ail.

000b792c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7934:	5a2d 000b 5a53 000b 5a11 000b 568f 000b     -Z..SZ...Z...V..

000b7944 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b794c:	5e89 000b 5ea1 000b 65e1 000b 40fb 000b     .^...^...e...@..

000b795c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7964:	5eb5 000b 5ec9 000b 6785 000b 5a19 000b     .^...^...g...Z..

000b7974 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b797c:	5a2b 000b 5a61 000b 6545 000b 5a1b 000b     +Z..aZ..Ee...Z..

000b798c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7994:	5a29 000b 5a6f 000b 5df1 000b 5a91 000b     )Z..oZ...]...Z..

000b79a4 <_ZTVN5spark12NetworkClassE>:
	...
   b79ac:	68f9 000b 6903 000b 690d 000b 6917 000b     .h...i...i...i..
   b79bc:	6921 000b 692d 000b 6939 000b 6941 000b     !i..-i..9i..Ai..
   b79cc:	6949 000b 6955 000b 695d 000b 6967 000b     Ii..Ui..]i..gi..
   b79dc:	6971 000b 5925 252d 2d6d 6425 2554 3a48     qi..%Y-%m-%dT%H:
   b79ec:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b79fc <_ZTV11USARTSerial>:
	...
   b7a04:	6d01 000b 6d6d 000b 6d45 000b 6a5d 000b     .m..mm..Em..]j..
   b7a14:	6d15 000b 6d31 000b 6d23 000b 6d3f 000b     .m..1m..#m..?m..
   b7a24:	6d03 000b 6d07 000b                         .m...m..

000b7a2c <_ZTV9USBSerial>:
	...
   b7a34:	6dbf 000b 6e27 000b 6dfd 000b 6a5d 000b     .m..'n...m..]j..
   b7a44:	6def 000b 6dc1 000b 6dd1 000b 6e21 000b     .m...m...m..!n..
   b7a54:	6de1 000b 6db9 000b                         .m...m..

000b7a5c <_ZSt7nothrow>:
   b7a5c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7a6c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7a7c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7a8c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7a9c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7aac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7abc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7acd <_ctype_>:
   b7acd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7add:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7aed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7afd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7b0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7b1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7b2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7b3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7b4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7bce <link_const_variable_data_end>:
	...

000b7bd0 <link_constructors_location>:
   b7bd0:	000b4339 	.word	0x000b4339
   b7bd4:	000b45f9 	.word	0x000b45f9
   b7bd8:	000b5345 	.word	0x000b5345
   b7bdc:	000b53bd 	.word	0x000b53bd
   b7be0:	000b5455 	.word	0x000b5455
   b7be4:	000b65d1 	.word	0x000b65d1
   b7be8:	000b6a49 	.word	0x000b6a49
   b7bec:	000b6b69 	.word	0x000b6b69
   b7bf0:	000b6cc9 	.word	0x000b6cc9
   b7bf4:	000b6ced 	.word	0x000b6ced

000b7bf8 <link_constructors_end>:
	...
