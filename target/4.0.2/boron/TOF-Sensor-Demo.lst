
/Users/chipmc/Documents/Maker/Particle/Utilities/TOF-Sensor-Demo/target/4.0.2/boron/TOF-Sensor-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004084  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b80a0  000b80a0  000080a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b80c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e53c  000b80c8  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000023c  2003e5b4  2003e5b4  0002e5b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8140  000b8140  00028140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8168  000b8168  00028168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00139a4b  00000000  00000000  0002816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015784  00000000  00000000  00161bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b944  00000000  00000000  0017733b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e8  00000000  00000000  001b2c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3a0  00000000  00000000  001b5d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e91a  00000000  00000000  001c0107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00048097  00000000  00000000  001fea21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013822e  00000000  00000000  00246ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008a9c  00000000  00000000  0037ece8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fa9b 	bl	b7568 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fabd 	bl	b75b8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e53c 	.word	0x2003e53c
   b4048:	000b80c8 	.word	0x000b80c8
   b404c:	2003e5b4 	.word	0x2003e5b4
   b4050:	2003e5b4 	.word	0x2003e5b4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f945 	bl	b72ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8074 	.word	0x000b8074
   b407c:	000b809c 	.word	0x000b809c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b864 	b.w	b414c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8bf 	bl	b4208 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b8e5 	b.w	b725c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 ba93 	b.w	b55bc <malloc>

000b4096 <_Znaj>:
   b4096:	f001 ba91 	b.w	b55bc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 ba97 	b.w	b55cc <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f9c2 	bl	b5430 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5191 	.word	0x000b5191
   b40b4:	000b78d0 	.word	0x000b78d0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b500      	push	{lr}
   b40cc:	b08c      	sub	sp, #48	; 0x30
   b40ce:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40d0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40d4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40d8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40da:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40de:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e0:	6801      	ldr	r1, [r0, #0]
   b40e2:	aa04      	add	r2, sp, #16
   b40e4:	201e      	movs	r0, #30
    attr.flags = 0;
   b40e6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ea:	f001 f9a9 	bl	b5440 <log_message_v>
}
   b40ee:	b00c      	add	sp, #48	; 0x30
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b40f8:	4770      	bx	lr

000b40fa <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b40fa:	6a00      	ldr	r0, [r0, #32]
   b40fc:	6803      	ldr	r3, [r0, #0]
   b40fe:	68db      	ldr	r3, [r3, #12]
   b4100:	4718      	bx	r3
	...

000b4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4104:	4b0a      	ldr	r3, [pc, #40]	; (b4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0
   b410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b410c:	f001 ff82 	bl	b6014 <_ZN5spark10LogManager8instanceEv>
   b4110:	4621      	mov	r1, r4
   b4112:	f002 f9ba 	bl	b648a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4116:	f003 f859 	bl	b71cc <_Z16_fetch_usbserialv>
   b411a:	f003 f849 	bl	b71b0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b411e:	4620      	mov	r0, r4
   b4120:	4b04      	ldr	r3, [pc, #16]	; (b4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4122:	f840 3b04 	str.w	r3, [r0], #4
   b4126:	f002 f84b 	bl	b61c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b412a:	4620      	mov	r0, r4
   b412c:	bd10      	pop	{r4, pc}
   b412e:	bf00      	nop
   b4130:	000b7918 	.word	0x000b7918
   b4134:	000b7900 	.word	0x000b7900

000b4138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4138:	b510      	push	{r4, lr}
   b413a:	4604      	mov	r4, r0
    }
   b413c:	f7ff ffe2 	bl	b4104 <_ZN5spark16SerialLogHandlerD1Ev>
   b4140:	4620      	mov	r0, r4
   b4142:	2124      	movs	r1, #36	; 0x24
   b4144:	f7ff ffa9 	bl	b409a <_ZdlPvj>
   b4148:	4620      	mov	r0, r4
   b414a:	bd10      	pop	{r4, pc}

000b414c <setup>:
const int intPin =      D3;                       // Hardware interrupt - poliarity set in the library
const int blueLED =     D7;
char statusMsg[64];

void setup(void)
{
   b414c:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   b414e:	f003 f995 	bl	b747c <_Z19__fetch_global_Wirev>
   b4152:	f001 fb79 	bl	b5848 <_ZN7TwoWire5beginEv>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4156:	2000      	movs	r0, #0
   b4158:	f001 f82a 	bl	b51b0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b415c:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4160:	4604      	mov	r4, r0
   b4162:	2000      	movs	r0, #0
   b4164:	f001 f824 	bl	b51b0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4168:	1b00      	subs	r0, r0, r4
   b416a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b416e:	42a8      	cmp	r0, r5
   b4170:	f171 0300 	sbcs.w	r3, r1, #0
   b4174:	d207      	bcs.n	b4186 <setup+0x3a>
  waitFor(Serial.isConnected, 10000);       // Primarily interface to this code is serial
   b4176:	f003 f829 	bl	b71cc <_Z16_fetch_usbserialv>
   b417a:	f003 f81c 	bl	b71b6 <_ZN9USBSerial11isConnectedEv>
   b417e:	b910      	cbnz	r0, b4186 <setup+0x3a>
            spark_process();
   b4180:	f001 f9ac 	bl	b54dc <spark_process>
        while (_while() && !_condition()) {
   b4184:	e7ed      	b.n	b4162 <setup+0x16>
   b4186:	f003 f821 	bl	b71cc <_Z16_fetch_usbserialv>
   b418a:	f003 f814 	bl	b71b6 <_ZN9USBSerial11isConnectedEv>
  delay(1000);                              // Gives serial time to connect
   b418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4192:	f001 fa4b 	bl	b562c <delay>

  pinMode(blueLED,OUTPUT);                  // Set up pin names and modes
   b4196:	2101      	movs	r1, #1
   b4198:	2007      	movs	r0, #7
   b419a:	f003 f917 	bl	b73cc <pinMode>
  pinMode(intPin,INPUT);
   b419e:	2100      	movs	r1, #0
   b41a0:	2003      	movs	r0, #3
   b41a2:	f003 f913 	bl	b73cc <pinMode>
  pinMode(shutdownPin,OUTPUT);              // Not sure if we can use this - messes with Boron i2c bus
   b41a6:	2101      	movs	r1, #1
   b41a8:	2002      	movs	r0, #2
   b41aa:	f003 f90f 	bl	b73cc <pinMode>
  digitalWrite(shutdownPin, LOW);           // Turns on the module
   b41ae:	2100      	movs	r1, #0
   b41b0:	2002      	movs	r0, #2
   b41b2:	f003 f91c 	bl	b73ee <digitalWrite>
  digitalWrite(blueLED,HIGH);               // Blue led on for Setup
   b41b6:	2101      	movs	r1, #1
   b41b8:	2007      	movs	r0, #7
   b41ba:	f003 f918 	bl	b73ee <digitalWrite>

  delay(100);
   b41be:	2064      	movs	r0, #100	; 0x64
   b41c0:	f001 fa34 	bl	b562c <delay>

  TofSensor::instance().setup();
   b41c4:	f000 f92a 	bl	b441c <_ZN9TofSensor8instanceEv>
   b41c8:	f000 f9ba 	bl	b4540 <_ZN9TofSensor5setupEv>
  PeopleCounter::instance().setup();
   b41cc:	f000 fa1e 	bl	b460c <_ZN13PeopleCounter8instanceEv>
   b41d0:	f000 fa2c 	bl	b462c <_ZN13PeopleCounter5setupEv>
  PeopleCounter::instance().setCount(1);
   b41d4:	f000 fa1a 	bl	b460c <_ZN13PeopleCounter8instanceEv>
   b41d8:	2101      	movs	r1, #1
   b41da:	f000 fa29 	bl	b4630 <_ZN13PeopleCounter8setCountEi>

  snprintf(statusMsg,sizeof(statusMsg),"Startup - Complete");
   b41de:	4907      	ldr	r1, [pc, #28]	; (b41fc <setup+0xb0>)
   b41e0:	4807      	ldr	r0, [pc, #28]	; (b4200 <setup+0xb4>)
   b41e2:	f003 fa40 	bl	b7666 <strcpy>
  Log.info(statusMsg);
   b41e6:	4906      	ldr	r1, [pc, #24]	; (b4200 <setup+0xb4>)
   b41e8:	4806      	ldr	r0, [pc, #24]	; (b4204 <setup+0xb8>)
   b41ea:	f7ff ff6d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>

  digitalWrite(blueLED, LOW);                   // Signal setup complete
}
   b41ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(blueLED, LOW);                   // Signal setup complete
   b41f2:	2100      	movs	r1, #0
   b41f4:	2007      	movs	r0, #7
   b41f6:	f003 b8fa 	b.w	b73ee <digitalWrite>
   b41fa:	bf00      	nop
   b41fc:	000b78e5 	.word	0x000b78e5
   b4200:	2003e5e8 	.word	0x2003e5e8
   b4204:	2003e6a4 	.word	0x2003e6a4

000b4208 <loop>:

unsigned long lastLedUpdate = 0;

void loop(void)
{
   b4208:	b510      	push	{r4, lr}
  if( (millis() - lastLedUpdate) > 1000 ){
   b420a:	4c10      	ldr	r4, [pc, #64]	; (b424c <loop+0x44>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b420c:	f000 ffc8 	bl	b51a0 <HAL_Timer_Get_Milli_Seconds>
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	1ac0      	subs	r0, r0, r3
   b4214:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4218:	d90b      	bls.n	b4232 <loop+0x2a>
    digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));
   b421a:	2007      	movs	r0, #7
   b421c:	f003 f900 	bl	b7420 <digitalRead>
   b4220:	fab0 f180 	clz	r1, r0
   b4224:	0949      	lsrs	r1, r1, #5
   b4226:	2007      	movs	r0, #7
   b4228:	f003 f8e1 	bl	b73ee <digitalWrite>
   b422c:	f000 ffb8 	bl	b51a0 <HAL_Timer_Get_Milli_Seconds>
    lastLedUpdate = millis();
   b4230:	6020      	str	r0, [r4, #0]
  }

  if (TofSensor::instance().loop()) {         // If there is new data from the sensor
   b4232:	f000 f8f3 	bl	b441c <_ZN9TofSensor8instanceEv>
   b4236:	f000 f901 	bl	b443c <_ZN9TofSensor4loopEv>
   b423a:	b128      	cbz	r0, b4248 <loop+0x40>
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b423c:	f000 f9e6 	bl	b460c <_ZN13PeopleCounter8instanceEv>
  }
}
   b4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b4244:	f000 bbc6 	b.w	b49d4 <_ZN13PeopleCounter4loopEv>
}
   b4248:	bd10      	pop	{r4, pc}
   b424a:	bf00      	nop
   b424c:	2003e5c0 	.word	0x2003e5c0

000b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4250:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4252:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4256:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4258:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b425a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b425e:	42ae      	cmp	r6, r5
   b4260:	d004      	beq.n	b426c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4262:	4628      	mov	r0, r5
   b4264:	f002 fe36 	bl	b6ed4 <_ZN6StringD1Ev>
   b4268:	3514      	adds	r5, #20
   b426a:	e7f8      	b.n	b425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b426c:	6820      	ldr	r0, [r4, #0]
   b426e:	f001 f9ad 	bl	b55cc <free>
    AllocatorT::free(data_);
}
   b4272:	4620      	mov	r0, r4
   b4274:	bd70      	pop	{r4, r5, r6, pc}

000b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4276:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b427a:	4604      	mov	r4, r0
   b427c:	460d      	mov	r5, r1
   b427e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4280:	d916      	bls.n	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4282:	4290      	cmp	r0, r2
   b4284:	d215      	bcs.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4286:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b428a:	1a75      	subs	r5, r6, r1
   b428c:	f1a1 0714 	sub.w	r7, r1, #20
   b4290:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4292:	42b7      	cmp	r7, r6
   b4294:	d01c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4296:	b12c      	cbz	r4, b42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4298:	4631      	mov	r1, r6
   b429a:	4620      	mov	r0, r4
   b429c:	f002 fe82 	bl	b6fa4 <_ZN6StringC1EOS_>
   b42a0:	7c33      	ldrb	r3, [r6, #16]
   b42a2:	7423      	strb	r3, [r4, #16]
   b42a4:	4630      	mov	r0, r6
   b42a6:	f002 fe15 	bl	b6ed4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42aa:	3e14      	subs	r6, #20
   b42ac:	3c14      	subs	r4, #20
   b42ae:	e7f0      	b.n	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42b0:	d00e      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42b2:	42b5      	cmp	r5, r6
   b42b4:	d00c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42b6:	b12c      	cbz	r4, b42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42b8:	4629      	mov	r1, r5
   b42ba:	4620      	mov	r0, r4
   b42bc:	f002 fe72 	bl	b6fa4 <_ZN6StringC1EOS_>
   b42c0:	7c2b      	ldrb	r3, [r5, #16]
   b42c2:	7423      	strb	r3, [r4, #16]
   b42c4:	4628      	mov	r0, r5
   b42c6:	f002 fe05 	bl	b6ed4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42ca:	3514      	adds	r5, #20
   b42cc:	3414      	adds	r4, #20
   b42ce:	e7f0      	b.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42d6:	2300      	movs	r3, #0
   b42d8:	e9c0 3300 	strd	r3, r3, [r0]
   b42dc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42de:	684f      	ldr	r7, [r1, #4]
   b42e0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42e2:	4604      	mov	r4, r0
   b42e4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42e6:	dd23      	ble.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42e8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42ec:	fb08 f007 	mul.w	r0, r8, r7
   b42f0:	f001 f964 	bl	b55bc <malloc>
            if (!d) {
   b42f4:	4605      	mov	r5, r0
   b42f6:	b1d8      	cbz	r0, b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42f8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42fc:	fb08 1202 	mla	r2, r8, r2, r1
   b4300:	f7ff ffb9 	bl	b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4304:	6820      	ldr	r0, [r4, #0]
   b4306:	f001 f961 	bl	b55cc <free>
        data_ = d;
   b430a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b430c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b430e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4312:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4316:	45b8      	cmp	r8, r7
   b4318:	d008      	beq.n	b432c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b431a:	4639      	mov	r1, r7
   b431c:	4628      	mov	r0, r5
   b431e:	f002 fe5b 	bl	b6fd8 <_ZN6StringC1ERKS_>
   b4322:	7c3b      	ldrb	r3, [r7, #16]
   b4324:	742b      	strb	r3, [r5, #16]
   b4326:	3714      	adds	r7, #20
   b4328:	3514      	adds	r5, #20
   b432a:	e7f4      	b.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b432c:	6873      	ldr	r3, [r6, #4]
   b432e:	6063      	str	r3, [r4, #4]
}
   b4330:	4620      	mov	r0, r4
   b4332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4338 <_GLOBAL__sub_I_logHandler>:
   b4338:	b5f0      	push	{r4, r5, r6, r7, lr}
   b433a:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   b433c:	2400      	movs	r4, #0
   b433e:	e9cd 4400 	strd	r4, r4, [sp]
   b4342:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4344:	f002 ff42 	bl	b71cc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4348:	4d20      	ldr	r5, [pc, #128]	; (b43cc <_GLOBAL__sub_I_logHandler+0x94>)
   b434a:	4606      	mov	r6, r0
   b434c:	4669      	mov	r1, sp
   b434e:	a803      	add	r0, sp, #12
   b4350:	f7ff ffbf 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4354:	462f      	mov	r7, r5
        stream_(&stream) {
   b4356:	a903      	add	r1, sp, #12
   b4358:	a806      	add	r0, sp, #24
   b435a:	f7ff ffba 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b435e:	4b1c      	ldr	r3, [pc, #112]	; (b43d0 <_GLOBAL__sub_I_logHandler+0x98>)
   b4360:	f847 3b04 	str.w	r3, [r7], #4
   b4364:	a906      	add	r1, sp, #24
   b4366:	a809      	add	r0, sp, #36	; 0x24
   b4368:	f7ff ffb3 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b436c:	aa09      	add	r2, sp, #36	; 0x24
   b436e:	211e      	movs	r1, #30
   b4370:	4638      	mov	r0, r7
   b4372:	f002 f96d 	bl	b6650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4376:	a809      	add	r0, sp, #36	; 0x24
   b4378:	f7ff ff6a 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b437c:	a806      	add	r0, sp, #24
   b437e:	f7ff ff67 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4382:	4b14      	ldr	r3, [pc, #80]	; (b43d4 <_GLOBAL__sub_I_logHandler+0x9c>)
   b4384:	602b      	str	r3, [r5, #0]
   b4386:	a803      	add	r0, sp, #12
   b4388:	622e      	str	r6, [r5, #32]
   b438a:	f7ff ff61 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b438e:	4b12      	ldr	r3, [pc, #72]	; (b43d8 <_GLOBAL__sub_I_logHandler+0xa0>)
   b4390:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4392:	f002 ff1b 	bl	b71cc <_Z16_fetch_usbserialv>
   b4396:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439a:	f002 ff05 	bl	b71a8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b439e:	f001 fe39 	bl	b6014 <_ZN5spark10LogManager8instanceEv>
   b43a2:	4629      	mov	r1, r5
   b43a4:	f002 f82a 	bl	b63fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b43a8:	4668      	mov	r0, sp
   b43aa:	f7ff ff51 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b43ae:	4b0b      	ldr	r3, [pc, #44]	; (b43dc <_GLOBAL__sub_I_logHandler+0xa4>)
    SleepResult() {}
   b43b0:	4a0b      	ldr	r2, [pc, #44]	; (b43e0 <_GLOBAL__sub_I_logHandler+0xa8>)
   b43b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b43b4:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b43b8:	2003      	movs	r0, #3
   b43ba:	f001 f859 	bl	b5470 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b43be:	4621      	mov	r1, r4
   b43c0:	2001      	movs	r0, #1
}
   b43c2:	b00d      	add	sp, #52	; 0x34
   b43c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b43c8:	f001 b862 	b.w	b5490 <system_thread_set_state>
   b43cc:	2003e5c4 	.word	0x2003e5c4
   b43d0:	000b7900 	.word	0x000b7900
   b43d4:	000b7df0 	.word	0x000b7df0
   b43d8:	000b7918 	.word	0x000b7918
   b43dc:	2003e5b4 	.word	0x2003e5b4
   b43e0:	ffff0000 	.word	0xffff0000

000b43e4 <_ZN9TofSensorD1Ev>:

TofSensor::TofSensor() {
}

TofSensor::~TofSensor() {
}
   b43e4:	4770      	bx	lr

000b43e6 <_ZN9TofSensorD0Ev>:
TofSensor::~TofSensor() {
   b43e6:	b510      	push	{r4, lr}
}
   b43e8:	2118      	movs	r1, #24
TofSensor::~TofSensor() {
   b43ea:	4604      	mov	r4, r0
}
   b43ec:	f7ff fe55 	bl	b409a <_ZdlPvj>
   b43f0:	4620      	mov	r0, r4
   b43f2:	bd10      	pop	{r4, pc}

000b43f4 <_ZN9TofSensorC1Ev>:
TofSensor::TofSensor() {
   b43f4:	b538      	push	{r3, r4, r5, lr}
   b43f6:	4605      	mov	r5, r0
   b43f8:	4b07      	ldr	r3, [pc, #28]	; (b4418 <_ZN9TofSensorC1Ev+0x24>)
   b43fa:	f845 3b04 	str.w	r3, [r5], #4
   b43fe:	4604      	mov	r4, r0
   b4400:	f003 f83c 	bl	b747c <_Z19__fetch_global_Wirev>
   b4404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4408:	4601      	mov	r1, r0
   b440a:	461a      	mov	r2, r3
   b440c:	4628      	mov	r0, r5
   b440e:	f000 fb7f 	bl	b4b10 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b4412:	4620      	mov	r0, r4
   b4414:	bd38      	pop	{r3, r4, r5, pc}
   b4416:	bf00      	nop
   b4418:	000b7a3c 	.word	0x000b7a3c

000b441c <_ZN9TofSensor8instanceEv>:
TofSensor &TofSensor::instance() {
   b441c:	b538      	push	{r3, r4, r5, lr}
  if (!_instance) {
   b441e:	4d06      	ldr	r5, [pc, #24]	; (b4438 <_ZN9TofSensor8instanceEv+0x1c>)
   b4420:	682b      	ldr	r3, [r5, #0]
   b4422:	b93b      	cbnz	r3, b4434 <_ZN9TofSensor8instanceEv+0x18>
      _instance = new TofSensor();
   b4424:	2018      	movs	r0, #24
   b4426:	f7ff fe34 	bl	b4092 <_Znwj>
   b442a:	4604      	mov	r4, r0
   b442c:	b108      	cbz	r0, b4432 <_ZN9TofSensor8instanceEv+0x16>
   b442e:	f7ff ffe1 	bl	b43f4 <_ZN9TofSensorC1Ev>
   b4432:	602c      	str	r4, [r5, #0]
}
   b4434:	6828      	ldr	r0, [r5, #0]
   b4436:	bd38      	pop	{r3, r4, r5, pc}
   b4438:	2003e628 	.word	0x2003e628

000b443c <_ZN9TofSensor4loopEv>:
  }
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
  return TRUE;
}

int TofSensor::loop(){                         // This function will update the current distance / occupancy for each zone.  It will return true if occupancy changes                    
   b443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  byte oldOccupancyState = occupancyState;
   b4440:	4d25      	ldr	r5, [pc, #148]	; (b44d8 <_ZN9TofSensor4loopEv+0x9c>)
   b4442:	4f26      	ldr	r7, [pc, #152]	; (b44dc <_ZN9TofSensor4loopEv+0xa0>)
   b4444:	4e26      	ldr	r6, [pc, #152]	; (b44e0 <_ZN9TofSensor4loopEv+0xa4>)
   b4446:	f895 8000 	ldrb.w	r8, [r5]
  occupancyState = 0;
   b444a:	f04f 0900 	mov.w	r9, #0
   b444e:	f885 9000 	strb.w	r9, [r5]
  unsigned long startedRanging;

  for (byte zone = 0; zone < 2; zone++){
    myTofSensor.stopRanging();
   b4452:	1d04      	adds	r4, r0, #4
   b4454:	4620      	mov	r0, r4
   b4456:	f000 fba9 	bl	b4bac <_ZN10SFEVL53L1X11stopRangingEv>
    myTofSensor.clearInterrupt();
   b445a:	4620      	mov	r0, r4
   b445c:	f000 fba0 	bl	b4ba0 <_ZN10SFEVL53L1X14clearInterruptEv>
    myTofSensor.setROI(zoneX,zoneY,opticalCenters[zone]);
   b4460:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4464:	2203      	movs	r2, #3
   b4466:	2108      	movs	r1, #8
   b4468:	4620      	mov	r0, r4
   b446a:	f000 fbc2 	bl	b4bf2 <_ZN10SFEVL53L1X6setROIEhhh>
    myTofSensor.startRanging();
   b446e:	4620      	mov	r0, r4
   b4470:	f000 fb99 	bl	b4ba6 <_ZN10SFEVL53L1X12startRangingEv>
   b4474:	f000 fe94 	bl	b51a0 <HAL_Timer_Get_Milli_Seconds>
   b4478:	4682      	mov	sl, r0

    startedRanging = millis();
    while(!myTofSensor.checkForDataReady()) {
   b447a:	4620      	mov	r0, r4
   b447c:	f000 fb99 	bl	b4bb2 <_ZN10SFEVL53L1X17checkForDataReadyEv>
   b4480:	b970      	cbnz	r0, b44a0 <_ZN9TofSensor4loopEv+0x64>
   b4482:	f000 fe8d 	bl	b51a0 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - startedRanging > SENSOR_TIMEOUT) {
   b4486:	eba0 030a 	sub.w	r3, r0, sl
   b448a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   b448e:	d9f4      	bls.n	b447a <_ZN9TofSensor4loopEv+0x3e>
        Log.info("Sensor Timed out");
   b4490:	4814      	ldr	r0, [pc, #80]	; (b44e4 <_ZN9TofSensor4loopEv+0xa8>)
   b4492:	4915      	ldr	r1, [pc, #84]	; (b44e8 <_ZN9TofSensor4loopEv+0xac>)
   b4494:	f7ff fe18 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
        return SENSOR_TIMEOUT_ERROR;
   b4498:	f06f 0002 	mvn.w	r0, #2
  #if PEOPLECOUNTER_DEBUG
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneDistances[0], zoneDistances[1]);
  #endif

  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
}
   b449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    zoneDistances[zone] = myTofSensor.getDistance();
   b44a0:	4620      	mov	r0, r4
   b44a2:	f000 fb9b 	bl	b4bdc <_ZN10SFEVL53L1X11getDistanceEv>
    occupancyState += occupied * (zone +1);
   b44a6:	f109 0201 	add.w	r2, r9, #1
    zoneDistances[zone] = myTofSensor.getDistance();
   b44aa:	f846 0b04 	str.w	r0, [r6], #4
    occupancyState += occupied * (zone +1);
   b44ae:	f240 31e6 	movw	r1, #998	; 0x3e6
    bool occupied = ((zoneDistances[zone] < PERSON_THRESHOLD) && (zoneDistances[zone] > DOOR_THRESHOLD));
   b44b2:	38c9      	subs	r0, #201	; 0xc9
    occupancyState += occupied * (zone +1);
   b44b4:	4288      	cmp	r0, r1
   b44b6:	bf94      	ite	ls
   b44b8:	4613      	movls	r3, r2
   b44ba:	2300      	movhi	r3, #0
   b44bc:	7828      	ldrb	r0, [r5, #0]
   b44be:	4403      	add	r3, r0
   b44c0:	b2db      	uxtb	r3, r3
  for (byte zone = 0; zone < 2; zone++){
   b44c2:	2a02      	cmp	r2, #2
    occupancyState += occupied * (zone +1);
   b44c4:	702b      	strb	r3, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b44c6:	f04f 0901 	mov.w	r9, #1
   b44ca:	d1c3      	bne.n	b4454 <_ZN9TofSensor4loopEv+0x18>
  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
   b44cc:	ebb3 0008 	subs.w	r0, r3, r8
   b44d0:	bf18      	it	ne
   b44d2:	2001      	movne	r0, #1
   b44d4:	e7e2      	b.n	b449c <_ZN9TofSensor4loopEv+0x60>
   b44d6:	bf00      	nop
   b44d8:	2003e640 	.word	0x2003e640
   b44dc:	2003e53c 	.word	0x2003e53c
   b44e0:	2003e644 	.word	0x2003e644
   b44e4:	2003e6a4 	.word	0x2003e6a4
   b44e8:	000b7928 	.word	0x000b7928

000b44ec <_ZN9TofSensor18performCalibrationEv>:
bool TofSensor::performCalibration() {
   b44ec:	b538      	push	{r3, r4, r5, lr}
  if (occupancyState != 0){
   b44ee:	4d0f      	ldr	r5, [pc, #60]	; (b452c <_ZN9TofSensor18performCalibrationEv+0x40>)
bool TofSensor::performCalibration() {
   b44f0:	4604      	mov	r4, r0
  TofSensor::loop();                  // Get the latest values
   b44f2:	f7ff ffa3 	bl	b443c <_ZN9TofSensor4loopEv>
  if (occupancyState != 0){
   b44f6:	782b      	ldrb	r3, [r5, #0]
   b44f8:	b943      	cbnz	r3, b450c <_ZN9TofSensor18performCalibrationEv+0x20>
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
   b44fa:	4a0d      	ldr	r2, [pc, #52]	; (b4530 <_ZN9TofSensor18performCalibrationEv+0x44>)
   b44fc:	480d      	ldr	r0, [pc, #52]	; (b4534 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b44fe:	490e      	ldr	r1, [pc, #56]	; (b4538 <_ZN9TofSensor18performCalibrationEv+0x4c>)
   b4500:	e9d2 2300 	ldrd	r2, r3, [r2]
   b4504:	f7ff fde0 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
  return TRUE;
   b4508:	2001      	movs	r0, #1
}
   b450a:	bd38      	pop	{r3, r4, r5, pc}
    Log.info("Target zone not clear - will wait ten seconds and try again");
   b450c:	490b      	ldr	r1, [pc, #44]	; (b453c <_ZN9TofSensor18performCalibrationEv+0x50>)
   b450e:	4809      	ldr	r0, [pc, #36]	; (b4534 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b4510:	f7ff fdda 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4514:	f242 7010 	movw	r0, #10000	; 0x2710
   b4518:	f001 f888 	bl	b562c <delay>
    TofSensor::loop();
   b451c:	4620      	mov	r0, r4
   b451e:	f7ff ff8d 	bl	b443c <_ZN9TofSensor4loopEv>
    if (occupancyState != 0) return FALSE;
   b4522:	782b      	ldrb	r3, [r5, #0]
   b4524:	2b00      	cmp	r3, #0
   b4526:	d0e8      	beq.n	b44fa <_ZN9TofSensor18performCalibrationEv+0xe>
   b4528:	2000      	movs	r0, #0
   b452a:	e7ee      	b.n	b450a <_ZN9TofSensor18performCalibrationEv+0x1e>
   b452c:	2003e640 	.word	0x2003e640
   b4530:	2003e644 	.word	0x2003e644
   b4534:	2003e6a4 	.word	0x2003e6a4
   b4538:	000b7939 	.word	0x000b7939
   b453c:	000b7973 	.word	0x000b7973

000b4540 <_ZN9TofSensor5setupEv>:
void TofSensor::setup(){
   b4540:	b538      	push	{r3, r4, r5, lr}
  if(myTofSensor.begin() != 0){
   b4542:	1d05      	adds	r5, r0, #4
void TofSensor::setup(){
   b4544:	4604      	mov	r4, r0
  if(myTofSensor.begin() != 0){
   b4546:	4628      	mov	r0, r5
   b4548:	f000 fb1c 	bl	b4b84 <_ZN10SFEVL53L1X5beginEv>
   b454c:	b1c8      	cbz	r0, b4582 <_ZN9TofSensor5setupEv+0x42>
    Log.info("Sensor error reset in 10 seconds");
   b454e:	4915      	ldr	r1, [pc, #84]	; (b45a4 <_ZN9TofSensor5setupEv+0x64>)
   b4550:	4815      	ldr	r0, [pc, #84]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4552:	f7ff fdb9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4556:	f242 7010 	movw	r0, #10000	; 0x2710
   b455a:	f001 f867 	bl	b562c <delay>
    System.reset();
   b455e:	f002 fd56 	bl	b700e <_ZN11SystemClass5resetEv>
  myTofSensor.setDistanceModeLong();
   b4562:	4628      	mov	r0, r5
   b4564:	f000 fb36 	bl	b4bd4 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
  myTofSensor.setTimingBudgetInMs(20);
   b4568:	4628      	mov	r0, r5
   b456a:	2114      	movs	r1, #20
   b456c:	f000 fb2f 	bl	b4bce <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
  if (TofSensor::performCalibration()) Log.info("Calibration Complete");
   b4570:	4620      	mov	r0, r4
   b4572:	f7ff ffbb 	bl	b44ec <_ZN9TofSensor18performCalibrationEv>
   b4576:	b148      	cbz	r0, b458c <_ZN9TofSensor5setupEv+0x4c>
   b4578:	490c      	ldr	r1, [pc, #48]	; (b45ac <_ZN9TofSensor5setupEv+0x6c>)
   b457a:	480b      	ldr	r0, [pc, #44]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b457c:	f7ff fda4 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   b4580:	bd38      	pop	{r3, r4, r5, pc}
  else Log.info("Sensor init successfully");
   b4582:	490b      	ldr	r1, [pc, #44]	; (b45b0 <_ZN9TofSensor5setupEv+0x70>)
   b4584:	4808      	ldr	r0, [pc, #32]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4586:	f7ff fd9f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
   b458a:	e7ea      	b.n	b4562 <_ZN9TofSensor5setupEv+0x22>
    Log.info("Initial calibration failed - wait 10 secs and reset");
   b458c:	4909      	ldr	r1, [pc, #36]	; (b45b4 <_ZN9TofSensor5setupEv+0x74>)
   b458e:	4806      	ldr	r0, [pc, #24]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4590:	f7ff fd9a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4594:	f242 7010 	movw	r0, #10000	; 0x2710
   b4598:	f001 f848 	bl	b562c <delay>
}
   b459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    System.reset();
   b45a0:	f002 bd35 	b.w	b700e <_ZN11SystemClass5resetEv>
   b45a4:	000b79af 	.word	0x000b79af
   b45a8:	2003e6a4 	.word	0x2003e6a4
   b45ac:	000b79e9 	.word	0x000b79e9
   b45b0:	000b79d0 	.word	0x000b79d0
   b45b4:	000b79fe 	.word	0x000b79fe

000b45b8 <_ZN9TofSensor12getOccupancyEv>:
  return zoneDistances[1];
}

byte TofSensor::getOccupancy() {
  return occupancyState;
}
   b45b8:	4b01      	ldr	r3, [pc, #4]	; (b45c0 <_ZN9TofSensor12getOccupancyEv+0x8>)
   b45ba:	7818      	ldrb	r0, [r3, #0]
   b45bc:	4770      	bx	lr
   b45be:	bf00      	nop
   b45c0:	2003e640 	.word	0x2003e640

000b45c4 <_GLOBAL__sub_I_opticalCenters>:
   b45c4:	b510      	push	{r4, lr}
SFEVL53L1X myTofSensor;
   b45c6:	f002 ff59 	bl	b747c <_Z19__fetch_global_Wirev>
   b45ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b45ce:	4601      	mov	r1, r0
}
   b45d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SFEVL53L1X myTofSensor;
   b45d4:	4801      	ldr	r0, [pc, #4]	; (b45dc <_GLOBAL__sub_I_opticalCenters+0x18>)
   b45d6:	461a      	mov	r2, r3
   b45d8:	f000 ba9a 	b.w	b4b10 <_ZN10SFEVL53L1XC1ER7TwoWireii>
   b45dc:	2003e62c 	.word	0x2003e62c

000b45e0 <_ZN13PeopleCounterD1Ev>:

PeopleCounter::PeopleCounter() {
}

PeopleCounter::~PeopleCounter() {
}
   b45e0:	4770      	bx	lr

000b45e2 <_ZN13PeopleCounterD0Ev>:
PeopleCounter::~PeopleCounter() {
   b45e2:	b510      	push	{r4, lr}
}
   b45e4:	2118      	movs	r1, #24
PeopleCounter::~PeopleCounter() {
   b45e6:	4604      	mov	r4, r0
}
   b45e8:	f7ff fd57 	bl	b409a <_ZdlPvj>
   b45ec:	4620      	mov	r0, r4
   b45ee:	bd10      	pop	{r4, pc}

000b45f0 <_ZN13PeopleCounterC1Ev>:
PeopleCounter::PeopleCounter() {
   b45f0:	4a05      	ldr	r2, [pc, #20]	; (b4608 <_ZN13PeopleCounterC1Ev+0x18>)
   b45f2:	6002      	str	r2, [r0, #0]
   b45f4:	2105      	movs	r1, #5
   b45f6:	2200      	movs	r2, #0
   b45f8:	e9c0 2101 	strd	r2, r1, [r0, #4]
   b45fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b4600:	8182      	strh	r2, [r0, #12]
   b4602:	7382      	strb	r2, [r0, #14]
}
   b4604:	4770      	bx	lr
   b4606:	bf00      	nop
   b4608:	000b7c18 	.word	0x000b7c18

000b460c <_ZN13PeopleCounter8instanceEv>:
PeopleCounter &PeopleCounter::instance() {
   b460c:	b510      	push	{r4, lr}
    if (!_instance) {
   b460e:	4c06      	ldr	r4, [pc, #24]	; (b4628 <_ZN13PeopleCounter8instanceEv+0x1c>)
   b4610:	6823      	ldr	r3, [r4, #0]
   b4612:	b93b      	cbnz	r3, b4624 <_ZN13PeopleCounter8instanceEv+0x18>
        _instance = new PeopleCounter();
   b4614:	2018      	movs	r0, #24
   b4616:	f7ff fd3c 	bl	b4092 <_Znwj>
   b461a:	4603      	mov	r3, r0
   b461c:	b108      	cbz	r0, b4622 <_ZN13PeopleCounter8instanceEv+0x16>
   b461e:	f7ff ffe7 	bl	b45f0 <_ZN13PeopleCounterC1Ev>
   b4622:	6023      	str	r3, [r4, #0]
}
   b4624:	6820      	ldr	r0, [r4, #0]
   b4626:	bd10      	pop	{r4, pc}
   b4628:	2003e654 	.word	0x2003e654

000b462c <_ZN13PeopleCounter5setupEv>:

void PeopleCounter::setup() {
}
   b462c:	4770      	bx	lr
	...

000b4630 <_ZN13PeopleCounter8setCountEi>:
  return occupancyCount;

}

void PeopleCounter::setCount(int value){
  occupancyCount = value;
   b4630:	4b01      	ldr	r3, [pc, #4]	; (b4638 <_ZN13PeopleCounter8setCountEi+0x8>)
   b4632:	6019      	str	r1, [r3, #0]
}
   b4634:	4770      	bx	lr
   b4636:	bf00      	nop
   b4638:	2003e650 	.word	0x2003e650

000b463c <_ZN13PeopleCounter15printBigNumbersEi>:

void PeopleCounter::setLimit(int value){
  occupancyLimit = value;
}

void PeopleCounter::printBigNumbers(int number) {
   b463c:	b510      	push	{r4, lr}
  if (number < 0){
   b463e:	1e0c      	subs	r4, r1, #0
   b4640:	da1b      	bge.n	b467a <_ZN13PeopleCounter15printBigNumbersEi+0x3e>
    Log.info("        ");
   b4642:	49a1      	ldr	r1, [pc, #644]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b4644:	48a1      	ldr	r0, [pc, #644]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4646:	f7ff fd3f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("        ");    
   b464a:	499f      	ldr	r1, [pc, #636]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b464c:	489f      	ldr	r0, [pc, #636]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b464e:	f7ff fd3b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("        ");
   b4652:	499d      	ldr	r1, [pc, #628]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b4654:	489d      	ldr	r0, [pc, #628]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4656:	f7ff fd37 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("--------");
   b465a:	499d      	ldr	r1, [pc, #628]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x294>)
   b465c:	489b      	ldr	r0, [pc, #620]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b465e:	f7ff fd33 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("        ");
   b4662:	4999      	ldr	r1, [pc, #612]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b4664:	4899      	ldr	r0, [pc, #612]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4666:	f7ff fd2f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("        ");
   b466a:	4997      	ldr	r1, [pc, #604]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b466c:	4897      	ldr	r0, [pc, #604]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b466e:	f7ff fd2b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("        ");
   b4672:	4995      	ldr	r1, [pc, #596]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x28c>)
   b4674:	4895      	ldr	r0, [pc, #596]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4676:	f7ff fd27 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
  } 

  Log.info("  ");
   b467a:	4996      	ldr	r1, [pc, #600]	; (b48d4 <_ZN13PeopleCounter15printBigNumbersEi+0x298>)
   b467c:	4893      	ldr	r0, [pc, #588]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b467e:	f7ff fd23 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>

  switch (abs(number)) {
   b4682:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
   b4686:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
   b468a:	2909      	cmp	r1, #9
   b468c:	f200 8184 	bhi.w	b4998 <_ZN13PeopleCounter15printBigNumbersEi+0x35c>
   b4690:	e8df f011 	tbh	[pc, r1, lsl #1]
   b4694:	002b000a 	.word	0x002b000a
   b4698:	00630049 	.word	0x00630049
   b469c:	0097007d 	.word	0x0097007d
   b46a0:	00cb00b1 	.word	0x00cb00b1
   b46a4:	00ff00e5 	.word	0x00ff00e5
    case 0:
      Log.info("  0000  ");
   b46a8:	498b      	ldr	r1, [pc, #556]	; (b48d8 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46aa:	4888      	ldr	r0, [pc, #544]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46ac:	f7ff fd0c 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 0    0 ");
   b46b0:	498a      	ldr	r1, [pc, #552]	; (b48dc <_ZN13PeopleCounter15printBigNumbersEi+0x2a0>)
   b46b2:	4886      	ldr	r0, [pc, #536]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46b4:	f7ff fd08 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("0      0");
   b46b8:	4989      	ldr	r1, [pc, #548]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b46ba:	4884      	ldr	r0, [pc, #528]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46bc:	f7ff fd04 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("0      0");  
   b46c0:	4987      	ldr	r1, [pc, #540]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b46c2:	4882      	ldr	r0, [pc, #520]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46c4:	f7ff fd00 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("0      0");     
   b46c8:	4985      	ldr	r1, [pc, #532]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b46ca:	4880      	ldr	r0, [pc, #512]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46cc:	f7ff fcfc 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 0    0 ");
   b46d0:	4982      	ldr	r1, [pc, #520]	; (b48dc <_ZN13PeopleCounter15printBigNumbersEi+0x2a0>)
   b46d2:	487e      	ldr	r0, [pc, #504]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46d4:	f7ff fcf8 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  0000  ");
   b46d8:	497f      	ldr	r1, [pc, #508]	; (b48d8 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
      Log.info("********");
      Log.info("********");
      Log.info("********");
      Log.info("********");
      Log.info("********");
      Log.info("********");
   b46da:	487c      	ldr	r0, [pc, #496]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46dc:	f7ff fcf4 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      break;
  }
  Log.info("  ");
   b46e0:	497c      	ldr	r1, [pc, #496]	; (b48d4 <_ZN13PeopleCounter15printBigNumbersEi+0x298>)
   b46e2:	487a      	ldr	r0, [pc, #488]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46e4:	f7ff fcf0 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   b46e8:	bd10      	pop	{r4, pc}
      Log.info("    11  ");
   b46ea:	497e      	ldr	r1, [pc, #504]	; (b48e4 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b46ec:	4877      	ldr	r0, [pc, #476]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46ee:	f7ff fceb 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("   1 1  ");
   b46f2:	497d      	ldr	r1, [pc, #500]	; (b48e8 <_ZN13PeopleCounter15printBigNumbersEi+0x2ac>)
   b46f4:	4875      	ldr	r0, [pc, #468]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46f6:	f7ff fce7 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     1  ");
   b46fa:	497c      	ldr	r1, [pc, #496]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b46fc:	4873      	ldr	r0, [pc, #460]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b46fe:	f7ff fce3 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     1  ");
   b4702:	497a      	ldr	r1, [pc, #488]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b4704:	4871      	ldr	r0, [pc, #452]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4706:	f7ff fcdf 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     1  ");
   b470a:	4978      	ldr	r1, [pc, #480]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b470c:	486f      	ldr	r0, [pc, #444]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b470e:	f7ff fcdb 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     1  ");
   b4712:	4976      	ldr	r1, [pc, #472]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b4714:	486d      	ldr	r0, [pc, #436]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4716:	f7ff fcd7 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     1  ");
   b471a:	4974      	ldr	r1, [pc, #464]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b471c:	486b      	ldr	r0, [pc, #428]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b471e:	f7ff fcd3 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("   11111");
   b4722:	4973      	ldr	r1, [pc, #460]	; (b48f0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b4>)
   b4724:	e7d9      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  2222  ");
   b4726:	4973      	ldr	r1, [pc, #460]	; (b48f4 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4728:	4868      	ldr	r0, [pc, #416]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b472a:	f7ff fccd 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 2    22");
   b472e:	4972      	ldr	r1, [pc, #456]	; (b48f8 <_ZN13PeopleCounter15printBigNumbersEi+0x2bc>)
   b4730:	4866      	ldr	r0, [pc, #408]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4732:	f7ff fcc9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     2  ");
   b4736:	4971      	ldr	r1, [pc, #452]	; (b48fc <_ZN13PeopleCounter15printBigNumbersEi+0x2c0>)
   b4738:	4864      	ldr	r0, [pc, #400]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b473a:	f7ff fcc5 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("   2    ");
   b473e:	4970      	ldr	r1, [pc, #448]	; (b4900 <_ZN13PeopleCounter15printBigNumbersEi+0x2c4>)
   b4740:	4862      	ldr	r0, [pc, #392]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4742:	f7ff fcc1 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  2     ");
   b4746:	496f      	ldr	r1, [pc, #444]	; (b4904 <_ZN13PeopleCounter15printBigNumbersEi+0x2c8>)
   b4748:	4860      	ldr	r0, [pc, #384]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b474a:	f7ff fcbd 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("22     2");
   b474e:	496e      	ldr	r1, [pc, #440]	; (b4908 <_ZN13PeopleCounter15printBigNumbersEi+0x2cc>)
   b4750:	485e      	ldr	r0, [pc, #376]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4752:	f7ff fcb9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("2222222 ");
   b4756:	496d      	ldr	r1, [pc, #436]	; (b490c <_ZN13PeopleCounter15printBigNumbersEi+0x2d0>)
   b4758:	e7bf      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  3333  ");
   b475a:	496d      	ldr	r1, [pc, #436]	; (b4910 <_ZN13PeopleCounter15printBigNumbersEi+0x2d4>)
   b475c:	485b      	ldr	r0, [pc, #364]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b475e:	f7ff fcb3 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 3    3 ");
   b4762:	496c      	ldr	r1, [pc, #432]	; (b4914 <_ZN13PeopleCounter15printBigNumbersEi+0x2d8>)
   b4764:	4859      	ldr	r0, [pc, #356]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4766:	f7ff fcaf 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       3");
   b476a:	496b      	ldr	r1, [pc, #428]	; (b4918 <_ZN13PeopleCounter15printBigNumbersEi+0x2dc>)
   b476c:	4857      	ldr	r0, [pc, #348]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b476e:	f7ff fcab 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("   333  ");
   b4772:	496a      	ldr	r1, [pc, #424]	; (b491c <_ZN13PeopleCounter15printBigNumbersEi+0x2e0>)
   b4774:	4855      	ldr	r0, [pc, #340]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4776:	f7ff fca7 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       3");
   b477a:	4967      	ldr	r1, [pc, #412]	; (b4918 <_ZN13PeopleCounter15printBigNumbersEi+0x2dc>)
   b477c:	4853      	ldr	r0, [pc, #332]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b477e:	f7ff fca3 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 3    3 ");
   b4782:	4964      	ldr	r1, [pc, #400]	; (b4914 <_ZN13PeopleCounter15printBigNumbersEi+0x2d8>)
   b4784:	4851      	ldr	r0, [pc, #324]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4786:	f7ff fc9f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  3333  ");
   b478a:	4961      	ldr	r1, [pc, #388]	; (b4910 <_ZN13PeopleCounter15printBigNumbersEi+0x2d4>)
   b478c:	e7a5      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("4      4");
   b478e:	4964      	ldr	r1, [pc, #400]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2e4>)
   b4790:	484e      	ldr	r0, [pc, #312]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4792:	f7ff fc99 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("4      4");
   b4796:	4962      	ldr	r1, [pc, #392]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2e4>)
   b4798:	484c      	ldr	r0, [pc, #304]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b479a:	f7ff fc95 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("4      4");
   b479e:	4960      	ldr	r1, [pc, #384]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2e4>)
   b47a0:	484a      	ldr	r0, [pc, #296]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47a2:	f7ff fc91 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  4444  ");
   b47a6:	495f      	ldr	r1, [pc, #380]	; (b4924 <_ZN13PeopleCounter15printBigNumbersEi+0x2e8>)
   b47a8:	4848      	ldr	r0, [pc, #288]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47aa:	f7ff fc8d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       4");
   b47ae:	495e      	ldr	r1, [pc, #376]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x2ec>)
   b47b0:	4846      	ldr	r0, [pc, #280]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47b2:	f7ff fc89 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       4");
   b47b6:	495c      	ldr	r1, [pc, #368]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x2ec>)
   b47b8:	4844      	ldr	r0, [pc, #272]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47ba:	f7ff fc85 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       4");
   b47be:	495a      	ldr	r1, [pc, #360]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x2ec>)
   b47c0:	e78b      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  555555");
   b47c2:	495a      	ldr	r1, [pc, #360]	; (b492c <_ZN13PeopleCounter15printBigNumbersEi+0x2f0>)
   b47c4:	4841      	ldr	r0, [pc, #260]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47c6:	f7ff fc7f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 5      ");
   b47ca:	4959      	ldr	r1, [pc, #356]	; (b4930 <_ZN13PeopleCounter15printBigNumbersEi+0x2f4>)
   b47cc:	483f      	ldr	r0, [pc, #252]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47ce:	f7ff fc7b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 555555 ");
   b47d2:	4958      	ldr	r1, [pc, #352]	; (b4934 <_ZN13PeopleCounter15printBigNumbersEi+0x2f8>)
   b47d4:	483d      	ldr	r0, [pc, #244]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47d6:	f7ff fc77 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("      5 ");
   b47da:	4957      	ldr	r1, [pc, #348]	; (b4938 <_ZN13PeopleCounter15printBigNumbersEi+0x2fc>)
   b47dc:	483b      	ldr	r0, [pc, #236]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47de:	f7ff fc73 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       5");
   b47e2:	4956      	ldr	r1, [pc, #344]	; (b493c <_ZN13PeopleCounter15printBigNumbersEi+0x300>)
   b47e4:	4839      	ldr	r0, [pc, #228]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47e6:	f7ff fc6f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("      5 ");
   b47ea:	4953      	ldr	r1, [pc, #332]	; (b4938 <_ZN13PeopleCounter15printBigNumbersEi+0x2fc>)
   b47ec:	4837      	ldr	r0, [pc, #220]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47ee:	f7ff fc6b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 555555 ");
   b47f2:	4950      	ldr	r1, [pc, #320]	; (b4934 <_ZN13PeopleCounter15printBigNumbersEi+0x2f8>)
   b47f4:	e771      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  666666");
   b47f6:	4952      	ldr	r1, [pc, #328]	; (b4940 <_ZN13PeopleCounter15printBigNumbersEi+0x304>)
   b47f8:	4834      	ldr	r0, [pc, #208]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b47fa:	f7ff fc65 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 6      ");
   b47fe:	4951      	ldr	r1, [pc, #324]	; (b4944 <_ZN13PeopleCounter15printBigNumbersEi+0x308>)
   b4800:	4832      	ldr	r0, [pc, #200]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4802:	f7ff fc61 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  66666 ");
   b4806:	4950      	ldr	r1, [pc, #320]	; (b4948 <_ZN13PeopleCounter15printBigNumbersEi+0x30c>)
   b4808:	4830      	ldr	r0, [pc, #192]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b480a:	f7ff fc5d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("6      6");
   b480e:	494f      	ldr	r1, [pc, #316]	; (b494c <_ZN13PeopleCounter15printBigNumbersEi+0x310>)
   b4810:	482e      	ldr	r0, [pc, #184]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4812:	f7ff fc59 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("6      6");
   b4816:	494d      	ldr	r1, [pc, #308]	; (b494c <_ZN13PeopleCounter15printBigNumbersEi+0x310>)
   b4818:	482c      	ldr	r0, [pc, #176]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b481a:	f7ff fc55 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 6    6 ");
   b481e:	494c      	ldr	r1, [pc, #304]	; (b4950 <_ZN13PeopleCounter15printBigNumbersEi+0x314>)
   b4820:	482a      	ldr	r0, [pc, #168]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4822:	f7ff fc51 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  6666  ");
   b4826:	494b      	ldr	r1, [pc, #300]	; (b4954 <_ZN13PeopleCounter15printBigNumbersEi+0x318>)
   b4828:	e757      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  777777");
   b482a:	494b      	ldr	r1, [pc, #300]	; (b4958 <_ZN13PeopleCounter15printBigNumbersEi+0x31c>)
   b482c:	4827      	ldr	r0, [pc, #156]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b482e:	f7ff fc4b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 7     7");
   b4832:	494a      	ldr	r1, [pc, #296]	; (b495c <_ZN13PeopleCounter15printBigNumbersEi+0x320>)
   b4834:	4825      	ldr	r0, [pc, #148]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4836:	f7ff fc47 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("      7 ");
   b483a:	4949      	ldr	r1, [pc, #292]	; (b4960 <_ZN13PeopleCounter15printBigNumbersEi+0x324>)
   b483c:	4823      	ldr	r0, [pc, #140]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b483e:	f7ff fc43 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("     7  ");
   b4842:	4948      	ldr	r1, [pc, #288]	; (b4964 <_ZN13PeopleCounter15printBigNumbersEi+0x328>)
   b4844:	4821      	ldr	r0, [pc, #132]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4846:	f7ff fc3f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("    7   ");
   b484a:	4947      	ldr	r1, [pc, #284]	; (b4968 <_ZN13PeopleCounter15printBigNumbersEi+0x32c>)
   b484c:	481f      	ldr	r0, [pc, #124]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b484e:	f7ff fc3b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("   7    ");
   b4852:	4946      	ldr	r1, [pc, #280]	; (b496c <_ZN13PeopleCounter15printBigNumbersEi+0x330>)
   b4854:	481d      	ldr	r0, [pc, #116]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4856:	f7ff fc37 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  7     ");
   b485a:	4945      	ldr	r1, [pc, #276]	; (b4970 <_ZN13PeopleCounter15printBigNumbersEi+0x334>)
   b485c:	e73d      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info("  8888  ");
   b485e:	4945      	ldr	r1, [pc, #276]	; (b4974 <_ZN13PeopleCounter15printBigNumbersEi+0x338>)
   b4860:	481a      	ldr	r0, [pc, #104]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4862:	f7ff fc31 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 8    8 ");
   b4866:	4944      	ldr	r1, [pc, #272]	; (b4978 <_ZN13PeopleCounter15printBigNumbersEi+0x33c>)
   b4868:	4818      	ldr	r0, [pc, #96]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b486a:	f7ff fc2d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("8      8");
   b486e:	4943      	ldr	r1, [pc, #268]	; (b497c <_ZN13PeopleCounter15printBigNumbersEi+0x340>)
   b4870:	4816      	ldr	r0, [pc, #88]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4872:	f7ff fc29 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  8888  ");
   b4876:	493f      	ldr	r1, [pc, #252]	; (b4974 <_ZN13PeopleCounter15printBigNumbersEi+0x338>)
   b4878:	4814      	ldr	r0, [pc, #80]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b487a:	f7ff fc25 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("8      8");
   b487e:	493f      	ldr	r1, [pc, #252]	; (b497c <_ZN13PeopleCounter15printBigNumbersEi+0x340>)
   b4880:	4812      	ldr	r0, [pc, #72]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4882:	f7ff fc21 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 8    8 ");
   b4886:	493c      	ldr	r1, [pc, #240]	; (b4978 <_ZN13PeopleCounter15printBigNumbersEi+0x33c>)
   b4888:	4810      	ldr	r0, [pc, #64]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b488a:	f7ff fc1d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("  8888  ");
   b488e:	4939      	ldr	r1, [pc, #228]	; (b4974 <_ZN13PeopleCounter15printBigNumbersEi+0x338>)
   b4890:	e723      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
      Log.info(" 99999  ");
   b4892:	493b      	ldr	r1, [pc, #236]	; (b4980 <_ZN13PeopleCounter15printBigNumbersEi+0x344>)
   b4894:	480d      	ldr	r0, [pc, #52]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b4896:	f7ff fc17 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("9     9 ");
   b489a:	493a      	ldr	r1, [pc, #232]	; (b4984 <_ZN13PeopleCounter15printBigNumbersEi+0x348>)
   b489c:	480b      	ldr	r0, [pc, #44]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b489e:	f7ff fc13 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("9      9");
   b48a2:	4939      	ldr	r1, [pc, #228]	; (b4988 <_ZN13PeopleCounter15printBigNumbersEi+0x34c>)
   b48a4:	4809      	ldr	r0, [pc, #36]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b48a6:	f7ff fc0f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 99999  ");
   b48aa:	4935      	ldr	r1, [pc, #212]	; (b4980 <_ZN13PeopleCounter15printBigNumbersEi+0x344>)
   b48ac:	4807      	ldr	r0, [pc, #28]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b48ae:	f7ff fc0b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("       9");
   b48b2:	4936      	ldr	r1, [pc, #216]	; (b498c <_ZN13PeopleCounter15printBigNumbersEi+0x350>)
   b48b4:	4805      	ldr	r0, [pc, #20]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b48b6:	f7ff fc07 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("      9 ");
   b48ba:	4935      	ldr	r1, [pc, #212]	; (b4990 <_ZN13PeopleCounter15printBigNumbersEi+0x354>)
   b48bc:	4803      	ldr	r0, [pc, #12]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x290>)
   b48be:	f7ff fc03 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info(" 999999 ");
   b48c2:	4934      	ldr	r1, [pc, #208]	; (b4994 <_ZN13PeopleCounter15printBigNumbersEi+0x358>)
   b48c4:	e709      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
   b48c6:	bf00      	nop
   b48c8:	000b7a44 	.word	0x000b7a44
   b48cc:	2003e6a4 	.word	0x2003e6a4
   b48d0:	000b7a4d 	.word	0x000b7a4d
   b48d4:	000b7a4a 	.word	0x000b7a4a
   b48d8:	000b7a56 	.word	0x000b7a56
   b48dc:	000b7a5f 	.word	0x000b7a5f
   b48e0:	000b7a68 	.word	0x000b7a68
   b48e4:	000b7a71 	.word	0x000b7a71
   b48e8:	000b7a7a 	.word	0x000b7a7a
   b48ec:	000b7a83 	.word	0x000b7a83
   b48f0:	000b7a8c 	.word	0x000b7a8c
   b48f4:	000b7a95 	.word	0x000b7a95
   b48f8:	000b7a9e 	.word	0x000b7a9e
   b48fc:	000b7aa7 	.word	0x000b7aa7
   b4900:	000b7ab0 	.word	0x000b7ab0
   b4904:	000b7ab9 	.word	0x000b7ab9
   b4908:	000b7ac2 	.word	0x000b7ac2
   b490c:	000b7acb 	.word	0x000b7acb
   b4910:	000b7ad4 	.word	0x000b7ad4
   b4914:	000b7add 	.word	0x000b7add
   b4918:	000b7ae6 	.word	0x000b7ae6
   b491c:	000b7aef 	.word	0x000b7aef
   b4920:	000b7af8 	.word	0x000b7af8
   b4924:	000b7b01 	.word	0x000b7b01
   b4928:	000b7b0a 	.word	0x000b7b0a
   b492c:	000b7b13 	.word	0x000b7b13
   b4930:	000b7b1c 	.word	0x000b7b1c
   b4934:	000b7b25 	.word	0x000b7b25
   b4938:	000b7b2e 	.word	0x000b7b2e
   b493c:	000b7b37 	.word	0x000b7b37
   b4940:	000b7b40 	.word	0x000b7b40
   b4944:	000b7b49 	.word	0x000b7b49
   b4948:	000b7b52 	.word	0x000b7b52
   b494c:	000b7b5b 	.word	0x000b7b5b
   b4950:	000b7b64 	.word	0x000b7b64
   b4954:	000b7b6d 	.word	0x000b7b6d
   b4958:	000b7b76 	.word	0x000b7b76
   b495c:	000b7b7f 	.word	0x000b7b7f
   b4960:	000b7b88 	.word	0x000b7b88
   b4964:	000b7b91 	.word	0x000b7b91
   b4968:	000b7b9a 	.word	0x000b7b9a
   b496c:	000b7ba3 	.word	0x000b7ba3
   b4970:	000b7bac 	.word	0x000b7bac
   b4974:	000b7bb5 	.word	0x000b7bb5
   b4978:	000b7bbe 	.word	0x000b7bbe
   b497c:	000b7bc7 	.word	0x000b7bc7
   b4980:	000b7bd0 	.word	0x000b7bd0
   b4984:	000b7bd9 	.word	0x000b7bd9
   b4988:	000b7be2 	.word	0x000b7be2
   b498c:	000b7beb 	.word	0x000b7beb
   b4990:	000b7bf4 	.word	0x000b7bf4
   b4994:	000b7bfd 	.word	0x000b7bfd
      Log.info("********");
   b4998:	490c      	ldr	r1, [pc, #48]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b499a:	480d      	ldr	r0, [pc, #52]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b499c:	f7ff fb94 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49a0:	490a      	ldr	r1, [pc, #40]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49a2:	480b      	ldr	r0, [pc, #44]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b49a4:	f7ff fb90 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49a8:	4908      	ldr	r1, [pc, #32]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49aa:	4809      	ldr	r0, [pc, #36]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b49ac:	f7ff fb8c 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49b0:	4906      	ldr	r1, [pc, #24]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49b2:	4807      	ldr	r0, [pc, #28]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b49b4:	f7ff fb88 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49b8:	4904      	ldr	r1, [pc, #16]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49ba:	4805      	ldr	r0, [pc, #20]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b49bc:	f7ff fb84 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49c0:	4902      	ldr	r1, [pc, #8]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49c2:	4803      	ldr	r0, [pc, #12]	; (b49d0 <_ZN13PeopleCounter15printBigNumbersEi+0x394>)
   b49c4:	f7ff fb80 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b49c8:	4900      	ldr	r1, [pc, #0]	; (b49cc <_ZN13PeopleCounter15printBigNumbersEi+0x390>)
   b49ca:	e686      	b.n	b46da <_ZN13PeopleCounter15printBigNumbersEi+0x9e>
   b49cc:	000b7c06 	.word	0x000b7c06
   b49d0:	2003e6a4 	.word	0x2003e6a4

000b49d4 <_ZN13PeopleCounter4loopEv>:
void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b49d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool oldOccupancyCount = occupancyCount;
   b49d6:	4f28      	ldr	r7, [pc, #160]	; (b4a78 <_ZN13PeopleCounter4loopEv+0xa4>)
   b49d8:	4d28      	ldr	r5, [pc, #160]	; (b4a7c <_ZN13PeopleCounter4loopEv+0xa8>)
   b49da:	783b      	ldrb	r3, [r7, #0]
   b49dc:	4c28      	ldr	r4, [pc, #160]	; (b4a80 <_ZN13PeopleCounter4loopEv+0xac>)
   b49de:	f3bf 8f5b 	dmb	ish
   b49e2:	f013 0f01 	tst.w	r3, #1
void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b49e6:	4606      	mov	r6, r0
    static bool oldOccupancyCount = occupancyCount;
   b49e8:	d10b      	bne.n	b4a02 <_ZN13PeopleCounter4loopEv+0x2e>
   b49ea:	4638      	mov	r0, r7
   b49ec:	f7ff fb64 	bl	b40b8 <__cxa_guard_acquire>
   b49f0:	b138      	cbz	r0, b4a02 <_ZN13PeopleCounter4loopEv+0x2e>
   b49f2:	6823      	ldr	r3, [r4, #0]
   b49f4:	3b00      	subs	r3, #0
   b49f6:	bf18      	it	ne
   b49f8:	2301      	movne	r3, #1
   b49fa:	4638      	mov	r0, r7
   b49fc:	702b      	strb	r3, [r5, #0]
   b49fe:	f7ff fb60 	bl	b40c2 <__cxa_guard_release>
    switch (TofSensor::instance().getOccupancy()) {
   b4a02:	f7ff fd0b 	bl	b441c <_ZN9TofSensor8instanceEv>
   b4a06:	f7ff fdd7 	bl	b45b8 <_ZN9TofSensor12getOccupancyEv>
   b4a0a:	2803      	cmp	r0, #3
   b4a0c:	d815      	bhi.n	b4a3a <_ZN13PeopleCounter4loopEv+0x66>
   b4a0e:	e8df f000 	tbb	[pc, r0]
   b4a12:	0602      	.short	0x0602
   b4a14:	3021      	.short	0x3021
        oldOccupancyState = 0;
   b4a16:	4b1b      	ldr	r3, [pc, #108]	; (b4a84 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4a18:	2200      	movs	r2, #0
        atTheThreshold = true;
   b4a1a:	701a      	strb	r2, [r3, #0]
      break;
   b4a1c:	e00d      	b.n	b4a3a <_ZN13PeopleCounter4loopEv+0x66>
        if (atTheThreshold) {
   b4a1e:	491a      	ldr	r1, [pc, #104]	; (b4a88 <_ZN13PeopleCounter4loopEv+0xb4>)
   b4a20:	4a18      	ldr	r2, [pc, #96]	; (b4a84 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4a22:	780b      	ldrb	r3, [r1, #0]
   b4a24:	b13b      	cbz	r3, b4a36 <_ZN13PeopleCounter4loopEv+0x62>
          atTheThreshold = false;
   b4a26:	2000      	movs	r0, #0
   b4a28:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 2) {
   b4a2a:	7811      	ldrb	r1, [r2, #0]
            occupancyCount++; 
   b4a2c:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 2) {
   b4a2e:	2902      	cmp	r1, #2
            occupancyCount++; 
   b4a30:	bf04      	itt	eq
   b4a32:	3301      	addeq	r3, #1
   b4a34:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 1;
   b4a36:	2301      	movs	r3, #1
        oldOccupancyState = 2;
   b4a38:	7013      	strb	r3, [r2, #0]
    if (oldOccupancyCount != occupancyCount) printBigNumbers(occupancyCount);
   b4a3a:	6821      	ldr	r1, [r4, #0]
   b4a3c:	782b      	ldrb	r3, [r5, #0]
   b4a3e:	428b      	cmp	r3, r1
   b4a40:	d002      	beq.n	b4a48 <_ZN13PeopleCounter4loopEv+0x74>
   b4a42:	4630      	mov	r0, r6
   b4a44:	f7ff fdfa 	bl	b463c <_ZN13PeopleCounter15printBigNumbersEi>
    oldOccupancyCount = occupancyCount;
   b4a48:	6823      	ldr	r3, [r4, #0]
   b4a4a:	3b00      	subs	r3, #0
   b4a4c:	bf18      	it	ne
   b4a4e:	2301      	movne	r3, #1
   b4a50:	702b      	strb	r3, [r5, #0]
}
   b4a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (atTheThreshold) {
   b4a54:	490c      	ldr	r1, [pc, #48]	; (b4a88 <_ZN13PeopleCounter4loopEv+0xb4>)
   b4a56:	4a0b      	ldr	r2, [pc, #44]	; (b4a84 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4a58:	780b      	ldrb	r3, [r1, #0]
   b4a5a:	b143      	cbz	r3, b4a6e <_ZN13PeopleCounter4loopEv+0x9a>
          atTheThreshold = false;
   b4a5c:	2000      	movs	r0, #0
   b4a5e:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 1) {
   b4a60:	7811      	ldrb	r1, [r2, #0]
            occupancyCount++; 
   b4a62:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 1) {
   b4a64:	2901      	cmp	r1, #1
            occupancyCount--;
   b4a66:	bf04      	itt	eq
   b4a68:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   b4a6c:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 2;
   b4a6e:	2302      	movs	r3, #2
   b4a70:	e7e2      	b.n	b4a38 <_ZN13PeopleCounter4loopEv+0x64>
        atTheThreshold = true;
   b4a72:	4b05      	ldr	r3, [pc, #20]	; (b4a88 <_ZN13PeopleCounter4loopEv+0xb4>)
   b4a74:	2201      	movs	r2, #1
   b4a76:	e7d0      	b.n	b4a1a <_ZN13PeopleCounter4loopEv+0x46>
   b4a78:	2003e64c 	.word	0x2003e64c
   b4a7c:	2003e659 	.word	0x2003e659
   b4a80:	2003e650 	.word	0x2003e650
   b4a84:	2003e65a 	.word	0x2003e65a
   b4a88:	2003e658 	.word	0x2003e658

000b4a8c <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b4a8c:	4770      	bx	lr

000b4a8e <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b4a8e:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b4a90:	6880      	ldr	r0, [r0, #8]
   b4a92:	2800      	cmp	r0, #0
   b4a94:	db03      	blt.n	b4a9e <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b4a96:	2100      	movs	r1, #0
   b4a98:	b280      	uxth	r0, r0
   b4a9a:	f002 fca8 	bl	b73ee <digitalWrite>
       }
       delay(10);
    }
   b4a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4aa2:	200a      	movs	r0, #10
   b4aa4:	f000 bdc2 	b.w	b562c <delay>

000b4aa8 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b4aa8:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b4aaa:	6880      	ldr	r0, [r0, #8]
   b4aac:	2800      	cmp	r0, #0
   b4aae:	db03      	blt.n	b4ab8 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b4ab0:	2101      	movs	r1, #1
   b4ab2:	b280      	uxth	r0, r0
   b4ab4:	f002 fc9b 	bl	b73ee <digitalWrite>
    }
   b4ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4abc:	200a      	movs	r0, #10
   b4abe:	f000 bdb5 	b.w	b562c <delay>

000b4ac2 <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b4ac2:	b510      	push	{r4, lr}
   b4ac4:	211c      	movs	r1, #28
   b4ac6:	4604      	mov	r4, r0
   b4ac8:	f7ff fae7 	bl	b409a <_ZdlPvj>
   b4acc:	4620      	mov	r0, r4
   b4ace:	bd10      	pop	{r4, pc}

000b4ad0 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b4ad0:	b513      	push	{r0, r1, r4, lr}
   b4ad2:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b4ad4:	f10d 0106 	add.w	r1, sp, #6
   b4ad8:	f000 fb25 	bl	b5126 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b4adc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4ae0:	6023      	str	r3, [r4, #0]
	return status;
    }
   b4ae2:	b002      	add	sp, #8
   b4ae4:	bd10      	pop	{r4, pc}

000b4ae6 <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b4ae6:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b4ae8:	f10d 0106 	add.w	r1, sp, #6
   b4aec:	f000 fb0a 	bl	b5104 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b4af0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b4af4:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b4af8:	1ac0      	subs	r0, r0, r3
   b4afa:	bf18      	it	ne
   b4afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4b00:	b003      	add	sp, #12
   b4b02:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b06 <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b4b06:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b4b08:	f000 f956 	bl	b4db8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b4b0c:	bd08      	pop	{r3, pc}
	...

000b4b10 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4b14:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b4b18:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4b1c:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b4b20:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4b22:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4b24:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4b26:	460f      	mov	r7, r1
   b4b28:	4616      	mov	r6, r2
   b4b2a:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4b2c:	f7ff fab1 	bl	b4092 <_Znwj>
   b4b30:	4604      	mov	r4, r0
   b4b32:	b180      	cbz	r0, b4b56 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4b34:	4b0a      	ldr	r3, [pc, #40]	; (b4b60 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b4b36:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4b3a:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b4b3e:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b4b40:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4b44:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b4b48:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b4b4a:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b4b4c:	db03      	blt.n	b4b56 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b4b4e:	2101      	movs	r1, #1
   b4b50:	b2b0      	uxth	r0, r6
   b4b52:	f002 fc3b 	bl	b73cc <pinMode>
   b4b56:	612c      	str	r4, [r5, #16]
}
   b4b58:	4628      	mov	r0, r5
   b4b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4b5e:	bf00      	nop
   b4b60:	000b7c28 	.word	0x000b7c28

000b4b64 <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   b4b64:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   b4b66:	f10d 0106 	add.w	r1, sp, #6
   b4b6a:	6900      	ldr	r0, [r0, #16]
   b4b6c:	f000 faca 	bl	b5104 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   b4b70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   b4b74:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   b4b78:	1ac3      	subs	r3, r0, r3
   b4b7a:	4258      	negs	r0, r3
   b4b7c:	4158      	adcs	r0, r3
   b4b7e:	b003      	add	sp, #12
   b4b80:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b84 <_ZN10SFEVL53L1X5beginEv>:
{
   b4b84:	b510      	push	{r4, lr}
   b4b86:	4604      	mov	r4, r0
	if (checkID() == false)
   b4b88:	f7ff ffec 	bl	b4b64 <_ZN10SFEVL53L1X7checkIDEv>
   b4b8c:	b130      	cbz	r0, b4b9c <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
   b4b8e:	6920      	ldr	r0, [r4, #16]
   b4b90:	f000 f912 	bl	b4db8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   b4b94:	3800      	subs	r0, #0
   b4b96:	bf18      	it	ne
   b4b98:	2001      	movne	r0, #1
}
   b4b9a:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   b4b9c:	2001      	movs	r0, #1
   b4b9e:	e7fc      	b.n	b4b9a <_ZN10SFEVL53L1X5beginEv+0x16>

000b4ba0 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   b4ba0:	6900      	ldr	r0, [r0, #16]
   b4ba2:	f000 b85b 	b.w	b4c5c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000b4ba6 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b4ba6:	6900      	ldr	r0, [r0, #16]
   b4ba8:	f000 b85d 	b.w	b4c66 <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b4bac <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b4bac:	6900      	ldr	r0, [r0, #16]
   b4bae:	f000 b85f 	b.w	b4c70 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b4bb2 <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   b4bb2:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   b4bb4:	f10d 0107 	add.w	r1, sp, #7
   b4bb8:	6900      	ldr	r0, [r0, #16]
   b4bba:	f000 f8e1 	bl	b4d80 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   b4bbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   b4bc2:	3800      	subs	r0, #0
   b4bc4:	bf18      	it	ne
   b4bc6:	2001      	movne	r0, #1
   b4bc8:	b003      	add	sp, #12
   b4bca:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bce <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b4bce:	6900      	ldr	r0, [r0, #16]
   b4bd0:	f000 b944 	b.w	b4e5c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b4bd4 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b4bd4:	6900      	ldr	r0, [r0, #16]
   b4bd6:	2102      	movs	r1, #2
   b4bd8:	f000 ba39 	b.w	b504e <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b4bdc <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   b4bdc:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   b4bde:	f10d 0106 	add.w	r1, sp, #6
   b4be2:	6900      	ldr	r0, [r0, #16]
   b4be4:	f000 fa9f 	bl	b5126 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   b4be8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4bec:	b003      	add	sp, #12
   b4bee:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bf2 <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b4bf2:	6900      	ldr	r0, [r0, #16]
   b4bf4:	f000 b841 	b.w	b4c7a <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b4bf8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b4bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4bfa:	4604      	mov	r4, r0
   b4bfc:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4bfe:	6840      	ldr	r0, [r0, #4]
{
   b4c00:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4c04:	0849      	lsrs	r1, r1, #1
{
   b4c06:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4c08:	f000 fe50 	bl	b58ac <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b4c0c:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b4c0e:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b4c10:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b4c14:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b4c18:	6803      	ldr	r3, [r0, #0]
   b4c1a:	2202      	movs	r2, #2
   b4c1c:	68db      	ldr	r3, [r3, #12]
   b4c1e:	a901      	add	r1, sp, #4
   b4c20:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4c22:	2500      	movs	r5, #0
   b4c24:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b4c26:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b4c28:	dd05      	ble.n	b4c36 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b4c2a:	6803      	ldr	r3, [r0, #0]
   b4c2c:	5d71      	ldrb	r1, [r6, r5]
   b4c2e:	689b      	ldr	r3, [r3, #8]
   b4c30:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4c32:	3501      	adds	r5, #1
   b4c34:	e7f6      	b.n	b4c24 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b4c36:	2101      	movs	r1, #1
   b4c38:	f000 fe3c 	bl	b58b4 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b4c3c:	2000      	movs	r0, #0
   b4c3e:	b003      	add	sp, #12
   b4c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b4c42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4c44:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b4c48:	2301      	movs	r3, #1
   b4c4a:	7809      	ldrb	r1, [r1, #0]
   b4c4c:	9300      	str	r3, [sp, #0]
   b4c4e:	f10d 030f 	add.w	r3, sp, #15
   b4c52:	f7ff ffd1 	bl	b4bf8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b4c56:	b005      	add	sp, #20
   b4c58:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c5c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b4c5c:	6981      	ldr	r1, [r0, #24]
   b4c5e:	2301      	movs	r3, #1
   b4c60:	2286      	movs	r2, #134	; 0x86
   b4c62:	f7ff bfee 	b.w	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4c66 <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b4c66:	6981      	ldr	r1, [r0, #24]
   b4c68:	2340      	movs	r3, #64	; 0x40
   b4c6a:	2287      	movs	r2, #135	; 0x87
   b4c6c:	f7ff bfe9 	b.w	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4c70 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b4c70:	6981      	ldr	r1, [r0, #24]
   b4c72:	2300      	movs	r3, #0
   b4c74:	2287      	movs	r2, #135	; 0x87
   b4c76:	f7ff bfe4 	b.w	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4c7a <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b4c7a:	2910      	cmp	r1, #16
{
   b4c7c:	b570      	push	{r4, r5, r6, lr}
   b4c7e:	460d      	mov	r5, r1
   b4c80:	bf28      	it	cs
   b4c82:	2510      	movcs	r5, #16
	if (Y > 16)
   b4c84:	2a10      	cmp	r2, #16
   b4c86:	4616      	mov	r6, r2
   b4c88:	bf28      	it	cs
   b4c8a:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b4c8c:	290a      	cmp	r1, #10
{
   b4c8e:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b4c90:	d813      	bhi.n	b4cba <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b4c92:	2a0b      	cmp	r2, #11
   b4c94:	bf28      	it	cs
   b4c96:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b4c98:	69a1      	ldr	r1, [r4, #24]
   b4c9a:	227f      	movs	r2, #127	; 0x7f
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	f7ff ffd0 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b4ca2:	3d01      	subs	r5, #1
   b4ca4:	1e73      	subs	r3, r6, #1
   b4ca6:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4caa:	69a1      	ldr	r1, [r4, #24]
   b4cac:	4620      	mov	r0, r4
   b4cae:	b2db      	uxtb	r3, r3
}
   b4cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4cb4:	2280      	movs	r2, #128	; 0x80
   b4cb6:	f7ff bfc4 	b.w	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b4cba:	23c7      	movs	r3, #199	; 0xc7
   b4cbc:	e7ec      	b.n	b4c98 <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b4cbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b4cc0:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b4cc2:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4cc6:	2302      	movs	r3, #2
   b4cc8:	7809      	ldrb	r1, [r1, #0]
   b4cca:	9300      	str	r3, [sp, #0]
   b4ccc:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b4cce:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4cd2:	f7ff ff91 	bl	b4bf8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b4cd6:	b004      	add	sp, #16
   b4cd8:	bd10      	pop	{r4, pc}

000b4cda <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b4cda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4cde:	4604      	mov	r4, r0
   b4ce0:	4690      	mov	r8, r2
   b4ce2:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4ce4:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b4ce6:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b4cea:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4cec:	6860      	ldr	r0, [r4, #4]
   b4cee:	4639      	mov	r1, r7
   b4cf0:	f000 fddc 	bl	b58ac <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b4cf4:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b4cf6:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b4cfa:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b4cfe:	6803      	ldr	r3, [r0, #0]
   b4d00:	a901      	add	r1, sp, #4
   b4d02:	68db      	ldr	r3, [r3, #12]
   b4d04:	2202      	movs	r2, #2
   b4d06:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b4d08:	6860      	ldr	r0, [r4, #4]
   b4d0a:	2100      	movs	r1, #0
   b4d0c:	f000 fdd2 	bl	b58b4 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b4d10:	b118      	cbz	r0, b4d1a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b4d12:	3e01      	subs	r6, #1
   b4d14:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b4d18:	d1e8      	bne.n	b4cec <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b4d1a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b4d1e:	6860      	ldr	r0, [r4, #4]
   b4d20:	4639      	mov	r1, r7
   b4d22:	f000 fdc0 	bl	b58a6 <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b4d26:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b4d28:	6860      	ldr	r0, [r4, #4]
   b4d2a:	6803      	ldr	r3, [r0, #0]
   b4d2c:	691b      	ldr	r3, [r3, #16]
   b4d2e:	4798      	blx	r3
   b4d30:	b130      	cbz	r0, b4d40 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b4d32:	6860      	ldr	r0, [r4, #4]
   b4d34:	6803      	ldr	r3, [r0, #0]
   b4d36:	695b      	ldr	r3, [r3, #20]
   b4d38:	4798      	blx	r3
   b4d3a:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b4d3e:	e7f3      	b.n	b4d28 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b4d40:	b003      	add	sp, #12
   b4d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4d46 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b4d46:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b4d48:	2401      	movs	r4, #1
   b4d4a:	7809      	ldrb	r1, [r1, #0]
   b4d4c:	9400      	str	r4, [sp, #0]
   b4d4e:	f7ff ffc4 	bl	b4cda <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b4d52:	3800      	subs	r0, #0
   b4d54:	bf18      	it	ne
   b4d56:	2001      	movne	r0, #1
}
   b4d58:	4240      	negs	r0, r0
   b4d5a:	b002      	add	sp, #8
   b4d5c:	bd10      	pop	{r4, pc}

000b4d5e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b4d5e:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4d60:	2230      	movs	r2, #48	; 0x30
{
   b4d62:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4d64:	f10d 0307 	add.w	r3, sp, #7
   b4d68:	6981      	ldr	r1, [r0, #24]
   b4d6a:	f7ff ffec 	bl	b4d46 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b4d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4d72:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b4d76:	f003 0301 	and.w	r3, r3, #1
   b4d7a:	7023      	strb	r3, [r4, #0]
}
   b4d7c:	b002      	add	sp, #8
   b4d7e:	bd10      	pop	{r4, pc}

000b4d80 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b4d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d82:	4605      	mov	r5, r0
   b4d84:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b4d86:	f10d 0107 	add.w	r1, sp, #7
   b4d8a:	f7ff ffe8 	bl	b4d5e <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b4d8e:	69a9      	ldr	r1, [r5, #24]
   b4d90:	f10d 0306 	add.w	r3, sp, #6
   b4d94:	2231      	movs	r2, #49	; 0x31
   b4d96:	4628      	mov	r0, r5
   b4d98:	f7ff ffd5 	bl	b4d46 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b4d9c:	b950      	cbnz	r0, b4db4 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b4d9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4da2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b4da6:	f003 0301 	and.w	r3, r3, #1
   b4daa:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b4dac:	bf06      	itte	eq
   b4dae:	2301      	moveq	r3, #1
   b4db0:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b4db2:	7020      	strbne	r0, [r4, #0]
}
   b4db4:	b003      	add	sp, #12
   b4db6:	bd30      	pop	{r4, r5, pc}

000b4db8 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b4db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4dba:	2300      	movs	r3, #0
   b4dbc:	4e1c      	ldr	r6, [pc, #112]	; (b4e30 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b4dbe:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b4dc2:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4dc4:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4dc6:	b2aa      	uxth	r2, r5
   b4dc8:	f816 3b01 	ldrb.w	r3, [r6], #1
   b4dcc:	69a1      	ldr	r1, [r4, #24]
   b4dce:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4dd0:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4dd2:	f7ff ff36 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4dd6:	2d88      	cmp	r5, #136	; 0x88
   b4dd8:	d1f5      	bne.n	b4dc6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b4dda:	4620      	mov	r0, r4
   b4ddc:	f7ff ff43 	bl	b4c66 <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b4de0:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b4de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4de6:	b963      	cbnz	r3, b4e02 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4de8:	f10d 0107 	add.w	r1, sp, #7
   b4dec:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b4dee:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4df0:	f7ff ffc6 	bl	b4d80 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b4df4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4df8:	d017      	beq.n	b4e2a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b4dfa:	2001      	movs	r0, #1
   b4dfc:	f000 fc16 	bl	b562c <delay>
	while (dataReady == 0)
   b4e00:	e7ef      	b.n	b4de2 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b4e02:	4620      	mov	r0, r4
   b4e04:	f7ff ff2a 	bl	b4c5c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b4e08:	4620      	mov	r0, r4
   b4e0a:	f7ff ff31 	bl	b4c70 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b4e0e:	69a1      	ldr	r1, [r4, #24]
   b4e10:	2309      	movs	r3, #9
   b4e12:	2208      	movs	r2, #8
   b4e14:	4620      	mov	r0, r4
   b4e16:	f7ff ff14 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b4e1a:	69a1      	ldr	r1, [r4, #24]
   b4e1c:	2300      	movs	r3, #0
   b4e1e:	220b      	movs	r2, #11
   b4e20:	4620      	mov	r0, r4
   b4e22:	f7ff ff0e 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b4e26:	b002      	add	sp, #8
   b4e28:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b4e2a:	f06f 0006 	mvn.w	r0, #6
   b4e2e:	e7fa      	b.n	b4e26 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b4e30:	000b7c44 	.word	0x000b7c44

000b4e34 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b4e34:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4e36:	224b      	movs	r2, #75	; 0x4b
   b4e38:	f10d 0307 	add.w	r3, sp, #7
{
   b4e3c:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4e3e:	6981      	ldr	r1, [r0, #24]
   b4e40:	f7ff ff81 	bl	b4d46 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b4e44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4e48:	2b14      	cmp	r3, #20
   b4e4a:	d103      	bne.n	b4e54 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b4e4c:	2301      	movs	r3, #1
		*DM = 2;
   b4e4e:	8023      	strh	r3, [r4, #0]
}
   b4e50:	b002      	add	sp, #8
   b4e52:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b4e54:	2b0a      	cmp	r3, #10
   b4e56:	d1fb      	bne.n	b4e50 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b4e58:	2302      	movs	r3, #2
   b4e5a:	e7f8      	b.n	b4e4e <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b4e5c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b4e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4e5e:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b4e60:	f10d 0106 	add.w	r1, sp, #6
{
   b4e64:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b4e66:	f7ff ffe5 	bl	b4e34 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b4e6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b4e6e:	4606      	mov	r6, r0
	if (DM == 0)
   b4e70:	b153      	cbz	r3, b4e88 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b4e72:	2b01      	cmp	r3, #1
   b4e74:	d152      	bne.n	b4f1c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b4e76:	2d32      	cmp	r5, #50	; 0x32
   b4e78:	d032      	beq.n	b4ee0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b4e7a:	d807      	bhi.n	b4e8c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b4e7c:	2d14      	cmp	r5, #20
   b4e7e:	d025      	beq.n	b4ecc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b4e80:	2d21      	cmp	r5, #33	; 0x21
   b4e82:	d02b      	beq.n	b4edc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b4e84:	2d0f      	cmp	r5, #15
   b4e86:	d012      	beq.n	b4eae <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b4e88:	2601      	movs	r6, #1
   b4e8a:	e01c      	b.n	b4ec6 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b4e8c:	2dc8      	cmp	r5, #200	; 0xc8
   b4e8e:	d031      	beq.n	b4ef4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b4e90:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4e94:	d038      	beq.n	b4f08 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b4e96:	2d64      	cmp	r5, #100	; 0x64
   b4e98:	d1f6      	bne.n	b4e88 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4e9a:	f240 23e1 	movw	r3, #737	; 0x2e1
   b4e9e:	69a1      	ldr	r1, [r4, #24]
   b4ea0:	225e      	movs	r2, #94	; 0x5e
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	f7ff ff0b 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4ea8:	f44f 7362 	mov.w	r3, #904	; 0x388
   b4eac:	e006      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4eae:	231d      	movs	r3, #29
   b4eb0:	69a1      	ldr	r1, [r4, #24]
   b4eb2:	225e      	movs	r2, #94	; 0x5e
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	f7ff ff02 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4eba:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4ebc:	69a1      	ldr	r1, [r4, #24]
   b4ebe:	2261      	movs	r2, #97	; 0x61
   b4ec0:	4620      	mov	r0, r4
   b4ec2:	f7ff fefc 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4ec6:	4630      	mov	r0, r6
   b4ec8:	b002      	add	sp, #8
   b4eca:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ecc:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ece:	69a1      	ldr	r1, [r4, #24]
   b4ed0:	225e      	movs	r2, #94	; 0x5e
   b4ed2:	4620      	mov	r0, r4
   b4ed4:	f7ff fef3 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4ed8:	236e      	movs	r3, #110	; 0x6e
   b4eda:	e7ef      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4edc:	23d6      	movs	r3, #214	; 0xd6
   b4ede:	e7f6      	b.n	b4ece <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ee0:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b4ee4:	69a1      	ldr	r1, [r4, #24]
   b4ee6:	225e      	movs	r2, #94	; 0x5e
   b4ee8:	4620      	mov	r0, r4
   b4eea:	f7ff fee8 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4eee:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b4ef2:	e7e3      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ef4:	f240 33e1 	movw	r3, #993	; 0x3e1
   b4ef8:	69a1      	ldr	r1, [r4, #24]
   b4efa:	225e      	movs	r2, #94	; 0x5e
   b4efc:	4620      	mov	r0, r4
   b4efe:	f7ff fede 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f02:	f240 4396 	movw	r3, #1174	; 0x496
   b4f06:	e7d9      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f08:	f240 5391 	movw	r3, #1425	; 0x591
   b4f0c:	69a1      	ldr	r1, [r4, #24]
   b4f0e:	225e      	movs	r2, #94	; 0x5e
   b4f10:	4620      	mov	r0, r4
   b4f12:	f7ff fed4 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f16:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b4f1a:	e7cf      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4f1c:	2d64      	cmp	r5, #100	; 0x64
   b4f1e:	d027      	beq.n	b4f70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b4f20:	d80d      	bhi.n	b4f3e <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b4f22:	2d21      	cmp	r5, #33	; 0x21
   b4f24:	d01a      	beq.n	b4f5c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b4f26:	2d32      	cmp	r5, #50	; 0x32
   b4f28:	d01a      	beq.n	b4f60 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b4f2a:	2d14      	cmp	r5, #20
   b4f2c:	d1ac      	bne.n	b4e88 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f2e:	231e      	movs	r3, #30
   b4f30:	69a1      	ldr	r1, [r4, #24]
   b4f32:	225e      	movs	r2, #94	; 0x5e
   b4f34:	4620      	mov	r0, r4
   b4f36:	f7ff fec2 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f3a:	2322      	movs	r3, #34	; 0x22
   b4f3c:	e7be      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b4f3e:	2dc8      	cmp	r5, #200	; 0xc8
   b4f40:	d020      	beq.n	b4f84 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b4f42:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4f46:	d19f      	bne.n	b4e88 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f48:	f240 438f 	movw	r3, #1167	; 0x48f
   b4f4c:	69a1      	ldr	r1, [r4, #24]
   b4f4e:	225e      	movs	r2, #94	; 0x5e
   b4f50:	4620      	mov	r0, r4
   b4f52:	f7ff feb4 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f56:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b4f5a:	e7af      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f5c:	2360      	movs	r3, #96	; 0x60
   b4f5e:	e7b6      	b.n	b4ece <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f60:	23ad      	movs	r3, #173	; 0xad
   b4f62:	69a1      	ldr	r1, [r4, #24]
   b4f64:	225e      	movs	r2, #94	; 0x5e
   b4f66:	4620      	mov	r0, r4
   b4f68:	f7ff fea9 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f6c:	23c6      	movs	r3, #198	; 0xc6
   b4f6e:	e7a5      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f70:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b4f74:	69a1      	ldr	r1, [r4, #24]
   b4f76:	225e      	movs	r2, #94	; 0x5e
   b4f78:	4620      	mov	r0, r4
   b4f7a:	f7ff fea0 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f7e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b4f82:	e79b      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4f84:	f240 23d9 	movw	r3, #729	; 0x2d9
   b4f88:	69a1      	ldr	r1, [r4, #24]
   b4f8a:	225e      	movs	r2, #94	; 0x5e
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f7ff fe96 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4f92:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b4f96:	e791      	b.n	b4ebc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b4f98 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b4f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4f9a:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b4f9c:	2300      	movs	r3, #0
   b4f9e:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b4fa2:	2302      	movs	r3, #2
   b4fa4:	7809      	ldrb	r1, [r1, #0]
   b4fa6:	9300      	str	r3, [sp, #0]
   b4fa8:	ab03      	add	r3, sp, #12
   b4faa:	f7ff fe96 	bl	b4cda <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b4fae:	b930      	cbnz	r0, b4fbe <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b4fb0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b4fb4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b4fb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b4fbc:	8023      	strh	r3, [r4, #0]
}
   b4fbe:	b004      	add	sp, #16
   b4fc0:	bd10      	pop	{r4, pc}

000b4fc2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b4fc2:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4fc4:	225e      	movs	r2, #94	; 0x5e
   b4fc6:	f10d 0306 	add.w	r3, sp, #6
{
   b4fca:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b4fcc:	6981      	ldr	r1, [r0, #24]
   b4fce:	f7ff ffe3 	bl	b4f98 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b4fd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4fd6:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b4fda:	d034      	beq.n	b5046 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4fdc:	d810      	bhi.n	b5000 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b4fde:	2b51      	cmp	r3, #81	; 0x51
   b4fe0:	d02f      	beq.n	b5042 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b4fe2:	d805      	bhi.n	b4ff0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b4fe4:	2b1d      	cmp	r3, #29
   b4fe6:	d028      	beq.n	b503a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b4fe8:	2b1e      	cmp	r3, #30
   b4fea:	d02a      	beq.n	b5042 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b4fec:	2300      	movs	r3, #0
   b4fee:	e025      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b4ff0:	2bad      	cmp	r3, #173	; 0xad
   b4ff2:	d028      	beq.n	b5046 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b4ff4:	2bd6      	cmp	r3, #214	; 0xd6
   b4ff6:	d001      	beq.n	b4ffc <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b4ff8:	2b60      	cmp	r3, #96	; 0x60
   b4ffa:	d1f7      	bne.n	b4fec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b4ffc:	2321      	movs	r3, #33	; 0x21
   b4ffe:	e01d      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5000:	f240 32e1 	movw	r2, #993	; 0x3e1
   b5004:	4293      	cmp	r3, r2
   b5006:	d020      	beq.n	b504a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b5008:	d80c      	bhi.n	b5024 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b500a:	f240 22d9 	movw	r2, #729	; 0x2d9
   b500e:	4293      	cmp	r3, r2
   b5010:	d01b      	beq.n	b504a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b5012:	f240 22e1 	movw	r2, #737	; 0x2e1
   b5016:	4293      	cmp	r3, r2
   b5018:	d002      	beq.n	b5020 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b501a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b501e:	d1e5      	bne.n	b4fec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b5020:	2364      	movs	r3, #100	; 0x64
   b5022:	e00b      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5024:	f240 428f 	movw	r2, #1167	; 0x48f
   b5028:	4293      	cmp	r3, r2
   b502a:	d003      	beq.n	b5034 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b502c:	f240 5291 	movw	r2, #1425	; 0x591
   b5030:	4293      	cmp	r3, r2
   b5032:	d1db      	bne.n	b4fec <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b5034:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b5038:	e000      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b503a:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b503c:	8023      	strh	r3, [r4, #0]
}
   b503e:	b002      	add	sp, #8
   b5040:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b5042:	2314      	movs	r3, #20
   b5044:	e7fa      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b5046:	2332      	movs	r3, #50	; 0x32
   b5048:	e7f8      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b504a:	23c8      	movs	r3, #200	; 0xc8
   b504c:	e7f6      	b.n	b503c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b504e <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b504e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5050:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b5052:	f10d 0106 	add.w	r1, sp, #6
{
   b5056:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b5058:	f7ff ffb3 	bl	b4fc2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b505c:	2d01      	cmp	r5, #1
   b505e:	d008      	beq.n	b5072 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b5060:	2d02      	cmp	r5, #2
   b5062:	d02d      	beq.n	b50c0 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b5064:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b5068:	4620      	mov	r0, r4
   b506a:	f7ff fef7 	bl	b4e5c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b506e:	b003      	add	sp, #12
   b5070:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b5072:	69a1      	ldr	r1, [r4, #24]
   b5074:	2314      	movs	r3, #20
   b5076:	224b      	movs	r2, #75	; 0x4b
   b5078:	4620      	mov	r0, r4
   b507a:	f7ff fde2 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b507e:	69a1      	ldr	r1, [r4, #24]
   b5080:	2307      	movs	r3, #7
   b5082:	2260      	movs	r2, #96	; 0x60
   b5084:	4620      	mov	r0, r4
   b5086:	f7ff fddc 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b508a:	69a1      	ldr	r1, [r4, #24]
   b508c:	2305      	movs	r3, #5
   b508e:	2263      	movs	r2, #99	; 0x63
   b5090:	4620      	mov	r0, r4
   b5092:	f7ff fdd6 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b5096:	69a1      	ldr	r1, [r4, #24]
   b5098:	2338      	movs	r3, #56	; 0x38
   b509a:	2269      	movs	r2, #105	; 0x69
   b509c:	4620      	mov	r0, r4
   b509e:	f7ff fdd0 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b50a2:	f240 7305 	movw	r3, #1797	; 0x705
   b50a6:	69a1      	ldr	r1, [r4, #24]
   b50a8:	2278      	movs	r2, #120	; 0x78
   b50aa:	4620      	mov	r0, r4
   b50ac:	f7ff fe07 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b50b0:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b50b4:	69a1      	ldr	r1, [r4, #24]
   b50b6:	227a      	movs	r2, #122	; 0x7a
   b50b8:	4620      	mov	r0, r4
   b50ba:	f7ff fe00 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b50be:	e7d1      	b.n	b5064 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b50c0:	69a1      	ldr	r1, [r4, #24]
   b50c2:	230a      	movs	r3, #10
   b50c4:	224b      	movs	r2, #75	; 0x4b
   b50c6:	4620      	mov	r0, r4
   b50c8:	f7ff fdbb 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b50cc:	69a1      	ldr	r1, [r4, #24]
   b50ce:	230f      	movs	r3, #15
   b50d0:	2260      	movs	r2, #96	; 0x60
   b50d2:	4620      	mov	r0, r4
   b50d4:	f7ff fdb5 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b50d8:	69a1      	ldr	r1, [r4, #24]
   b50da:	230d      	movs	r3, #13
   b50dc:	2263      	movs	r2, #99	; 0x63
   b50de:	4620      	mov	r0, r4
   b50e0:	f7ff fdaf 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b50e4:	69a1      	ldr	r1, [r4, #24]
   b50e6:	23b8      	movs	r3, #184	; 0xb8
   b50e8:	2269      	movs	r2, #105	; 0x69
   b50ea:	4620      	mov	r0, r4
   b50ec:	f7ff fda9 	bl	b4c42 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b50f0:	f640 730d 	movw	r3, #3853	; 0xf0d
   b50f4:	69a1      	ldr	r1, [r4, #24]
   b50f6:	2278      	movs	r2, #120	; 0x78
   b50f8:	4620      	mov	r0, r4
   b50fa:	f7ff fde0 	bl	b4cbe <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b50fe:	f640 630e 	movw	r3, #3598	; 0xe0e
   b5102:	e7d7      	b.n	b50b4 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

000b5104 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b5104:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b5106:	2300      	movs	r3, #0
{
   b5108:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b510a:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b510e:	6981      	ldr	r1, [r0, #24]
   b5110:	f10d 0306 	add.w	r3, sp, #6
   b5114:	f240 120f 	movw	r2, #271	; 0x10f
   b5118:	f7ff ff3e 	bl	b4f98 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b511c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b5120:	8023      	strh	r3, [r4, #0]
}
   b5122:	b002      	add	sp, #8
   b5124:	bd10      	pop	{r4, pc}

000b5126 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b5126:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b5128:	2296      	movs	r2, #150	; 0x96
{
   b512a:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b512c:	f10d 0306 	add.w	r3, sp, #6
   b5130:	6981      	ldr	r1, [r0, #24]
   b5132:	f7ff ff31 	bl	b4f98 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b5136:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b513a:	8023      	strh	r3, [r4, #0]
}
   b513c:	b002      	add	sp, #8
   b513e:	bd10      	pop	{r4, pc}

000b5140 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <os_mutex_recursive_create+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	00030248 	.word	0x00030248

000b5150 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <os_mutex_recursive_destroy+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030248 	.word	0x00030248

000b5160 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <os_mutex_recursive_lock+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030248 	.word	0x00030248

000b5170 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <os_mutex_recursive_unlock+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	00030248 	.word	0x00030248

000b5180 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <HAL_RNG_GetRandomNumber+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	685b      	ldr	r3, [r3, #4]
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	00030218 	.word	0x00030218

000b5190 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <HAL_Delay_Microseconds+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	68db      	ldr	r3, [r3, #12]
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030218 	.word	0x00030218

000b51a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	695b      	ldr	r3, [r3, #20]
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030218 	.word	0x00030218

000b51b0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <hal_timer_millis+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030218 	.word	0x00030218

000b51c0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <HAL_Pin_Mode+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	689b      	ldr	r3, [r3, #8]
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	0003022c 	.word	0x0003022c

000b51d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <HAL_Get_Pin_Mode+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	68db      	ldr	r3, [r3, #12]
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	0003022c 	.word	0x0003022c

000b51e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <HAL_GPIO_Write+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	691b      	ldr	r3, [r3, #16]
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	0003022c 	.word	0x0003022c

000b51f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <HAL_GPIO_Read+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	695b      	ldr	r3, [r3, #20]
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	0003022c 	.word	0x0003022c

000b5200 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <hal_i2c_begin+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	68db      	ldr	r3, [r3, #12]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030228 	.word	0x00030228

000b5210 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <hal_i2c_begin_transmission+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	699b      	ldr	r3, [r3, #24]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030228 	.word	0x00030228

000b5220 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <hal_i2c_end_transmission+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	69db      	ldr	r3, [r3, #28]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030228 	.word	0x00030228

000b5230 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <hal_i2c_write+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	6a1b      	ldr	r3, [r3, #32]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030228 	.word	0x00030228

000b5240 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <hal_i2c_available+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	00030228 	.word	0x00030228

000b5250 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <hal_i2c_read+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	00030228 	.word	0x00030228

000b5260 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <hal_i2c_peek+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	00030228 	.word	0x00030228

000b5270 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <hal_i2c_flush+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	00030228 	.word	0x00030228

000b5280 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <hal_i2c_is_enabled+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	00030228 	.word	0x00030228

000b5290 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <hal_i2c_init+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	00030228 	.word	0x00030228

000b52a0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <hal_i2c_request_ex+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030228 	.word	0x00030228

000b52b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <inet_inet_ntop+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	695b      	ldr	r3, [r3, #20]
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030264 	.word	0x00030264

000b52c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <netdb_freeaddrinfo+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	689b      	ldr	r3, [r3, #8]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030268 	.word	0x00030268

000b52d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <netdb_getaddrinfo+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	68db      	ldr	r3, [r3, #12]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030268 	.word	0x00030268

000b52e0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <hal_spi_init+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	69db      	ldr	r3, [r3, #28]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030230 	.word	0x00030230

000b52f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <hal_spi_is_enabled+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6a1b      	ldr	r3, [r3, #32]
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030230 	.word	0x00030230

000b5300 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <hal_usart_end+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	689b      	ldr	r3, [r3, #8]
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	0003023c 	.word	0x0003023c

000b5310 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <hal_usart_write+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	68db      	ldr	r3, [r3, #12]
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	0003023c 	.word	0x0003023c

000b5320 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <hal_usart_available+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	691b      	ldr	r3, [r3, #16]
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	0003023c 	.word	0x0003023c

000b5330 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <hal_usart_read+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	695b      	ldr	r3, [r3, #20]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	0003023c 	.word	0x0003023c

000b5340 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <hal_usart_peek+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	699b      	ldr	r3, [r3, #24]
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	0003023c 	.word	0x0003023c

000b5350 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <hal_usart_flush+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	69db      	ldr	r3, [r3, #28]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	0003023c 	.word	0x0003023c

000b5360 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <hal_usart_is_enabled+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	6a1b      	ldr	r3, [r3, #32]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	0003023c 	.word	0x0003023c

000b5370 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <hal_usart_available_data_for_write+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003023c 	.word	0x0003023c

000b5380 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <hal_usart_begin_config+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	0003023c 	.word	0x0003023c

000b5390 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <hal_usart_init_ex+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	0003023c 	.word	0x0003023c

000b53a0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <HAL_USB_USART_Init+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	681b      	ldr	r3, [r3, #0]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	0003024c 	.word	0x0003024c

000b53b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <HAL_USB_USART_Begin+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	685b      	ldr	r3, [r3, #4]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	0003024c 	.word	0x0003024c

000b53c0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <HAL_USB_USART_End+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	689b      	ldr	r3, [r3, #8]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	0003024c 	.word	0x0003024c

000b53d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <HAL_USB_USART_Available_Data+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	691b      	ldr	r3, [r3, #16]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	0003024c 	.word	0x0003024c

000b53e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	695b      	ldr	r3, [r3, #20]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	0003024c 	.word	0x0003024c

000b53f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <HAL_USB_USART_Receive_Data+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	699b      	ldr	r3, [r3, #24]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	0003024c 	.word	0x0003024c

000b5400 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <HAL_USB_USART_Send_Data+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	69db      	ldr	r3, [r3, #28]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	0003024c 	.word	0x0003024c

000b5410 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <HAL_USB_USART_Flush_Data+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6a1b      	ldr	r3, [r3, #32]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	0003024c 	.word	0x0003024c

000b5420 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <HAL_USB_USART_Is_Connected+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	0003024c 	.word	0x0003024c

000b5430 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <panic_+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030260 	.word	0x00030260

000b5440 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <log_message_v+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030260 	.word	0x00030260

000b5450 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <log_level_name+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030260 	.word	0x00030260

000b5460 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <log_set_callbacks+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030260 	.word	0x00030260

000b5470 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <set_system_mode+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	685b      	ldr	r3, [r3, #4]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030220 	.word	0x00030220

000b5480 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <system_delay_ms+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	695b      	ldr	r3, [r3, #20]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030220 	.word	0x00030220

000b5490 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <system_thread_set_state+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030220 	.word	0x00030220

000b54a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b03      	ldr	r3, [pc, #12]	; (b54b0 <system_ctrl_set_app_request_handler+0x10>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b54aa:	9301      	str	r3, [sp, #4]
   b54ac:	bd08      	pop	{r3, pc}
   b54ae:	0000      	.short	0x0000
   b54b0:	00030220 	.word	0x00030220

000b54b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b03      	ldr	r3, [pc, #12]	; (b54c4 <system_ctrl_set_result+0x10>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b54be:	9301      	str	r3, [sp, #4]
   b54c0:	bd08      	pop	{r3, pc}
   b54c2:	0000      	.short	0x0000
   b54c4:	00030220 	.word	0x00030220

000b54c8 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b03      	ldr	r3, [pc, #12]	; (b54d8 <system_reset+0x10>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b54d2:	9301      	str	r3, [sp, #4]
   b54d4:	bd08      	pop	{r3, pc}
   b54d6:	0000      	.short	0x0000
   b54d8:	00030220 	.word	0x00030220

000b54dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b54dc:	b508      	push	{r3, lr}
   b54de:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <spark_process+0xc>)
   b54e0:	681b      	ldr	r3, [r3, #0]
   b54e2:	689b      	ldr	r3, [r3, #8]
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	bd08      	pop	{r3, pc}
   b54e8:	00030244 	.word	0x00030244

000b54ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b54ec:	b508      	push	{r3, lr}
   b54ee:	4b02      	ldr	r3, [pc, #8]	; (b54f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b54f0:	681b      	ldr	r3, [r3, #0]
   b54f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54f4:	9301      	str	r3, [sp, #4]
   b54f6:	bd08      	pop	{r3, pc}
   b54f8:	00030244 	.word	0x00030244

000b54fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b54fc:	b508      	push	{r3, lr}
   b54fe:	4b02      	ldr	r3, [pc, #8]	; (b5508 <network_connect+0xc>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	685b      	ldr	r3, [r3, #4]
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	bd08      	pop	{r3, pc}
   b5508:	00030240 	.word	0x00030240

000b550c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b550c:	b508      	push	{r3, lr}
   b550e:	4b02      	ldr	r3, [pc, #8]	; (b5518 <network_connecting+0xc>)
   b5510:	681b      	ldr	r3, [r3, #0]
   b5512:	689b      	ldr	r3, [r3, #8]
   b5514:	9301      	str	r3, [sp, #4]
   b5516:	bd08      	pop	{r3, pc}
   b5518:	00030240 	.word	0x00030240

000b551c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b551c:	b508      	push	{r3, lr}
   b551e:	4b02      	ldr	r3, [pc, #8]	; (b5528 <network_disconnect+0xc>)
   b5520:	681b      	ldr	r3, [r3, #0]
   b5522:	68db      	ldr	r3, [r3, #12]
   b5524:	9301      	str	r3, [sp, #4]
   b5526:	bd08      	pop	{r3, pc}
   b5528:	00030240 	.word	0x00030240

000b552c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b552c:	b508      	push	{r3, lr}
   b552e:	4b02      	ldr	r3, [pc, #8]	; (b5538 <network_ready+0xc>)
   b5530:	681b      	ldr	r3, [r3, #0]
   b5532:	691b      	ldr	r3, [r3, #16]
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	bd08      	pop	{r3, pc}
   b5538:	00030240 	.word	0x00030240

000b553c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b553c:	b508      	push	{r3, lr}
   b553e:	4b02      	ldr	r3, [pc, #8]	; (b5548 <network_on+0xc>)
   b5540:	681b      	ldr	r3, [r3, #0]
   b5542:	695b      	ldr	r3, [r3, #20]
   b5544:	9301      	str	r3, [sp, #4]
   b5546:	bd08      	pop	{r3, pc}
   b5548:	00030240 	.word	0x00030240

000b554c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b554c:	b508      	push	{r3, lr}
   b554e:	4b02      	ldr	r3, [pc, #8]	; (b5558 <network_off+0xc>)
   b5550:	681b      	ldr	r3, [r3, #0]
   b5552:	699b      	ldr	r3, [r3, #24]
   b5554:	9301      	str	r3, [sp, #4]
   b5556:	bd08      	pop	{r3, pc}
   b5558:	00030240 	.word	0x00030240

000b555c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <network_listen+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	69db      	ldr	r3, [r3, #28]
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	00030240 	.word	0x00030240

000b556c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b02      	ldr	r3, [pc, #8]	; (b5578 <network_listening+0xc>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	6a1b      	ldr	r3, [r3, #32]
   b5574:	9301      	str	r3, [sp, #4]
   b5576:	bd08      	pop	{r3, pc}
   b5578:	00030240 	.word	0x00030240

000b557c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <network_set_listen_timeout+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	00030240 	.word	0x00030240

000b558c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <network_get_listen_timeout+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	00030240 	.word	0x00030240

000b559c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <network_is_on+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	00030240 	.word	0x00030240

000b55ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <network_is_off+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	00030240 	.word	0x00030240

000b55bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <malloc+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	681b      	ldr	r3, [r3, #0]
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	0003021c 	.word	0x0003021c

000b55cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <free+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	685b      	ldr	r3, [r3, #4]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	0003021c 	.word	0x0003021c

000b55dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <realloc+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	689b      	ldr	r3, [r3, #8]
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	0003021c 	.word	0x0003021c

000b55ec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <vsnprintf+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	0003021c 	.word	0x0003021c

000b55fc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <__errno+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	0003021c 	.word	0x0003021c

000b560c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <__assert_func+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	0003021c 	.word	0x0003021c

000b561c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <newlib_impure_ptr_callback+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	0003021c 	.word	0x0003021c

000b562c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b562c:	2100      	movs	r1, #0
   b562e:	f7ff bf27 	b.w	b5480 <system_delay_ms>

000b5632 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5632:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5634:	6843      	ldr	r3, [r0, #4]
   b5636:	3b01      	subs	r3, #1
    {
   b5638:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b563a:	6043      	str	r3, [r0, #4]
   b563c:	b963      	cbnz	r3, b5658 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b563e:	6803      	ldr	r3, [r0, #0]
   b5640:	689b      	ldr	r3, [r3, #8]
   b5642:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5644:	68a3      	ldr	r3, [r4, #8]
   b5646:	3b01      	subs	r3, #1
   b5648:	60a3      	str	r3, [r4, #8]
   b564a:	b92b      	cbnz	r3, b5658 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b564c:	6823      	ldr	r3, [r4, #0]
   b564e:	4620      	mov	r0, r4
   b5650:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5656:	4718      	bx	r3
    }
   b5658:	bd10      	pop	{r4, pc}

000b565a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b565a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b565c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5660:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5662:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5666:	42ae      	cmp	r6, r5
   b5668:	d004      	beq.n	b5674 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b566a:	4628      	mov	r0, r5
   b566c:	f001 fc32 	bl	b6ed4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5670:	3510      	adds	r5, #16
   b5672:	e7f8      	b.n	b5666 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5674:	6820      	ldr	r0, [r4, #0]
   b5676:	f7ff ffa9 	bl	b55cc <free>
    AllocatorT::free(data_);
}
   b567a:	4620      	mov	r0, r4
   b567c:	bd70      	pop	{r4, r5, r6, pc}

000b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b567e:	b510      	push	{r4, lr}
   b5680:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b5682:	6800      	ldr	r0, [r0, #0]
   b5684:	b108      	cbz	r0, b568a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5686:	f7ff ffd4 	bl	b5632 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b568a:	4620      	mov	r0, r4
   b568c:	bd10      	pop	{r4, pc}
	...

000b5690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5690:	4802      	ldr	r0, [pc, #8]	; (b569c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5692:	2300      	movs	r3, #0
   b5694:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5696:	f7ff bd53 	b.w	b5140 <os_mutex_recursive_create>
   b569a:	bf00      	nop
   b569c:	2003e65c 	.word	0x2003e65c

000b56a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b56a0:	2200      	movs	r2, #0
   b56a2:	6840      	ldr	r0, [r0, #4]
   b56a4:	4611      	mov	r1, r2
   b56a6:	f7ff bf41 	b.w	b552c <network_ready>

000b56aa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b56aa:	2200      	movs	r2, #0
   b56ac:	6840      	ldr	r0, [r0, #4]
   b56ae:	4611      	mov	r1, r2
   b56b0:	f7ff bf5c 	b.w	b556c <network_listening>

000b56b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56b4:	2200      	movs	r2, #0
   b56b6:	6840      	ldr	r0, [r0, #4]
   b56b8:	4611      	mov	r1, r2
   b56ba:	f7ff bf67 	b.w	b558c <network_get_listen_timeout>

000b56be <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56be:	6840      	ldr	r0, [r0, #4]
   b56c0:	2200      	movs	r2, #0
   b56c2:	f7ff bf5b 	b.w	b557c <network_set_listen_timeout>

000b56c6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56c6:	6840      	ldr	r0, [r0, #4]
   b56c8:	2200      	movs	r2, #0
   b56ca:	f081 0101 	eor.w	r1, r1, #1
   b56ce:	f7ff bf45 	b.w	b555c <network_listen>

000b56d2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56d2:	2300      	movs	r3, #0
   b56d4:	6840      	ldr	r0, [r0, #4]
   b56d6:	461a      	mov	r2, r3
   b56d8:	4619      	mov	r1, r3
   b56da:	f7ff bf37 	b.w	b554c <network_off>

000b56de <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b56de:	2300      	movs	r3, #0
   b56e0:	6840      	ldr	r0, [r0, #4]
   b56e2:	461a      	mov	r2, r3
   b56e4:	4619      	mov	r1, r3
   b56e6:	f7ff bf29 	b.w	b553c <network_on>

000b56ea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b56ea:	2200      	movs	r2, #0
   b56ec:	6840      	ldr	r0, [r0, #4]
   b56ee:	4611      	mov	r1, r2
   b56f0:	f7ff bf0c 	b.w	b550c <network_connecting>

000b56f4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b56f4:	6840      	ldr	r0, [r0, #4]
   b56f6:	2200      	movs	r2, #0
   b56f8:	2102      	movs	r1, #2
   b56fa:	f7ff bf0f 	b.w	b551c <network_disconnect>

000b56fe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b56fe:	2300      	movs	r3, #0
   b5700:	6840      	ldr	r0, [r0, #4]
   b5702:	461a      	mov	r2, r3
   b5704:	f7ff befa 	b.w	b54fc <network_connect>

000b5708 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5708:	4b08      	ldr	r3, [pc, #32]	; (b572c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b570a:	b510      	push	{r4, lr}
   b570c:	2428      	movs	r4, #40	; 0x28
   b570e:	4622      	mov	r2, r4
   b5710:	4618      	mov	r0, r3
   b5712:	2100      	movs	r1, #0
   b5714:	f001 ff50 	bl	b75b8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5718:	4b05      	ldr	r3, [pc, #20]	; (b5730 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b571a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b571c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5720:	6042      	str	r2, [r0, #4]
   b5722:	2204      	movs	r2, #4
   b5724:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5726:	4a03      	ldr	r2, [pc, #12]	; (b5734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5728:	601a      	str	r2, [r3, #0]
   b572a:	bd10      	pop	{r4, pc}
   b572c:	2003e668 	.word	0x2003e668
   b5730:	2003e660 	.word	0x2003e660
   b5734:	000b7ca8 	.word	0x000b7ca8

000b5738 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5738:	2200      	movs	r2, #0
   b573a:	6840      	ldr	r0, [r0, #4]
   b573c:	4611      	mov	r1, r2
   b573e:	f7ff bf15 	b.w	b556c <network_listening>

000b5742 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5742:	2200      	movs	r2, #0
   b5744:	6840      	ldr	r0, [r0, #4]
   b5746:	4611      	mov	r1, r2
   b5748:	f7ff bf20 	b.w	b558c <network_get_listen_timeout>

000b574c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b574c:	6840      	ldr	r0, [r0, #4]
   b574e:	2200      	movs	r2, #0
   b5750:	f7ff bf14 	b.w	b557c <network_set_listen_timeout>

000b5754 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5754:	6840      	ldr	r0, [r0, #4]
   b5756:	2200      	movs	r2, #0
   b5758:	f081 0101 	eor.w	r1, r1, #1
   b575c:	f7ff befe 	b.w	b555c <network_listen>

000b5760 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5760:	2300      	movs	r3, #0
   b5762:	6840      	ldr	r0, [r0, #4]
   b5764:	461a      	mov	r2, r3
   b5766:	4619      	mov	r1, r3
   b5768:	f7ff bef0 	b.w	b554c <network_off>

000b576c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b576c:	2300      	movs	r3, #0
   b576e:	6840      	ldr	r0, [r0, #4]
   b5770:	461a      	mov	r2, r3
   b5772:	4619      	mov	r1, r3
   b5774:	f7ff bee2 	b.w	b553c <network_on>

000b5778 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5778:	2200      	movs	r2, #0
   b577a:	6840      	ldr	r0, [r0, #4]
   b577c:	4611      	mov	r1, r2
   b577e:	f7ff bed5 	b.w	b552c <network_ready>

000b5782 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5782:	2200      	movs	r2, #0
   b5784:	6840      	ldr	r0, [r0, #4]
   b5786:	4611      	mov	r1, r2
   b5788:	f7ff bec0 	b.w	b550c <network_connecting>

000b578c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b578c:	6840      	ldr	r0, [r0, #4]
   b578e:	2200      	movs	r2, #0
   b5790:	2102      	movs	r1, #2
   b5792:	f7ff bec3 	b.w	b551c <network_disconnect>

000b5796 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5796:	2300      	movs	r3, #0
   b5798:	6840      	ldr	r0, [r0, #4]
   b579a:	461a      	mov	r2, r3
   b579c:	f7ff beae 	b.w	b54fc <network_connect>

000b57a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b57a0:	4b02      	ldr	r3, [pc, #8]	; (b57ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b57a2:	2203      	movs	r2, #3
   b57a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b57a6:	4a02      	ldr	r2, [pc, #8]	; (b57b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b57a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b57aa:	4770      	bx	lr
   b57ac:	2003e690 	.word	0x2003e690
   b57b0:	000b7ce4 	.word	0x000b7ce4

000b57b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b57b4:	4770      	bx	lr

000b57b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b57b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57b8:	4606      	mov	r6, r0
   b57ba:	4615      	mov	r5, r2
   b57bc:	460c      	mov	r4, r1
   b57be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b57c0:	42bc      	cmp	r4, r7
   b57c2:	d006      	beq.n	b57d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b57c4:	6833      	ldr	r3, [r6, #0]
   b57c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b57ca:	689b      	ldr	r3, [r3, #8]
   b57cc:	4630      	mov	r0, r6
   b57ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b57d0:	e7f6      	b.n	b57c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b57d2:	4628      	mov	r0, r5
   b57d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b57d6:	7c00      	ldrb	r0, [r0, #16]
   b57d8:	2200      	movs	r2, #0
   b57da:	f7ff bd29 	b.w	b5230 <hal_i2c_write>

000b57de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b57de:	7c00      	ldrb	r0, [r0, #16]
   b57e0:	2100      	movs	r1, #0
   b57e2:	f7ff bd2d 	b.w	b5240 <hal_i2c_available>

000b57e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b57e6:	7c00      	ldrb	r0, [r0, #16]
   b57e8:	2100      	movs	r1, #0
   b57ea:	f7ff bd31 	b.w	b5250 <hal_i2c_read>

000b57ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b57ee:	7c00      	ldrb	r0, [r0, #16]
   b57f0:	2100      	movs	r1, #0
   b57f2:	f7ff bd35 	b.w	b5260 <hal_i2c_peek>

000b57f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b57f6:	7c00      	ldrb	r0, [r0, #16]
   b57f8:	2100      	movs	r1, #0
   b57fa:	f7ff bd39 	b.w	b5270 <hal_i2c_flush>

000b57fe <_ZN7TwoWireD0Ev>:
   b57fe:	b510      	push	{r4, lr}
   b5800:	2114      	movs	r1, #20
   b5802:	4604      	mov	r4, r0
   b5804:	f7fe fc49 	bl	b409a <_ZdlPvj>
   b5808:	4620      	mov	r0, r4
   b580a:	bd10      	pop	{r4, pc}

000b580c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b580c:	b538      	push	{r3, r4, r5, lr}
   b580e:	4604      	mov	r4, r0
   b5810:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5816:	2200      	movs	r2, #0
   b5818:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b581c:	4b09      	ldr	r3, [pc, #36]	; (b5844 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b581e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5820:	4608      	mov	r0, r1
   b5822:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5824:	4629      	mov	r1, r5
   b5826:	f7ff fd33 	bl	b5290 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b582a:	30bf      	adds	r0, #191	; 0xbf
   b582c:	d108      	bne.n	b5840 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b582e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5830:	07db      	lsls	r3, r3, #31
   b5832:	d505      	bpl.n	b5840 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5834:	6868      	ldr	r0, [r5, #4]
   b5836:	f7ff fec9 	bl	b55cc <free>
    free(conf.tx_buffer);
   b583a:	68e8      	ldr	r0, [r5, #12]
   b583c:	f7ff fec6 	bl	b55cc <free>
}
   b5840:	4620      	mov	r0, r4
   b5842:	bd38      	pop	{r3, r4, r5, pc}
   b5844:	000b7d20 	.word	0x000b7d20

000b5848 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5848:	2300      	movs	r3, #0
   b584a:	7c00      	ldrb	r0, [r0, #16]
   b584c:	461a      	mov	r2, r3
   b584e:	4619      	mov	r1, r3
   b5850:	f7ff bcd6 	b.w	b5200 <hal_i2c_begin>

000b5854 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5856:	2200      	movs	r2, #0
   b5858:	2314      	movs	r3, #20
   b585a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b585e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5862:	780b      	ldrb	r3, [r1, #0]
   b5864:	f88d 3008 	strb.w	r3, [sp, #8]
   b5868:	684b      	ldr	r3, [r1, #4]
   b586a:	9303      	str	r3, [sp, #12]
   b586c:	68cb      	ldr	r3, [r1, #12]
   b586e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5870:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5872:	7a0b      	ldrb	r3, [r1, #8]
   b5874:	9305      	str	r3, [sp, #20]
   b5876:	a901      	add	r1, sp, #4
   b5878:	f7ff fd12 	bl	b52a0 <hal_i2c_request_ex>
}
   b587c:	b007      	add	sp, #28
   b587e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5882 <_ZN7TwoWire11requestFromEhjh>:
{
   b5882:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5884:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5886:	f88d 1000 	strb.w	r1, [sp]
   b588a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b588e:	9103      	str	r1, [sp, #12]
   b5890:	bf18      	it	ne
   b5892:	2301      	movne	r3, #1
   b5894:	4669      	mov	r1, sp
    size_ = size;
   b5896:	9201      	str	r2, [sp, #4]
   b5898:	f88d 3008 	strb.w	r3, [sp, #8]
   b589c:	f7ff ffda 	bl	b5854 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b58a0:	b005      	add	sp, #20
   b58a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b58a6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b58a6:	2301      	movs	r3, #1
   b58a8:	f7ff bfeb 	b.w	b5882 <_ZN7TwoWire11requestFromEhjh>

000b58ac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b58ac:	7c00      	ldrb	r0, [r0, #16]
   b58ae:	2200      	movs	r2, #0
   b58b0:	f7ff bcae 	b.w	b5210 <hal_i2c_begin_transmission>

000b58b4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b58b4:	7c00      	ldrb	r0, [r0, #16]
   b58b6:	2200      	movs	r2, #0
   b58b8:	f7ff bcb2 	b.w	b5220 <hal_i2c_end_transmission>

000b58bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b58bc:	4770      	bx	lr

000b58be <_ZN9IPAddressD0Ev>:
   b58be:	b510      	push	{r4, lr}
   b58c0:	2118      	movs	r1, #24
   b58c2:	4604      	mov	r4, r0
   b58c4:	f7fe fbe9 	bl	b409a <_ZdlPvj>
   b58c8:	4620      	mov	r0, r4
   b58ca:	bd10      	pop	{r4, pc}

000b58cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b58ce:	7d03      	ldrb	r3, [r0, #20]
   b58d0:	2b06      	cmp	r3, #6
{
   b58d2:	b08d      	sub	sp, #52	; 0x34
   b58d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58d6:	f100 0704 	add.w	r7, r0, #4
   b58da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b58de:	d012      	beq.n	b5906 <_ZNK9IPAddress7printToER5Print+0x3a>
   b58e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b58e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b58e8:	220a      	movs	r2, #10
   b58ea:	4630      	mov	r0, r6
   b58ec:	f001 fa93 	bl	b6e16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b58f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b58f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b58f4:	d019      	beq.n	b592a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b58f6:	2c00      	cmp	r4, #0
   b58f8:	d0f4      	beq.n	b58e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b58fa:	212e      	movs	r1, #46	; 0x2e
   b58fc:	4630      	mov	r0, r6
   b58fe:	f001 fa7b 	bl	b6df8 <_ZN5Print5printEc>
   b5902:	4404      	add	r4, r0
   b5904:	e7ee      	b.n	b58e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5906:	232f      	movs	r3, #47	; 0x2f
   b5908:	466a      	mov	r2, sp
   b590a:	4639      	mov	r1, r7
   b590c:	200a      	movs	r0, #10
		buf[0] = 0;
   b590e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5912:	f7ff fccd 	bl	b52b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5916:	4668      	mov	r0, sp
   b5918:	f001 fead 	bl	b7676 <strlen>
   b591c:	6833      	ldr	r3, [r6, #0]
   b591e:	4602      	mov	r2, r0
   b5920:	68db      	ldr	r3, [r3, #12]
   b5922:	4669      	mov	r1, sp
   b5924:	4630      	mov	r0, r6
   b5926:	4798      	blx	r3
   b5928:	4604      	mov	r4, r0
    }
    return n;
}
   b592a:	4620      	mov	r0, r4
   b592c:	b00d      	add	sp, #52	; 0x34
   b592e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5930 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5930:	b510      	push	{r4, lr}
   b5932:	4b05      	ldr	r3, [pc, #20]	; (b5948 <_ZN9IPAddressC1Ev+0x18>)
   b5934:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5936:	2211      	movs	r2, #17
   b5938:	f840 3b04 	str.w	r3, [r0], #4
   b593c:	2100      	movs	r1, #0
   b593e:	f001 fe3b 	bl	b75b8 <memset>
}
   b5942:	4620      	mov	r0, r4
   b5944:	bd10      	pop	{r4, pc}
   b5946:	bf00      	nop
   b5948:	000b7d48 	.word	0x000b7d48

000b594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b594c:	4603      	mov	r3, r0
   b594e:	4a07      	ldr	r2, [pc, #28]	; (b596c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5950:	b510      	push	{r4, lr}
   b5952:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5956:	f101 0210 	add.w	r2, r1, #16
   b595a:	f851 4b04 	ldr.w	r4, [r1], #4
   b595e:	f843 4b04 	str.w	r4, [r3], #4
   b5962:	4291      	cmp	r1, r2
   b5964:	d1f9      	bne.n	b595a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5966:	780a      	ldrb	r2, [r1, #0]
   b5968:	701a      	strb	r2, [r3, #0]
}
   b596a:	bd10      	pop	{r4, pc}
   b596c:	000b7d48 	.word	0x000b7d48

000b5970 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5970:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5972:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5976:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b597a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b597e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5982:	2304      	movs	r3, #4
   b5984:	6041      	str	r1, [r0, #4]
   b5986:	7503      	strb	r3, [r0, #20]
}
   b5988:	bd10      	pop	{r4, pc}
	...

000b598c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b598c:	b507      	push	{r0, r1, r2, lr}
   b598e:	4b06      	ldr	r3, [pc, #24]	; (b59a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b5990:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5992:	78cb      	ldrb	r3, [r1, #3]
   b5994:	9300      	str	r3, [sp, #0]
   b5996:	788b      	ldrb	r3, [r1, #2]
   b5998:	784a      	ldrb	r2, [r1, #1]
   b599a:	7809      	ldrb	r1, [r1, #0]
   b599c:	f7ff ffe8 	bl	b5970 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59a0:	b003      	add	sp, #12
   b59a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b59a6:	bf00      	nop
   b59a8:	000b7d48 	.word	0x000b7d48

000b59ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b59ac:	f100 0310 	add.w	r3, r0, #16
   b59b0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b59b2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b59b6:	2901      	cmp	r1, #1
   b59b8:	4618      	mov	r0, r3
   b59ba:	d108      	bne.n	b59ce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b59bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b59c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b59c4:	3a01      	subs	r2, #1
   b59c6:	f103 0310 	add.w	r3, r3, #16
   b59ca:	d1f2      	bne.n	b59b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b59cc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b59ce:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b59d0:	bf04      	itt	eq
   b59d2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b59d6:	1852      	addeq	r2, r2, r1
   b59d8:	e7f4      	b.n	b59c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b59da <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b59da:	b40e      	push	{r1, r2, r3}
   b59dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59de:	b088      	sub	sp, #32
   b59e0:	af00      	add	r7, sp, #0
   b59e2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b59e6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b59e8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b59ec:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b59ee:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b59f0:	462b      	mov	r3, r5
   b59f2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b59f4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b59f6:	f7ff fdf9 	bl	b55ec <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b59fa:	280f      	cmp	r0, #15
   b59fc:	687a      	ldr	r2, [r7, #4]
   b59fe:	d91a      	bls.n	b5a36 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5a00:	f100 0308 	add.w	r3, r0, #8
   b5a04:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5a08:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5a0a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5a0e:	1c41      	adds	r1, r0, #1
   b5a10:	462b      	mov	r3, r5
   b5a12:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5a14:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5a16:	f7ff fde9 	bl	b55ec <vsnprintf>
        if (n > 0) {
   b5a1a:	1e02      	subs	r2, r0, #0
   b5a1c:	dd04      	ble.n	b5a28 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5a1e:	6823      	ldr	r3, [r4, #0]
   b5a20:	4669      	mov	r1, sp
   b5a22:	689b      	ldr	r3, [r3, #8]
   b5a24:	4620      	mov	r0, r4
   b5a26:	4798      	blx	r3
   b5a28:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5a2a:	3720      	adds	r7, #32
   b5a2c:	46bd      	mov	sp, r7
   b5a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5a32:	b003      	add	sp, #12
   b5a34:	4770      	bx	lr
    } else if (n > 0) {
   b5a36:	2800      	cmp	r0, #0
   b5a38:	d0f7      	beq.n	b5a2a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5a3a:	6823      	ldr	r3, [r4, #0]
   b5a3c:	4602      	mov	r2, r0
   b5a3e:	689b      	ldr	r3, [r3, #8]
   b5a40:	f107 0110 	add.w	r1, r7, #16
   b5a44:	4620      	mov	r0, r4
   b5a46:	4798      	blx	r3
}
   b5a48:	e7ef      	b.n	b5a2a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5a4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5a4a:	b538      	push	{r3, r4, r5, lr}
   b5a4c:	680b      	ldr	r3, [r1, #0]
   b5a4e:	6003      	str	r3, [r0, #0]
   b5a50:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5a52:	6843      	ldr	r3, [r0, #4]
   b5a54:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5a56:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5a58:	d008      	beq.n	b5a6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5a5a:	b115      	cbz	r5, b5a62 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5a5c:	686b      	ldr	r3, [r5, #4]
   b5a5e:	3301      	adds	r3, #1
   b5a60:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5a62:	6860      	ldr	r0, [r4, #4]
   b5a64:	b108      	cbz	r0, b5a6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5a66:	f7ff fde4 	bl	b5632 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5a6a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5a6c:	bd38      	pop	{r3, r4, r5, pc}

000b5a6e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5a6e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5a70:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5a72:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5a76:	689b      	ldr	r3, [r3, #8]
   b5a78:	2201      	movs	r2, #1
   b5a7a:	f10d 0107 	add.w	r1, sp, #7
   b5a7e:	4798      	blx	r3
}
   b5a80:	b003      	add	sp, #12
   b5a82:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a86 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5a86:	460b      	mov	r3, r1
   b5a88:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5a8a:	2200      	movs	r2, #0
   b5a8c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5a8e:	e9c0 2200 	strd	r2, r2, [r0]
   b5a92:	4604      	mov	r4, r0
        t_ = t;
   b5a94:	6083      	str	r3, [r0, #8]
    if (t) {
   b5a96:	b90b      	cbnz	r3, b5a9c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5a98:	4620      	mov	r0, r4
   b5a9a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5a9c:	f7ff ffd5 	bl	b5a4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5aa0:	e7fa      	b.n	b5a98 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5aa2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5aa2:	6883      	ldr	r3, [r0, #8]
   b5aa4:	b1eb      	cbz	r3, b5ae2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5aa6:	781a      	ldrb	r2, [r3, #0]
   b5aa8:	2a03      	cmp	r2, #3
   b5aaa:	d81a      	bhi.n	b5ae2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b5aac:	e8df f002 	tbb	[pc, r2]
   b5ab0:	1b021704 	.word	0x1b021704
   b5ab4:	2005      	movs	r0, #5
   b5ab6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5ab8:	6802      	ldr	r2, [r0, #0]
   b5aba:	685b      	ldr	r3, [r3, #4]
   b5abc:	6852      	ldr	r2, [r2, #4]
   b5abe:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5ac0:	282d      	cmp	r0, #45	; 0x2d
   b5ac2:	d012      	beq.n	b5aea <_ZNK5spark9JSONValue4typeEv+0x48>
   b5ac4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5ac8:	2b09      	cmp	r3, #9
   b5aca:	d90e      	bls.n	b5aea <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b5acc:	2874      	cmp	r0, #116	; 0x74
   b5ace:	d00e      	beq.n	b5aee <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5ad0:	2866      	cmp	r0, #102	; 0x66
   b5ad2:	d00c      	beq.n	b5aee <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5ad4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5ad8:	4258      	negs	r0, r3
   b5ada:	4158      	adcs	r0, r3
   b5adc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b5ade:	2006      	movs	r0, #6
   b5ae0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5ae2:	2000      	movs	r0, #0
   b5ae4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b5ae6:	2004      	movs	r0, #4
   b5ae8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b5aea:	2003      	movs	r0, #3
   b5aec:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b5aee:	2002      	movs	r0, #2
}
   b5af0:	4770      	bx	lr

000b5af2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b5af2:	b510      	push	{r4, lr}
   b5af4:	4604      	mov	r4, r0
    switch (type()) {
   b5af6:	f7ff ffd4 	bl	b5aa2 <_ZNK5spark9JSONValue4typeEv>
   b5afa:	2802      	cmp	r0, #2
   b5afc:	d00e      	beq.n	b5b1c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b5afe:	1ec3      	subs	r3, r0, #3
   b5b00:	b2db      	uxtb	r3, r3
   b5b02:	2b01      	cmp	r3, #1
   b5b04:	d814      	bhi.n	b5b30 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5b06:	6822      	ldr	r2, [r4, #0]
   b5b08:	68a3      	ldr	r3, [r4, #8]
   b5b0a:	6850      	ldr	r0, [r2, #4]
   b5b0c:	685b      	ldr	r3, [r3, #4]
}
   b5b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5b12:	220a      	movs	r2, #10
   b5b14:	2100      	movs	r1, #0
   b5b16:	4418      	add	r0, r3
   b5b18:	f001 be60 	b.w	b77dc <strtol>
        const char* const s = d_->json + t_->start;
   b5b1c:	6822      	ldr	r2, [r4, #0]
   b5b1e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5b20:	6852      	ldr	r2, [r2, #4]
   b5b22:	685b      	ldr	r3, [r3, #4]
   b5b24:	5cd0      	ldrb	r0, [r2, r3]
   b5b26:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b5b2a:	4258      	negs	r0, r3
   b5b2c:	4158      	adcs	r0, r3
}
   b5b2e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5b30:	2000      	movs	r0, #0
   b5b32:	e7fc      	b.n	b5b2e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5b34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5b34:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5b36:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5b38:	e9c0 3300 	strd	r3, r3, [r0]
   b5b3c:	4604      	mov	r4, r0
        n_(0) {
   b5b3e:	480e      	ldr	r0, [pc, #56]	; (b5b78 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5b40:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5b44:	b1a9      	cbz	r1, b5b72 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5b46:	780b      	ldrb	r3, [r1, #0]
   b5b48:	2b03      	cmp	r3, #3
   b5b4a:	d006      	beq.n	b5b5a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5b4c:	b98b      	cbnz	r3, b5b72 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5b4e:	6813      	ldr	r3, [r2, #0]
   b5b50:	6858      	ldr	r0, [r3, #4]
   b5b52:	684b      	ldr	r3, [r1, #4]
   b5b54:	5cc3      	ldrb	r3, [r0, r3]
   b5b56:	2b6e      	cmp	r3, #110	; 0x6e
   b5b58:	d007      	beq.n	b5b6a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5b5a:	6813      	ldr	r3, [r2, #0]
   b5b5c:	684d      	ldr	r5, [r1, #4]
   b5b5e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5b60:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5b62:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5b64:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5b66:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5b68:	60e3      	str	r3, [r4, #12]
   b5b6a:	4611      	mov	r1, r2
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f7ff ff6c 	bl	b5a4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5b72:	4620      	mov	r0, r4
   b5b74:	bd38      	pop	{r3, r4, r5, pc}
   b5b76:	bf00      	nop
   b5b78:	000b7dba 	.word	0x000b7dba

000b5b7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5b7c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5b7e:	2500      	movs	r5, #0
   b5b80:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5b82:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5b86:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5b8a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5b8e:	4604      	mov	r4, r0
   b5b90:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5b92:	b14b      	cbz	r3, b5ba8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5b94:	781a      	ldrb	r2, [r3, #0]
   b5b96:	2a01      	cmp	r2, #1
   b5b98:	d106      	bne.n	b5ba8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5b9a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5b9e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5ba0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5ba2:	6143      	str	r3, [r0, #20]
   b5ba4:	f7ff ff51 	bl	b5a4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5ba8:	4620      	mov	r0, r4
   b5baa:	bd38      	pop	{r3, r4, r5, pc}

000b5bac <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5bac:	b510      	push	{r4, lr}
    if (!n_) {
   b5bae:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5bb0:	4604      	mov	r4, r0
    if (!n_) {
   b5bb2:	b163      	cbz	r3, b5bce <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5bb4:	6880      	ldr	r0, [r0, #8]
   b5bb6:	60e0      	str	r0, [r4, #12]
    --n_;
   b5bb8:	3b01      	subs	r3, #1
    ++t_;
   b5bba:	3010      	adds	r0, #16
   b5bbc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5bbe:	6120      	str	r0, [r4, #16]
    --n_;
   b5bc0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5bc2:	b113      	cbz	r3, b5bca <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5bc4:	f7ff fef2 	bl	b59ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5bc8:	60a0      	str	r0, [r4, #8]
    return true;
   b5bca:	2001      	movs	r0, #1
   b5bcc:	e000      	b.n	b5bd0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5bce:	4618      	mov	r0, r3
}
   b5bd0:	bd10      	pop	{r4, pc}

000b5bd2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5bd2:	b510      	push	{r4, lr}
    write('}');
   b5bd4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5bd6:	4604      	mov	r4, r0
    write('}');
   b5bd8:	f7ff ff49 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5bdc:	2301      	movs	r3, #1
   b5bde:	7123      	strb	r3, [r4, #4]
}
   b5be0:	4620      	mov	r0, r4
   b5be2:	bd10      	pop	{r4, pc}

000b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5be4:	b508      	push	{r3, lr}
    switch (state_) {
   b5be6:	7903      	ldrb	r3, [r0, #4]
   b5be8:	2b01      	cmp	r3, #1
   b5bea:	d002      	beq.n	b5bf2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5bec:	2b02      	cmp	r3, #2
   b5bee:	d004      	beq.n	b5bfa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5bf0:	bd08      	pop	{r3, pc}
        write(',');
   b5bf2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5bf4:	f7ff ff3b 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
}
   b5bf8:	e7fa      	b.n	b5bf0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b5bfa:	213a      	movs	r1, #58	; 0x3a
   b5bfc:	e7fa      	b.n	b5bf4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b5bfe <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b5bfe:	b510      	push	{r4, lr}
   b5c00:	4604      	mov	r4, r0
    writeSeparator();
   b5c02:	f7ff ffef 	bl	b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5c06:	4620      	mov	r0, r4
   b5c08:	217b      	movs	r1, #123	; 0x7b
   b5c0a:	f7ff ff30 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5c0e:	2300      	movs	r3, #0
   b5c10:	7123      	strb	r3, [r4, #4]
}
   b5c12:	4620      	mov	r0, r4
   b5c14:	bd10      	pop	{r4, pc}
	...

000b5c18 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5c18:	b513      	push	{r0, r1, r4, lr}
   b5c1a:	4604      	mov	r4, r0
   b5c1c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5c1e:	f7ff ffe1 	bl	b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5c22:	6823      	ldr	r3, [r4, #0]
   b5c24:	9a01      	ldr	r2, [sp, #4]
   b5c26:	68db      	ldr	r3, [r3, #12]
   b5c28:	4903      	ldr	r1, [pc, #12]	; (b5c38 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	4798      	blx	r3
    state_ = NEXT;
   b5c2e:	2301      	movs	r3, #1
}
   b5c30:	4620      	mov	r0, r4
    state_ = NEXT;
   b5c32:	7123      	strb	r3, [r4, #4]
}
   b5c34:	b002      	add	sp, #8
   b5c36:	bd10      	pop	{r4, pc}
   b5c38:	000b7d54 	.word	0x000b7d54

000b5c3c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5c3c:	b513      	push	{r0, r1, r4, lr}
   b5c3e:	4604      	mov	r4, r0
   b5c40:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5c42:	f7ff ffcf 	bl	b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5c46:	6823      	ldr	r3, [r4, #0]
   b5c48:	9a01      	ldr	r2, [sp, #4]
   b5c4a:	68db      	ldr	r3, [r3, #12]
   b5c4c:	4903      	ldr	r1, [pc, #12]	; (b5c5c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5c4e:	4620      	mov	r0, r4
   b5c50:	4798      	blx	r3
    state_ = NEXT;
   b5c52:	2301      	movs	r3, #1
}
   b5c54:	4620      	mov	r0, r4
    state_ = NEXT;
   b5c56:	7123      	strb	r3, [r4, #4]
}
   b5c58:	b002      	add	sp, #8
   b5c5a:	bd10      	pop	{r4, pc}
   b5c5c:	000b7d57 	.word	0x000b7d57

000b5c60 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5c64:	460d      	mov	r5, r1
    write('"');
   b5c66:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5c68:	4690      	mov	r8, r2
   b5c6a:	4604      	mov	r4, r0
    write('"');
   b5c6c:	f7ff feff 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5c70:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5d18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5c74:	44a8      	add	r8, r5
    const char *s = str;
   b5c76:	462f      	mov	r7, r5
    while (s != end) {
   b5c78:	4547      	cmp	r7, r8
   b5c7a:	46ba      	mov	sl, r7
   b5c7c:	d03d      	beq.n	b5cfa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5c7e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5c82:	2e22      	cmp	r6, #34	; 0x22
   b5c84:	d006      	beq.n	b5c94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5c86:	2e5c      	cmp	r6, #92	; 0x5c
   b5c88:	d004      	beq.n	b5c94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5c8a:	4630      	mov	r0, r6
   b5c8c:	f001 fc64 	bl	b7558 <isprint>
   b5c90:	2800      	cmp	r0, #0
   b5c92:	d1f1      	bne.n	b5c78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5c94:	6823      	ldr	r3, [r4, #0]
   b5c96:	ebaa 0205 	sub.w	r2, sl, r5
   b5c9a:	689b      	ldr	r3, [r3, #8]
   b5c9c:	4629      	mov	r1, r5
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	4798      	blx	r3
            write('\\');
   b5ca2:	215c      	movs	r1, #92	; 0x5c
   b5ca4:	4620      	mov	r0, r4
   b5ca6:	f7ff fee2 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5caa:	2e0d      	cmp	r6, #13
   b5cac:	d80a      	bhi.n	b5cc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5cae:	2e07      	cmp	r6, #7
   b5cb0:	d91c      	bls.n	b5cec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5cb2:	f1a6 0308 	sub.w	r3, r6, #8
   b5cb6:	2b05      	cmp	r3, #5
   b5cb8:	d818      	bhi.n	b5cec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5cba:	e8df f003 	tbb	[pc, r3]
   b5cbe:	0f0d      	.short	0x0f0d
   b5cc0:	15131711 	.word	0x15131711
   b5cc4:	2e22      	cmp	r6, #34	; 0x22
   b5cc6:	d001      	beq.n	b5ccc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5cc8:	2e5c      	cmp	r6, #92	; 0x5c
   b5cca:	d10f      	bne.n	b5cec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5ccc:	4631      	mov	r1, r6
                write('b');
   b5cce:	4620      	mov	r0, r4
   b5cd0:	f7ff fecd 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5cd4:	463d      	mov	r5, r7
    while (s != end) {
   b5cd6:	e7cf      	b.n	b5c78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5cd8:	2162      	movs	r1, #98	; 0x62
   b5cda:	e7f8      	b.n	b5cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5cdc:	2174      	movs	r1, #116	; 0x74
   b5cde:	e7f6      	b.n	b5cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5ce0:	216e      	movs	r1, #110	; 0x6e
   b5ce2:	e7f4      	b.n	b5cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5ce4:	2166      	movs	r1, #102	; 0x66
   b5ce6:	e7f2      	b.n	b5cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5ce8:	2172      	movs	r1, #114	; 0x72
   b5cea:	e7f0      	b.n	b5cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5cec:	6823      	ldr	r3, [r4, #0]
   b5cee:	4632      	mov	r2, r6
   b5cf0:	68db      	ldr	r3, [r3, #12]
   b5cf2:	4649      	mov	r1, r9
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	4798      	blx	r3
                break;
   b5cf8:	e7ec      	b.n	b5cd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5cfa:	42bd      	cmp	r5, r7
   b5cfc:	d005      	beq.n	b5d0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5cfe:	6823      	ldr	r3, [r4, #0]
   b5d00:	1b7a      	subs	r2, r7, r5
   b5d02:	689b      	ldr	r3, [r3, #8]
   b5d04:	4629      	mov	r1, r5
   b5d06:	4620      	mov	r0, r4
   b5d08:	4798      	blx	r3
    }
    write('"');
   b5d0a:	2122      	movs	r1, #34	; 0x22
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7ff feae 	bl	b5a6e <_ZN5spark10JSONWriter5writeEc>
}
   b5d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5d16:	bf00      	nop
   b5d18:	000b7d5a 	.word	0x000b7d5a

000b5d1c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5d1c:	b513      	push	{r0, r1, r4, lr}
   b5d1e:	4604      	mov	r4, r0
   b5d20:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5d24:	f7ff ff5e 	bl	b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5d28:	4620      	mov	r0, r4
   b5d2a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5d2e:	f7ff ff97 	bl	b5c60 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5d32:	2302      	movs	r3, #2
}
   b5d34:	4620      	mov	r0, r4
    state_ = VALUE;
   b5d36:	7123      	strb	r3, [r4, #4]
}
   b5d38:	b002      	add	sp, #8
   b5d3a:	bd10      	pop	{r4, pc}

000b5d3c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5d3c:	b513      	push	{r0, r1, r4, lr}
   b5d3e:	4604      	mov	r4, r0
   b5d40:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5d44:	f7ff ff4e 	bl	b5be4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5d48:	4620      	mov	r0, r4
   b5d4a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5d4e:	f7ff ff87 	bl	b5c60 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5d52:	2301      	movs	r3, #1
}
   b5d54:	4620      	mov	r0, r4
    state_ = NEXT;
   b5d56:	7123      	strb	r3, [r4, #4]
}
   b5d58:	b002      	add	sp, #8
   b5d5a:	bd10      	pop	{r4, pc}

000b5d5c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5d5c:	6880      	ldr	r0, [r0, #8]
   b5d5e:	6803      	ldr	r3, [r0, #0]
   b5d60:	68db      	ldr	r3, [r3, #12]
   b5d62:	4718      	bx	r3

000b5d64 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5d64:	4770      	bx	lr

000b5d66 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5d66:	4608      	mov	r0, r1
   b5d68:	b111      	cbz	r1, b5d70 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5d6a:	680b      	ldr	r3, [r1, #0]
   b5d6c:	685b      	ldr	r3, [r3, #4]
   b5d6e:	4718      	bx	r3
}
   b5d70:	4770      	bx	lr

000b5d72 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5d72:	4770      	bx	lr

000b5d74 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5d74:	4770      	bx	lr

000b5d76 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5d76:	4770      	bx	lr

000b5d78 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5d78:	4770      	bx	lr

000b5d7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5d7a:	b538      	push	{r3, r4, r5, lr}
   b5d7c:	4604      	mov	r4, r0
   b5d7e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5d80:	6800      	ldr	r0, [r0, #0]
   b5d82:	212e      	movs	r1, #46	; 0x2e
   b5d84:	f001 fc5b 	bl	b763e <strchrnul>
    size = s - category;
   b5d88:	6823      	ldr	r3, [r4, #0]
   b5d8a:	1ac3      	subs	r3, r0, r3
   b5d8c:	602b      	str	r3, [r5, #0]
    if (size) {
   b5d8e:	b123      	cbz	r3, b5d9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5d90:	7803      	ldrb	r3, [r0, #0]
   b5d92:	b103      	cbz	r3, b5d96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5d94:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5d96:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d98:	6020      	str	r0, [r4, #0]
}
   b5d9a:	4618      	mov	r0, r3
   b5d9c:	bd38      	pop	{r3, r4, r5, pc}

000b5d9e <_ZN5spark16JSONStreamWriterD0Ev>:
   b5d9e:	b510      	push	{r4, lr}
   b5da0:	210c      	movs	r1, #12
   b5da2:	4604      	mov	r4, r0
   b5da4:	f7fe f979 	bl	b409a <_ZdlPvj>
   b5da8:	4620      	mov	r0, r4
   b5daa:	bd10      	pop	{r4, pc}

000b5dac <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5dac:	b510      	push	{r4, lr}
   b5dae:	2104      	movs	r1, #4
   b5db0:	4604      	mov	r4, r0
   b5db2:	f7fe f972 	bl	b409a <_ZdlPvj>
   b5db6:	4620      	mov	r0, r4
   b5db8:	bd10      	pop	{r4, pc}

000b5dba <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5dba:	b510      	push	{r4, lr}
   b5dbc:	2104      	movs	r1, #4
   b5dbe:	4604      	mov	r4, r0
   b5dc0:	f7fe f96b 	bl	b409a <_ZdlPvj>
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	bd10      	pop	{r4, pc}

000b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5dc8:	f7ff b9ca 	b.w	b5160 <os_mutex_recursive_lock>

000b5dcc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5dcc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5dce:	f001 fc40 	bl	b7652 <strcmp>
}
   b5dd2:	fab0 f080 	clz	r0, r0
   b5dd6:	0940      	lsrs	r0, r0, #5
   b5dd8:	bd08      	pop	{r3, pc}

000b5dda <__tcf_1>:
   b5dda:	4770      	bx	lr

000b5ddc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5ddc:	b510      	push	{r4, lr}
   b5dde:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5de0:	f001 f9f4 	bl	b71cc <_Z16_fetch_usbserialv>
   b5de4:	4284      	cmp	r4, r0
   b5de6:	d010      	beq.n	b5e0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5de8:	f001 fb88 	bl	b74fc <_Z22__fetch_global_Serial1v>
   b5dec:	4284      	cmp	r4, r0
   b5dee:	d105      	bne.n	b5dfc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5df0:	f001 fb84 	bl	b74fc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5df8:	f001 b981 	b.w	b70fe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5dfc:	b12c      	cbz	r4, b5e0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5dfe:	6823      	ldr	r3, [r4, #0]
   b5e00:	4620      	mov	r0, r4
   b5e02:	685b      	ldr	r3, [r3, #4]
}
   b5e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5e08:	4718      	bx	r3
   b5e0a:	bd10      	pop	{r4, pc}

000b5e0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e0c:	680b      	ldr	r3, [r1, #0]
   b5e0e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5e10:	684b      	ldr	r3, [r1, #4]
   b5e12:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5e14:	b113      	cbz	r3, b5e1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5e16:	685a      	ldr	r2, [r3, #4]
   b5e18:	3201      	adds	r2, #1
   b5e1a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e1c:	4770      	bx	lr

000b5e1e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5e1e:	b513      	push	{r0, r1, r4, lr}
   b5e20:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5e22:	4608      	mov	r0, r1
   b5e24:	9101      	str	r1, [sp, #4]
   b5e26:	f001 fc26 	bl	b7676 <strlen>
   b5e2a:	9901      	ldr	r1, [sp, #4]
   b5e2c:	4602      	mov	r2, r0
   b5e2e:	4620      	mov	r0, r4
}
   b5e30:	b002      	add	sp, #8
   b5e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5e36:	f7ff bf81 	b.w	b5d3c <_ZN5spark10JSONWriter5valueEPKcj>

000b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5e3a:	b513      	push	{r0, r1, r4, lr}
   b5e3c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5e3e:	4608      	mov	r0, r1
   b5e40:	9101      	str	r1, [sp, #4]
   b5e42:	f001 fc18 	bl	b7676 <strlen>
   b5e46:	6823      	ldr	r3, [r4, #0]
   b5e48:	9901      	ldr	r1, [sp, #4]
   b5e4a:	68db      	ldr	r3, [r3, #12]
   b5e4c:	4602      	mov	r2, r0
   b5e4e:	4620      	mov	r0, r4
}
   b5e50:	b002      	add	sp, #8
   b5e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5e56:	4718      	bx	r3

000b5e58 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5e58:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5e5a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5e5c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5e60:	68db      	ldr	r3, [r3, #12]
   b5e62:	2201      	movs	r2, #1
   b5e64:	f10d 0107 	add.w	r1, sp, #7
   b5e68:	4798      	blx	r3
}
   b5e6a:	b003      	add	sp, #12
   b5e6c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5e70 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5e70:	b40e      	push	{r1, r2, r3}
   b5e72:	b503      	push	{r0, r1, lr}
   b5e74:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5e76:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5e78:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5e7c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5e7e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5e80:	f000 ffe7 	bl	b6e52 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5e84:	b002      	add	sp, #8
   b5e86:	f85d eb04 	ldr.w	lr, [sp], #4
   b5e8a:	b003      	add	sp, #12
   b5e8c:	4770      	bx	lr

000b5e8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5e8e:	680a      	ldr	r2, [r1, #0]
   b5e90:	6002      	str	r2, [r0, #0]
   b5e92:	684a      	ldr	r2, [r1, #4]
   b5e94:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5e96:	2200      	movs	r2, #0
   b5e98:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5e9c:	b510      	push	{r4, lr}
   b5e9e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5ea0:	688c      	ldr	r4, [r1, #8]
   b5ea2:	6084      	str	r4, [r0, #8]
   b5ea4:	68cc      	ldr	r4, [r1, #12]
   b5ea6:	60c4      	str	r4, [r0, #12]
   b5ea8:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5eaa:	608a      	str	r2, [r1, #8]
   b5eac:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5eae:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5eb0:	610a      	str	r2, [r1, #16]
   b5eb2:	bd10      	pop	{r4, pc}

000b5eb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5eb8:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5ebc:	f04f 0a14 	mov.w	sl, #20
   b5ec0:	9300      	str	r3, [sp, #0]
   b5ec2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5ec6:	4b18      	ldr	r3, [pc, #96]	; (b5f28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5ec8:	10a4      	asrs	r4, r4, #2
   b5eca:	4617      	mov	r7, r2
   b5ecc:	435c      	muls	r4, r3
   b5ece:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5ed0:	2c00      	cmp	r4, #0
   b5ed2:	dd21      	ble.n	b5f18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5ed4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5ed6:	fb0a f006 	mul.w	r0, sl, r6
   b5eda:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5ede:	463a      	mov	r2, r7
   b5ee0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5ee4:	5828      	ldr	r0, [r5, r0]
   b5ee6:	9101      	str	r1, [sp, #4]
   b5ee8:	455f      	cmp	r7, fp
   b5eea:	bf28      	it	cs
   b5eec:	465a      	movcs	r2, fp
   b5eee:	f001 fbca 	bl	b7686 <strncmp>
                if (cmp == 0) {
   b5ef2:	2800      	cmp	r0, #0
   b5ef4:	9901      	ldr	r1, [sp, #4]
   b5ef6:	f04f 0301 	mov.w	r3, #1
   b5efa:	d10b      	bne.n	b5f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5efc:	455f      	cmp	r7, fp
   b5efe:	d103      	bne.n	b5f08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5f00:	9a00      	ldr	r2, [sp, #0]
   b5f02:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5f04:	4634      	mov	r4, r6
   b5f06:	e7e3      	b.n	b5ed0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5f08:	d9fc      	bls.n	b5f04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5f0a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5f0c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5f10:	3e01      	subs	r6, #1
   b5f12:	e7f7      	b.n	b5f04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5f14:	dbf9      	blt.n	b5f0a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5f16:	e7f5      	b.n	b5f04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5f18:	eba5 0508 	sub.w	r5, r5, r8
}
   b5f1c:	4802      	ldr	r0, [pc, #8]	; (b5f28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5f1e:	10ad      	asrs	r5, r5, #2
   b5f20:	4368      	muls	r0, r5
   b5f22:	b003      	add	sp, #12
   b5f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f28:	cccccccd 	.word	0xcccccccd

000b5f2c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5f2e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5f30:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5f32:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5f34:	b303      	cbz	r3, b5f78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5f36:	b1f9      	cbz	r1, b5f78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5f38:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5f3a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5f3e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5f40:	a903      	add	r1, sp, #12
   b5f42:	a801      	add	r0, sp, #4
   b5f44:	f7ff ff19 	bl	b5d7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5f48:	4601      	mov	r1, r0
   b5f4a:	b1a8      	cbz	r0, b5f78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5f4c:	f10d 030b 	add.w	r3, sp, #11
   b5f50:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5f52:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5f56:	4620      	mov	r0, r4
   b5f58:	f7ff ffac 	bl	b5eb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5f5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5f60:	b153      	cbz	r3, b5f78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5f62:	6823      	ldr	r3, [r4, #0]
   b5f64:	2414      	movs	r4, #20
   b5f66:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5f6a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5f6c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5f70:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5f72:	bfa8      	it	ge
   b5f74:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5f76:	e7e3      	b.n	b5f40 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5f78:	4628      	mov	r0, r5
   b5f7a:	b004      	add	sp, #16
   b5f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5f80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5f80:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5f82:	4c09      	ldr	r4, [pc, #36]	; (b5fa8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5f84:	7823      	ldrb	r3, [r4, #0]
   b5f86:	f3bf 8f5b 	dmb	ish
   b5f8a:	07db      	lsls	r3, r3, #31
   b5f8c:	d409      	bmi.n	b5fa2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5f8e:	4620      	mov	r0, r4
   b5f90:	f7fe f892 	bl	b40b8 <__cxa_guard_acquire>
   b5f94:	b128      	cbz	r0, b5fa2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5f96:	4620      	mov	r0, r4
   b5f98:	f7fe f893 	bl	b40c2 <__cxa_guard_release>
   b5f9c:	4803      	ldr	r0, [pc, #12]	; (b5fac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5f9e:	f001 fad5 	bl	b754c <atexit>
}
   b5fa2:	4803      	ldr	r0, [pc, #12]	; (b5fb0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5fa4:	bd10      	pop	{r4, pc}
   b5fa6:	bf00      	nop
   b5fa8:	2003e69c 	.word	0x2003e69c
   b5fac:	000b5d73 	.word	0x000b5d73
   b5fb0:	2003e540 	.word	0x2003e540

000b5fb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5fb4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5fb6:	4c09      	ldr	r4, [pc, #36]	; (b5fdc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5fb8:	7823      	ldrb	r3, [r4, #0]
   b5fba:	f3bf 8f5b 	dmb	ish
   b5fbe:	07db      	lsls	r3, r3, #31
   b5fc0:	d409      	bmi.n	b5fd6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5fc2:	4620      	mov	r0, r4
   b5fc4:	f7fe f878 	bl	b40b8 <__cxa_guard_acquire>
   b5fc8:	b128      	cbz	r0, b5fd6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5fca:	4620      	mov	r0, r4
   b5fcc:	f7fe f879 	bl	b40c2 <__cxa_guard_release>
   b5fd0:	4803      	ldr	r0, [pc, #12]	; (b5fe0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5fd2:	f001 fabb 	bl	b754c <atexit>
    return &factory;
}
   b5fd6:	4803      	ldr	r0, [pc, #12]	; (b5fe4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5fd8:	bd10      	pop	{r4, pc}
   b5fda:	bf00      	nop
   b5fdc:	2003e6a0 	.word	0x2003e6a0
   b5fe0:	000b5ddb 	.word	0x000b5ddb
   b5fe4:	2003e544 	.word	0x2003e544

000b5fe8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5fe8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5fea:	2500      	movs	r5, #0
   b5fec:	4604      	mov	r4, r0
   b5fee:	e9c0 5500 	strd	r5, r5, [r0]
   b5ff2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5ff6:	6085      	str	r5, [r0, #8]
   b5ff8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5ffa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5ffe:	f7ff f89f 	bl	b5140 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6002:	f7ff ffbd 	bl	b5f80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6006:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6008:	f7ff ffd4 	bl	b5fb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b600c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b600e:	6220      	str	r0, [r4, #32]
}
   b6010:	4620      	mov	r0, r4
   b6012:	bd38      	pop	{r3, r4, r5, pc}

000b6014 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6014:	b510      	push	{r4, lr}
    static LogManager mgr;
   b6016:	4c0a      	ldr	r4, [pc, #40]	; (b6040 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b6018:	7823      	ldrb	r3, [r4, #0]
   b601a:	f3bf 8f5b 	dmb	ish
   b601e:	07db      	lsls	r3, r3, #31
   b6020:	d40c      	bmi.n	b603c <_ZN5spark10LogManager8instanceEv+0x28>
   b6022:	4620      	mov	r0, r4
   b6024:	f7fe f848 	bl	b40b8 <__cxa_guard_acquire>
   b6028:	b140      	cbz	r0, b603c <_ZN5spark10LogManager8instanceEv+0x28>
   b602a:	4806      	ldr	r0, [pc, #24]	; (b6044 <_ZN5spark10LogManager8instanceEv+0x30>)
   b602c:	f7ff ffdc 	bl	b5fe8 <_ZN5spark10LogManagerC1Ev>
   b6030:	4620      	mov	r0, r4
   b6032:	f7fe f846 	bl	b40c2 <__cxa_guard_release>
   b6036:	4804      	ldr	r0, [pc, #16]	; (b6048 <_ZN5spark10LogManager8instanceEv+0x34>)
   b6038:	f001 fa88 	bl	b754c <atexit>
    return &mgr;
}
   b603c:	4801      	ldr	r0, [pc, #4]	; (b6044 <_ZN5spark10LogManager8instanceEv+0x30>)
   b603e:	bd10      	pop	{r4, pc}
   b6040:	2003e698 	.word	0x2003e698
   b6044:	2003e6a8 	.word	0x2003e6a8
   b6048:	000b6569 	.word	0x000b6569

000b604c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b604c:	4a02      	ldr	r2, [pc, #8]	; (b6058 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b604e:	4903      	ldr	r1, [pc, #12]	; (b605c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6050:	4803      	ldr	r0, [pc, #12]	; (b6060 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6052:	2300      	movs	r3, #0
   b6054:	f7ff ba04 	b.w	b5460 <log_set_callbacks>
   b6058:	000b634d 	.word	0x000b634d
   b605c:	000b62d9 	.word	0x000b62d9
   b6060:	000b6259 	.word	0x000b6259

000b6064 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6064:	2300      	movs	r3, #0
   b6066:	461a      	mov	r2, r3
   b6068:	4619      	mov	r1, r3
   b606a:	4618      	mov	r0, r3
   b606c:	f7ff b9f8 	b.w	b5460 <log_set_callbacks>

000b6070 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6070:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6072:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6074:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6076:	4668      	mov	r0, sp
   b6078:	f7ff fec8 	bl	b5e0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b607c:	466a      	mov	r2, sp
   b607e:	4629      	mov	r1, r5
   b6080:	4620      	mov	r0, r4
   b6082:	f7ff fd7b 	bl	b5b7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6086:	a801      	add	r0, sp, #4
   b6088:	f7ff faf9 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b608c:	4620      	mov	r0, r4
   b608e:	b003      	add	sp, #12
   b6090:	bd30      	pop	{r4, r5, pc}

000b6092 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6092:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6094:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6096:	4604      	mov	r4, r0
   b6098:	4668      	mov	r0, sp
   b609a:	f7ff feb7 	bl	b5e0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b609e:	466a      	mov	r2, sp
   b60a0:	4629      	mov	r1, r5
   b60a2:	4620      	mov	r0, r4
   b60a4:	f7ff fd46 	bl	b5b34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b60a8:	a801      	add	r0, sp, #4
   b60aa:	f7ff fae8 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b60ae:	4620      	mov	r0, r4
   b60b0:	b003      	add	sp, #12
   b60b2:	bd30      	pop	{r4, r5, pc}

000b60b4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b60b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b60b6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b60b8:	4604      	mov	r4, r0
   b60ba:	4668      	mov	r0, sp
   b60bc:	f7ff fea6 	bl	b5e0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b60c0:	466a      	mov	r2, sp
   b60c2:	4629      	mov	r1, r5
   b60c4:	4620      	mov	r0, r4
   b60c6:	f7ff fcde 	bl	b5a86 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b60ca:	a801      	add	r0, sp, #4
   b60cc:	f7ff fad7 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b60d0:	4620      	mov	r0, r4
   b60d2:	b003      	add	sp, #12
   b60d4:	bd30      	pop	{r4, r5, pc}
	...

000b60d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b60d8:	b570      	push	{r4, r5, r6, lr}
   b60da:	b08a      	sub	sp, #40	; 0x28
   b60dc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b60de:	4601      	mov	r1, r0
   b60e0:	a804      	add	r0, sp, #16
   b60e2:	f7ff ffc5 	bl	b6070 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b60e6:	4e14      	ldr	r6, [pc, #80]	; (b6138 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b60e8:	a804      	add	r0, sp, #16
   b60ea:	f7ff fd5f 	bl	b5bac <_ZN5spark18JSONObjectIterator4nextEv>
   b60ee:	b1e8      	cbz	r0, b612c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b60f0:	a904      	add	r1, sp, #16
   b60f2:	4668      	mov	r0, sp
   b60f4:	f7ff ffcd 	bl	b6092 <_ZNK5spark18JSONObjectIterator4nameEv>
   b60f8:	9802      	ldr	r0, [sp, #8]
   b60fa:	4631      	mov	r1, r6
   b60fc:	f7ff fe66 	bl	b5dcc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6100:	4604      	mov	r4, r0
   b6102:	b110      	cbz	r0, b610a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6104:	1e2c      	subs	r4, r5, #0
   b6106:	bf18      	it	ne
   b6108:	2401      	movne	r4, #1
   b610a:	a801      	add	r0, sp, #4
   b610c:	f7ff fab7 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6110:	2c00      	cmp	r4, #0
   b6112:	d0e9      	beq.n	b60e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6114:	a904      	add	r1, sp, #16
   b6116:	4668      	mov	r0, sp
   b6118:	f7ff ffcc 	bl	b60b4 <_ZNK5spark18JSONObjectIterator5valueEv>
   b611c:	4668      	mov	r0, sp
   b611e:	f7ff fce8 	bl	b5af2 <_ZNK5spark9JSONValue5toIntEv>
   b6122:	6028      	str	r0, [r5, #0]
   b6124:	a801      	add	r0, sp, #4
   b6126:	f7ff faaa 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b612a:	e7dd      	b.n	b60e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b612c:	a805      	add	r0, sp, #20
   b612e:	f7ff faa6 	bl	b567e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6132:	b00a      	add	sp, #40	; 0x28
   b6134:	bd70      	pop	{r4, r5, r6, pc}
   b6136:	bf00      	nop
   b6138:	000b7d60 	.word	0x000b7d60

000b613c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b613c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b613e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6140:	4620      	mov	r0, r4
   b6142:	4913      	ldr	r1, [pc, #76]	; (b6190 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6144:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6146:	f001 fa84 	bl	b7652 <strcmp>
   b614a:	b950      	cbnz	r0, b6162 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b614c:	f001 f83e 	bl	b71cc <_Z16_fetch_usbserialv>
   b6150:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6154:	f001 f828 	bl	b71a8 <_ZN9USBSerial5beginEl>
}
   b6158:	b003      	add	sp, #12
   b615a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b615e:	f001 b835 	b.w	b71cc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6162:	490c      	ldr	r1, [pc, #48]	; (b6194 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6164:	4620      	mov	r0, r4
   b6166:	f001 fa74 	bl	b7652 <strcmp>
   b616a:	b978      	cbnz	r0, b618c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b616c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6170:	a901      	add	r1, sp, #4
   b6172:	4628      	mov	r0, r5
        int baud = 9600;
   b6174:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6176:	f7ff ffaf 	bl	b60d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b617a:	f001 f9bf 	bl	b74fc <_Z22__fetch_global_Serial1v>
   b617e:	9901      	ldr	r1, [sp, #4]
   b6180:	f000 ffba 	bl	b70f8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6184:	f001 f9ba 	bl	b74fc <_Z22__fetch_global_Serial1v>
}
   b6188:	b003      	add	sp, #12
   b618a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b618c:	2000      	movs	r0, #0
   b618e:	e7fb      	b.n	b6188 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6190:	000b7d65 	.word	0x000b7d65
   b6194:	000b7d6c 	.word	0x000b7d6c

000b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6198:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b619a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b619e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b61a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b61a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b61a6:	42ae      	cmp	r6, r5
   b61a8:	d005      	beq.n	b61b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b61aa:	f105 0008 	add.w	r0, r5, #8
   b61ae:	f7ff fff3 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b61b2:	3514      	adds	r5, #20
   b61b4:	e7f7      	b.n	b61a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b61b6:	6820      	ldr	r0, [r4, #0]
   b61b8:	f7ff fa08 	bl	b55cc <free>
}
   b61bc:	4620      	mov	r0, r4
   b61be:	bd70      	pop	{r4, r5, r6, pc}

000b61c0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b61c0:	b510      	push	{r4, lr}
   b61c2:	4604      	mov	r4, r0
   b61c4:	300c      	adds	r0, #12
   b61c6:	f7ff ffe7 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b61ca:	4620      	mov	r0, r4
   b61cc:	f7ff fa45 	bl	b565a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b61d0:	4620      	mov	r0, r4
   b61d2:	bd10      	pop	{r4, pc}

000b61d4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b61d4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b61d6:	4b04      	ldr	r3, [pc, #16]	; (b61e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b61d8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b61da:	f840 3b04 	str.w	r3, [r0], #4
   b61de:	f7ff ffef 	bl	b61c0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b61e2:	4620      	mov	r0, r4
   b61e4:	bd10      	pop	{r4, pc}
   b61e6:	bf00      	nop
   b61e8:	000b7900 	.word	0x000b7900

000b61ec <_ZN5spark16StreamLogHandlerD0Ev>:
   b61ec:	b510      	push	{r4, lr}
   b61ee:	4604      	mov	r4, r0
   b61f0:	f7ff fff0 	bl	b61d4 <_ZN5spark16StreamLogHandlerD1Ev>
   b61f4:	4620      	mov	r0, r4
   b61f6:	2124      	movs	r1, #36	; 0x24
   b61f8:	f7fd ff4f 	bl	b409a <_ZdlPvj>
   b61fc:	4620      	mov	r0, r4
   b61fe:	bd10      	pop	{r4, pc}

000b6200 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b6200:	b510      	push	{r4, lr}
   b6202:	4b03      	ldr	r3, [pc, #12]	; (b6210 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6204:	6003      	str	r3, [r0, #0]
   b6206:	4604      	mov	r4, r0
   b6208:	f7ff ffe4 	bl	b61d4 <_ZN5spark16StreamLogHandlerD1Ev>
   b620c:	4620      	mov	r0, r4
   b620e:	bd10      	pop	{r4, pc}
   b6210:	000b7e08 	.word	0x000b7e08

000b6214 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6214:	b510      	push	{r4, lr}
   b6216:	4604      	mov	r4, r0
   b6218:	f7ff fff2 	bl	b6200 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b621c:	4620      	mov	r0, r4
   b621e:	2124      	movs	r1, #36	; 0x24
   b6220:	f7fd ff3b 	bl	b409a <_ZdlPvj>
   b6224:	4620      	mov	r0, r4
   b6226:	bd10      	pop	{r4, pc}

000b6228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6228:	2200      	movs	r2, #0
   b622a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b622e:	b510      	push	{r4, lr}
        capacity_(0) {
   b6230:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6232:	680c      	ldr	r4, [r1, #0]
   b6234:	6004      	str	r4, [r0, #0]
   b6236:	684c      	ldr	r4, [r1, #4]
   b6238:	6044      	str	r4, [r0, #4]
   b623a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b623c:	600a      	str	r2, [r1, #0]
   b623e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6240:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6242:	608a      	str	r2, [r1, #8]
}
   b6244:	bd10      	pop	{r4, pc}

000b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6246:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6248:	6803      	ldr	r3, [r0, #0]
   b624a:	4604      	mov	r4, r0
   b624c:	6818      	ldr	r0, [r3, #0]
   b624e:	f7fe ff8f 	bl	b5170 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6252:	4620      	mov	r0, r4
   b6254:	bd10      	pop	{r4, pc}
	...

000b6258 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b625c:	b087      	sub	sp, #28
   b625e:	4680      	mov	r8, r0
   b6260:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6262:	4b1c      	ldr	r3, [pc, #112]	; (b62d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6264:	685b      	ldr	r3, [r3, #4]
   b6266:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b626a:	4689      	mov	r9, r1
   b626c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b626e:	b96b      	cbnz	r3, b628c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6270:	f7ff fed0 	bl	b6014 <_ZN5spark10LogManager8instanceEv>
   b6274:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6276:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b627a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b627c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b627e:	f7ff fda3 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6282:	7b23      	ldrb	r3, [r4, #12]
   b6284:	b12b      	cbz	r3, b6292 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6286:	a805      	add	r0, sp, #20
   b6288:	f7ff ffdd 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b628c:	b007      	add	sp, #28
   b628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6292:	2301      	movs	r3, #1
   b6294:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6296:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b629a:	fa5f f989 	uxtb.w	r9, r9
   b629e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b62a2:	45aa      	cmp	sl, r5
   b62a4:	d012      	beq.n	b62cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b62a6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b62aa:	4631      	mov	r1, r6
   b62ac:	1d38      	adds	r0, r7, #4
   b62ae:	f7ff fe3d 	bl	b5f2c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b62b2:	4581      	cmp	r9, r0
   b62b4:	d3f5      	bcc.n	b62a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b62b6:	683b      	ldr	r3, [r7, #0]
   b62b8:	9a03      	ldr	r2, [sp, #12]
   b62ba:	9200      	str	r2, [sp, #0]
   b62bc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b62c0:	464a      	mov	r2, r9
   b62c2:	4633      	mov	r3, r6
   b62c4:	4641      	mov	r1, r8
   b62c6:	4638      	mov	r0, r7
   b62c8:	47d8      	blx	fp
   b62ca:	e7ea      	b.n	b62a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b62cc:	2300      	movs	r3, #0
   b62ce:	7323      	strb	r3, [r4, #12]
   b62d0:	e7d9      	b.n	b6286 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b62d2:	bf00      	nop
   b62d4:	e000ed00 	.word	0xe000ed00

000b62d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b62d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62dc:	469b      	mov	fp, r3
   b62de:	4b1a      	ldr	r3, [pc, #104]	; (b6348 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b62e0:	685b      	ldr	r3, [r3, #4]
   b62e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b62e6:	4680      	mov	r8, r0
   b62e8:	4689      	mov	r9, r1
   b62ea:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b62ec:	b96b      	cbnz	r3, b630a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b62ee:	f7ff fe91 	bl	b6014 <_ZN5spark10LogManager8instanceEv>
   b62f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b62f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b62f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b62fa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b62fc:	f7ff fd64 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6300:	7b23      	ldrb	r3, [r4, #12]
   b6302:	b12b      	cbz	r3, b6310 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6304:	a801      	add	r0, sp, #4
   b6306:	f7ff ff9e 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b630a:	b003      	add	sp, #12
   b630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6310:	2301      	movs	r3, #1
   b6312:	7323      	strb	r3, [r4, #12]
   b6314:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6318:	b2f6      	uxtb	r6, r6
   b631a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b631e:	4555      	cmp	r5, sl
   b6320:	d00e      	beq.n	b6340 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6322:	f855 7b04 	ldr.w	r7, [r5], #4
   b6326:	4659      	mov	r1, fp
   b6328:	1d38      	adds	r0, r7, #4
   b632a:	f7ff fdff 	bl	b5f2c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b632e:	4286      	cmp	r6, r0
   b6330:	d3f5      	bcc.n	b631e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6332:	683b      	ldr	r3, [r7, #0]
   b6334:	464a      	mov	r2, r9
   b6336:	68db      	ldr	r3, [r3, #12]
   b6338:	4641      	mov	r1, r8
   b633a:	4638      	mov	r0, r7
   b633c:	4798      	blx	r3
   b633e:	e7ee      	b.n	b631e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6340:	2300      	movs	r3, #0
   b6342:	7323      	strb	r3, [r4, #12]
   b6344:	e7de      	b.n	b6304 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6346:	bf00      	nop
   b6348:	e000ed00 	.word	0xe000ed00

000b634c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b634c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6350:	4b16      	ldr	r3, [pc, #88]	; (b63ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6352:	685b      	ldr	r3, [r3, #4]
   b6354:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6358:	4605      	mov	r5, r0
   b635a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b635c:	bb1b      	cbnz	r3, b63a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b635e:	f7ff fe59 	bl	b6014 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6362:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6366:	4604      	mov	r4, r0
   b6368:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b636a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b636c:	f7ff fd2c 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6370:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6374:	2446      	movs	r4, #70	; 0x46
   b6376:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b637a:	45b0      	cmp	r8, r6
   b637c:	d109      	bne.n	b6392 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b637e:	a801      	add	r0, sp, #4
   b6380:	f7ff ff61 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6384:	42a5      	cmp	r5, r4
   b6386:	bfb4      	ite	lt
   b6388:	2000      	movlt	r0, #0
   b638a:	2001      	movge	r0, #1
}
   b638c:	b002      	add	sp, #8
   b638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6392:	f856 0b04 	ldr.w	r0, [r6], #4
   b6396:	4639      	mov	r1, r7
   b6398:	3004      	adds	r0, #4
   b639a:	f7ff fdc7 	bl	b5f2c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b639e:	4284      	cmp	r4, r0
   b63a0:	bfa8      	it	ge
   b63a2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b63a4:	e7e9      	b.n	b637a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b63a6:	2000      	movs	r0, #0
   b63a8:	e7f0      	b.n	b638c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b63aa:	bf00      	nop
   b63ac:	e000ed00 	.word	0xe000ed00

000b63b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b63b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b63b2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b63b6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b63b8:	4604      	mov	r4, r0
   b63ba:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b63bc:	db0d      	blt.n	b63da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b63be:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b63c0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b63c2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b63c4:	dd04      	ble.n	b63d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b63c6:	00b9      	lsls	r1, r7, #2
   b63c8:	f7ff f908 	bl	b55dc <realloc>
            if (!d) {
   b63cc:	b918      	cbnz	r0, b63d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b63ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b63d0:	f7ff f8fc 	bl	b55cc <free>
        T* d = nullptr;
   b63d4:	2000      	movs	r0, #0
        data_ = d;
   b63d6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b63d8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b63da:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b63dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b63de:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b63e2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b63e4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b63e8:	1d08      	adds	r0, r1, #4
   b63ea:	f001 f8cb 	bl	b7584 <memmove>
    new(p) T(std::move(value));
   b63ee:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b63f2:	6863      	ldr	r3, [r4, #4]
   b63f4:	3301      	adds	r3, #1
   b63f6:	6063      	str	r3, [r4, #4]
    return true;
   b63f8:	2001      	movs	r0, #1
   b63fa:	e7e8      	b.n	b63ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b63fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b63fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b63fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6402:	4604      	mov	r4, r0
   b6404:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6406:	9301      	str	r3, [sp, #4]
   b6408:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b640a:	f7ff fcdd 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b640e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6412:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6416:	4293      	cmp	r3, r2
   b6418:	4619      	mov	r1, r3
   b641a:	d00b      	beq.n	b6434 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b641c:	6809      	ldr	r1, [r1, #0]
   b641e:	42a9      	cmp	r1, r5
   b6420:	f103 0304 	add.w	r3, r3, #4
   b6424:	d1f7      	bne.n	b6416 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6426:	a801      	add	r0, sp, #4
   b6428:	f7ff ff0d 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b642c:	2500      	movs	r5, #0
}
   b642e:	4628      	mov	r0, r5
   b6430:	b003      	add	sp, #12
   b6432:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6434:	4629      	mov	r1, r5
   b6436:	4620      	mov	r0, r4
   b6438:	f7ff ffba 	bl	b63b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b643c:	4605      	mov	r5, r0
   b643e:	2800      	cmp	r0, #0
   b6440:	d0f1      	beq.n	b6426 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6442:	6863      	ldr	r3, [r4, #4]
   b6444:	2b01      	cmp	r3, #1
   b6446:	d101      	bne.n	b644c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6448:	f7ff fe00 	bl	b604c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b644c:	a801      	add	r0, sp, #4
   b644e:	f7ff fefa 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6452:	e7ec      	b.n	b642e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6454 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6454:	b570      	push	{r4, r5, r6, lr}
   b6456:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6458:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b645c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b645e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6462:	4282      	cmp	r2, r0
   b6464:	d00f      	beq.n	b6486 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6466:	4601      	mov	r1, r0
            if (*p == value) {
   b6468:	681d      	ldr	r5, [r3, #0]
   b646a:	f851 6b04 	ldr.w	r6, [r1], #4
   b646e:	42ae      	cmp	r6, r5
   b6470:	d107      	bne.n	b6482 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6472:	1a52      	subs	r2, r2, r1
   b6474:	f001 f886 	bl	b7584 <memmove>
    --size_;
   b6478:	6863      	ldr	r3, [r4, #4]
   b647a:	3b01      	subs	r3, #1
   b647c:	6063      	str	r3, [r4, #4]
    return true;
   b647e:	2001      	movs	r0, #1
}
   b6480:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6482:	4608      	mov	r0, r1
   b6484:	e7ed      	b.n	b6462 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6486:	2000      	movs	r0, #0
   b6488:	e7fa      	b.n	b6480 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b648a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b648a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b648c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6490:	4604      	mov	r4, r0
   b6492:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6494:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6496:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6498:	f7ff fc96 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b649c:	a901      	add	r1, sp, #4
   b649e:	4620      	mov	r0, r4
   b64a0:	f7ff ffd8 	bl	b6454 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b64a4:	b118      	cbz	r0, b64ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b64a6:	6863      	ldr	r3, [r4, #4]
   b64a8:	b90b      	cbnz	r3, b64ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b64aa:	f7ff fddb 	bl	b6064 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b64ae:	a803      	add	r0, sp, #12
   b64b0:	f7ff fec9 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b64b4:	b004      	add	sp, #16
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b64b8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b64ba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b64be:	2318      	movs	r3, #24
   b64c0:	4604      	mov	r4, r0
   b64c2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b64c6:	42ae      	cmp	r6, r5
   b64c8:	d015      	beq.n	b64f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b64ca:	f105 0110 	add.w	r1, r5, #16
   b64ce:	4620      	mov	r0, r4
   b64d0:	f7ff ffc0 	bl	b6454 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b64d4:	6863      	ldr	r3, [r4, #4]
   b64d6:	b90b      	cbnz	r3, b64dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b64d8:	f7ff fdc4 	bl	b6064 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b64dc:	69e0      	ldr	r0, [r4, #28]
   b64de:	6929      	ldr	r1, [r5, #16]
   b64e0:	6803      	ldr	r3, [r0, #0]
   b64e2:	68db      	ldr	r3, [r3, #12]
   b64e4:	4798      	blx	r3
        if (h.stream) {
   b64e6:	6969      	ldr	r1, [r5, #20]
   b64e8:	b119      	cbz	r1, b64f2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b64ea:	6a20      	ldr	r0, [r4, #32]
   b64ec:	6803      	ldr	r3, [r0, #0]
   b64ee:	68db      	ldr	r3, [r3, #12]
   b64f0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b64f2:	3518      	adds	r5, #24
   b64f4:	e7e7      	b.n	b64c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b64f6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b64fa:	2618      	movs	r6, #24
   b64fc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6500:	42ae      	cmp	r6, r5
   b6502:	d004      	beq.n	b650e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6504:	4628      	mov	r0, r5
   b6506:	f000 fce5 	bl	b6ed4 <_ZN6StringD1Ev>
   b650a:	3518      	adds	r5, #24
   b650c:	e7f8      	b.n	b6500 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b650e:	2300      	movs	r3, #0
   b6510:	6163      	str	r3, [r4, #20]
}
   b6512:	bd70      	pop	{r4, r5, r6, pc}

000b6514 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6514:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6516:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6518:	f7ff fda4 	bl	b6064 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b651c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6520:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6522:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6524:	f7ff fc50 	bl	b5dc8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6528:	4620      	mov	r0, r4
   b652a:	f7ff ffc5 	bl	b64b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b652e:	a801      	add	r0, sp, #4
   b6530:	f7ff fe89 	bl	b6246 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6534:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6536:	b108      	cbz	r0, b653c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6538:	f7fe fe0a 	bl	b5150 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b653c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6540:	2618      	movs	r6, #24
   b6542:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6546:	42ae      	cmp	r6, r5
   b6548:	d004      	beq.n	b6554 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b654a:	4628      	mov	r0, r5
   b654c:	f000 fcc2 	bl	b6ed4 <_ZN6StringD1Ev>
   b6550:	3518      	adds	r5, #24
   b6552:	e7f8      	b.n	b6546 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6554:	6920      	ldr	r0, [r4, #16]
   b6556:	f7ff f839 	bl	b55cc <free>
   b655a:	6820      	ldr	r0, [r4, #0]
   b655c:	f7ff f836 	bl	b55cc <free>
}
   b6560:	4620      	mov	r0, r4
   b6562:	b002      	add	sp, #8
   b6564:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6568 <__tcf_2>:
    static LogManager mgr;
   b6568:	4801      	ldr	r0, [pc, #4]	; (b6570 <__tcf_2+0x8>)
   b656a:	f7ff bfd3 	b.w	b6514 <_ZN5spark10LogManagerD1Ev>
   b656e:	bf00      	nop
   b6570:	2003e6a8 	.word	0x2003e6a8

000b6574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6574:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6578:	4604      	mov	r4, r0
   b657a:	460d      	mov	r5, r1
   b657c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b657e:	d915      	bls.n	b65ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6580:	4290      	cmp	r0, r2
   b6582:	d214      	bcs.n	b65ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6584:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6588:	1a75      	subs	r5, r6, r1
   b658a:	f1a1 0714 	sub.w	r7, r1, #20
   b658e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6590:	42b7      	cmp	r7, r6
   b6592:	d01a      	beq.n	b65ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6594:	b11c      	cbz	r4, b659e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6596:	4631      	mov	r1, r6
   b6598:	4620      	mov	r0, r4
   b659a:	f7ff fc78 	bl	b5e8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b659e:	f106 0008 	add.w	r0, r6, #8
   b65a2:	f7ff fdf9 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b65a6:	3e14      	subs	r6, #20
   b65a8:	3c14      	subs	r4, #20
   b65aa:	e7f1      	b.n	b6590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b65ac:	d00d      	beq.n	b65ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b65ae:	42b5      	cmp	r5, r6
   b65b0:	d00b      	beq.n	b65ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b65b2:	b11c      	cbz	r4, b65bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b65b4:	4629      	mov	r1, r5
   b65b6:	4620      	mov	r0, r4
   b65b8:	f7ff fc69 	bl	b5e8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b65bc:	f105 0008 	add.w	r0, r5, #8
   b65c0:	f7ff fdea 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b65c4:	3514      	adds	r5, #20
   b65c6:	3414      	adds	r4, #20
   b65c8:	e7f1      	b.n	b65ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b65ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b65cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b65ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65d0:	4604      	mov	r4, r0
   b65d2:	460d      	mov	r5, r1
   b65d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b65d6:	d914      	bls.n	b6602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b65d8:	4290      	cmp	r0, r2
   b65da:	d213      	bcs.n	b6604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b65dc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b65e0:	1a75      	subs	r5, r6, r1
   b65e2:	f1a1 0710 	sub.w	r7, r1, #16
   b65e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b65e8:	42b7      	cmp	r7, r6
   b65ea:	d018      	beq.n	b661e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b65ec:	b11c      	cbz	r4, b65f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b65ee:	4631      	mov	r1, r6
   b65f0:	4620      	mov	r0, r4
   b65f2:	f000 fcd7 	bl	b6fa4 <_ZN6StringC1EOS_>
                end->~T();
   b65f6:	4630      	mov	r0, r6
   b65f8:	f000 fc6c 	bl	b6ed4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b65fc:	3e10      	subs	r6, #16
   b65fe:	3c10      	subs	r4, #16
   b6600:	e7f2      	b.n	b65e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6602:	d00c      	beq.n	b661e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6604:	42b5      	cmp	r5, r6
   b6606:	d00a      	beq.n	b661e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6608:	b11c      	cbz	r4, b6612 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b660a:	4629      	mov	r1, r5
   b660c:	4620      	mov	r0, r4
   b660e:	f000 fcc9 	bl	b6fa4 <_ZN6StringC1EOS_>
                p->~T();
   b6612:	4628      	mov	r0, r5
   b6614:	f000 fc5e 	bl	b6ed4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6618:	3510      	adds	r5, #16
   b661a:	3410      	adds	r4, #16
   b661c:	e7f2      	b.n	b6604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6620 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6620:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6622:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6624:	4605      	mov	r5, r0
        if (n > 0) {
   b6626:	dd11      	ble.n	b664c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6628:	0130      	lsls	r0, r6, #4
   b662a:	f7fe ffc7 	bl	b55bc <malloc>
            if (!d) {
   b662e:	4604      	mov	r4, r0
   b6630:	b158      	cbz	r0, b664a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6632:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6636:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b663a:	f7ff ffc7 	bl	b65cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b663e:	6828      	ldr	r0, [r5, #0]
   b6640:	f7fe ffc4 	bl	b55cc <free>
        data_ = d;
   b6644:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6646:	60ae      	str	r6, [r5, #8]
        return true;
   b6648:	2001      	movs	r0, #1
    }
   b664a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b664c:	2400      	movs	r4, #0
   b664e:	e7f6      	b.n	b663e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6654:	4690      	mov	r8, r2
   b6656:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6658:	2300      	movs	r3, #0
   b665a:	9103      	str	r1, [sp, #12]
    return size_;
   b665c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6660:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6662:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6664:	4299      	cmp	r1, r3
        capacity_(0) {
   b6666:	e9c0 3300 	strd	r3, r3, [r0]
   b666a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b666e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6672:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6676:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6678:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b667a:	dc23      	bgt.n	b66c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b667c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6680:	2314      	movs	r3, #20
   b6682:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6686:	42af      	cmp	r7, r5
   b6688:	d03b      	beq.n	b6702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b668a:	4629      	mov	r1, r5
   b668c:	a80b      	add	r0, sp, #44	; 0x2c
   b668e:	f000 fc89 	bl	b6fa4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6692:	a90b      	add	r1, sp, #44	; 0x2c
   b6694:	a80f      	add	r0, sp, #60	; 0x3c
   b6696:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6698:	f000 fc84 	bl	b6fa4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b669c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b66a0:	4299      	cmp	r1, r3
   b66a2:	da1b      	bge.n	b66dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b66a4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b66a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b66a8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b66ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b66b0:	4631      	mov	r1, r6
   b66b2:	f106 0010 	add.w	r0, r6, #16
   b66b6:	f7ff ff89 	bl	b65cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b66ba:	b9ee      	cbnz	r6, b66f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b66bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b66be:	3301      	adds	r3, #1
   b66c0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b66c2:	e011      	b.n	b66e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b66c4:	a808      	add	r0, sp, #32
   b66c6:	f7ff ffab 	bl	b6620 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b66ca:	2800      	cmp	r0, #0
   b66cc:	d1d6      	bne.n	b667c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b66ce:	a808      	add	r0, sp, #32
   b66d0:	f7fe ffc3 	bl	b565a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b66d4:	4620      	mov	r0, r4
   b66d6:	b015      	add	sp, #84	; 0x54
   b66d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b66dc:	3101      	adds	r1, #1
   b66de:	a808      	add	r0, sp, #32
   b66e0:	f7ff ff9e 	bl	b6620 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b66e4:	2800      	cmp	r0, #0
   b66e6:	d1dd      	bne.n	b66a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b66e8:	a80f      	add	r0, sp, #60	; 0x3c
   b66ea:	f000 fbf3 	bl	b6ed4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b66ee:	a80b      	add	r0, sp, #44	; 0x2c
   b66f0:	f000 fbf0 	bl	b6ed4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b66f4:	3514      	adds	r5, #20
   b66f6:	e7c6      	b.n	b6686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b66f8:	a90f      	add	r1, sp, #60	; 0x3c
   b66fa:	4630      	mov	r0, r6
   b66fc:	f000 fc52 	bl	b6fa4 <_ZN6StringC1EOS_>
   b6700:	e7dc      	b.n	b66bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6702:	2600      	movs	r6, #0
   b6704:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6708:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b670a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b670e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6712:	429e      	cmp	r6, r3
   b6714:	da7c      	bge.n	b6810 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6716:	0133      	lsls	r3, r6, #4
   b6718:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b671a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b671c:	b90b      	cbnz	r3, b6722 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b671e:	3601      	adds	r6, #1
   b6720:	e7f5      	b.n	b670e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6722:	2300      	movs	r3, #0
   b6724:	9307      	str	r3, [sp, #28]
   b6726:	fb09 f306 	mul.w	r3, r9, r6
   b672a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b672c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b672e:	a907      	add	r1, sp, #28
   b6730:	a806      	add	r0, sp, #24
   b6732:	f7ff fb22 	bl	b5d7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6736:	4682      	mov	sl, r0
   b6738:	2800      	cmp	r0, #0
   b673a:	d0f0      	beq.n	b671e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b673c:	f04f 0300 	mov.w	r3, #0
   b6740:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6744:	4601      	mov	r1, r0
   b6746:	9a07      	ldr	r2, [sp, #28]
   b6748:	f10d 0317 	add.w	r3, sp, #23
   b674c:	4628      	mov	r0, r5
   b674e:	f7ff fbb1 	bl	b5eb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6752:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6756:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6758:	2f00      	cmp	r7, #0
   b675a:	d14a      	bne.n	b67f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b675c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6760:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6764:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6768:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b676c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6770:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6774:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6776:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b677a:	4293      	cmp	r3, r2
   b677c:	db17      	blt.n	b67ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b677e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6782:	f1ba 0f00 	cmp.w	sl, #0
   b6786:	dd30      	ble.n	b67ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6788:	fb09 f00a 	mul.w	r0, r9, sl
   b678c:	f7fe ff16 	bl	b55bc <malloc>
            if (!d) {
   b6790:	4683      	mov	fp, r0
   b6792:	b360      	cbz	r0, b67ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6794:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6798:	fb09 1202 	mla	r2, r9, r2, r1
   b679c:	f7ff feea 	bl	b6574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b67a0:	6828      	ldr	r0, [r5, #0]
   b67a2:	f7fe ff13 	bl	b55cc <free>
        data_ = d;
   b67a6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b67aa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b67ae:	682b      	ldr	r3, [r5, #0]
   b67b0:	9a01      	ldr	r2, [sp, #4]
   b67b2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b67b6:	686a      	ldr	r2, [r5, #4]
   b67b8:	4651      	mov	r1, sl
   b67ba:	fb09 3202 	mla	r2, r9, r2, r3
   b67be:	f10a 0014 	add.w	r0, sl, #20
   b67c2:	f7ff fed7 	bl	b6574 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b67c6:	f1ba 0f00 	cmp.w	sl, #0
   b67ca:	d003      	beq.n	b67d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b67cc:	a90f      	add	r1, sp, #60	; 0x3c
   b67ce:	4650      	mov	r0, sl
   b67d0:	f7ff fb5d 	bl	b5e8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b67d4:	686b      	ldr	r3, [r5, #4]
   b67d6:	3301      	adds	r3, #1
   b67d8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b67da:	a811      	add	r0, sp, #68	; 0x44
   b67dc:	f7ff fcdc 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b67e0:	b13f      	cbz	r7, b67f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b67e2:	a80b      	add	r0, sp, #44	; 0x2c
   b67e4:	f7ff fcd8 	bl	b6198 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b67e8:	e771      	b.n	b66ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b67ea:	46bb      	mov	fp, r7
   b67ec:	e7d8      	b.n	b67a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b67ee:	2701      	movs	r7, #1
   b67f0:	e7f3      	b.n	b67da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b67f2:	9b01      	ldr	r3, [sp, #4]
   b67f4:	682d      	ldr	r5, [r5, #0]
   b67f6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b67fa:	9b06      	ldr	r3, [sp, #24]
   b67fc:	781b      	ldrb	r3, [r3, #0]
   b67fe:	b92b      	cbnz	r3, b680c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6800:	f8d8 3000 	ldr.w	r3, [r8]
   b6804:	9a02      	ldr	r2, [sp, #8]
   b6806:	4413      	add	r3, r2
   b6808:	7c1b      	ldrb	r3, [r3, #16]
   b680a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b680c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b680e:	e78e      	b.n	b672e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6810:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6812:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6814:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6816:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6818:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b681a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b681e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6820:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6822:	60a2      	str	r2, [r4, #8]
   b6824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6826:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6828:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b682a:	60e2      	str	r2, [r4, #12]
   b682c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b682e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6830:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6832:	6122      	str	r2, [r4, #16]
   b6834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6836:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6838:	9b03      	ldr	r3, [sp, #12]
   b683a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b683c:	6162      	str	r2, [r4, #20]
   b683e:	7623      	strb	r3, [r4, #24]
   b6840:	e7cf      	b.n	b67e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6844 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6844:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6846:	4604      	mov	r4, r0
   b6848:	b087      	sub	sp, #28
   b684a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b684c:	4626      	mov	r6, r4
        stream_(&stream) {
   b684e:	4619      	mov	r1, r3
   b6850:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6852:	4617      	mov	r7, r2
        stream_(&stream) {
   b6854:	f7fd fd3d 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6858:	4b0b      	ldr	r3, [pc, #44]	; (b6888 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b685a:	f846 3b04 	str.w	r3, [r6], #4
   b685e:	4669      	mov	r1, sp
   b6860:	a803      	add	r0, sp, #12
   b6862:	f7fd fd36 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6866:	aa03      	add	r2, sp, #12
   b6868:	4639      	mov	r1, r7
   b686a:	4630      	mov	r0, r6
   b686c:	f7ff fef0 	bl	b6650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6870:	a803      	add	r0, sp, #12
   b6872:	f7fd fced 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6876:	4668      	mov	r0, sp
   b6878:	f7fd fcea 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b687c:	4b03      	ldr	r3, [pc, #12]	; (b688c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b687e:	6023      	str	r3, [r4, #0]
}
   b6880:	4620      	mov	r0, r4
        stream_(&stream) {
   b6882:	6225      	str	r5, [r4, #32]
}
   b6884:	b007      	add	sp, #28
   b6886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6888:	000b7900 	.word	0x000b7900
   b688c:	000b7df0 	.word	0x000b7df0

000b6890 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6890:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6892:	460f      	mov	r7, r1
   b6894:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6896:	491d      	ldr	r1, [pc, #116]	; (b690c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6898:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b689a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b689c:	4616      	mov	r6, r2
   b689e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b68a0:	f000 fed7 	bl	b7652 <strcmp>
   b68a4:	b9c0      	cbnz	r0, b68d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b68a6:	b1a4      	cbz	r4, b68d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b68a8:	4629      	mov	r1, r5
   b68aa:	a801      	add	r0, sp, #4
   b68ac:	f7ff fcbc 	bl	b6228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b68b0:	4917      	ldr	r1, [pc, #92]	; (b6910 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b68b2:	2024      	movs	r0, #36	; 0x24
   b68b4:	f000 fe46 	bl	b7544 <_ZnwjRKSt9nothrow_t>
   b68b8:	4605      	mov	r5, r0
   b68ba:	b130      	cbz	r0, b68ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b68bc:	ab01      	add	r3, sp, #4
   b68be:	4632      	mov	r2, r6
   b68c0:	4621      	mov	r1, r4
   b68c2:	f7ff ffbf 	bl	b6844 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b68c6:	4b13      	ldr	r3, [pc, #76]	; (b6914 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b68c8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b68ca:	a801      	add	r0, sp, #4
   b68cc:	f7fd fcc0 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b68d0:	462c      	mov	r4, r5
}
   b68d2:	4620      	mov	r0, r4
   b68d4:	b005      	add	sp, #20
   b68d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b68d8:	490f      	ldr	r1, [pc, #60]	; (b6918 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b68da:	4638      	mov	r0, r7
   b68dc:	f000 feb9 	bl	b7652 <strcmp>
   b68e0:	b990      	cbnz	r0, b6908 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b68e2:	2c00      	cmp	r4, #0
   b68e4:	d0f5      	beq.n	b68d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b68e6:	4629      	mov	r1, r5
   b68e8:	a801      	add	r0, sp, #4
   b68ea:	f7ff fc9d 	bl	b6228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b68ee:	4908      	ldr	r1, [pc, #32]	; (b6910 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b68f0:	2024      	movs	r0, #36	; 0x24
   b68f2:	f000 fe27 	bl	b7544 <_ZnwjRKSt9nothrow_t>
   b68f6:	4605      	mov	r5, r0
   b68f8:	2800      	cmp	r0, #0
   b68fa:	d0e6      	beq.n	b68ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b68fc:	ab01      	add	r3, sp, #4
   b68fe:	4632      	mov	r2, r6
   b6900:	4621      	mov	r1, r4
   b6902:	f7ff ff9f 	bl	b6844 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6906:	e7e0      	b.n	b68ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6908:	2400      	movs	r4, #0
   b690a:	e7e2      	b.n	b68d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b690c:	000b7d74 	.word	0x000b7d74
   b6910:	000b7f00 	.word	0x000b7f00
   b6914:	000b7e08 	.word	0x000b7e08
   b6918:	000b7d78 	.word	0x000b7d78

000b691c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b691c:	4b01      	ldr	r3, [pc, #4]	; (b6924 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b691e:	4a02      	ldr	r2, [pc, #8]	; (b6928 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6920:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6922:	4770      	bx	lr
   b6924:	2003e6a4 	.word	0x2003e6a4
   b6928:	000b7d89 	.word	0x000b7d89

000b692c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6930:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6932:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6936:	4604      	mov	r4, r0
   b6938:	460e      	mov	r6, r1
   b693a:	4617      	mov	r7, r2
   b693c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b693e:	f000 fc45 	bl	b71cc <_Z16_fetch_usbserialv>
   b6942:	4581      	cmp	r9, r0
   b6944:	d04c      	beq.n	b69e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6946:	792b      	ldrb	r3, [r5, #4]
   b6948:	0719      	lsls	r1, r3, #28
   b694a:	d504      	bpl.n	b6956 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b694c:	696a      	ldr	r2, [r5, #20]
   b694e:	4954      	ldr	r1, [pc, #336]	; (b6aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6950:	4620      	mov	r0, r4
   b6952:	f7ff fa8d 	bl	b5e70 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6956:	f1b8 0f00 	cmp.w	r8, #0
   b695a:	d00d      	beq.n	b6978 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b695c:	215b      	movs	r1, #91	; 0x5b
   b695e:	4620      	mov	r0, r4
   b6960:	f7ff fa7a 	bl	b5e58 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6964:	4641      	mov	r1, r8
   b6966:	4620      	mov	r0, r4
   b6968:	f7ff fa67 	bl	b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b696c:	6823      	ldr	r3, [r4, #0]
   b696e:	494d      	ldr	r1, [pc, #308]	; (b6aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6970:	68db      	ldr	r3, [r3, #12]
   b6972:	2202      	movs	r2, #2
   b6974:	4620      	mov	r0, r4
   b6976:	4798      	blx	r3
    if (attr.has_file) {
   b6978:	792b      	ldrb	r3, [r5, #4]
   b697a:	07da      	lsls	r2, r3, #31
   b697c:	d523      	bpl.n	b69c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b697e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6982:	212f      	movs	r1, #47	; 0x2f
   b6984:	4640      	mov	r0, r8
   b6986:	f000 fe92 	bl	b76ae <strrchr>
    if (s1) {
   b698a:	b108      	cbz	r0, b6990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b698c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6990:	4641      	mov	r1, r8
   b6992:	4620      	mov	r0, r4
   b6994:	f7ff fa51 	bl	b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6998:	792b      	ldrb	r3, [r5, #4]
   b699a:	079b      	lsls	r3, r3, #30
   b699c:	d508      	bpl.n	b69b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b699e:	213a      	movs	r1, #58	; 0x3a
   b69a0:	4620      	mov	r0, r4
   b69a2:	f7ff fa59 	bl	b5e58 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b69a6:	68ea      	ldr	r2, [r5, #12]
   b69a8:	493f      	ldr	r1, [pc, #252]	; (b6aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b69aa:	4620      	mov	r0, r4
   b69ac:	f7ff fa60 	bl	b5e70 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b69b0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b69b2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b69b4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b69b8:	68db      	ldr	r3, [r3, #12]
   b69ba:	bf14      	ite	ne
   b69bc:	493b      	ldrne	r1, [pc, #236]	; (b6aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b69be:	493c      	ldreq	r1, [pc, #240]	; (b6ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b69c0:	2202      	movs	r2, #2
            write(": ", 2);
   b69c2:	4620      	mov	r0, r4
   b69c4:	4798      	blx	r3
    if (attr.has_function) {
   b69c6:	792b      	ldrb	r3, [r5, #4]
   b69c8:	0758      	lsls	r0, r3, #29
   b69ca:	d51d      	bpl.n	b6a08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b69cc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b69ce:	460b      	mov	r3, r1
   b69d0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b69d2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b69d6:	b160      	cbz	r0, b69f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b69d8:	2820      	cmp	r0, #32
   b69da:	d108      	bne.n	b69ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b69dc:	4619      	mov	r1, r3
   b69de:	e7f7      	b.n	b69d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b69e0:	4834      	ldr	r0, [pc, #208]	; (b6ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b69e2:	f000 f966 	bl	b6cb2 <_ZN5spark12NetworkClass9listeningEv>
   b69e6:	2800      	cmp	r0, #0
   b69e8:	d0ad      	beq.n	b6946 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b69ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b69ee:	2828      	cmp	r0, #40	; 0x28
   b69f0:	d1ee      	bne.n	b69d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b69f2:	6823      	ldr	r3, [r4, #0]
   b69f4:	1a52      	subs	r2, r2, r1
   b69f6:	68db      	ldr	r3, [r3, #12]
   b69f8:	4620      	mov	r0, r4
   b69fa:	4798      	blx	r3
        write("(): ", 4);
   b69fc:	6823      	ldr	r3, [r4, #0]
   b69fe:	492e      	ldr	r1, [pc, #184]	; (b6ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6a00:	68db      	ldr	r3, [r3, #12]
   b6a02:	2204      	movs	r2, #4
   b6a04:	4620      	mov	r0, r4
   b6a06:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6a08:	2100      	movs	r1, #0
   b6a0a:	4638      	mov	r0, r7
   b6a0c:	f7fe fd20 	bl	b5450 <log_level_name>
   b6a10:	4601      	mov	r1, r0
    write(s);
   b6a12:	4620      	mov	r0, r4
   b6a14:	f7ff fa11 	bl	b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6a18:	6823      	ldr	r3, [r4, #0]
   b6a1a:	4925      	ldr	r1, [pc, #148]	; (b6ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6a1c:	68db      	ldr	r3, [r3, #12]
   b6a1e:	2202      	movs	r2, #2
   b6a20:	4620      	mov	r0, r4
   b6a22:	4798      	blx	r3
    if (msg) {
   b6a24:	b11e      	cbz	r6, b6a2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6a26:	4631      	mov	r1, r6
   b6a28:	4620      	mov	r0, r4
   b6a2a:	f7ff fa06 	bl	b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6a2e:	792b      	ldrb	r3, [r5, #4]
   b6a30:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6a34:	d02c      	beq.n	b6a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6a36:	6823      	ldr	r3, [r4, #0]
   b6a38:	4920      	ldr	r1, [pc, #128]	; (b6abc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6a3a:	68db      	ldr	r3, [r3, #12]
   b6a3c:	2202      	movs	r2, #2
   b6a3e:	4620      	mov	r0, r4
   b6a40:	4798      	blx	r3
        if (attr.has_code) {
   b6a42:	792b      	ldrb	r3, [r5, #4]
   b6a44:	06d9      	lsls	r1, r3, #27
   b6a46:	d50a      	bpl.n	b6a5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6a48:	6823      	ldr	r3, [r4, #0]
   b6a4a:	491d      	ldr	r1, [pc, #116]	; (b6ac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6a4c:	68db      	ldr	r3, [r3, #12]
   b6a4e:	2207      	movs	r2, #7
   b6a50:	4620      	mov	r0, r4
   b6a52:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6a54:	69aa      	ldr	r2, [r5, #24]
   b6a56:	491b      	ldr	r1, [pc, #108]	; (b6ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6a58:	4620      	mov	r0, r4
   b6a5a:	f7ff fa09 	bl	b5e70 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6a5e:	792b      	ldrb	r3, [r5, #4]
   b6a60:	069a      	lsls	r2, r3, #26
   b6a62:	d511      	bpl.n	b6a88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6a64:	06db      	lsls	r3, r3, #27
   b6a66:	d505      	bpl.n	b6a74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6a68:	6823      	ldr	r3, [r4, #0]
   b6a6a:	4910      	ldr	r1, [pc, #64]	; (b6aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6a6c:	68db      	ldr	r3, [r3, #12]
   b6a6e:	2202      	movs	r2, #2
   b6a70:	4620      	mov	r0, r4
   b6a72:	4798      	blx	r3
            write("details = ", 10);
   b6a74:	6823      	ldr	r3, [r4, #0]
   b6a76:	4914      	ldr	r1, [pc, #80]	; (b6ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6a78:	68db      	ldr	r3, [r3, #12]
   b6a7a:	4620      	mov	r0, r4
   b6a7c:	220a      	movs	r2, #10
   b6a7e:	4798      	blx	r3
            write(attr.details);
   b6a80:	69e9      	ldr	r1, [r5, #28]
   b6a82:	4620      	mov	r0, r4
   b6a84:	f7ff f9d9 	bl	b5e3a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6a88:	215d      	movs	r1, #93	; 0x5d
   b6a8a:	4620      	mov	r0, r4
   b6a8c:	f7ff f9e4 	bl	b5e58 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6a90:	6823      	ldr	r3, [r4, #0]
   b6a92:	490e      	ldr	r1, [pc, #56]	; (b6acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6a94:	68db      	ldr	r3, [r3, #12]
   b6a96:	4620      	mov	r0, r4
   b6a98:	2202      	movs	r2, #2
}
   b6a9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6a9e:	4718      	bx	r3
   b6aa0:	000b7d8d 	.word	0x000b7d8d
   b6aa4:	000b7d94 	.word	0x000b7d94
   b6aa8:	000b7d54 	.word	0x000b7d54
   b6aac:	000b7d97 	.word	0x000b7d97
   b6ab0:	000b7d9c 	.word	0x000b7d9c
   b6ab4:	2003e6d0 	.word	0x2003e6d0
   b6ab8:	000b7d9a 	.word	0x000b7d9a
   b6abc:	000b7d9f 	.word	0x000b7d9f
   b6ac0:	000b7da2 	.word	0x000b7da2
   b6ac4:	000b7daa 	.word	0x000b7daa
   b6ac8:	000b7dad 	.word	0x000b7dad
   b6acc:	000b7db8 	.word	0x000b7db8

000b6ad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ad4:	b085      	sub	sp, #20
    return stream_;
   b6ad6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6ada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6adc:	4605      	mov	r5, r0
   b6ade:	460f      	mov	r7, r1
   b6ae0:	4690      	mov	r8, r2
   b6ae2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6ae4:	f000 fb72 	bl	b71cc <_Z16_fetch_usbserialv>
   b6ae8:	4581      	cmp	r9, r0
   b6aea:	d105      	bne.n	b6af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6aec:	4849      	ldr	r0, [pc, #292]	; (b6c14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6aee:	f000 f8e0 	bl	b6cb2 <_ZN5spark12NetworkClass9listeningEv>
   b6af2:	2800      	cmp	r0, #0
   b6af4:	f040 808a 	bne.w	b6c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6af8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6afa:	4a47      	ldr	r2, [pc, #284]	; (b6c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6afc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6afe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6b02:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6b04:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6b06:	f88d 9008 	strb.w	r9, [sp, #8]
   b6b0a:	f7ff f878 	bl	b5bfe <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6b0e:	4649      	mov	r1, r9
   b6b10:	4640      	mov	r0, r8
   b6b12:	f7fe fc9d 	bl	b5450 <log_level_name>
    json.name("l", 1).value(s);
   b6b16:	4941      	ldr	r1, [pc, #260]	; (b6c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6b18:	4680      	mov	r8, r0
   b6b1a:	2201      	movs	r2, #1
   b6b1c:	a801      	add	r0, sp, #4
   b6b1e:	f7ff f8fd 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6b22:	4641      	mov	r1, r8
   b6b24:	f7ff f97b 	bl	b5e1e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6b28:	b13f      	cbz	r7, b6b3a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6b2a:	493d      	ldr	r1, [pc, #244]	; (b6c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6b2c:	2201      	movs	r2, #1
   b6b2e:	a801      	add	r0, sp, #4
   b6b30:	f7ff f8f4 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6b34:	4639      	mov	r1, r7
   b6b36:	f7ff f972 	bl	b5e1e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6b3a:	b13e      	cbz	r6, b6b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6b3c:	4939      	ldr	r1, [pc, #228]	; (b6c24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6b3e:	2201      	movs	r2, #1
   b6b40:	a801      	add	r0, sp, #4
   b6b42:	f7ff f8eb 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6b46:	4631      	mov	r1, r6
   b6b48:	f7ff f969 	bl	b5e1e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6b4c:	7923      	ldrb	r3, [r4, #4]
   b6b4e:	07df      	lsls	r7, r3, #31
   b6b50:	d50e      	bpl.n	b6b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6b52:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6b54:	212f      	movs	r1, #47	; 0x2f
   b6b56:	4630      	mov	r0, r6
   b6b58:	f000 fda9 	bl	b76ae <strrchr>
    if (s1) {
   b6b5c:	b100      	cbz	r0, b6b60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6b5e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6b60:	4931      	ldr	r1, [pc, #196]	; (b6c28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6b62:	2201      	movs	r2, #1
   b6b64:	a801      	add	r0, sp, #4
   b6b66:	f7ff f8d9 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6b6a:	4631      	mov	r1, r6
   b6b6c:	f7ff f957 	bl	b5e1e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6b70:	7923      	ldrb	r3, [r4, #4]
   b6b72:	079e      	lsls	r6, r3, #30
   b6b74:	d507      	bpl.n	b6b86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6b76:	492d      	ldr	r1, [pc, #180]	; (b6c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6b78:	2202      	movs	r2, #2
   b6b7a:	a801      	add	r0, sp, #4
   b6b7c:	f7ff f8ce 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6b80:	68e1      	ldr	r1, [r4, #12]
   b6b82:	f7ff f849 	bl	b5c18 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6b86:	7923      	ldrb	r3, [r4, #4]
   b6b88:	0758      	lsls	r0, r3, #29
   b6b8a:	d514      	bpl.n	b6bb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6b8c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6b8e:	4633      	mov	r3, r6
   b6b90:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6b92:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6b96:	b12a      	cbz	r2, b6ba4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6b98:	2a20      	cmp	r2, #32
   b6b9a:	d101      	bne.n	b6ba0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6b9c:	461e      	mov	r6, r3
   b6b9e:	e7f7      	b.n	b6b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6ba0:	2a28      	cmp	r2, #40	; 0x28
   b6ba2:	d1f5      	bne.n	b6b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6ba4:	4922      	ldr	r1, [pc, #136]	; (b6c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6ba6:	2202      	movs	r2, #2
   b6ba8:	a801      	add	r0, sp, #4
   b6baa:	f7ff f8b7 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6bae:	1bba      	subs	r2, r7, r6
   b6bb0:	4631      	mov	r1, r6
   b6bb2:	f7ff f8c3 	bl	b5d3c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6bb6:	7923      	ldrb	r3, [r4, #4]
   b6bb8:	0719      	lsls	r1, r3, #28
   b6bba:	d507      	bpl.n	b6bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6bbc:	491d      	ldr	r1, [pc, #116]	; (b6c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6bbe:	2201      	movs	r2, #1
   b6bc0:	a801      	add	r0, sp, #4
   b6bc2:	f7ff f8ab 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6bc6:	6961      	ldr	r1, [r4, #20]
   b6bc8:	f7ff f838 	bl	b5c3c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6bcc:	7923      	ldrb	r3, [r4, #4]
   b6bce:	06da      	lsls	r2, r3, #27
   b6bd0:	d508      	bpl.n	b6be4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6bd2:	2204      	movs	r2, #4
   b6bd4:	4918      	ldr	r1, [pc, #96]	; (b6c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6bd6:	eb0d 0002 	add.w	r0, sp, r2
   b6bda:	f7ff f89f 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6bde:	69a1      	ldr	r1, [r4, #24]
   b6be0:	f7ff f81a 	bl	b5c18 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6be4:	7923      	ldrb	r3, [r4, #4]
   b6be6:	069b      	lsls	r3, r3, #26
   b6be8:	d507      	bpl.n	b6bfa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6bea:	4914      	ldr	r1, [pc, #80]	; (b6c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6bec:	2206      	movs	r2, #6
   b6bee:	a801      	add	r0, sp, #4
   b6bf0:	f7ff f894 	bl	b5d1c <_ZN5spark10JSONWriter4nameEPKcj>
   b6bf4:	69e1      	ldr	r1, [r4, #28]
   b6bf6:	f7ff f912 	bl	b5e1e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6bfa:	a801      	add	r0, sp, #4
   b6bfc:	f7fe ffe9 	bl	b5bd2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6c00:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6c02:	490f      	ldr	r1, [pc, #60]	; (b6c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6c04:	6803      	ldr	r3, [r0, #0]
   b6c06:	2202      	movs	r2, #2
   b6c08:	68db      	ldr	r3, [r3, #12]
   b6c0a:	4798      	blx	r3
}
   b6c0c:	b005      	add	sp, #20
   b6c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6c12:	bf00      	nop
   b6c14:	2003e6d0 	.word	0x2003e6d0
   b6c18:	000b7dd8 	.word	0x000b7dd8
   b6c1c:	000b7d6a 	.word	0x000b7d6a
   b6c20:	000b7971 	.word	0x000b7971
   b6c24:	000b7f6f 	.word	0x000b7f6f
   b6c28:	000b7dbb 	.word	0x000b7dbb
   b6c2c:	000b7dbd 	.word	0x000b7dbd
   b6c30:	000b7dc0 	.word	0x000b7dc0
   b6c34:	000b7a30 	.word	0x000b7a30
   b6c38:	000b7dc3 	.word	0x000b7dc3
   b6c3c:	000b7dc8 	.word	0x000b7dc8
   b6c40:	000b7db8 	.word	0x000b7db8

000b6c44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6c44:	2300      	movs	r3, #0
   b6c46:	6840      	ldr	r0, [r0, #4]
   b6c48:	461a      	mov	r2, r3
   b6c4a:	f7fe bc57 	b.w	b54fc <network_connect>

000b6c4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6c4e:	6840      	ldr	r0, [r0, #4]
   b6c50:	2200      	movs	r2, #0
   b6c52:	2102      	movs	r1, #2
   b6c54:	f7fe bc62 	b.w	b551c <network_disconnect>

000b6c58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6c58:	2200      	movs	r2, #0
   b6c5a:	6840      	ldr	r0, [r0, #4]
   b6c5c:	4611      	mov	r1, r2
   b6c5e:	f7fe bc55 	b.w	b550c <network_connecting>

000b6c62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6c62:	2200      	movs	r2, #0
   b6c64:	6840      	ldr	r0, [r0, #4]
   b6c66:	4611      	mov	r1, r2
   b6c68:	f7fe bc60 	b.w	b552c <network_ready>

000b6c6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c6c:	2300      	movs	r3, #0
   b6c6e:	6840      	ldr	r0, [r0, #4]
   b6c70:	461a      	mov	r2, r3
   b6c72:	4619      	mov	r1, r3
   b6c74:	f7fe bc62 	b.w	b553c <network_on>

000b6c78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6c78:	2300      	movs	r3, #0
   b6c7a:	6840      	ldr	r0, [r0, #4]
   b6c7c:	461a      	mov	r2, r3
   b6c7e:	4619      	mov	r1, r3
   b6c80:	f7fe bc64 	b.w	b554c <network_off>

000b6c84 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c84:	6840      	ldr	r0, [r0, #4]
   b6c86:	2100      	movs	r1, #0
   b6c88:	f7fe bc88 	b.w	b559c <network_is_on>

000b6c8c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	2100      	movs	r1, #0
   b6c90:	f7fe bc8c 	b.w	b55ac <network_is_off>

000b6c94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c94:	6840      	ldr	r0, [r0, #4]
   b6c96:	2200      	movs	r2, #0
   b6c98:	f081 0101 	eor.w	r1, r1, #1
   b6c9c:	f7fe bc5e 	b.w	b555c <network_listen>

000b6ca0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6ca0:	6840      	ldr	r0, [r0, #4]
   b6ca2:	2200      	movs	r2, #0
   b6ca4:	f7fe bc6a 	b.w	b557c <network_set_listen_timeout>

000b6ca8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6ca8:	2200      	movs	r2, #0
   b6caa:	6840      	ldr	r0, [r0, #4]
   b6cac:	4611      	mov	r1, r2
   b6cae:	f7fe bc6d 	b.w	b558c <network_get_listen_timeout>

000b6cb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6cb2:	2200      	movs	r2, #0
   b6cb4:	6840      	ldr	r0, [r0, #4]
   b6cb6:	4611      	mov	r1, r2
   b6cb8:	f7fe bc58 	b.w	b556c <network_listening>

000b6cbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cc0:	b095      	sub	sp, #84	; 0x54
   b6cc2:	4614      	mov	r4, r2
   b6cc4:	460d      	mov	r5, r1
   b6cc6:	4607      	mov	r7, r0
    IPAddress addr;
   b6cc8:	f7fe fe32 	bl	b5930 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6ccc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6cce:	221c      	movs	r2, #28
   b6cd0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6cd2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6cd4:	f000 fc70 	bl	b75b8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6cd8:	2340      	movs	r3, #64	; 0x40
   b6cda:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6cdc:	4620      	mov	r0, r4
   b6cde:	466b      	mov	r3, sp
   b6ce0:	aa0c      	add	r2, sp, #48	; 0x30
   b6ce2:	2100      	movs	r1, #0
   b6ce4:	f7fe faf4 	bl	b52d0 <netdb_getaddrinfo>
    if (!r) {
   b6ce8:	4604      	mov	r4, r0
   b6cea:	2800      	cmp	r0, #0
   b6cec:	d14b      	bne.n	b6d86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6cee:	4602      	mov	r2, r0
   b6cf0:	2101      	movs	r1, #1
   b6cf2:	6868      	ldr	r0, [r5, #4]
   b6cf4:	f7fe fc1a 	bl	b552c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6cf8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6cfa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6cfc:	4622      	mov	r2, r4
   b6cfe:	6868      	ldr	r0, [r5, #4]
   b6d00:	f7fe fc14 	bl	b552c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d04:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d06:	4681      	mov	r9, r0
        bool ok = false;
   b6d08:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d0a:	2e00      	cmp	r6, #0
   b6d0c:	d03b      	beq.n	b6d86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6d0e:	2900      	cmp	r1, #0
   b6d10:	d139      	bne.n	b6d86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6d12:	6873      	ldr	r3, [r6, #4]
   b6d14:	2b02      	cmp	r3, #2
   b6d16:	d003      	beq.n	b6d20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d18:	2b0a      	cmp	r3, #10
   b6d1a:	d011      	beq.n	b6d40 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d1c:	69f6      	ldr	r6, [r6, #28]
   b6d1e:	e7f4      	b.n	b6d0a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d20:	f1b8 0f00 	cmp.w	r8, #0
   b6d24:	d0fa      	beq.n	b6d1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d26:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d28:	a806      	add	r0, sp, #24
   b6d2a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d2c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d2e:	f7fe fe2d 	bl	b598c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d34:	1d3c      	adds	r4, r7, #4
   b6d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d38:	682b      	ldr	r3, [r5, #0]
   b6d3a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d3c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6d3e:	e7ed      	b.n	b6d1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6d40:	f1b9 0f00 	cmp.w	r9, #0
   b6d44:	d0ea      	beq.n	b6d1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6d46:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6d48:	2210      	movs	r2, #16
   b6d4a:	a801      	add	r0, sp, #4
   b6d4c:	f000 fc34 	bl	b75b8 <memset>
                    a.v = 6;
   b6d50:	2306      	movs	r3, #6
   b6d52:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d56:	ad01      	add	r5, sp, #4
   b6d58:	f104 0308 	add.w	r3, r4, #8
   b6d5c:	3418      	adds	r4, #24
   b6d5e:	6818      	ldr	r0, [r3, #0]
   b6d60:	6859      	ldr	r1, [r3, #4]
   b6d62:	462a      	mov	r2, r5
   b6d64:	c203      	stmia	r2!, {r0, r1}
   b6d66:	3308      	adds	r3, #8
   b6d68:	42a3      	cmp	r3, r4
   b6d6a:	4615      	mov	r5, r2
   b6d6c:	d1f7      	bne.n	b6d5e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d6e:	a901      	add	r1, sp, #4
   b6d70:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6d72:	ad07      	add	r5, sp, #28
   b6d74:	f7fe fdea 	bl	b594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d7a:	1d3c      	adds	r4, r7, #4
   b6d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d7e:	682b      	ldr	r3, [r5, #0]
   b6d80:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d82:	4649      	mov	r1, r9
   b6d84:	e7ca      	b.n	b6d1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d86:	9800      	ldr	r0, [sp, #0]
   b6d88:	f7fe fa9a 	bl	b52c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d8c:	4638      	mov	r0, r7
   b6d8e:	b015      	add	sp, #84	; 0x54
   b6d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d94:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d96:	4a03      	ldr	r2, [pc, #12]	; (b6da4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d98:	601a      	str	r2, [r3, #0]
   b6d9a:	2200      	movs	r2, #0
   b6d9c:	605a      	str	r2, [r3, #4]

} // spark
   b6d9e:	4770      	bx	lr
   b6da0:	2003e6d0 	.word	0x2003e6d0
   b6da4:	000b7e50 	.word	0x000b7e50

000b6da8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6daa:	4606      	mov	r6, r0
   b6dac:	460d      	mov	r5, r1
  size_t n = 0;
   b6dae:	188f      	adds	r7, r1, r2
   b6db0:	2400      	movs	r4, #0
  while (size--) {
   b6db2:	42bd      	cmp	r5, r7
   b6db4:	d00c      	beq.n	b6dd0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6db6:	6833      	ldr	r3, [r6, #0]
   b6db8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6dbc:	689b      	ldr	r3, [r3, #8]
   b6dbe:	4630      	mov	r0, r6
   b6dc0:	4798      	blx	r3
     if (chunk>=0)
   b6dc2:	1e03      	subs	r3, r0, #0
   b6dc4:	db01      	blt.n	b6dca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6dc6:	441c      	add	r4, r3
  while (size--) {
   b6dc8:	e7f3      	b.n	b6db2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6dca:	2c00      	cmp	r4, #0
   b6dcc:	bf08      	it	eq
   b6dce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dd4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6dd4:	b513      	push	{r0, r1, r4, lr}
   b6dd6:	4604      	mov	r4, r0
    }
   b6dd8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6dda:	b159      	cbz	r1, b6df4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ddc:	9101      	str	r1, [sp, #4]
   b6dde:	f000 fc4a 	bl	b7676 <strlen>
   b6de2:	6823      	ldr	r3, [r4, #0]
   b6de4:	9901      	ldr	r1, [sp, #4]
   b6de6:	68db      	ldr	r3, [r3, #12]
   b6de8:	4602      	mov	r2, r0
   b6dea:	4620      	mov	r0, r4
    }
   b6dec:	b002      	add	sp, #8
   b6dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6df2:	4718      	bx	r3
    }
   b6df4:	b002      	add	sp, #8
   b6df6:	bd10      	pop	{r4, pc}

000b6df8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6df8:	6803      	ldr	r3, [r0, #0]
   b6dfa:	689b      	ldr	r3, [r3, #8]
   b6dfc:	4718      	bx	r3

000b6dfe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6dfe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6e00:	210d      	movs	r1, #13
{
   b6e02:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6e04:	f7ff fff8 	bl	b6df8 <_ZN5Print5printEc>
  n += print('\n');
   b6e08:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6e0a:	4604      	mov	r4, r0
  n += print('\n');
   b6e0c:	4628      	mov	r0, r5
   b6e0e:	f7ff fff3 	bl	b6df8 <_ZN5Print5printEc>
  return n;
}
   b6e12:	4420      	add	r0, r4
   b6e14:	bd38      	pop	{r3, r4, r5, pc}

000b6e16 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6e16:	b530      	push	{r4, r5, lr}
   b6e18:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6e1a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6e1c:	2a01      	cmp	r2, #1
  *str = '\0';
   b6e1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6e22:	bf98      	it	ls
   b6e24:	220a      	movls	r2, #10
   b6e26:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6e28:	460d      	mov	r5, r1
   b6e2a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6e2e:	fb01 5312 	mls	r3, r1, r2, r5
   b6e32:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e36:	2b09      	cmp	r3, #9
   b6e38:	bf94      	ite	ls
   b6e3a:	3330      	addls	r3, #48	; 0x30
   b6e3c:	3337      	addhi	r3, #55	; 0x37
   b6e3e:	b2db      	uxtb	r3, r3
  } while(n);
   b6e40:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e42:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6e46:	d9ef      	bls.n	b6e28 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6e48:	4621      	mov	r1, r4
   b6e4a:	f7ff ffc3 	bl	b6dd4 <_ZN5Print5writeEPKc>
}
   b6e4e:	b00b      	add	sp, #44	; 0x2c
   b6e50:	bd30      	pop	{r4, r5, pc}

000b6e52 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e56:	b086      	sub	sp, #24
   b6e58:	af00      	add	r7, sp, #0
   b6e5a:	4605      	mov	r5, r0
   b6e5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e5e:	1d38      	adds	r0, r7, #4
   b6e60:	2114      	movs	r1, #20
{
   b6e62:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6e64:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e66:	f7fe fbc1 	bl	b55ec <vsnprintf>

    if (n<bufsize)
   b6e6a:	2813      	cmp	r0, #19
   b6e6c:	d80e      	bhi.n	b6e8c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6e6e:	1d39      	adds	r1, r7, #4
   b6e70:	4628      	mov	r0, r5
   b6e72:	f7ff ffaf 	bl	b6dd4 <_ZN5Print5writeEPKc>
   b6e76:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6e78:	b11e      	cbz	r6, b6e82 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6e7a:	4628      	mov	r0, r5
   b6e7c:	f7ff ffbf 	bl	b6dfe <_ZN5Print7printlnEv>
   b6e80:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6e82:	4620      	mov	r0, r4
   b6e84:	3718      	adds	r7, #24
   b6e86:	46bd      	mov	sp, r7
   b6e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6e8c:	f100 0308 	add.w	r3, r0, #8
   b6e90:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6e94:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6e96:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6e9a:	4622      	mov	r2, r4
   b6e9c:	1c41      	adds	r1, r0, #1
   b6e9e:	683b      	ldr	r3, [r7, #0]
   b6ea0:	4668      	mov	r0, sp
   b6ea2:	f7fe fba3 	bl	b55ec <vsnprintf>
  return write(str);
   b6ea6:	4669      	mov	r1, sp
   b6ea8:	4628      	mov	r0, r5
   b6eaa:	f7ff ff93 	bl	b6dd4 <_ZN5Print5writeEPKc>
   b6eae:	4604      	mov	r4, r0
   b6eb0:	46c5      	mov	sp, r8
   b6eb2:	e7e1      	b.n	b6e78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6eb4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6eb4:	4b01      	ldr	r3, [pc, #4]	; (b6ebc <_GLOBAL__sub_I_RGB+0x8>)
   b6eb6:	2200      	movs	r2, #0
   b6eb8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6eba:	4770      	bx	lr
   b6ebc:	2003e6d8 	.word	0x2003e6d8

000b6ec0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6ec0:	b510      	push	{r4, lr}
   b6ec2:	4604      	mov	r4, r0
   b6ec4:	4608      	mov	r0, r1
{
    _spi = spi;
   b6ec6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6ec8:	f7fe fa0a 	bl	b52e0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ecc:	2300      	movs	r3, #0
   b6ece:	6063      	str	r3, [r4, #4]
}
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	bd10      	pop	{r4, pc}

000b6ed4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6ed4:	b510      	push	{r4, lr}
   b6ed6:	4604      	mov	r4, r0
{
	free(buffer);
   b6ed8:	6800      	ldr	r0, [r0, #0]
   b6eda:	f7fe fb77 	bl	b55cc <free>
}
   b6ede:	4620      	mov	r0, r4
   b6ee0:	bd10      	pop	{r4, pc}

000b6ee2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6ee2:	b510      	push	{r4, lr}
   b6ee4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6ee6:	6800      	ldr	r0, [r0, #0]
   b6ee8:	b108      	cbz	r0, b6eee <_ZN6String10invalidateEv+0xc>
   b6eea:	f7fe fb6f 	bl	b55cc <free>
	buffer = NULL;
   b6eee:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ef0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ef4:	6023      	str	r3, [r4, #0]
}
   b6ef6:	bd10      	pop	{r4, pc}

000b6ef8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6ef8:	b538      	push	{r3, r4, r5, lr}
   b6efa:	4604      	mov	r4, r0
   b6efc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6efe:	6800      	ldr	r0, [r0, #0]
   b6f00:	3101      	adds	r1, #1
   b6f02:	f7fe fb6b 	bl	b55dc <realloc>
	if (newbuffer) {
   b6f06:	b110      	cbz	r0, b6f0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6f08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6f0c:	2001      	movs	r0, #1
	}
	return 0;
}
   b6f0e:	bd38      	pop	{r3, r4, r5, pc}

000b6f10 <_ZN6String7reserveEj>:
{
   b6f10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6f12:	6803      	ldr	r3, [r0, #0]
{
   b6f14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6f16:	b123      	cbz	r3, b6f22 <_ZN6String7reserveEj+0x12>
   b6f18:	6843      	ldr	r3, [r0, #4]
   b6f1a:	428b      	cmp	r3, r1
   b6f1c:	d301      	bcc.n	b6f22 <_ZN6String7reserveEj+0x12>
   b6f1e:	2001      	movs	r0, #1
}
   b6f20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6f22:	4620      	mov	r0, r4
   b6f24:	f7ff ffe8 	bl	b6ef8 <_ZN6String12changeBufferEj>
   b6f28:	2800      	cmp	r0, #0
   b6f2a:	d0f9      	beq.n	b6f20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6f2c:	68a3      	ldr	r3, [r4, #8]
   b6f2e:	2b00      	cmp	r3, #0
   b6f30:	d1f5      	bne.n	b6f1e <_ZN6String7reserveEj+0xe>
   b6f32:	6822      	ldr	r2, [r4, #0]
   b6f34:	7013      	strb	r3, [r2, #0]
   b6f36:	e7f2      	b.n	b6f1e <_ZN6String7reserveEj+0xe>

000b6f38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6f3c:	4611      	mov	r1, r2
   b6f3e:	9201      	str	r2, [sp, #4]
{
   b6f40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6f42:	f7ff ffe5 	bl	b6f10 <_ZN6String7reserveEj>
   b6f46:	9a01      	ldr	r2, [sp, #4]
   b6f48:	b928      	cbnz	r0, b6f56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6f4a:	4620      	mov	r0, r4
   b6f4c:	f7ff ffc9 	bl	b6ee2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6f50:	4620      	mov	r0, r4
   b6f52:	b003      	add	sp, #12
   b6f54:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6f56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6f58:	4629      	mov	r1, r5
   b6f5a:	6820      	ldr	r0, [r4, #0]
   b6f5c:	f000 fb04 	bl	b7568 <memcpy>
	buffer[len] = 0;
   b6f60:	6822      	ldr	r2, [r4, #0]
   b6f62:	68a3      	ldr	r3, [r4, #8]
   b6f64:	2100      	movs	r1, #0
   b6f66:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6f68:	e7f2      	b.n	b6f50 <_ZN6String4copyEPKcj+0x18>

000b6f6a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6f6a:	b538      	push	{r3, r4, r5, lr}
   b6f6c:	4605      	mov	r5, r0
	if (buffer) {
   b6f6e:	6800      	ldr	r0, [r0, #0]
{
   b6f70:	460c      	mov	r4, r1
	if (buffer) {
   b6f72:	b168      	cbz	r0, b6f90 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6f74:	686a      	ldr	r2, [r5, #4]
   b6f76:	688b      	ldr	r3, [r1, #8]
   b6f78:	429a      	cmp	r2, r3
   b6f7a:	d307      	bcc.n	b6f8c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6f7c:	6809      	ldr	r1, [r1, #0]
   b6f7e:	f000 fb72 	bl	b7666 <strcpy>
			len = rhs.len;
   b6f82:	68a3      	ldr	r3, [r4, #8]
   b6f84:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6f86:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6f88:	60a3      	str	r3, [r4, #8]
}
   b6f8a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6f8c:	f7fe fb1e 	bl	b55cc <free>
	buffer = rhs.buffer;
   b6f90:	6823      	ldr	r3, [r4, #0]
   b6f92:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6f94:	6863      	ldr	r3, [r4, #4]
   b6f96:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6f98:	68a3      	ldr	r3, [r4, #8]
   b6f9a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6f9c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6f9e:	e9c4 3300 	strd	r3, r3, [r4]
   b6fa2:	e7f1      	b.n	b6f88 <_ZN6String4moveERS_+0x1e>

000b6fa4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b6fa4:	b510      	push	{r4, lr}
	buffer = NULL;
   b6fa6:	2300      	movs	r3, #0
	capacity = 0;
   b6fa8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6fac:	4604      	mov	r4, r0
	len = 0;
   b6fae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6fb0:	7303      	strb	r3, [r0, #12]
	move(rval);
   b6fb2:	f7ff ffda 	bl	b6f6a <_ZN6String4moveERS_>
}
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	bd10      	pop	{r4, pc}

000b6fba <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6fba:	4288      	cmp	r0, r1
{
   b6fbc:	b510      	push	{r4, lr}
   b6fbe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6fc0:	d005      	beq.n	b6fce <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6fc2:	680b      	ldr	r3, [r1, #0]
   b6fc4:	b12b      	cbz	r3, b6fd2 <_ZN6StringaSERKS_+0x18>
   b6fc6:	688a      	ldr	r2, [r1, #8]
   b6fc8:	4619      	mov	r1, r3
   b6fca:	f7ff ffb5 	bl	b6f38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6fce:	4620      	mov	r0, r4
   b6fd0:	bd10      	pop	{r4, pc}
	else invalidate();
   b6fd2:	f7ff ff86 	bl	b6ee2 <_ZN6String10invalidateEv>
   b6fd6:	e7fa      	b.n	b6fce <_ZN6StringaSERKS_+0x14>

000b6fd8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6fd8:	b510      	push	{r4, lr}
	buffer = NULL;
   b6fda:	2300      	movs	r3, #0
String::String(const String &value)
   b6fdc:	4604      	mov	r4, r0
	capacity = 0;
   b6fde:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6fe2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6fe4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6fe6:	f7ff ffe8 	bl	b6fba <_ZN6StringaSERKS_>
}
   b6fea:	4620      	mov	r0, r4
   b6fec:	bd10      	pop	{r4, pc}

000b6fee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b6fee:	b507      	push	{r0, r1, r2, lr}
   b6ff0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6ff2:	2100      	movs	r1, #0
{
   b6ff4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b6ff6:	9100      	str	r1, [sp, #0]
   b6ff8:	2001      	movs	r0, #1
   b6ffa:	218c      	movs	r1, #140	; 0x8c
   b6ffc:	f7fe fa64 	bl	b54c8 <system_reset>
}
   b7000:	b003      	add	sp, #12
   b7002:	f85d fb04 	ldr.w	pc, [sp], #4

000b7006 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b7006:	4601      	mov	r1, r0
    reset(0, flags);
   b7008:	2000      	movs	r0, #0
   b700a:	f7ff bff0 	b.w	b6fee <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b700e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b700e:	2000      	movs	r0, #0
   b7010:	f7ff bff9 	b.w	b7006 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b7014 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7014:	4b05      	ldr	r3, [pc, #20]	; (b702c <_GLOBAL__sub_I_System+0x18>)
   b7016:	2202      	movs	r2, #2
   b7018:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b701a:	4b05      	ldr	r3, [pc, #20]	; (b7030 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b701c:	4a05      	ldr	r2, [pc, #20]	; (b7034 <_GLOBAL__sub_I_System+0x20>)
   b701e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7020:	2000      	movs	r0, #0
   b7022:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7026:	f7fe ba23 	b.w	b5470 <set_system_mode>
   b702a:	bf00      	nop
   b702c:	2003e6f4 	.word	0x2003e6f4
   b7030:	2003e6e8 	.word	0x2003e6e8
   b7034:	ffff0000 	.word	0xffff0000

000b7038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7038:	4b02      	ldr	r3, [pc, #8]	; (b7044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b703a:	681a      	ldr	r2, [r3, #0]
   b703c:	4b02      	ldr	r3, [pc, #8]	; (b7048 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b703e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7040:	4770      	bx	lr
   b7042:	bf00      	nop
   b7044:	2003e548 	.word	0x2003e548
   b7048:	2003e6f8 	.word	0x2003e6f8

000b704c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b704c:	4770      	bx	lr

000b704e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b704e:	7441      	strb	r1, [r0, #17]
}
   b7050:	4770      	bx	lr

000b7052 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7052:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7054:	7c00      	ldrb	r0, [r0, #16]
   b7056:	f7fe f98b 	bl	b5370 <hal_usart_available_data_for_write>
}
   b705a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b705e:	bd08      	pop	{r3, pc}

000b7060 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7060:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7062:	7c00      	ldrb	r0, [r0, #16]
   b7064:	f7fe f95c 	bl	b5320 <hal_usart_available>
}
   b7068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b706c:	bd08      	pop	{r3, pc}

000b706e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b706e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7070:	7c00      	ldrb	r0, [r0, #16]
   b7072:	f7fe f965 	bl	b5340 <hal_usart_peek>
}
   b7076:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b707a:	bd08      	pop	{r3, pc}

000b707c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b707c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b707e:	7c00      	ldrb	r0, [r0, #16]
   b7080:	f7fe f956 	bl	b5330 <hal_usart_read>
}
   b7084:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7088:	bd08      	pop	{r3, pc}

000b708a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b708a:	7c00      	ldrb	r0, [r0, #16]
   b708c:	f7fe b960 	b.w	b5350 <hal_usart_flush>

000b7090 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7092:	7c45      	ldrb	r5, [r0, #17]
{
   b7094:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7096:	b12d      	cbz	r5, b70a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7098:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b709a:	b003      	add	sp, #12
   b709c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b70a0:	f7fe b936 	b.w	b5310 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b70a4:	7c00      	ldrb	r0, [r0, #16]
   b70a6:	9101      	str	r1, [sp, #4]
   b70a8:	f7fe f962 	bl	b5370 <hal_usart_available_data_for_write>
   b70ac:	2800      	cmp	r0, #0
   b70ae:	9901      	ldr	r1, [sp, #4]
   b70b0:	dcf2      	bgt.n	b7098 <_ZN11USARTSerial5writeEh+0x8>
}
   b70b2:	4628      	mov	r0, r5
   b70b4:	b003      	add	sp, #12
   b70b6:	bd30      	pop	{r4, r5, pc}

000b70b8 <_ZN11USARTSerialD0Ev>:
   b70b8:	b510      	push	{r4, lr}
   b70ba:	2114      	movs	r1, #20
   b70bc:	4604      	mov	r4, r0
   b70be:	f7fc ffec 	bl	b409a <_ZdlPvj>
   b70c2:	4620      	mov	r0, r4
   b70c4:	bd10      	pop	{r4, pc}
	...

000b70c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b70c8:	b510      	push	{r4, lr}
   b70ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70ce:	4604      	mov	r4, r0
   b70d0:	4608      	mov	r0, r1
   b70d2:	4611      	mov	r1, r2
   b70d4:	2200      	movs	r2, #0
   b70d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70da:	4b04      	ldr	r3, [pc, #16]	; (b70ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b70dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b70de:	2301      	movs	r3, #1
  _serial = serial;
   b70e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b70e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b70e4:	f7fe f954 	bl	b5390 <hal_usart_init_ex>
}
   b70e8:	4620      	mov	r0, r4
   b70ea:	bd10      	pop	{r4, pc}
   b70ec:	000b7ea8 	.word	0x000b7ea8

000b70f0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b70f0:	7c00      	ldrb	r0, [r0, #16]
   b70f2:	2300      	movs	r3, #0
   b70f4:	f7fe b944 	b.w	b5380 <hal_usart_begin_config>

000b70f8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b70f8:	2200      	movs	r2, #0
   b70fa:	f7ff bff9 	b.w	b70f0 <_ZN11USARTSerial5beginEmm>

000b70fe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b70fe:	7c00      	ldrb	r0, [r0, #16]
   b7100:	f7fe b8fe 	b.w	b5300 <hal_usart_end>

000b7104 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7104:	7441      	strb	r1, [r0, #17]
}
   b7106:	4770      	bx	lr

000b7108 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7108:	4770      	bx	lr

000b710a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b710a:	4770      	bx	lr

000b710c <_ZN9USBSerial4readEv>:
{
   b710c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b710e:	2100      	movs	r1, #0
   b7110:	7c00      	ldrb	r0, [r0, #16]
   b7112:	f7fe f96d 	bl	b53f0 <HAL_USB_USART_Receive_Data>
}
   b7116:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b711a:	bd08      	pop	{r3, pc}

000b711c <_ZN9USBSerial4peekEv>:
{
   b711c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b711e:	2101      	movs	r1, #1
   b7120:	7c00      	ldrb	r0, [r0, #16]
   b7122:	f7fe f965 	bl	b53f0 <HAL_USB_USART_Receive_Data>
}
   b7126:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b712a:	bd08      	pop	{r3, pc}

000b712c <_ZN9USBSerial17availableForWriteEv>:
{
   b712c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b712e:	7c00      	ldrb	r0, [r0, #16]
   b7130:	f7fe f956 	bl	b53e0 <HAL_USB_USART_Available_Data_For_Write>
}
   b7134:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7138:	bd08      	pop	{r3, pc}

000b713a <_ZN9USBSerial9availableEv>:
{
   b713a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b713c:	7c00      	ldrb	r0, [r0, #16]
   b713e:	f7fe f947 	bl	b53d0 <HAL_USB_USART_Available_Data>
}
   b7142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7146:	bd08      	pop	{r3, pc}

000b7148 <_ZN9USBSerial5writeEh>:
{
   b7148:	b513      	push	{r0, r1, r4, lr}
   b714a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b714c:	7c00      	ldrb	r0, [r0, #16]
{
   b714e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7150:	f7fe f946 	bl	b53e0 <HAL_USB_USART_Available_Data_For_Write>
   b7154:	2800      	cmp	r0, #0
   b7156:	9901      	ldr	r1, [sp, #4]
   b7158:	dc01      	bgt.n	b715e <_ZN9USBSerial5writeEh+0x16>
   b715a:	7c60      	ldrb	r0, [r4, #17]
   b715c:	b120      	cbz	r0, b7168 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b715e:	7c20      	ldrb	r0, [r4, #16]
   b7160:	f7fe f94e 	bl	b5400 <HAL_USB_USART_Send_Data>
   b7164:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7168:	b002      	add	sp, #8
   b716a:	bd10      	pop	{r4, pc}

000b716c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b716c:	7c00      	ldrb	r0, [r0, #16]
   b716e:	f7fe b94f 	b.w	b5410 <HAL_USB_USART_Flush_Data>

000b7172 <_ZN9USBSerialD0Ev>:
   b7172:	b510      	push	{r4, lr}
   b7174:	2114      	movs	r1, #20
   b7176:	4604      	mov	r4, r0
   b7178:	f7fc ff8f 	bl	b409a <_ZdlPvj>
   b717c:	4620      	mov	r0, r4
   b717e:	bd10      	pop	{r4, pc}

000b7180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7180:	b510      	push	{r4, lr}
   b7182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7186:	4604      	mov	r4, r0
   b7188:	4608      	mov	r0, r1
   b718a:	2100      	movs	r1, #0
   b718c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7190:	4b04      	ldr	r3, [pc, #16]	; (b71a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7192:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7194:	2301      	movs	r3, #1
  _serial = serial;
   b7196:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7198:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b719a:	4611      	mov	r1, r2
   b719c:	f7fe f900 	bl	b53a0 <HAL_USB_USART_Init>
}
   b71a0:	4620      	mov	r0, r4
   b71a2:	bd10      	pop	{r4, pc}
   b71a4:	000b7ed8 	.word	0x000b7ed8

000b71a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b71a8:	7c00      	ldrb	r0, [r0, #16]
   b71aa:	2200      	movs	r2, #0
   b71ac:	f7fe b900 	b.w	b53b0 <HAL_USB_USART_Begin>

000b71b0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b71b0:	7c00      	ldrb	r0, [r0, #16]
   b71b2:	f7fe b905 	b.w	b53c0 <HAL_USB_USART_End>

000b71b6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b71b6:	7c00      	ldrb	r0, [r0, #16]
   b71b8:	f7fe b932 	b.w	b5420 <HAL_USB_USART_Is_Connected>

000b71bc <_Z19acquireSerialBufferv>:
{
   b71bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b71be:	2214      	movs	r2, #20
{
   b71c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b71c2:	2100      	movs	r1, #0
   b71c4:	f000 f9f8 	bl	b75b8 <memset>
}
   b71c8:	4620      	mov	r0, r4
   b71ca:	bd10      	pop	{r4, pc}

000b71cc <_Z16_fetch_usbserialv>:
{
   b71cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b71ce:	4c0f      	ldr	r4, [pc, #60]	; (b720c <_Z16_fetch_usbserialv+0x40>)
{
   b71d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b71d2:	a803      	add	r0, sp, #12
   b71d4:	f7ff fff2 	bl	b71bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b71d8:	7821      	ldrb	r1, [r4, #0]
   b71da:	f3bf 8f5b 	dmb	ish
   b71de:	f011 0101 	ands.w	r1, r1, #1
   b71e2:	d10f      	bne.n	b7204 <_Z16_fetch_usbserialv+0x38>
   b71e4:	4620      	mov	r0, r4
   b71e6:	9101      	str	r1, [sp, #4]
   b71e8:	f7fc ff66 	bl	b40b8 <__cxa_guard_acquire>
   b71ec:	9901      	ldr	r1, [sp, #4]
   b71ee:	b148      	cbz	r0, b7204 <_Z16_fetch_usbserialv+0x38>
   b71f0:	aa03      	add	r2, sp, #12
   b71f2:	4807      	ldr	r0, [pc, #28]	; (b7210 <_Z16_fetch_usbserialv+0x44>)
   b71f4:	f7ff ffc4 	bl	b7180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b71f8:	4620      	mov	r0, r4
   b71fa:	f7fc ff62 	bl	b40c2 <__cxa_guard_release>
   b71fe:	4805      	ldr	r0, [pc, #20]	; (b7214 <_Z16_fetch_usbserialv+0x48>)
   b7200:	f000 f9a4 	bl	b754c <atexit>
	return _usbserial;
}
   b7204:	4802      	ldr	r0, [pc, #8]	; (b7210 <_Z16_fetch_usbserialv+0x44>)
   b7206:	b008      	add	sp, #32
   b7208:	bd10      	pop	{r4, pc}
   b720a:	bf00      	nop
   b720c:	2003e6fc 	.word	0x2003e6fc
   b7210:	2003e700 	.word	0x2003e700
   b7214:	000b7109 	.word	0x000b7109

000b7218 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7218:	4b01      	ldr	r3, [pc, #4]	; (b7220 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b721a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b721c:	4770      	bx	lr
   b721e:	bf00      	nop
   b7220:	2003e54c 	.word	0x2003e54c

000b7224 <serialEventRun>:
{
   b7224:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7226:	4b0b      	ldr	r3, [pc, #44]	; (b7254 <serialEventRun+0x30>)
   b7228:	b143      	cbz	r3, b723c <serialEventRun+0x18>
   b722a:	f7ff ffcf 	bl	b71cc <_Z16_fetch_usbserialv>
   b722e:	6803      	ldr	r3, [r0, #0]
   b7230:	691b      	ldr	r3, [r3, #16]
   b7232:	4798      	blx	r3
   b7234:	2800      	cmp	r0, #0
   b7236:	dd01      	ble.n	b723c <serialEventRun+0x18>
        serialEvent();
   b7238:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b723c:	4b06      	ldr	r3, [pc, #24]	; (b7258 <serialEventRun+0x34>)
   b723e:	b143      	cbz	r3, b7252 <serialEventRun+0x2e>
   b7240:	f000 f95c 	bl	b74fc <_Z22__fetch_global_Serial1v>
   b7244:	6803      	ldr	r3, [r0, #0]
   b7246:	691b      	ldr	r3, [r3, #16]
   b7248:	4798      	blx	r3
   b724a:	2800      	cmp	r0, #0
   b724c:	dd01      	ble.n	b7252 <serialEventRun+0x2e>
        serialEvent1();
   b724e:	f3af 8000 	nop.w
}
   b7252:	bd08      	pop	{r3, pc}
	...

000b725c <_post_loop>:
{
   b725c:	b508      	push	{r3, lr}
	serialEventRun();
   b725e:	f7ff ffe1 	bl	b7224 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7262:	f7fd ff9d 	bl	b51a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7266:	4b01      	ldr	r3, [pc, #4]	; (b726c <_post_loop+0x10>)
   b7268:	6018      	str	r0, [r3, #0]
}
   b726a:	bd08      	pop	{r3, pc}
   b726c:	2003e728 	.word	0x2003e728

000b7270 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7270:	4805      	ldr	r0, [pc, #20]	; (b7288 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7272:	4a06      	ldr	r2, [pc, #24]	; (b728c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7274:	4906      	ldr	r1, [pc, #24]	; (b7290 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7276:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7278:	1a12      	subs	r2, r2, r0
   b727a:	f000 f975 	bl	b7568 <memcpy>
    __backup_sram_signature = signature;
   b727e:	4b05      	ldr	r3, [pc, #20]	; (b7294 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7280:	4a05      	ldr	r2, [pc, #20]	; (b7298 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7282:	601a      	str	r2, [r3, #0]
}
   b7284:	bd08      	pop	{r3, pc}
   b7286:	bf00      	nop
   b7288:	2003f400 	.word	0x2003f400
   b728c:	2003f404 	.word	0x2003f404
   b7290:	000b80c4 	.word	0x000b80c4
   b7294:	2003f400 	.word	0x2003f400
   b7298:	9a271c1e 	.word	0x9a271c1e

000b729c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b729c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b729e:	2300      	movs	r3, #0
   b72a0:	9300      	str	r3, [sp, #0]
   b72a2:	461a      	mov	r2, r3
   b72a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72a8:	f7fe f904 	bl	b54b4 <system_ctrl_set_result>
}
   b72ac:	b003      	add	sp, #12
   b72ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b72b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b72b6:	8843      	ldrh	r3, [r0, #2]
   b72b8:	2b0a      	cmp	r3, #10
   b72ba:	d008      	beq.n	b72ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b72bc:	2b50      	cmp	r3, #80	; 0x50
   b72be:	d10b      	bne.n	b72d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b72c0:	4b09      	ldr	r3, [pc, #36]	; (b72e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b72c2:	681b      	ldr	r3, [r3, #0]
   b72c4:	b14b      	cbz	r3, b72da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b72c6:	b003      	add	sp, #12
   b72c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b72cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b72ce:	f7ff ffe5 	bl	b729c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b72d2:	b003      	add	sp, #12
   b72d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72d8:	2300      	movs	r3, #0
   b72da:	9300      	str	r3, [sp, #0]
   b72dc:	461a      	mov	r2, r3
   b72de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72e2:	f7fe f8e7 	bl	b54b4 <system_ctrl_set_result>
}
   b72e6:	e7f4      	b.n	b72d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b72e8:	2003e718 	.word	0x2003e718

000b72ec <module_user_init_hook>:
{
   b72ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b72ee:	4812      	ldr	r0, [pc, #72]	; (b7338 <module_user_init_hook+0x4c>)
   b72f0:	2100      	movs	r1, #0
   b72f2:	f7fe f993 	bl	b561c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b72f6:	4b11      	ldr	r3, [pc, #68]	; (b733c <module_user_init_hook+0x50>)
   b72f8:	681a      	ldr	r2, [r3, #0]
   b72fa:	4b11      	ldr	r3, [pc, #68]	; (b7340 <module_user_init_hook+0x54>)
   b72fc:	429a      	cmp	r2, r3
   b72fe:	4b11      	ldr	r3, [pc, #68]	; (b7344 <module_user_init_hook+0x58>)
   b7300:	bf0c      	ite	eq
   b7302:	2201      	moveq	r2, #1
   b7304:	2200      	movne	r2, #0
   b7306:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7308:	d001      	beq.n	b730e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b730a:	f7ff ffb1 	bl	b7270 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b730e:	f7fd ff37 	bl	b5180 <HAL_RNG_GetRandomNumber>
   b7312:	4604      	mov	r4, r0
    srand(seed);
   b7314:	f000 f958 	bl	b75c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7318:	4b0b      	ldr	r3, [pc, #44]	; (b7348 <module_user_init_hook+0x5c>)
   b731a:	b113      	cbz	r3, b7322 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b731c:	4620      	mov	r0, r4
   b731e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7322:	2100      	movs	r1, #0
   b7324:	4808      	ldr	r0, [pc, #32]	; (b7348 <module_user_init_hook+0x5c>)
   b7326:	f7fe f8e1 	bl	b54ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b732a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b732e:	4807      	ldr	r0, [pc, #28]	; (b734c <module_user_init_hook+0x60>)
   b7330:	2100      	movs	r1, #0
   b7332:	f7fe b8b5 	b.w	b54a0 <system_ctrl_set_app_request_handler>
   b7336:	bf00      	nop
   b7338:	000b7219 	.word	0x000b7219
   b733c:	2003f400 	.word	0x2003f400
   b7340:	9a271c1e 	.word	0x9a271c1e
   b7344:	2003e714 	.word	0x2003e714
   b7348:	00000000 	.word	0x00000000
   b734c:	000b72b5 	.word	0x000b72b5

000b7350 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7350:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7352:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7354:	d902      	bls.n	b735c <pinAvailable+0xc>
    return false;
   b7356:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7358:	b002      	add	sp, #8
   b735a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b735c:	f1a0 030b 	sub.w	r3, r0, #11
   b7360:	2b02      	cmp	r3, #2
   b7362:	d81a      	bhi.n	b739a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7364:	4c17      	ldr	r4, [pc, #92]	; (b73c4 <pinAvailable+0x74>)
   b7366:	7821      	ldrb	r1, [r4, #0]
   b7368:	f3bf 8f5b 	dmb	ish
   b736c:	f011 0101 	ands.w	r1, r1, #1
   b7370:	d10b      	bne.n	b738a <pinAvailable+0x3a>
   b7372:	4620      	mov	r0, r4
   b7374:	9101      	str	r1, [sp, #4]
   b7376:	f7fc fe9f 	bl	b40b8 <__cxa_guard_acquire>
   b737a:	9901      	ldr	r1, [sp, #4]
   b737c:	b128      	cbz	r0, b738a <pinAvailable+0x3a>
   b737e:	4812      	ldr	r0, [pc, #72]	; (b73c8 <pinAvailable+0x78>)
   b7380:	f7ff fd9e 	bl	b6ec0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7384:	4620      	mov	r0, r4
   b7386:	f7fc fe9c 	bl	b40c2 <__cxa_guard_release>
   b738a:	4b0f      	ldr	r3, [pc, #60]	; (b73c8 <pinAvailable+0x78>)
   b738c:	7818      	ldrb	r0, [r3, #0]
   b738e:	f7fd ffaf 	bl	b52f0 <hal_spi_is_enabled>
   b7392:	2800      	cmp	r0, #0
   b7394:	d1df      	bne.n	b7356 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7396:	2001      	movs	r0, #1
   b7398:	e7de      	b.n	b7358 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b739a:	2801      	cmp	r0, #1
   b739c:	d809      	bhi.n	b73b2 <pinAvailable+0x62>
   b739e:	f000 f86d 	bl	b747c <_Z19__fetch_global_Wirev>
   b73a2:	2100      	movs	r1, #0
   b73a4:	7c00      	ldrb	r0, [r0, #16]
   b73a6:	f7fd ff6b 	bl	b5280 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b73aa:	f080 0001 	eor.w	r0, r0, #1
   b73ae:	b2c0      	uxtb	r0, r0
   b73b0:	e7d2      	b.n	b7358 <pinAvailable+0x8>
   b73b2:	3809      	subs	r0, #9
   b73b4:	2801      	cmp	r0, #1
   b73b6:	d8ee      	bhi.n	b7396 <pinAvailable+0x46>
   b73b8:	f000 f8a0 	bl	b74fc <_Z22__fetch_global_Serial1v>
   b73bc:	7c00      	ldrb	r0, [r0, #16]
   b73be:	f7fd ffcf 	bl	b5360 <hal_usart_is_enabled>
   b73c2:	e7f2      	b.n	b73aa <pinAvailable+0x5a>
   b73c4:	2003e71c 	.word	0x2003e71c
   b73c8:	2003e720 	.word	0x2003e720

000b73cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b73cc:	2823      	cmp	r0, #35	; 0x23
{
   b73ce:	b538      	push	{r3, r4, r5, lr}
   b73d0:	4604      	mov	r4, r0
   b73d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b73d4:	d80a      	bhi.n	b73ec <pinMode+0x20>
   b73d6:	29ff      	cmp	r1, #255	; 0xff
   b73d8:	d008      	beq.n	b73ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b73da:	f7ff ffb9 	bl	b7350 <pinAvailable>
   b73de:	b128      	cbz	r0, b73ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b73e0:	4629      	mov	r1, r5
   b73e2:	4620      	mov	r0, r4
}
   b73e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b73e8:	f7fd beea 	b.w	b51c0 <HAL_Pin_Mode>
}
   b73ec:	bd38      	pop	{r3, r4, r5, pc}

000b73ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b73ee:	b538      	push	{r3, r4, r5, lr}
   b73f0:	4604      	mov	r4, r0
   b73f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b73f4:	f7fd feec 	bl	b51d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b73f8:	28ff      	cmp	r0, #255	; 0xff
   b73fa:	d010      	beq.n	b741e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b73fc:	2806      	cmp	r0, #6
   b73fe:	d804      	bhi.n	b740a <digitalWrite+0x1c>
   b7400:	234d      	movs	r3, #77	; 0x4d
   b7402:	fa23 f000 	lsr.w	r0, r3, r0
   b7406:	07c3      	lsls	r3, r0, #31
   b7408:	d409      	bmi.n	b741e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b740a:	4620      	mov	r0, r4
   b740c:	f7ff ffa0 	bl	b7350 <pinAvailable>
   b7410:	b128      	cbz	r0, b741e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7412:	4629      	mov	r1, r5
   b7414:	4620      	mov	r0, r4
}
   b7416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b741a:	f7fd bee1 	b.w	b51e0 <HAL_GPIO_Write>
}
   b741e:	bd38      	pop	{r3, r4, r5, pc}

000b7420 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7420:	b510      	push	{r4, lr}
   b7422:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7424:	f7fd fed4 	bl	b51d0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7428:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b742a:	b2db      	uxtb	r3, r3
   b742c:	2b01      	cmp	r3, #1
   b742e:	d908      	bls.n	b7442 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7430:	4620      	mov	r0, r4
   b7432:	f7ff ff8d 	bl	b7350 <pinAvailable>
   b7436:	b120      	cbz	r0, b7442 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7438:	4620      	mov	r0, r4
}
   b743a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b743e:	f7fd bed7 	b.w	b51f0 <HAL_GPIO_Read>
}
   b7442:	2000      	movs	r0, #0
   b7444:	bd10      	pop	{r4, pc}

000b7446 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7446:	4770      	bx	lr

000b7448 <_Z17acquireWireBufferv>:
{
   b7448:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b744a:	4b0a      	ldr	r3, [pc, #40]	; (b7474 <_Z17acquireWireBufferv+0x2c>)
   b744c:	6003      	str	r3, [r0, #0]
   b744e:	2301      	movs	r3, #1
{
   b7450:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7452:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7454:	4908      	ldr	r1, [pc, #32]	; (b7478 <_Z17acquireWireBufferv+0x30>)
   b7456:	2020      	movs	r0, #32
   b7458:	f000 f876 	bl	b7548 <_ZnajRKSt9nothrow_t>
	};
   b745c:	2520      	movs	r5, #32
   b745e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7460:	4905      	ldr	r1, [pc, #20]	; (b7478 <_Z17acquireWireBufferv+0x30>)
	};
   b7462:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7464:	4628      	mov	r0, r5
   b7466:	f000 f86f 	bl	b7548 <_ZnajRKSt9nothrow_t>
	};
   b746a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b746e:	4620      	mov	r0, r4
   b7470:	bd38      	pop	{r3, r4, r5, pc}
   b7472:	bf00      	nop
   b7474:	00010018 	.word	0x00010018
   b7478:	000b7f00 	.word	0x000b7f00

000b747c <_Z19__fetch_global_Wirev>:
{
   b747c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b747e:	4d0e      	ldr	r5, [pc, #56]	; (b74b8 <_Z19__fetch_global_Wirev+0x3c>)
   b7480:	7829      	ldrb	r1, [r5, #0]
   b7482:	f3bf 8f5b 	dmb	ish
   b7486:	f011 0401 	ands.w	r4, r1, #1
{
   b748a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b748c:	d111      	bne.n	b74b2 <_Z19__fetch_global_Wirev+0x36>
   b748e:	4628      	mov	r0, r5
   b7490:	f7fc fe12 	bl	b40b8 <__cxa_guard_acquire>
   b7494:	b168      	cbz	r0, b74b2 <_Z19__fetch_global_Wirev+0x36>
   b7496:	4668      	mov	r0, sp
   b7498:	f7ff ffd6 	bl	b7448 <_Z17acquireWireBufferv>
   b749c:	466a      	mov	r2, sp
   b749e:	4621      	mov	r1, r4
   b74a0:	4806      	ldr	r0, [pc, #24]	; (b74bc <_Z19__fetch_global_Wirev+0x40>)
   b74a2:	f7fe f9b3 	bl	b580c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b74a6:	4628      	mov	r0, r5
   b74a8:	f7fc fe0b 	bl	b40c2 <__cxa_guard_release>
   b74ac:	4804      	ldr	r0, [pc, #16]	; (b74c0 <_Z19__fetch_global_Wirev+0x44>)
   b74ae:	f000 f84d 	bl	b754c <atexit>
	return wire;
}
   b74b2:	4802      	ldr	r0, [pc, #8]	; (b74bc <_Z19__fetch_global_Wirev+0x40>)
   b74b4:	b007      	add	sp, #28
   b74b6:	bd30      	pop	{r4, r5, pc}
   b74b8:	2003e72c 	.word	0x2003e72c
   b74bc:	2003e730 	.word	0x2003e730
   b74c0:	000b7447 	.word	0x000b7447

000b74c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b74c4:	4770      	bx	lr
	...

000b74c8 <_Z20acquireSerial1Bufferv>:
{
   b74c8:	b538      	push	{r3, r4, r5, lr}
   b74ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b74cc:	2514      	movs	r5, #20
   b74ce:	462a      	mov	r2, r5
   b74d0:	2100      	movs	r1, #0
   b74d2:	f000 f871 	bl	b75b8 <memset>
   b74d6:	8025      	strh	r5, [r4, #0]
   b74d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74da:	4907      	ldr	r1, [pc, #28]	; (b74f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b74dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b74e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74e2:	f000 f831 	bl	b7548 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74e6:	4904      	ldr	r1, [pc, #16]	; (b74f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b74e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b74ea:	4628      	mov	r0, r5
   b74ec:	f000 f82c 	bl	b7548 <_ZnajRKSt9nothrow_t>
    };
   b74f0:	60e0      	str	r0, [r4, #12]
}
   b74f2:	4620      	mov	r0, r4
   b74f4:	bd38      	pop	{r3, r4, r5, pc}
   b74f6:	bf00      	nop
   b74f8:	000b7f00 	.word	0x000b7f00

000b74fc <_Z22__fetch_global_Serial1v>:
{
   b74fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b74fe:	4d0e      	ldr	r5, [pc, #56]	; (b7538 <_Z22__fetch_global_Serial1v+0x3c>)
   b7500:	7829      	ldrb	r1, [r5, #0]
   b7502:	f3bf 8f5b 	dmb	ish
   b7506:	f011 0401 	ands.w	r4, r1, #1
{
   b750a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b750c:	d111      	bne.n	b7532 <_Z22__fetch_global_Serial1v+0x36>
   b750e:	4628      	mov	r0, r5
   b7510:	f7fc fdd2 	bl	b40b8 <__cxa_guard_acquire>
   b7514:	b168      	cbz	r0, b7532 <_Z22__fetch_global_Serial1v+0x36>
   b7516:	a801      	add	r0, sp, #4
   b7518:	f7ff ffd6 	bl	b74c8 <_Z20acquireSerial1Bufferv>
   b751c:	aa01      	add	r2, sp, #4
   b751e:	4621      	mov	r1, r4
   b7520:	4806      	ldr	r0, [pc, #24]	; (b753c <_Z22__fetch_global_Serial1v+0x40>)
   b7522:	f7ff fdd1 	bl	b70c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7526:	4628      	mov	r0, r5
   b7528:	f7fc fdcb 	bl	b40c2 <__cxa_guard_release>
   b752c:	4804      	ldr	r0, [pc, #16]	; (b7540 <_Z22__fetch_global_Serial1v+0x44>)
   b752e:	f000 f80d 	bl	b754c <atexit>
    return serial1;
}
   b7532:	4802      	ldr	r0, [pc, #8]	; (b753c <_Z22__fetch_global_Serial1v+0x40>)
   b7534:	b007      	add	sp, #28
   b7536:	bd30      	pop	{r4, r5, pc}
   b7538:	2003e744 	.word	0x2003e744
   b753c:	2003e748 	.word	0x2003e748
   b7540:	000b74c5 	.word	0x000b74c5

000b7544 <_ZnwjRKSt9nothrow_t>:
   b7544:	f7fc bda5 	b.w	b4092 <_Znwj>

000b7548 <_ZnajRKSt9nothrow_t>:
   b7548:	f7fc bda5 	b.w	b4096 <_Znaj>

000b754c <atexit>:
   b754c:	2300      	movs	r3, #0
   b754e:	4601      	mov	r1, r0
   b7550:	461a      	mov	r2, r3
   b7552:	4618      	mov	r0, r3
   b7554:	f000 b94c 	b.w	b77f0 <__register_exitproc>

000b7558 <isprint>:
   b7558:	4b02      	ldr	r3, [pc, #8]	; (b7564 <isprint+0xc>)
   b755a:	4418      	add	r0, r3
   b755c:	7840      	ldrb	r0, [r0, #1]
   b755e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7562:	4770      	bx	lr
   b7564:	000b7f71 	.word	0x000b7f71

000b7568 <memcpy>:
   b7568:	440a      	add	r2, r1
   b756a:	4291      	cmp	r1, r2
   b756c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7570:	d100      	bne.n	b7574 <memcpy+0xc>
   b7572:	4770      	bx	lr
   b7574:	b510      	push	{r4, lr}
   b7576:	f811 4b01 	ldrb.w	r4, [r1], #1
   b757a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b757e:	4291      	cmp	r1, r2
   b7580:	d1f9      	bne.n	b7576 <memcpy+0xe>
   b7582:	bd10      	pop	{r4, pc}

000b7584 <memmove>:
   b7584:	4288      	cmp	r0, r1
   b7586:	b510      	push	{r4, lr}
   b7588:	eb01 0402 	add.w	r4, r1, r2
   b758c:	d902      	bls.n	b7594 <memmove+0x10>
   b758e:	4284      	cmp	r4, r0
   b7590:	4623      	mov	r3, r4
   b7592:	d807      	bhi.n	b75a4 <memmove+0x20>
   b7594:	1e43      	subs	r3, r0, #1
   b7596:	42a1      	cmp	r1, r4
   b7598:	d008      	beq.n	b75ac <memmove+0x28>
   b759a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b759e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b75a2:	e7f8      	b.n	b7596 <memmove+0x12>
   b75a4:	4402      	add	r2, r0
   b75a6:	4601      	mov	r1, r0
   b75a8:	428a      	cmp	r2, r1
   b75aa:	d100      	bne.n	b75ae <memmove+0x2a>
   b75ac:	bd10      	pop	{r4, pc}
   b75ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b75b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b75b6:	e7f7      	b.n	b75a8 <memmove+0x24>

000b75b8 <memset>:
   b75b8:	4402      	add	r2, r0
   b75ba:	4603      	mov	r3, r0
   b75bc:	4293      	cmp	r3, r2
   b75be:	d100      	bne.n	b75c2 <memset+0xa>
   b75c0:	4770      	bx	lr
   b75c2:	f803 1b01 	strb.w	r1, [r3], #1
   b75c6:	e7f9      	b.n	b75bc <memset+0x4>

000b75c8 <srand>:
   b75c8:	b538      	push	{r3, r4, r5, lr}
   b75ca:	4b10      	ldr	r3, [pc, #64]	; (b760c <srand+0x44>)
   b75cc:	681d      	ldr	r5, [r3, #0]
   b75ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b75d0:	4604      	mov	r4, r0
   b75d2:	b9b3      	cbnz	r3, b7602 <srand+0x3a>
   b75d4:	2018      	movs	r0, #24
   b75d6:	f7fd fff1 	bl	b55bc <malloc>
   b75da:	4602      	mov	r2, r0
   b75dc:	63a8      	str	r0, [r5, #56]	; 0x38
   b75de:	b920      	cbnz	r0, b75ea <srand+0x22>
   b75e0:	4b0b      	ldr	r3, [pc, #44]	; (b7610 <srand+0x48>)
   b75e2:	480c      	ldr	r0, [pc, #48]	; (b7614 <srand+0x4c>)
   b75e4:	2142      	movs	r1, #66	; 0x42
   b75e6:	f7fe f811 	bl	b560c <__assert_func>
   b75ea:	490b      	ldr	r1, [pc, #44]	; (b7618 <srand+0x50>)
   b75ec:	4b0b      	ldr	r3, [pc, #44]	; (b761c <srand+0x54>)
   b75ee:	e9c0 1300 	strd	r1, r3, [r0]
   b75f2:	4b0b      	ldr	r3, [pc, #44]	; (b7620 <srand+0x58>)
   b75f4:	6083      	str	r3, [r0, #8]
   b75f6:	230b      	movs	r3, #11
   b75f8:	8183      	strh	r3, [r0, #12]
   b75fa:	2100      	movs	r1, #0
   b75fc:	2001      	movs	r0, #1
   b75fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7602:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7604:	2200      	movs	r2, #0
   b7606:	611c      	str	r4, [r3, #16]
   b7608:	615a      	str	r2, [r3, #20]
   b760a:	bd38      	pop	{r3, r4, r5, pc}
   b760c:	2003e54c 	.word	0x2003e54c
   b7610:	000b7f01 	.word	0x000b7f01
   b7614:	000b7f18 	.word	0x000b7f18
   b7618:	abcd330e 	.word	0xabcd330e
   b761c:	e66d1234 	.word	0xe66d1234
   b7620:	0005deec 	.word	0x0005deec

000b7624 <strchr>:
   b7624:	b2c9      	uxtb	r1, r1
   b7626:	4603      	mov	r3, r0
   b7628:	f810 2b01 	ldrb.w	r2, [r0], #1
   b762c:	b11a      	cbz	r2, b7636 <strchr+0x12>
   b762e:	428a      	cmp	r2, r1
   b7630:	d1f9      	bne.n	b7626 <strchr+0x2>
   b7632:	4618      	mov	r0, r3
   b7634:	4770      	bx	lr
   b7636:	2900      	cmp	r1, #0
   b7638:	bf18      	it	ne
   b763a:	2300      	movne	r3, #0
   b763c:	e7f9      	b.n	b7632 <strchr+0xe>

000b763e <strchrnul>:
   b763e:	b510      	push	{r4, lr}
   b7640:	4604      	mov	r4, r0
   b7642:	f7ff ffef 	bl	b7624 <strchr>
   b7646:	b918      	cbnz	r0, b7650 <strchrnul+0x12>
   b7648:	4620      	mov	r0, r4
   b764a:	f000 f814 	bl	b7676 <strlen>
   b764e:	4420      	add	r0, r4
   b7650:	bd10      	pop	{r4, pc}

000b7652 <strcmp>:
   b7652:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7656:	f811 3b01 	ldrb.w	r3, [r1], #1
   b765a:	2a01      	cmp	r2, #1
   b765c:	bf28      	it	cs
   b765e:	429a      	cmpcs	r2, r3
   b7660:	d0f7      	beq.n	b7652 <strcmp>
   b7662:	1ad0      	subs	r0, r2, r3
   b7664:	4770      	bx	lr

000b7666 <strcpy>:
   b7666:	4603      	mov	r3, r0
   b7668:	f811 2b01 	ldrb.w	r2, [r1], #1
   b766c:	f803 2b01 	strb.w	r2, [r3], #1
   b7670:	2a00      	cmp	r2, #0
   b7672:	d1f9      	bne.n	b7668 <strcpy+0x2>
   b7674:	4770      	bx	lr

000b7676 <strlen>:
   b7676:	4603      	mov	r3, r0
   b7678:	f813 2b01 	ldrb.w	r2, [r3], #1
   b767c:	2a00      	cmp	r2, #0
   b767e:	d1fb      	bne.n	b7678 <strlen+0x2>
   b7680:	1a18      	subs	r0, r3, r0
   b7682:	3801      	subs	r0, #1
   b7684:	4770      	bx	lr

000b7686 <strncmp>:
   b7686:	b510      	push	{r4, lr}
   b7688:	b17a      	cbz	r2, b76aa <strncmp+0x24>
   b768a:	4603      	mov	r3, r0
   b768c:	3901      	subs	r1, #1
   b768e:	1884      	adds	r4, r0, r2
   b7690:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7694:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7698:	4290      	cmp	r0, r2
   b769a:	d101      	bne.n	b76a0 <strncmp+0x1a>
   b769c:	42a3      	cmp	r3, r4
   b769e:	d101      	bne.n	b76a4 <strncmp+0x1e>
   b76a0:	1a80      	subs	r0, r0, r2
   b76a2:	bd10      	pop	{r4, pc}
   b76a4:	2800      	cmp	r0, #0
   b76a6:	d1f3      	bne.n	b7690 <strncmp+0xa>
   b76a8:	e7fa      	b.n	b76a0 <strncmp+0x1a>
   b76aa:	4610      	mov	r0, r2
   b76ac:	e7f9      	b.n	b76a2 <strncmp+0x1c>

000b76ae <strrchr>:
   b76ae:	b538      	push	{r3, r4, r5, lr}
   b76b0:	4603      	mov	r3, r0
   b76b2:	460c      	mov	r4, r1
   b76b4:	b969      	cbnz	r1, b76d2 <strrchr+0x24>
   b76b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b76ba:	f7ff bfb3 	b.w	b7624 <strchr>
   b76be:	1c43      	adds	r3, r0, #1
   b76c0:	4605      	mov	r5, r0
   b76c2:	4621      	mov	r1, r4
   b76c4:	4618      	mov	r0, r3
   b76c6:	f7ff ffad 	bl	b7624 <strchr>
   b76ca:	2800      	cmp	r0, #0
   b76cc:	d1f7      	bne.n	b76be <strrchr+0x10>
   b76ce:	4628      	mov	r0, r5
   b76d0:	bd38      	pop	{r3, r4, r5, pc}
   b76d2:	2500      	movs	r5, #0
   b76d4:	e7f5      	b.n	b76c2 <strrchr+0x14>
	...

000b76d8 <_strtol_l.constprop.0>:
   b76d8:	2b01      	cmp	r3, #1
   b76da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b76de:	d001      	beq.n	b76e4 <_strtol_l.constprop.0+0xc>
   b76e0:	2b24      	cmp	r3, #36	; 0x24
   b76e2:	d906      	bls.n	b76f2 <_strtol_l.constprop.0+0x1a>
   b76e4:	f7fd ff8a 	bl	b55fc <__errno>
   b76e8:	2316      	movs	r3, #22
   b76ea:	6003      	str	r3, [r0, #0]
   b76ec:	2000      	movs	r0, #0
   b76ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b77d8 <_strtol_l.constprop.0+0x100>
   b76f6:	460d      	mov	r5, r1
   b76f8:	462e      	mov	r6, r5
   b76fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   b76fe:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7702:	f017 0708 	ands.w	r7, r7, #8
   b7706:	d1f7      	bne.n	b76f8 <_strtol_l.constprop.0+0x20>
   b7708:	2c2d      	cmp	r4, #45	; 0x2d
   b770a:	d132      	bne.n	b7772 <_strtol_l.constprop.0+0x9a>
   b770c:	782c      	ldrb	r4, [r5, #0]
   b770e:	2701      	movs	r7, #1
   b7710:	1cb5      	adds	r5, r6, #2
   b7712:	2b00      	cmp	r3, #0
   b7714:	d05b      	beq.n	b77ce <_strtol_l.constprop.0+0xf6>
   b7716:	2b10      	cmp	r3, #16
   b7718:	d109      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b771a:	2c30      	cmp	r4, #48	; 0x30
   b771c:	d107      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b771e:	782c      	ldrb	r4, [r5, #0]
   b7720:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7724:	2c58      	cmp	r4, #88	; 0x58
   b7726:	d14d      	bne.n	b77c4 <_strtol_l.constprop.0+0xec>
   b7728:	786c      	ldrb	r4, [r5, #1]
   b772a:	2310      	movs	r3, #16
   b772c:	3502      	adds	r5, #2
   b772e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7732:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7736:	f04f 0c00 	mov.w	ip, #0
   b773a:	fbb8 f9f3 	udiv	r9, r8, r3
   b773e:	4666      	mov	r6, ip
   b7740:	fb03 8a19 	mls	sl, r3, r9, r8
   b7744:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7748:	f1be 0f09 	cmp.w	lr, #9
   b774c:	d816      	bhi.n	b777c <_strtol_l.constprop.0+0xa4>
   b774e:	4674      	mov	r4, lr
   b7750:	42a3      	cmp	r3, r4
   b7752:	dd24      	ble.n	b779e <_strtol_l.constprop.0+0xc6>
   b7754:	f1bc 0f00 	cmp.w	ip, #0
   b7758:	db1e      	blt.n	b7798 <_strtol_l.constprop.0+0xc0>
   b775a:	45b1      	cmp	r9, r6
   b775c:	d31c      	bcc.n	b7798 <_strtol_l.constprop.0+0xc0>
   b775e:	d101      	bne.n	b7764 <_strtol_l.constprop.0+0x8c>
   b7760:	45a2      	cmp	sl, r4
   b7762:	db19      	blt.n	b7798 <_strtol_l.constprop.0+0xc0>
   b7764:	fb06 4603 	mla	r6, r6, r3, r4
   b7768:	f04f 0c01 	mov.w	ip, #1
   b776c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7770:	e7e8      	b.n	b7744 <_strtol_l.constprop.0+0x6c>
   b7772:	2c2b      	cmp	r4, #43	; 0x2b
   b7774:	bf04      	itt	eq
   b7776:	782c      	ldrbeq	r4, [r5, #0]
   b7778:	1cb5      	addeq	r5, r6, #2
   b777a:	e7ca      	b.n	b7712 <_strtol_l.constprop.0+0x3a>
   b777c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7780:	f1be 0f19 	cmp.w	lr, #25
   b7784:	d801      	bhi.n	b778a <_strtol_l.constprop.0+0xb2>
   b7786:	3c37      	subs	r4, #55	; 0x37
   b7788:	e7e2      	b.n	b7750 <_strtol_l.constprop.0+0x78>
   b778a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b778e:	f1be 0f19 	cmp.w	lr, #25
   b7792:	d804      	bhi.n	b779e <_strtol_l.constprop.0+0xc6>
   b7794:	3c57      	subs	r4, #87	; 0x57
   b7796:	e7db      	b.n	b7750 <_strtol_l.constprop.0+0x78>
   b7798:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b779c:	e7e6      	b.n	b776c <_strtol_l.constprop.0+0x94>
   b779e:	f1bc 0f00 	cmp.w	ip, #0
   b77a2:	da05      	bge.n	b77b0 <_strtol_l.constprop.0+0xd8>
   b77a4:	2322      	movs	r3, #34	; 0x22
   b77a6:	6003      	str	r3, [r0, #0]
   b77a8:	4646      	mov	r6, r8
   b77aa:	b942      	cbnz	r2, b77be <_strtol_l.constprop.0+0xe6>
   b77ac:	4630      	mov	r0, r6
   b77ae:	e79e      	b.n	b76ee <_strtol_l.constprop.0+0x16>
   b77b0:	b107      	cbz	r7, b77b4 <_strtol_l.constprop.0+0xdc>
   b77b2:	4276      	negs	r6, r6
   b77b4:	2a00      	cmp	r2, #0
   b77b6:	d0f9      	beq.n	b77ac <_strtol_l.constprop.0+0xd4>
   b77b8:	f1bc 0f00 	cmp.w	ip, #0
   b77bc:	d000      	beq.n	b77c0 <_strtol_l.constprop.0+0xe8>
   b77be:	1e69      	subs	r1, r5, #1
   b77c0:	6011      	str	r1, [r2, #0]
   b77c2:	e7f3      	b.n	b77ac <_strtol_l.constprop.0+0xd4>
   b77c4:	2430      	movs	r4, #48	; 0x30
   b77c6:	2b00      	cmp	r3, #0
   b77c8:	d1b1      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b77ca:	2308      	movs	r3, #8
   b77cc:	e7af      	b.n	b772e <_strtol_l.constprop.0+0x56>
   b77ce:	2c30      	cmp	r4, #48	; 0x30
   b77d0:	d0a5      	beq.n	b771e <_strtol_l.constprop.0+0x46>
   b77d2:	230a      	movs	r3, #10
   b77d4:	e7ab      	b.n	b772e <_strtol_l.constprop.0+0x56>
   b77d6:	bf00      	nop
   b77d8:	000b7f72 	.word	0x000b7f72

000b77dc <strtol>:
   b77dc:	4613      	mov	r3, r2
   b77de:	460a      	mov	r2, r1
   b77e0:	4601      	mov	r1, r0
   b77e2:	4802      	ldr	r0, [pc, #8]	; (b77ec <strtol+0x10>)
   b77e4:	6800      	ldr	r0, [r0, #0]
   b77e6:	f7ff bf77 	b.w	b76d8 <_strtol_l.constprop.0>
   b77ea:	bf00      	nop
   b77ec:	2003e54c 	.word	0x2003e54c

000b77f0 <__register_exitproc>:
   b77f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b77f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b78b0 <__register_exitproc+0xc0>
   b77f8:	4606      	mov	r6, r0
   b77fa:	f8d8 0000 	ldr.w	r0, [r8]
   b77fe:	461f      	mov	r7, r3
   b7800:	460d      	mov	r5, r1
   b7802:	4691      	mov	r9, r2
   b7804:	f000 f856 	bl	b78b4 <__retarget_lock_acquire_recursive>
   b7808:	4b25      	ldr	r3, [pc, #148]	; (b78a0 <__register_exitproc+0xb0>)
   b780a:	681c      	ldr	r4, [r3, #0]
   b780c:	b934      	cbnz	r4, b781c <__register_exitproc+0x2c>
   b780e:	4c25      	ldr	r4, [pc, #148]	; (b78a4 <__register_exitproc+0xb4>)
   b7810:	601c      	str	r4, [r3, #0]
   b7812:	4b25      	ldr	r3, [pc, #148]	; (b78a8 <__register_exitproc+0xb8>)
   b7814:	b113      	cbz	r3, b781c <__register_exitproc+0x2c>
   b7816:	681b      	ldr	r3, [r3, #0]
   b7818:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b781c:	6863      	ldr	r3, [r4, #4]
   b781e:	2b1f      	cmp	r3, #31
   b7820:	dd07      	ble.n	b7832 <__register_exitproc+0x42>
   b7822:	f8d8 0000 	ldr.w	r0, [r8]
   b7826:	f000 f847 	bl	b78b8 <__retarget_lock_release_recursive>
   b782a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7832:	b34e      	cbz	r6, b7888 <__register_exitproc+0x98>
   b7834:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7838:	b988      	cbnz	r0, b785e <__register_exitproc+0x6e>
   b783a:	4b1c      	ldr	r3, [pc, #112]	; (b78ac <__register_exitproc+0xbc>)
   b783c:	b923      	cbnz	r3, b7848 <__register_exitproc+0x58>
   b783e:	f8d8 0000 	ldr.w	r0, [r8]
   b7842:	f000 f838 	bl	b78b6 <__retarget_lock_release>
   b7846:	e7f0      	b.n	b782a <__register_exitproc+0x3a>
   b7848:	f44f 7084 	mov.w	r0, #264	; 0x108
   b784c:	f7fd feb6 	bl	b55bc <malloc>
   b7850:	2800      	cmp	r0, #0
   b7852:	d0f4      	beq.n	b783e <__register_exitproc+0x4e>
   b7854:	2300      	movs	r3, #0
   b7856:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b785a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b785e:	6863      	ldr	r3, [r4, #4]
   b7860:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7864:	2201      	movs	r2, #1
   b7866:	409a      	lsls	r2, r3
   b7868:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b786c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7870:	4313      	orrs	r3, r2
   b7872:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7876:	2e02      	cmp	r6, #2
   b7878:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b787c:	bf02      	ittt	eq
   b787e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7882:	4313      	orreq	r3, r2
   b7884:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7888:	6863      	ldr	r3, [r4, #4]
   b788a:	f8d8 0000 	ldr.w	r0, [r8]
   b788e:	1c5a      	adds	r2, r3, #1
   b7890:	3302      	adds	r3, #2
   b7892:	6062      	str	r2, [r4, #4]
   b7894:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7898:	f000 f80e 	bl	b78b8 <__retarget_lock_release_recursive>
   b789c:	2000      	movs	r0, #0
   b789e:	e7c6      	b.n	b782e <__register_exitproc+0x3e>
   b78a0:	2003e7e8 	.word	0x2003e7e8
   b78a4:	2003e75c 	.word	0x2003e75c
   b78a8:	00000000 	.word	0x00000000
   b78ac:	000b55bd 	.word	0x000b55bd
   b78b0:	2003e5b0 	.word	0x2003e5b0

000b78b4 <__retarget_lock_acquire_recursive>:
   b78b4:	4770      	bx	lr

000b78b6 <__retarget_lock_release>:
   b78b6:	4770      	bx	lr

000b78b8 <__retarget_lock_release_recursive>:
   b78b8:	4770      	bx	lr

000b78ba <link_code_end>:
	...

000b78bc <dynalib_user>:
   b78bc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b78cc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b78dc:	7620 7269 7574 6c61 5300 6174 7472 7075      virtual.Startup
   b78ec:	2d20 4320 6d6f 6c70 7465 0065                - Complete.

000b78f8 <_ZTVN5spark10LogHandlerE>:
	...
   b7908:	40a1 000b 40f9 000b                         .@...@..

000b7910 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7918:	4105 000b 4139 000b 692d 000b 40fb 000b     .A..9A..-i...@..
   b7928:	6553 736e 726f 5420 6d69 6465 6f20 7475     Sensor Timed out
   b7938:	5400 7261 6567 2074 6f7a 656e 6920 2073     .Target zone is 
   b7948:	6c63 6165 2072 6977 6874 7a20 6e6f 3165     clear with zone1
   b7958:	6120 2074 6925 6d6d 6120 646e 7a20 6e6f      at %imm and zon
   b7968:	3265 6120 2074 6925 6d6d 5400 7261 6567     e2 at %imm.Targe
   b7978:	2074 6f7a 656e 6e20 746f 6320 656c 7261     t zone not clear
   b7988:	2d20 7720 6c69 206c 6177 7469 7420 6e65      - will wait ten
   b7998:	7320 6365 6e6f 7364 6120 646e 7420 7972      seconds and try
   b79a8:	6120 6167 6e69 5300 6e65 6f73 2072 7265      again.Sensor er
   b79b8:	6f72 2072 6572 6573 2074 6e69 3120 2030     ror reset in 10 
   b79c8:	6573 6f63 646e 0073 6553 736e 726f 6920     seconds.Sensor i
   b79d8:	696e 2074 7573 6363 7365 6673 6c75 796c     nit successfully
   b79e8:	4300 6c61 6269 6172 6974 6e6f 4320 6d6f     .Calibration Com
   b79f8:	6c70 7465 0065 6e49 7469 6169 206c 6163     plete.Initial ca
   b7a08:	696c 7262 7461 6f69 206e 6166 6c69 6465     libration failed
   b7a18:	2d20 7720 6961 2074 3031 7320 6365 2073      - wait 10 secs 
   b7a28:	6e61 2064 6572 6573 0074 0000               and reset...

000b7a34 <_ZTV9TofSensor>:
	...
   b7a3c:	43e5 000b 43e7 000b 2020 2020 2020 2020     .C...C..        
   b7a4c:	2d00 2d2d 2d2d 2d2d 002d 2020 3030 3030     .--------.  0000
   b7a5c:	2020 2000 2030 2020 3020 0020 2030 2020       . 0    0 .0   
   b7a6c:	2020 3020 2000 2020 3120 2031 0020 2020        0.    11  .  
   b7a7c:	3120 3120 2020 2000 2020 2020 2031 0020      1 1  .     1  .
   b7a8c:	2020 3120 3131 3131 2000 3220 3232 2032        11111.  2222 
   b7a9c:	0020 3220 2020 2020 3232 2000 2020 2020      . 2    22.     
   b7aac:	2032 0020 2020 3220 2020 2020 2000 3220     2  .   2    .  2
   b7abc:	2020 2020 0020 3232 2020 2020 3220 3200          .22     2.2
   b7acc:	3232 3232 3232 0020 2020 3333 3333 2020     222222 .  3333  
   b7adc:	2000 2033 2020 3320 0020 2020 2020 2020     . 3    3 .      
   b7aec:	3320 2000 2020 3333 2033 0020 2034 2020      3.   333  .4   
   b7afc:	2020 3420 2000 3420 3434 2034 0020 2020        4.  4444  .  
   b7b0c:	2020 2020 3420 2000 3520 3535 3535 0035          4.  555555.
   b7b1c:	3520 2020 2020 2020 2000 3535 3535 3535      5      . 555555
   b7b2c:	0020 2020 2020 2020 2035 2000 2020 2020      .      5 .     
   b7b3c:	2020 0035 2020 3636 3636 3636 2000 2036       5.  666666. 6 
   b7b4c:	2020 2020 0020 2020 3636 3636 2036 3600          .  66666 .6
   b7b5c:	2020 2020 2020 0036 3620 2020 2020 2036           6. 6    6 
   b7b6c:	2000 3620 3636 2036 0020 2020 3737 3737     .  6666  .  7777
   b7b7c:	3737 2000 2037 2020 2020 0037 2020 2020     77. 7     7.    
   b7b8c:	2020 2037 2000 2020 2020 2037 0020 2020       7 .     7  .  
   b7b9c:	2020 2037 2020 2000 2020 2037 2020 0020       7   .   7    .
   b7bac:	2020 2037 2020 2020 2000 3820 3838 2038       7     .  8888 
   b7bbc:	0020 3820 2020 2020 2038 3800 2020 2020      . 8    8 .8    
   b7bcc:	2020 0038 3920 3939 3939 2020 3900 2020       8. 99999  .9  
   b7bdc:	2020 3920 0020 2039 2020 2020 3920 2000        9 .9      9. 
   b7bec:	2020 2020 2020 0039 2020 2020 2020 2039           9.      9 
   b7bfc:	2000 3939 3939 3939 0020 2a2a 2a2a 2a2a     . 999999 .******
   b7c0c:	2a2a 0000                                   **..

000b7c10 <_ZTV13PeopleCounter>:
	...
   b7c18:	45e1 000b 45e3 000b                         .E...E..

000b7c20 <_ZTV7VL53L1X>:
	...
   b7c28:	4b07 000b 4ae7 000b 4ad1 000b 4a8d 000b     .K...J...J...J..
   b7c38:	4ac3 000b 4aa9 000b 4a8f 000b               .J...J...J..

000b7c44 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b7c44:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b7c54:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b7c64:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b7c74:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b7c84:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b7c94:	0200 ffc7 009b 0000 0001 0000               ............

000b7ca0 <_ZTVN5spark13CellularClassE>:
	...
   b7ca8:	56ff 000b 56f5 000b 56eb 000b 56a1 000b     .V...V...V...V..
   b7cb8:	56df 000b 56d3 000b 6c85 000b 6c8d 000b     .V...V...l...l..
   b7cc8:	56c7 000b 56bf 000b 56b5 000b 56ab 000b     .V...V...V...V..
   b7cd8:	6cbd 000b                                   .l..

000b7cdc <_ZTVN5spark13EthernetClassE>:
	...
   b7ce4:	5797 000b 578d 000b 5783 000b 5779 000b     .W...W...W..yW..
   b7cf4:	576d 000b 5761 000b 6c85 000b 6c8d 000b     mW..aW...l...l..
   b7d04:	5755 000b 574d 000b 5743 000b 5739 000b     UW..MW..CW..9W..
   b7d14:	6cbd 000b                                   .l..

000b7d18 <_ZTV7TwoWire>:
	...
   b7d20:	57b5 000b 57ff 000b 57d7 000b 57b7 000b     .W...W...W...W..
   b7d30:	57df 000b 57e7 000b 57ef 000b 57f7 000b     .W...W...W...W..

000b7d40 <_ZTV9IPAddress>:
	...
   b7d48:	58cd 000b 58bd 000b 58bf 000b 6425 2500     .X...X...X..%d.%
   b7d58:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b7d68:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b7d78:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b7d88:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b7d98:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b7da8:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b7db8:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
   b7dc8:	6564 6174 6c69 0000                         detail..

000b7dd0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7dd8:	5d79 000b 5d9f 000b 5d5d 000b 59db 000b     y]...]..]]...Y..

000b7de8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7df0:	61d5 000b 61ed 000b 692d 000b 40fb 000b     .a...a..-i...@..

000b7e00 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7e08:	6201 000b 6215 000b 6ad1 000b 5d65 000b     .b...b...j..e]..

000b7e18 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7e20:	5d77 000b 5dad 000b 6891 000b 5d67 000b     w]...]...h..g]..

000b7e30 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7e38:	5d75 000b 5dbb 000b 613d 000b 5ddd 000b     u]...]..=a...]..

000b7e48 <_ZTVN5spark12NetworkClassE>:
	...
   b7e50:	6c45 000b 6c4f 000b 6c59 000b 6c63 000b     El..Ol..Yl..cl..
   b7e60:	6c6d 000b 6c79 000b 6c85 000b 6c8d 000b     ml..yl...l...l..
   b7e70:	6c95 000b 6ca1 000b 6ca9 000b 6cb3 000b     .l...l...l...l..
   b7e80:	6cbd 000b 5925 252d 2d6d 6425 2554 3a48     .l..%Y-%m-%dT%H:
   b7e90:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7ea0 <_ZTV11USARTSerial>:
	...
   b7ea8:	704d 000b 70b9 000b 7091 000b 6da9 000b     Mp...p...p...m..
   b7eb8:	7061 000b 707d 000b 706f 000b 708b 000b     ap..}p..op...p..
   b7ec8:	704f 000b 7053 000b                         Op..Sp..

000b7ed0 <_ZTV9USBSerial>:
	...
   b7ed8:	710b 000b 7173 000b 7149 000b 6da9 000b     .q..sq..Iq...m..
   b7ee8:	713b 000b 710d 000b 711d 000b 716d 000b     ;q...q...q..mq..
   b7ef8:	712d 000b 7105 000b                         -q...q..

000b7f00 <_ZSt7nothrow>:
   b7f00:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7f10:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7f20:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7f30:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7f40:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7f50:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7f60:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7f71 <_ctype_>:
   b7f71:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7f81:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7f91:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7fa1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7fb1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7fc1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7fd1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7fe1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7ff1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8072 <link_const_variable_data_end>:
	...

000b8074 <link_constructors_location>:
   b8074:	000b4339 	.word	0x000b4339
   b8078:	000b45c5 	.word	0x000b45c5
   b807c:	000b5691 	.word	0x000b5691
   b8080:	000b5709 	.word	0x000b5709
   b8084:	000b57a1 	.word	0x000b57a1
   b8088:	000b691d 	.word	0x000b691d
   b808c:	000b6d95 	.word	0x000b6d95
   b8090:	000b6eb5 	.word	0x000b6eb5
   b8094:	000b7015 	.word	0x000b7015
   b8098:	000b7039 	.word	0x000b7039

000b809c <link_constructors_end>:
   b809c:	00000000 	.word	0x00000000
