
/Users/chipmc/Documents/Maker/Particle/Utilities/TOF-Sensor-Demo/target/4.0.2/boron/TOF-Sensor-Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000041f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8210  000b8210  00008210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8234  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e53c  000b8238  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000023c  2003e5b4  2003e5b4  0002e5b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b82b0  000b82b0  000282b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b82d8  000b82d8  000282d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00139b93  00000000  00000000  000282dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001577a  00000000  00000000  00161e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b959  00000000  00000000  001775e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e8  00000000  00000000  001b2f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3a0  00000000  00000000  001b602a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e91a  00000000  00000000  001c03ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004805e  00000000  00000000  001fece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013820f  00000000  00000000  00246d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008aa4  00000000  00000000  0037ef54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fb25 	bl	b767c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fb47 	bl	b76cc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e53c 	.word	0x2003e53c
   b4048:	000b8238 	.word	0x000b8238
   b404c:	2003e5b4 	.word	0x2003e5b4
   b4050:	2003e5b4 	.word	0x2003e5b4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f9cf 	bl	b7400 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b81dc 	.word	0x000b81dc
   b407c:	000b8204 	.word	0x000b8204

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b864 	b.w	b414c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8bf 	bl	b4208 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b96f 	b.w	b7370 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bb1d 	b.w	b56d0 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bb1b 	b.w	b56d0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bb21 	b.w	b56e0 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fa4c 	bl	b5544 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b52a5 	.word	0x000b52a5
   b40b4:	000b79e4 	.word	0x000b79e4

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b500      	push	{lr}
   b40cc:	b08c      	sub	sp, #48	; 0x30
   b40ce:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40d0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40d4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40d8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40da:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40de:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e0:	6801      	ldr	r1, [r0, #0]
   b40e2:	aa04      	add	r2, sp, #16
   b40e4:	201e      	movs	r0, #30
    attr.flags = 0;
   b40e6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ea:	f001 fa33 	bl	b5554 <log_message_v>
}
   b40ee:	b00c      	add	sp, #48	; 0x30
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b40f8:	4770      	bx	lr

000b40fa <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b40fa:	6a00      	ldr	r0, [r0, #32]
   b40fc:	6803      	ldr	r3, [r0, #0]
   b40fe:	68db      	ldr	r3, [r3, #12]
   b4100:	4718      	bx	r3
	...

000b4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4104:	4b0a      	ldr	r3, [pc, #40]	; (b4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4106:	b510      	push	{r4, lr}
   b4108:	4604      	mov	r4, r0
   b410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b410c:	f002 f80c 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b4110:	4621      	mov	r1, r4
   b4112:	f002 fa44 	bl	b659e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4116:	f003 f8e3 	bl	b72e0 <_Z16_fetch_usbserialv>
   b411a:	f003 f8d3 	bl	b72c4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b411e:	4620      	mov	r0, r4
   b4120:	4b04      	ldr	r3, [pc, #16]	; (b4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4122:	f840 3b04 	str.w	r3, [r0], #4
   b4126:	f002 f8d5 	bl	b62d4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b412a:	4620      	mov	r0, r4
   b412c:	bd10      	pop	{r4, pc}
   b412e:	bf00      	nop
   b4130:	000b7a2c 	.word	0x000b7a2c
   b4134:	000b7a14 	.word	0x000b7a14

000b4138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4138:	b510      	push	{r4, lr}
   b413a:	4604      	mov	r4, r0
    }
   b413c:	f7ff ffe2 	bl	b4104 <_ZN5spark16SerialLogHandlerD1Ev>
   b4140:	4620      	mov	r0, r4
   b4142:	2124      	movs	r1, #36	; 0x24
   b4144:	f7ff ffa9 	bl	b409a <_ZdlPvj>
   b4148:	4620      	mov	r0, r4
   b414a:	bd10      	pop	{r4, pc}

000b414c <setup>:
const int intPin =      D3;                       // Hardware interrupt - poliarity set in the library
const int blueLED =     D7;
char statusMsg[64];

void setup(void)
{
   b414c:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   b414e:	f003 fa1f 	bl	b7590 <_Z19__fetch_global_Wirev>
   b4152:	f001 fc03 	bl	b595c <_ZN7TwoWire5beginEv>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4156:	2000      	movs	r0, #0
   b4158:	f001 f8b4 	bl	b52c4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b415c:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4160:	4604      	mov	r4, r0
   b4162:	2000      	movs	r0, #0
   b4164:	f001 f8ae 	bl	b52c4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4168:	1b00      	subs	r0, r0, r4
   b416a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b416e:	42a8      	cmp	r0, r5
   b4170:	f171 0300 	sbcs.w	r3, r1, #0
   b4174:	d207      	bcs.n	b4186 <setup+0x3a>
  waitFor(Serial.isConnected, 10000);       // Primarily interface to this code is serial
   b4176:	f003 f8b3 	bl	b72e0 <_Z16_fetch_usbserialv>
   b417a:	f003 f8a6 	bl	b72ca <_ZN9USBSerial11isConnectedEv>
   b417e:	b910      	cbnz	r0, b4186 <setup+0x3a>
            spark_process();
   b4180:	f001 fa36 	bl	b55f0 <spark_process>
        while (_while() && !_condition()) {
   b4184:	e7ed      	b.n	b4162 <setup+0x16>
   b4186:	f003 f8ab 	bl	b72e0 <_Z16_fetch_usbserialv>
   b418a:	f003 f89e 	bl	b72ca <_ZN9USBSerial11isConnectedEv>
  delay(1000);                              // Gives serial time to connect
   b418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4192:	f001 fad5 	bl	b5740 <delay>

  pinMode(blueLED,OUTPUT);                  // Set up pin names and modes
   b4196:	2101      	movs	r1, #1
   b4198:	2007      	movs	r0, #7
   b419a:	f003 f9a1 	bl	b74e0 <pinMode>
  pinMode(intPin,INPUT);
   b419e:	2100      	movs	r1, #0
   b41a0:	2003      	movs	r0, #3
   b41a2:	f003 f99d 	bl	b74e0 <pinMode>
  pinMode(shutdownPin,OUTPUT);              // Not sure if we can use this - messes with Boron i2c bus
   b41a6:	2101      	movs	r1, #1
   b41a8:	2002      	movs	r0, #2
   b41aa:	f003 f999 	bl	b74e0 <pinMode>
  digitalWrite(shutdownPin, LOW);           // Turns on the module
   b41ae:	2100      	movs	r1, #0
   b41b0:	2002      	movs	r0, #2
   b41b2:	f003 f9a6 	bl	b7502 <digitalWrite>
  digitalWrite(blueLED,HIGH);               // Blue led on for Setup
   b41b6:	2101      	movs	r1, #1
   b41b8:	2007      	movs	r0, #7
   b41ba:	f003 f9a2 	bl	b7502 <digitalWrite>

  delay(100);
   b41be:	2064      	movs	r0, #100	; 0x64
   b41c0:	f001 fabe 	bl	b5740 <delay>

  TofSensor::instance().setup();
   b41c4:	f000 f92a 	bl	b441c <_ZN9TofSensor8instanceEv>
   b41c8:	f000 f9ba 	bl	b4540 <_ZN9TofSensor5setupEv>
  PeopleCounter::instance().setup();
   b41cc:	f000 fa10 	bl	b45f0 <_ZN13PeopleCounter8instanceEv>
   b41d0:	f000 fa22 	bl	b4618 <_ZN13PeopleCounter5setupEv>
  PeopleCounter::instance().setCount(1);
   b41d4:	f000 fa0c 	bl	b45f0 <_ZN13PeopleCounter8instanceEv>
   b41d8:	2101      	movs	r1, #1
   b41da:	f000 fa1f 	bl	b461c <_ZN13PeopleCounter8setCountEi>

  snprintf(statusMsg,sizeof(statusMsg),"Startup - Complete");
   b41de:	4907      	ldr	r1, [pc, #28]	; (b41fc <setup+0xb0>)
   b41e0:	4807      	ldr	r0, [pc, #28]	; (b4200 <setup+0xb4>)
   b41e2:	f003 faca 	bl	b777a <strcpy>
  Log.info(statusMsg);
   b41e6:	4906      	ldr	r1, [pc, #24]	; (b4200 <setup+0xb4>)
   b41e8:	4806      	ldr	r0, [pc, #24]	; (b4204 <setup+0xb8>)
   b41ea:	f7ff ff6d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>

  digitalWrite(blueLED, LOW);                   // Signal setup complete
}
   b41ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(blueLED, LOW);                   // Signal setup complete
   b41f2:	2100      	movs	r1, #0
   b41f4:	2007      	movs	r0, #7
   b41f6:	f003 b984 	b.w	b7502 <digitalWrite>
   b41fa:	bf00      	nop
   b41fc:	000b79f9 	.word	0x000b79f9
   b4200:	2003e5e8 	.word	0x2003e5e8
   b4204:	2003e6a4 	.word	0x2003e6a4

000b4208 <loop>:

unsigned long lastLedUpdate = 0;

void loop(void)
{
   b4208:	b510      	push	{r4, lr}
  if( (millis() - lastLedUpdate) > 1000 ){
   b420a:	4c10      	ldr	r4, [pc, #64]	; (b424c <loop+0x44>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b420c:	f001 f852 	bl	b52b4 <HAL_Timer_Get_Milli_Seconds>
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	1ac0      	subs	r0, r0, r3
   b4214:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4218:	d90b      	bls.n	b4232 <loop+0x2a>
    digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));
   b421a:	2007      	movs	r0, #7
   b421c:	f003 f98a 	bl	b7534 <digitalRead>
   b4220:	fab0 f180 	clz	r1, r0
   b4224:	0949      	lsrs	r1, r1, #5
   b4226:	2007      	movs	r0, #7
   b4228:	f003 f96b 	bl	b7502 <digitalWrite>
   b422c:	f001 f842 	bl	b52b4 <HAL_Timer_Get_Milli_Seconds>
    lastLedUpdate = millis();
   b4230:	6020      	str	r0, [r4, #0]
  }

  if (TofSensor::instance().loop()) {         // If there is new data from the sensor
   b4232:	f000 f8f3 	bl	b441c <_ZN9TofSensor8instanceEv>
   b4236:	f000 f901 	bl	b443c <_ZN9TofSensor4loopEv>
   b423a:	b128      	cbz	r0, b4248 <loop+0x40>
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b423c:	f000 f9d8 	bl	b45f0 <_ZN13PeopleCounter8instanceEv>
  }
}
   b4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PeopleCounter::instance().loop();         // Then check to see if we need to update the counts
   b4244:	f000 bc50 	b.w	b4ae8 <_ZN13PeopleCounter4loopEv>
}
   b4248:	bd10      	pop	{r4, pc}
   b424a:	bf00      	nop
   b424c:	2003e5c0 	.word	0x2003e5c0

000b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4250:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4252:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4256:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4258:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b425a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b425e:	42ae      	cmp	r6, r5
   b4260:	d004      	beq.n	b426c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4262:	4628      	mov	r0, r5
   b4264:	f002 fec0 	bl	b6fe8 <_ZN6StringD1Ev>
   b4268:	3514      	adds	r5, #20
   b426a:	e7f8      	b.n	b425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b426c:	6820      	ldr	r0, [r4, #0]
   b426e:	f001 fa37 	bl	b56e0 <free>
    AllocatorT::free(data_);
}
   b4272:	4620      	mov	r0, r4
   b4274:	bd70      	pop	{r4, r5, r6, pc}

000b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4276:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b427a:	4604      	mov	r4, r0
   b427c:	460d      	mov	r5, r1
   b427e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4280:	d916      	bls.n	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4282:	4290      	cmp	r0, r2
   b4284:	d215      	bcs.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4286:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b428a:	1a75      	subs	r5, r6, r1
   b428c:	f1a1 0714 	sub.w	r7, r1, #20
   b4290:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4292:	42b7      	cmp	r7, r6
   b4294:	d01c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4296:	b12c      	cbz	r4, b42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4298:	4631      	mov	r1, r6
   b429a:	4620      	mov	r0, r4
   b429c:	f002 ff0c 	bl	b70b8 <_ZN6StringC1EOS_>
   b42a0:	7c33      	ldrb	r3, [r6, #16]
   b42a2:	7423      	strb	r3, [r4, #16]
   b42a4:	4630      	mov	r0, r6
   b42a6:	f002 fe9f 	bl	b6fe8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42aa:	3e14      	subs	r6, #20
   b42ac:	3c14      	subs	r4, #20
   b42ae:	e7f0      	b.n	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42b0:	d00e      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42b2:	42b5      	cmp	r5, r6
   b42b4:	d00c      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42b6:	b12c      	cbz	r4, b42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42b8:	4629      	mov	r1, r5
   b42ba:	4620      	mov	r0, r4
   b42bc:	f002 fefc 	bl	b70b8 <_ZN6StringC1EOS_>
   b42c0:	7c2b      	ldrb	r3, [r5, #16]
   b42c2:	7423      	strb	r3, [r4, #16]
   b42c4:	4628      	mov	r0, r5
   b42c6:	f002 fe8f 	bl	b6fe8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42ca:	3514      	adds	r5, #20
   b42cc:	3414      	adds	r4, #20
   b42ce:	e7f0      	b.n	b42b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42d6:	2300      	movs	r3, #0
   b42d8:	e9c0 3300 	strd	r3, r3, [r0]
   b42dc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42de:	684f      	ldr	r7, [r1, #4]
   b42e0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42e2:	4604      	mov	r4, r0
   b42e4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42e6:	dd23      	ble.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42e8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42ec:	fb08 f007 	mul.w	r0, r8, r7
   b42f0:	f001 f9ee 	bl	b56d0 <malloc>
            if (!d) {
   b42f4:	4605      	mov	r5, r0
   b42f6:	b1d8      	cbz	r0, b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42f8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42fc:	fb08 1202 	mla	r2, r8, r2, r1
   b4300:	f7ff ffb9 	bl	b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4304:	6820      	ldr	r0, [r4, #0]
   b4306:	f001 f9eb 	bl	b56e0 <free>
        data_ = d;
   b430a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b430c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b430e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4312:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4316:	45b8      	cmp	r8, r7
   b4318:	d008      	beq.n	b432c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b431a:	4639      	mov	r1, r7
   b431c:	4628      	mov	r0, r5
   b431e:	f002 fee5 	bl	b70ec <_ZN6StringC1ERKS_>
   b4322:	7c3b      	ldrb	r3, [r7, #16]
   b4324:	742b      	strb	r3, [r5, #16]
   b4326:	3714      	adds	r7, #20
   b4328:	3514      	adds	r5, #20
   b432a:	e7f4      	b.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b432c:	6873      	ldr	r3, [r6, #4]
   b432e:	6063      	str	r3, [r4, #4]
}
   b4330:	4620      	mov	r0, r4
   b4332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4338 <_GLOBAL__sub_I_logHandler>:
   b4338:	b5f0      	push	{r4, r5, r6, r7, lr}
   b433a:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   b433c:	2400      	movs	r4, #0
   b433e:	e9cd 4400 	strd	r4, r4, [sp]
   b4342:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4344:	f002 ffcc 	bl	b72e0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4348:	4d20      	ldr	r5, [pc, #128]	; (b43cc <_GLOBAL__sub_I_logHandler+0x94>)
   b434a:	4606      	mov	r6, r0
   b434c:	4669      	mov	r1, sp
   b434e:	a803      	add	r0, sp, #12
   b4350:	f7ff ffbf 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4354:	462f      	mov	r7, r5
        stream_(&stream) {
   b4356:	a903      	add	r1, sp, #12
   b4358:	a806      	add	r0, sp, #24
   b435a:	f7ff ffba 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b435e:	4b1c      	ldr	r3, [pc, #112]	; (b43d0 <_GLOBAL__sub_I_logHandler+0x98>)
   b4360:	f847 3b04 	str.w	r3, [r7], #4
   b4364:	a906      	add	r1, sp, #24
   b4366:	a809      	add	r0, sp, #36	; 0x24
   b4368:	f7ff ffb3 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b436c:	aa09      	add	r2, sp, #36	; 0x24
   b436e:	211e      	movs	r1, #30
   b4370:	4638      	mov	r0, r7
   b4372:	f002 f9f7 	bl	b6764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4376:	a809      	add	r0, sp, #36	; 0x24
   b4378:	f7ff ff6a 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b437c:	a806      	add	r0, sp, #24
   b437e:	f7ff ff67 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4382:	4b14      	ldr	r3, [pc, #80]	; (b43d4 <_GLOBAL__sub_I_logHandler+0x9c>)
   b4384:	602b      	str	r3, [r5, #0]
   b4386:	a803      	add	r0, sp, #12
   b4388:	622e      	str	r6, [r5, #32]
   b438a:	f7ff ff61 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b438e:	4b12      	ldr	r3, [pc, #72]	; (b43d8 <_GLOBAL__sub_I_logHandler+0xa0>)
   b4390:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4392:	f002 ffa5 	bl	b72e0 <_Z16_fetch_usbserialv>
   b4396:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439a:	f002 ff8f 	bl	b72bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b439e:	f001 fec3 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b43a2:	4629      	mov	r1, r5
   b43a4:	f002 f8b4 	bl	b6510 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b43a8:	4668      	mov	r0, sp
   b43aa:	f7ff ff51 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b43ae:	4b0b      	ldr	r3, [pc, #44]	; (b43dc <_GLOBAL__sub_I_logHandler+0xa4>)
    SleepResult() {}
   b43b0:	4a0b      	ldr	r2, [pc, #44]	; (b43e0 <_GLOBAL__sub_I_logHandler+0xa8>)
   b43b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b43b4:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b43b8:	2003      	movs	r0, #3
   b43ba:	f001 f8e3 	bl	b5584 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b43be:	4621      	mov	r1, r4
   b43c0:	2001      	movs	r0, #1
}
   b43c2:	b00d      	add	sp, #52	; 0x34
   b43c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b43c8:	f001 b8ec 	b.w	b55a4 <system_thread_set_state>
   b43cc:	2003e5c4 	.word	0x2003e5c4
   b43d0:	000b7a14 	.word	0x000b7a14
   b43d4:	000b7f58 	.word	0x000b7f58
   b43d8:	000b7a2c 	.word	0x000b7a2c
   b43dc:	2003e5b4 	.word	0x2003e5b4
   b43e0:	ffff0000 	.word	0xffff0000

000b43e4 <_ZN9TofSensorD1Ev>:

TofSensor::TofSensor() {
}

TofSensor::~TofSensor() {
}
   b43e4:	4770      	bx	lr

000b43e6 <_ZN9TofSensorD0Ev>:
TofSensor::~TofSensor() {
   b43e6:	b510      	push	{r4, lr}
}
   b43e8:	2118      	movs	r1, #24
TofSensor::~TofSensor() {
   b43ea:	4604      	mov	r4, r0
}
   b43ec:	f7ff fe55 	bl	b409a <_ZdlPvj>
   b43f0:	4620      	mov	r0, r4
   b43f2:	bd10      	pop	{r4, pc}

000b43f4 <_ZN9TofSensorC1Ev>:
TofSensor::TofSensor() {
   b43f4:	b538      	push	{r3, r4, r5, lr}
   b43f6:	4605      	mov	r5, r0
   b43f8:	4b07      	ldr	r3, [pc, #28]	; (b4418 <_ZN9TofSensorC1Ev+0x24>)
   b43fa:	f845 3b04 	str.w	r3, [r5], #4
   b43fe:	4604      	mov	r4, r0
   b4400:	f003 f8c6 	bl	b7590 <_Z19__fetch_global_Wirev>
   b4404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4408:	4601      	mov	r1, r0
   b440a:	461a      	mov	r2, r3
   b440c:	4628      	mov	r0, r5
   b440e:	f000 fc09 	bl	b4c24 <_ZN10SFEVL53L1XC1ER7TwoWireii>
}
   b4412:	4620      	mov	r0, r4
   b4414:	bd38      	pop	{r3, r4, r5, pc}
   b4416:	bf00      	nop
   b4418:	000b7b50 	.word	0x000b7b50

000b441c <_ZN9TofSensor8instanceEv>:
TofSensor &TofSensor::instance() {
   b441c:	b538      	push	{r3, r4, r5, lr}
  if (!_instance) {
   b441e:	4d06      	ldr	r5, [pc, #24]	; (b4438 <_ZN9TofSensor8instanceEv+0x1c>)
   b4420:	682b      	ldr	r3, [r5, #0]
   b4422:	b93b      	cbnz	r3, b4434 <_ZN9TofSensor8instanceEv+0x18>
      _instance = new TofSensor();
   b4424:	2018      	movs	r0, #24
   b4426:	f7ff fe34 	bl	b4092 <_Znwj>
   b442a:	4604      	mov	r4, r0
   b442c:	b108      	cbz	r0, b4432 <_ZN9TofSensor8instanceEv+0x16>
   b442e:	f7ff ffe1 	bl	b43f4 <_ZN9TofSensorC1Ev>
   b4432:	602c      	str	r4, [r5, #0]
}
   b4434:	6828      	ldr	r0, [r5, #0]
   b4436:	bd38      	pop	{r3, r4, r5, pc}
   b4438:	2003e628 	.word	0x2003e628

000b443c <_ZN9TofSensor4loopEv>:
  }
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
  return TRUE;
}

int TofSensor::loop(){                         // This function will update the current distance / occupancy for each zone.  It will return true if occupancy changes                    
   b443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  byte oldOccupancyState = occupancyState;
   b4440:	4d25      	ldr	r5, [pc, #148]	; (b44d8 <_ZN9TofSensor4loopEv+0x9c>)
   b4442:	4f26      	ldr	r7, [pc, #152]	; (b44dc <_ZN9TofSensor4loopEv+0xa0>)
   b4444:	4e26      	ldr	r6, [pc, #152]	; (b44e0 <_ZN9TofSensor4loopEv+0xa4>)
   b4446:	f895 8000 	ldrb.w	r8, [r5]
  occupancyState = 0;
   b444a:	f04f 0900 	mov.w	r9, #0
   b444e:	f885 9000 	strb.w	r9, [r5]
  unsigned long startedRanging;

  for (byte zone = 0; zone < 2; zone++){
    myTofSensor.stopRanging();
   b4452:	1d04      	adds	r4, r0, #4
   b4454:	4620      	mov	r0, r4
   b4456:	f000 fc33 	bl	b4cc0 <_ZN10SFEVL53L1X11stopRangingEv>
    myTofSensor.clearInterrupt();
   b445a:	4620      	mov	r0, r4
   b445c:	f000 fc2a 	bl	b4cb4 <_ZN10SFEVL53L1X14clearInterruptEv>
    myTofSensor.setROI(zoneX,zoneY,opticalCenters[zone]);
   b4460:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4464:	2203      	movs	r2, #3
   b4466:	2108      	movs	r1, #8
   b4468:	4620      	mov	r0, r4
   b446a:	f000 fc4c 	bl	b4d06 <_ZN10SFEVL53L1X6setROIEhhh>
    myTofSensor.startRanging();
   b446e:	4620      	mov	r0, r4
   b4470:	f000 fc23 	bl	b4cba <_ZN10SFEVL53L1X12startRangingEv>
   b4474:	f000 ff1e 	bl	b52b4 <HAL_Timer_Get_Milli_Seconds>
   b4478:	4682      	mov	sl, r0

    startedRanging = millis();
    while(!myTofSensor.checkForDataReady()) {
   b447a:	4620      	mov	r0, r4
   b447c:	f000 fc23 	bl	b4cc6 <_ZN10SFEVL53L1X17checkForDataReadyEv>
   b4480:	b970      	cbnz	r0, b44a0 <_ZN9TofSensor4loopEv+0x64>
   b4482:	f000 ff17 	bl	b52b4 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - startedRanging > SENSOR_TIMEOUT) {
   b4486:	eba0 030a 	sub.w	r3, r0, sl
   b448a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   b448e:	d9f4      	bls.n	b447a <_ZN9TofSensor4loopEv+0x3e>
        Log.info("Sensor Timed out");
   b4490:	4814      	ldr	r0, [pc, #80]	; (b44e4 <_ZN9TofSensor4loopEv+0xa8>)
   b4492:	4915      	ldr	r1, [pc, #84]	; (b44e8 <_ZN9TofSensor4loopEv+0xac>)
   b4494:	f7ff fe18 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
        return SENSOR_TIMEOUT_ERROR;
   b4498:	f06f 0002 	mvn.w	r0, #2
  #if PEOPLECOUNTER_DEBUG
  if (occupancyState != oldOccupancyState) Log.info("Occupancy state changed from %d to %d (%imm / %imm)", oldOccupancyState, occupancyState, zoneDistances[0], zoneDistances[1]);
  #endif

  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
}
   b449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    zoneDistances[zone] = myTofSensor.getDistance();
   b44a0:	4620      	mov	r0, r4
   b44a2:	f000 fc25 	bl	b4cf0 <_ZN10SFEVL53L1X11getDistanceEv>
    occupancyState += occupied * (zone +1);
   b44a6:	f109 0201 	add.w	r2, r9, #1
    zoneDistances[zone] = myTofSensor.getDistance();
   b44aa:	f846 0b04 	str.w	r0, [r6], #4
    occupancyState += occupied * (zone +1);
   b44ae:	f240 5112 	movw	r1, #1298	; 0x512
    bool occupied = ((zoneDistances[zone] < PERSON_THRESHOLD) && (zoneDistances[zone] > DOOR_THRESHOLD));
   b44b2:	38c9      	subs	r0, #201	; 0xc9
    occupancyState += occupied * (zone +1);
   b44b4:	4288      	cmp	r0, r1
   b44b6:	bf94      	ite	ls
   b44b8:	4613      	movls	r3, r2
   b44ba:	2300      	movhi	r3, #0
   b44bc:	7828      	ldrb	r0, [r5, #0]
   b44be:	4403      	add	r3, r0
   b44c0:	b2db      	uxtb	r3, r3
  for (byte zone = 0; zone < 2; zone++){
   b44c2:	2a02      	cmp	r2, #2
    occupancyState += occupied * (zone +1);
   b44c4:	702b      	strb	r3, [r5, #0]
  for (byte zone = 0; zone < 2; zone++){
   b44c6:	f04f 0901 	mov.w	r9, #1
   b44ca:	d1c3      	bne.n	b4454 <_ZN9TofSensor4loopEv+0x18>
  return (occupancyState != oldOccupancyState);     // Let us know if the occupancy state has changed
   b44cc:	ebb3 0008 	subs.w	r0, r3, r8
   b44d0:	bf18      	it	ne
   b44d2:	2001      	movne	r0, #1
   b44d4:	e7e2      	b.n	b449c <_ZN9TofSensor4loopEv+0x60>
   b44d6:	bf00      	nop
   b44d8:	2003e640 	.word	0x2003e640
   b44dc:	2003e53c 	.word	0x2003e53c
   b44e0:	2003e644 	.word	0x2003e644
   b44e4:	2003e6a4 	.word	0x2003e6a4
   b44e8:	000b7a3c 	.word	0x000b7a3c

000b44ec <_ZN9TofSensor18performCalibrationEv>:
bool TofSensor::performCalibration() {
   b44ec:	b538      	push	{r3, r4, r5, lr}
  if (occupancyState != 0){
   b44ee:	4d0f      	ldr	r5, [pc, #60]	; (b452c <_ZN9TofSensor18performCalibrationEv+0x40>)
bool TofSensor::performCalibration() {
   b44f0:	4604      	mov	r4, r0
  TofSensor::loop();                  // Get the latest values
   b44f2:	f7ff ffa3 	bl	b443c <_ZN9TofSensor4loopEv>
  if (occupancyState != 0){
   b44f6:	782b      	ldrb	r3, [r5, #0]
   b44f8:	b943      	cbnz	r3, b450c <_ZN9TofSensor18performCalibrationEv+0x20>
  Log.info("Target zone is clear with zone1 at %imm and zone2 at %imm",zoneDistances[0],zoneDistances[1]);
   b44fa:	4a0d      	ldr	r2, [pc, #52]	; (b4530 <_ZN9TofSensor18performCalibrationEv+0x44>)
   b44fc:	480d      	ldr	r0, [pc, #52]	; (b4534 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b44fe:	490e      	ldr	r1, [pc, #56]	; (b4538 <_ZN9TofSensor18performCalibrationEv+0x4c>)
   b4500:	e9d2 2300 	ldrd	r2, r3, [r2]
   b4504:	f7ff fde0 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
  return TRUE;
   b4508:	2001      	movs	r0, #1
}
   b450a:	bd38      	pop	{r3, r4, r5, pc}
    Log.info("Target zone not clear - will wait ten seconds and try again");
   b450c:	490b      	ldr	r1, [pc, #44]	; (b453c <_ZN9TofSensor18performCalibrationEv+0x50>)
   b450e:	4809      	ldr	r0, [pc, #36]	; (b4534 <_ZN9TofSensor18performCalibrationEv+0x48>)
   b4510:	f7ff fdda 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4514:	f242 7010 	movw	r0, #10000	; 0x2710
   b4518:	f001 f912 	bl	b5740 <delay>
    TofSensor::loop();
   b451c:	4620      	mov	r0, r4
   b451e:	f7ff ff8d 	bl	b443c <_ZN9TofSensor4loopEv>
    if (occupancyState != 0) return FALSE;
   b4522:	782b      	ldrb	r3, [r5, #0]
   b4524:	2b00      	cmp	r3, #0
   b4526:	d0e8      	beq.n	b44fa <_ZN9TofSensor18performCalibrationEv+0xe>
   b4528:	2000      	movs	r0, #0
   b452a:	e7ee      	b.n	b450a <_ZN9TofSensor18performCalibrationEv+0x1e>
   b452c:	2003e640 	.word	0x2003e640
   b4530:	2003e644 	.word	0x2003e644
   b4534:	2003e6a4 	.word	0x2003e6a4
   b4538:	000b7a4d 	.word	0x000b7a4d
   b453c:	000b7a87 	.word	0x000b7a87

000b4540 <_ZN9TofSensor5setupEv>:
void TofSensor::setup(){
   b4540:	b538      	push	{r3, r4, r5, lr}
  if(myTofSensor.begin() != 0){
   b4542:	1d05      	adds	r5, r0, #4
void TofSensor::setup(){
   b4544:	4604      	mov	r4, r0
  if(myTofSensor.begin() != 0){
   b4546:	4628      	mov	r0, r5
   b4548:	f000 fba6 	bl	b4c98 <_ZN10SFEVL53L1X5beginEv>
   b454c:	b1c8      	cbz	r0, b4582 <_ZN9TofSensor5setupEv+0x42>
    Log.info("Sensor error reset in 10 seconds");
   b454e:	4915      	ldr	r1, [pc, #84]	; (b45a4 <_ZN9TofSensor5setupEv+0x64>)
   b4550:	4815      	ldr	r0, [pc, #84]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4552:	f7ff fdb9 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4556:	f242 7010 	movw	r0, #10000	; 0x2710
   b455a:	f001 f8f1 	bl	b5740 <delay>
    System.reset();
   b455e:	f002 fde0 	bl	b7122 <_ZN11SystemClass5resetEv>
  myTofSensor.setDistanceModeLong();
   b4562:	4628      	mov	r0, r5
   b4564:	f000 fbc0 	bl	b4ce8 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
  myTofSensor.setTimingBudgetInMs(20);
   b4568:	4628      	mov	r0, r5
   b456a:	2114      	movs	r1, #20
   b456c:	f000 fbb9 	bl	b4ce2 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>
  if (TofSensor::performCalibration()) Log.info("Calibration Complete");
   b4570:	4620      	mov	r0, r4
   b4572:	f7ff ffbb 	bl	b44ec <_ZN9TofSensor18performCalibrationEv>
   b4576:	b148      	cbz	r0, b458c <_ZN9TofSensor5setupEv+0x4c>
   b4578:	490c      	ldr	r1, [pc, #48]	; (b45ac <_ZN9TofSensor5setupEv+0x6c>)
   b457a:	480b      	ldr	r0, [pc, #44]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b457c:	f7ff fda4 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   b4580:	bd38      	pop	{r3, r4, r5, pc}
  else Log.info("Sensor init successfully");
   b4582:	490b      	ldr	r1, [pc, #44]	; (b45b0 <_ZN9TofSensor5setupEv+0x70>)
   b4584:	4808      	ldr	r0, [pc, #32]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4586:	f7ff fd9f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
   b458a:	e7ea      	b.n	b4562 <_ZN9TofSensor5setupEv+0x22>
    Log.info("Initial calibration failed - wait 10 secs and reset");
   b458c:	4909      	ldr	r1, [pc, #36]	; (b45b4 <_ZN9TofSensor5setupEv+0x74>)
   b458e:	4806      	ldr	r0, [pc, #24]	; (b45a8 <_ZN9TofSensor5setupEv+0x68>)
   b4590:	f7ff fd9a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
    delay(10000);
   b4594:	f242 7010 	movw	r0, #10000	; 0x2710
   b4598:	f001 f8d2 	bl	b5740 <delay>
}
   b459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    System.reset();
   b45a0:	f002 bdbf 	b.w	b7122 <_ZN11SystemClass5resetEv>
   b45a4:	000b7ac3 	.word	0x000b7ac3
   b45a8:	2003e6a4 	.word	0x2003e6a4
   b45ac:	000b7afd 	.word	0x000b7afd
   b45b0:	000b7ae4 	.word	0x000b7ae4
   b45b4:	000b7b12 	.word	0x000b7b12

000b45b8 <_ZN9TofSensor12getOccupancyEv>:
  return zoneDistances[1];
}

byte TofSensor::getOccupancy() {
  return occupancyState;
}
   b45b8:	4b01      	ldr	r3, [pc, #4]	; (b45c0 <_ZN9TofSensor12getOccupancyEv+0x8>)
   b45ba:	7818      	ldrb	r0, [r3, #0]
   b45bc:	4770      	bx	lr
   b45be:	bf00      	nop
   b45c0:	2003e640 	.word	0x2003e640

000b45c4 <_GLOBAL__sub_I_opticalCenters>:
   b45c4:	b510      	push	{r4, lr}
SFEVL53L1X myTofSensor;
   b45c6:	f002 ffe3 	bl	b7590 <_Z19__fetch_global_Wirev>
   b45ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b45ce:	4601      	mov	r1, r0
}
   b45d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SFEVL53L1X myTofSensor;
   b45d4:	4801      	ldr	r0, [pc, #4]	; (b45dc <_GLOBAL__sub_I_opticalCenters+0x18>)
   b45d6:	461a      	mov	r2, r3
   b45d8:	f000 bb24 	b.w	b4c24 <_ZN10SFEVL53L1XC1ER7TwoWireii>
   b45dc:	2003e62c 	.word	0x2003e62c

000b45e0 <_ZN13PeopleCounterD1Ev>:

PeopleCounter::PeopleCounter() {
}

PeopleCounter::~PeopleCounter() {
}
   b45e0:	4770      	bx	lr

000b45e2 <_ZN13PeopleCounterD0Ev>:
PeopleCounter::~PeopleCounter() {
   b45e2:	b510      	push	{r4, lr}
}
   b45e4:	210c      	movs	r1, #12
PeopleCounter::~PeopleCounter() {
   b45e6:	4604      	mov	r4, r0
}
   b45e8:	f7ff fd57 	bl	b409a <_ZdlPvj>
   b45ec:	4620      	mov	r0, r4
   b45ee:	bd10      	pop	{r4, pc}

000b45f0 <_ZN13PeopleCounter8instanceEv>:
PeopleCounter &PeopleCounter::instance() {
   b45f0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b45f2:	4c07      	ldr	r4, [pc, #28]	; (b4610 <_ZN13PeopleCounter8instanceEv+0x20>)
   b45f4:	6825      	ldr	r5, [r4, #0]
   b45f6:	b94d      	cbnz	r5, b460c <_ZN13PeopleCounter8instanceEv+0x1c>
        _instance = new PeopleCounter();
   b45f8:	200c      	movs	r0, #12
   b45fa:	f7ff fd4a 	bl	b4092 <_Znwj>
   b45fe:	b120      	cbz	r0, b460a <_ZN13PeopleCounter8instanceEv+0x1a>
PeopleCounter::PeopleCounter() {
   b4600:	4b04      	ldr	r3, [pc, #16]	; (b4614 <_ZN13PeopleCounter8instanceEv+0x24>)
   b4602:	e9c0 3500 	strd	r3, r5, [r0]
   b4606:	2305      	movs	r3, #5
   b4608:	6083      	str	r3, [r0, #8]
        _instance = new PeopleCounter();
   b460a:	6020      	str	r0, [r4, #0]
}
   b460c:	6820      	ldr	r0, [r4, #0]
   b460e:	bd38      	pop	{r3, r4, r5, pc}
   b4610:	2003e654 	.word	0x2003e654
   b4614:	000b7d80 	.word	0x000b7d80

000b4618 <_ZN13PeopleCounter5setupEv>:

void PeopleCounter::setup() {
}
   b4618:	4770      	bx	lr
	...

000b461c <_ZN13PeopleCounter8setCountEi>:
  return occupancyCount;

}

void PeopleCounter::setCount(int value){
  occupancyCount = value;
   b461c:	4b01      	ldr	r3, [pc, #4]	; (b4624 <_ZN13PeopleCounter8setCountEi+0x8>)
   b461e:	6019      	str	r1, [r3, #0]
}
   b4620:	4770      	bx	lr
   b4622:	bf00      	nop
   b4624:	2003e650 	.word	0x2003e650

000b4628 <_ZN13PeopleCounter15printBigNumbersEi>:

void PeopleCounter::setLimit(int value){
  occupancyLimit = value;
}

void PeopleCounter::printBigNumbers(int number) {
   b4628:	b570      	push	{r4, r5, r6, lr}
  Log.info("  ");
   b462a:	48a6      	ldr	r0, [pc, #664]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
void PeopleCounter::printBigNumbers(int number) {
   b462c:	460c      	mov	r4, r1
  Log.info("  ");
   b462e:	49a6      	ldr	r1, [pc, #664]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x2a0>)
   b4630:	f7ff fd4a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>

  switch (abs(number)) {
   b4634:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
   b4638:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   b463c:	2b09      	cmp	r3, #9
   b463e:	f200 820c 	bhi.w	b4a5a <_ZN13PeopleCounter15printBigNumbersEi+0x432>
   b4642:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4646:	000a      	.short	0x000a
   b4648:	0067003c 	.word	0x0067003c
   b464c:	00bd0092 	.word	0x00bd0092
   b4650:	011300e8 	.word	0x011300e8
   b4654:	01b40189 	.word	0x01b40189
   b4658:	01df      	.short	0x01df
    case 0:
      Log.info("%s  0000  ", (number < 0) ? "      " : "");
   b465a:	4e9c      	ldr	r6, [pc, #624]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b465c:	4d9c      	ldr	r5, [pc, #624]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b465e:	499d      	ldr	r1, [pc, #628]	; (b48d4 <_ZN13PeopleCounter15printBigNumbersEi+0x2ac>)
   b4660:	4898      	ldr	r0, [pc, #608]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4662:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4666:	bf38      	it	cc
   b4668:	4635      	movcc	r5, r6
   b466a:	462a      	mov	r2, r5
   b466c:	f7ff fd2c 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 0    0 ", (number < 0) ? "      " : "");
   b4670:	4999      	ldr	r1, [pc, #612]	; (b48d8 <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b4672:	4894      	ldr	r0, [pc, #592]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4674:	462a      	mov	r2, r5
   b4676:	f7ff fd27 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s0      0", (number < 0) ? "      " : "");
   b467a:	4998      	ldr	r1, [pc, #608]	; (b48dc <_ZN13PeopleCounter15printBigNumbersEi+0x2b4>)
   b467c:	4891      	ldr	r0, [pc, #580]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b467e:	462a      	mov	r2, r5
   b4680:	f7ff fd22 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s0      0", (number < 0) ? "------" : "");  
   b4684:	4a96      	ldr	r2, [pc, #600]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4686:	4995      	ldr	r1, [pc, #596]	; (b48dc <_ZN13PeopleCounter15printBigNumbersEi+0x2b4>)
   b4688:	488e      	ldr	r0, [pc, #568]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b468a:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b468e:	bf38      	it	cc
   b4690:	4632      	movcc	r2, r6
   b4692:	f7ff fd19 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s0      0", (number < 0) ? "      " : "");     
   b4696:	4991      	ldr	r1, [pc, #580]	; (b48dc <_ZN13PeopleCounter15printBigNumbersEi+0x2b4>)
   b4698:	488a      	ldr	r0, [pc, #552]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b469a:	462a      	mov	r2, r5
   b469c:	f7ff fd14 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 0    0 ", (number < 0) ? "      " : "");
   b46a0:	498d      	ldr	r1, [pc, #564]	; (b48d8 <_ZN13PeopleCounter15printBigNumbersEi+0x2b0>)
   b46a2:	4888      	ldr	r0, [pc, #544]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46a4:	462a      	mov	r2, r5
   b46a6:	f7ff fd0f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  0000  ", (number < 0) ? "      " : "");
   b46aa:	498a      	ldr	r1, [pc, #552]	; (b48d4 <_ZN13PeopleCounter15printBigNumbersEi+0x2ac>)
   b46ac:	462a      	mov	r2, r5
      Log.info("%s   1 1  ", (number < 0) ? "      " : "");
      Log.info("%s     1  ", (number < 0) ? "      " : "");
      Log.info("%s     1  ", (number < 0) ? "------" : "");
      Log.info("%s     1  ", (number < 0) ? "      " : "");
      Log.info("%s     1  ", (number < 0) ? "      " : "");
      Log.info("%s   11111", (number < 0) ? "      " : "");
   b46ae:	4885      	ldr	r0, [pc, #532]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46b0:	f7ff fd0a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
      Log.info("********");
      Log.info("********");
      break;
  }
  Log.info("  ");
   b46b4:	4984      	ldr	r1, [pc, #528]	; (b48c8 <_ZN13PeopleCounter15printBigNumbersEi+0x2a0>)
   b46b6:	4883      	ldr	r0, [pc, #524]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46b8:	f7ff fd06 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
}
   b46bc:	bd70      	pop	{r4, r5, r6, pc}
      Log.info("%s    11  ", (number < 0) ? "      " : "");
   b46be:	4e83      	ldr	r6, [pc, #524]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b46c0:	4d83      	ldr	r5, [pc, #524]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b46c2:	4988      	ldr	r1, [pc, #544]	; (b48e4 <_ZN13PeopleCounter15printBigNumbersEi+0x2bc>)
   b46c4:	487f      	ldr	r0, [pc, #508]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46c6:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b46ca:	bf38      	it	cc
   b46cc:	4635      	movcc	r5, r6
   b46ce:	462a      	mov	r2, r5
   b46d0:	f7ff fcfa 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s   1 1  ", (number < 0) ? "      " : "");
   b46d4:	4984      	ldr	r1, [pc, #528]	; (b48e8 <_ZN13PeopleCounter15printBigNumbersEi+0x2c0>)
   b46d6:	487b      	ldr	r0, [pc, #492]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46d8:	462a      	mov	r2, r5
   b46da:	f7ff fcf5 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     1  ", (number < 0) ? "      " : "");
   b46de:	4983      	ldr	r1, [pc, #524]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2c4>)
   b46e0:	4878      	ldr	r0, [pc, #480]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46e2:	462a      	mov	r2, r5
   b46e4:	f7ff fcf0 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     1  ", (number < 0) ? "------" : "");
   b46e8:	4a7d      	ldr	r2, [pc, #500]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b46ea:	4980      	ldr	r1, [pc, #512]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2c4>)
   b46ec:	4875      	ldr	r0, [pc, #468]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46ee:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b46f2:	bf38      	it	cc
   b46f4:	4632      	movcc	r2, r6
   b46f6:	f7ff fce7 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     1  ", (number < 0) ? "      " : "");
   b46fa:	497c      	ldr	r1, [pc, #496]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2c4>)
   b46fc:	4871      	ldr	r0, [pc, #452]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b46fe:	462a      	mov	r2, r5
   b4700:	f7ff fce2 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     1  ", (number < 0) ? "      " : "");
   b4704:	4979      	ldr	r1, [pc, #484]	; (b48ec <_ZN13PeopleCounter15printBigNumbersEi+0x2c4>)
   b4706:	486f      	ldr	r0, [pc, #444]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4708:	462a      	mov	r2, r5
   b470a:	f7ff fcdd 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s   11111", (number < 0) ? "      " : "");
   b470e:	4978      	ldr	r1, [pc, #480]	; (b48f0 <_ZN13PeopleCounter15printBigNumbersEi+0x2c8>)
   b4710:	462a      	mov	r2, r5
   b4712:	e7cc      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s  2222  ", (number < 0) ? "      " : "");
   b4714:	4e6d      	ldr	r6, [pc, #436]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b4716:	4d6e      	ldr	r5, [pc, #440]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b4718:	4976      	ldr	r1, [pc, #472]	; (b48f4 <_ZN13PeopleCounter15printBigNumbersEi+0x2cc>)
   b471a:	486a      	ldr	r0, [pc, #424]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b471c:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4720:	bf38      	it	cc
   b4722:	4635      	movcc	r5, r6
   b4724:	462a      	mov	r2, r5
   b4726:	f7ff fccf 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 2    22", (number < 0) ? "      " : "");
   b472a:	4973      	ldr	r1, [pc, #460]	; (b48f8 <_ZN13PeopleCounter15printBigNumbersEi+0x2d0>)
   b472c:	4865      	ldr	r0, [pc, #404]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b472e:	462a      	mov	r2, r5
   b4730:	f7ff fcca 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     2  ", (number < 0) ? "      " : "");
   b4734:	4971      	ldr	r1, [pc, #452]	; (b48fc <_ZN13PeopleCounter15printBigNumbersEi+0x2d4>)
   b4736:	4863      	ldr	r0, [pc, #396]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4738:	462a      	mov	r2, r5
   b473a:	f7ff fcc5 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s   2    ", (number < 0) ? "------" : "");
   b473e:	4a68      	ldr	r2, [pc, #416]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4740:	496f      	ldr	r1, [pc, #444]	; (b4900 <_ZN13PeopleCounter15printBigNumbersEi+0x2d8>)
   b4742:	4860      	ldr	r0, [pc, #384]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4744:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b4748:	bf38      	it	cc
   b474a:	4632      	movcc	r2, r6
   b474c:	f7ff fcbc 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  2     ", (number < 0) ? "      " : "");
   b4750:	496c      	ldr	r1, [pc, #432]	; (b4904 <_ZN13PeopleCounter15printBigNumbersEi+0x2dc>)
   b4752:	485c      	ldr	r0, [pc, #368]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4754:	462a      	mov	r2, r5
   b4756:	f7ff fcb7 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s22     2", (number < 0) ? "      " : "");
   b475a:	496b      	ldr	r1, [pc, #428]	; (b4908 <_ZN13PeopleCounter15printBigNumbersEi+0x2e0>)
   b475c:	4859      	ldr	r0, [pc, #356]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b475e:	462a      	mov	r2, r5
   b4760:	f7ff fcb2 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s2222222 ", (number < 0) ? "      " : "");
   b4764:	4969      	ldr	r1, [pc, #420]	; (b490c <_ZN13PeopleCounter15printBigNumbersEi+0x2e4>)
   b4766:	462a      	mov	r2, r5
   b4768:	e7a1      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s  3333  ", (number < 0) ? "      " : "");
   b476a:	4e58      	ldr	r6, [pc, #352]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b476c:	4d58      	ldr	r5, [pc, #352]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b476e:	4968      	ldr	r1, [pc, #416]	; (b4910 <_ZN13PeopleCounter15printBigNumbersEi+0x2e8>)
   b4770:	4854      	ldr	r0, [pc, #336]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4772:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4776:	bf38      	it	cc
   b4778:	4635      	movcc	r5, r6
   b477a:	462a      	mov	r2, r5
   b477c:	f7ff fca4 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 3    3 ", (number < 0) ? "      " : "");
   b4780:	4964      	ldr	r1, [pc, #400]	; (b4914 <_ZN13PeopleCounter15printBigNumbersEi+0x2ec>)
   b4782:	4850      	ldr	r0, [pc, #320]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4784:	462a      	mov	r2, r5
   b4786:	f7ff fc9f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       3", (number < 0) ? "      " : "");
   b478a:	4963      	ldr	r1, [pc, #396]	; (b4918 <_ZN13PeopleCounter15printBigNumbersEi+0x2f0>)
   b478c:	484d      	ldr	r0, [pc, #308]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b478e:	462a      	mov	r2, r5
   b4790:	f7ff fc9a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s   333  ", (number < 0) ? "------" : "");
   b4794:	4a52      	ldr	r2, [pc, #328]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4796:	4961      	ldr	r1, [pc, #388]	; (b491c <_ZN13PeopleCounter15printBigNumbersEi+0x2f4>)
   b4798:	484a      	ldr	r0, [pc, #296]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b479a:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b479e:	bf38      	it	cc
   b47a0:	4632      	movcc	r2, r6
   b47a2:	f7ff fc91 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       3", (number < 0) ? "      " : "");
   b47a6:	495c      	ldr	r1, [pc, #368]	; (b4918 <_ZN13PeopleCounter15printBigNumbersEi+0x2f0>)
   b47a8:	4846      	ldr	r0, [pc, #280]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47aa:	462a      	mov	r2, r5
   b47ac:	f7ff fc8c 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 3    3 ", (number < 0) ? "      " : "");
   b47b0:	4958      	ldr	r1, [pc, #352]	; (b4914 <_ZN13PeopleCounter15printBigNumbersEi+0x2ec>)
   b47b2:	4844      	ldr	r0, [pc, #272]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47b4:	462a      	mov	r2, r5
   b47b6:	f7ff fc87 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  3333  ", (number < 0) ? "      " : "");
   b47ba:	4955      	ldr	r1, [pc, #340]	; (b4910 <_ZN13PeopleCounter15printBigNumbersEi+0x2e8>)
   b47bc:	462a      	mov	r2, r5
   b47be:	e776      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s4      4", (number < 0) ? "      " : "");
   b47c0:	4e42      	ldr	r6, [pc, #264]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b47c2:	4d43      	ldr	r5, [pc, #268]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b47c4:	4956      	ldr	r1, [pc, #344]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2f8>)
   b47c6:	483f      	ldr	r0, [pc, #252]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47c8:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b47cc:	bf38      	it	cc
   b47ce:	4635      	movcc	r5, r6
   b47d0:	462a      	mov	r2, r5
   b47d2:	f7ff fc79 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s4      4", (number < 0) ? "      " : "");
   b47d6:	4952      	ldr	r1, [pc, #328]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2f8>)
   b47d8:	483a      	ldr	r0, [pc, #232]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47da:	462a      	mov	r2, r5
   b47dc:	f7ff fc74 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s4      4", (number < 0) ? "      " : "");
   b47e0:	494f      	ldr	r1, [pc, #316]	; (b4920 <_ZN13PeopleCounter15printBigNumbersEi+0x2f8>)
   b47e2:	4838      	ldr	r0, [pc, #224]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47e4:	462a      	mov	r2, r5
   b47e6:	f7ff fc6f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  4444  ", (number < 0) ? "------" : "");
   b47ea:	4a3d      	ldr	r2, [pc, #244]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b47ec:	494d      	ldr	r1, [pc, #308]	; (b4924 <_ZN13PeopleCounter15printBigNumbersEi+0x2fc>)
   b47ee:	4835      	ldr	r0, [pc, #212]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b47f0:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b47f4:	bf38      	it	cc
   b47f6:	4632      	movcc	r2, r6
   b47f8:	f7ff fc66 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       4", (number < 0) ? "      " : "");
   b47fc:	494a      	ldr	r1, [pc, #296]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x300>)
   b47fe:	4831      	ldr	r0, [pc, #196]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4800:	462a      	mov	r2, r5
   b4802:	f7ff fc61 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       4", (number < 0) ? "      " : "");
   b4806:	4948      	ldr	r1, [pc, #288]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x300>)
   b4808:	482e      	ldr	r0, [pc, #184]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b480a:	462a      	mov	r2, r5
   b480c:	f7ff fc5c 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       4", (number < 0) ? "      " : "");
   b4810:	4945      	ldr	r1, [pc, #276]	; (b4928 <_ZN13PeopleCounter15printBigNumbersEi+0x300>)
   b4812:	462a      	mov	r2, r5
   b4814:	e74b      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s  555555", (number < 0) ? "      " : "");
   b4816:	4e2d      	ldr	r6, [pc, #180]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b4818:	4d2d      	ldr	r5, [pc, #180]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b481a:	4944      	ldr	r1, [pc, #272]	; (b492c <_ZN13PeopleCounter15printBigNumbersEi+0x304>)
   b481c:	4829      	ldr	r0, [pc, #164]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b481e:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4822:	bf38      	it	cc
   b4824:	4635      	movcc	r5, r6
   b4826:	462a      	mov	r2, r5
   b4828:	f7ff fc4e 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 5      ", (number < 0) ? "      " : "");
   b482c:	4940      	ldr	r1, [pc, #256]	; (b4930 <_ZN13PeopleCounter15printBigNumbersEi+0x308>)
   b482e:	4825      	ldr	r0, [pc, #148]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4830:	462a      	mov	r2, r5
   b4832:	f7ff fc49 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 555555 ", (number < 0) ? "      " : "");
   b4836:	493f      	ldr	r1, [pc, #252]	; (b4934 <_ZN13PeopleCounter15printBigNumbersEi+0x30c>)
   b4838:	4822      	ldr	r0, [pc, #136]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b483a:	462a      	mov	r2, r5
   b483c:	f7ff fc44 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s      5 ", (number < 0) ? "------" : "");
   b4840:	4a27      	ldr	r2, [pc, #156]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4842:	493d      	ldr	r1, [pc, #244]	; (b4938 <_ZN13PeopleCounter15printBigNumbersEi+0x310>)
   b4844:	481f      	ldr	r0, [pc, #124]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4846:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b484a:	bf38      	it	cc
   b484c:	4632      	movcc	r2, r6
   b484e:	f7ff fc3b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       5", (number < 0) ? "      " : "");
   b4852:	493a      	ldr	r1, [pc, #232]	; (b493c <_ZN13PeopleCounter15printBigNumbersEi+0x314>)
   b4854:	481b      	ldr	r0, [pc, #108]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4856:	462a      	mov	r2, r5
   b4858:	f7ff fc36 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s      5 ", (number < 0) ? "      " : "");
   b485c:	4936      	ldr	r1, [pc, #216]	; (b4938 <_ZN13PeopleCounter15printBigNumbersEi+0x310>)
   b485e:	4819      	ldr	r0, [pc, #100]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4860:	462a      	mov	r2, r5
   b4862:	f7ff fc31 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 555555 ", (number < 0) ? "      " : "");
   b4866:	4933      	ldr	r1, [pc, #204]	; (b4934 <_ZN13PeopleCounter15printBigNumbersEi+0x30c>)
   b4868:	462a      	mov	r2, r5
   b486a:	e720      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s  666666", (number < 0) ? "      " : "");
   b486c:	4e17      	ldr	r6, [pc, #92]	; (b48cc <_ZN13PeopleCounter15printBigNumbersEi+0x2a4>)
   b486e:	4d18      	ldr	r5, [pc, #96]	; (b48d0 <_ZN13PeopleCounter15printBigNumbersEi+0x2a8>)
   b4870:	4933      	ldr	r1, [pc, #204]	; (b4940 <_ZN13PeopleCounter15printBigNumbersEi+0x318>)
   b4872:	4814      	ldr	r0, [pc, #80]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4874:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4878:	bf38      	it	cc
   b487a:	4635      	movcc	r5, r6
   b487c:	462a      	mov	r2, r5
   b487e:	f7ff fc23 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 6      ", (number < 0) ? "      " : "");
   b4882:	4930      	ldr	r1, [pc, #192]	; (b4944 <_ZN13PeopleCounter15printBigNumbersEi+0x31c>)
   b4884:	480f      	ldr	r0, [pc, #60]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4886:	462a      	mov	r2, r5
   b4888:	f7ff fc1e 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  66666 ", (number < 0) ? "      " : "");
   b488c:	492e      	ldr	r1, [pc, #184]	; (b4948 <_ZN13PeopleCounter15printBigNumbersEi+0x320>)
   b488e:	480d      	ldr	r0, [pc, #52]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b4890:	462a      	mov	r2, r5
   b4892:	f7ff fc19 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s6      6", (number < 0) ? "------" : "");
   b4896:	4a12      	ldr	r2, [pc, #72]	; (b48e0 <_ZN13PeopleCounter15printBigNumbersEi+0x2b8>)
   b4898:	492c      	ldr	r1, [pc, #176]	; (b494c <_ZN13PeopleCounter15printBigNumbersEi+0x324>)
   b489a:	480a      	ldr	r0, [pc, #40]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b489c:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b48a0:	bf38      	it	cc
   b48a2:	4632      	movcc	r2, r6
   b48a4:	f7ff fc10 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s6      6", (number < 0) ? "      " : "");
   b48a8:	4928      	ldr	r1, [pc, #160]	; (b494c <_ZN13PeopleCounter15printBigNumbersEi+0x324>)
   b48aa:	4806      	ldr	r0, [pc, #24]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b48ac:	462a      	mov	r2, r5
   b48ae:	f7ff fc0b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 6    6 ", (number < 0) ? "      " : "");
   b48b2:	4927      	ldr	r1, [pc, #156]	; (b4950 <_ZN13PeopleCounter15printBigNumbersEi+0x328>)
   b48b4:	4803      	ldr	r0, [pc, #12]	; (b48c4 <_ZN13PeopleCounter15printBigNumbersEi+0x29c>)
   b48b6:	462a      	mov	r2, r5
   b48b8:	f7ff fc06 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  6666  ", (number < 0) ? "      " : "");
   b48bc:	4925      	ldr	r1, [pc, #148]	; (b4954 <_ZN13PeopleCounter15printBigNumbersEi+0x32c>)
   b48be:	462a      	mov	r2, r5
   b48c0:	e6f5      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
   b48c2:	bf00      	nop
   b48c4:	2003e6a4 	.word	0x2003e6a4
   b48c8:	000b7c59 	.word	0x000b7c59
   b48cc:	000b7f22 	.word	0x000b7f22
   b48d0:	000b7c55 	.word	0x000b7c55
   b48d4:	000b7b5f 	.word	0x000b7b5f
   b48d8:	000b7b6a 	.word	0x000b7b6a
   b48dc:	000b7b75 	.word	0x000b7b75
   b48e0:	000b7b58 	.word	0x000b7b58
   b48e4:	000b7b80 	.word	0x000b7b80
   b48e8:	000b7b8b 	.word	0x000b7b8b
   b48ec:	000b7b96 	.word	0x000b7b96
   b48f0:	000b7ba1 	.word	0x000b7ba1
   b48f4:	000b7bac 	.word	0x000b7bac
   b48f8:	000b7bb7 	.word	0x000b7bb7
   b48fc:	000b7bc2 	.word	0x000b7bc2
   b4900:	000b7bcd 	.word	0x000b7bcd
   b4904:	000b7bd8 	.word	0x000b7bd8
   b4908:	000b7be3 	.word	0x000b7be3
   b490c:	000b7bee 	.word	0x000b7bee
   b4910:	000b7bf9 	.word	0x000b7bf9
   b4914:	000b7c04 	.word	0x000b7c04
   b4918:	000b7c0f 	.word	0x000b7c0f
   b491c:	000b7c1a 	.word	0x000b7c1a
   b4920:	000b7c25 	.word	0x000b7c25
   b4924:	000b7c30 	.word	0x000b7c30
   b4928:	000b7c3b 	.word	0x000b7c3b
   b492c:	000b7c46 	.word	0x000b7c46
   b4930:	000b7c51 	.word	0x000b7c51
   b4934:	000b7c5c 	.word	0x000b7c5c
   b4938:	000b7c67 	.word	0x000b7c67
   b493c:	000b7c72 	.word	0x000b7c72
   b4940:	000b7c7d 	.word	0x000b7c7d
   b4944:	000b7c88 	.word	0x000b7c88
   b4948:	000b7c93 	.word	0x000b7c93
   b494c:	000b7c9e 	.word	0x000b7c9e
   b4950:	000b7ca9 	.word	0x000b7ca9
   b4954:	000b7cb4 	.word	0x000b7cb4
      Log.info("%s  777777", (number < 0) ? "      " : "");
   b4958:	4e4e      	ldr	r6, [pc, #312]	; (b4a94 <_ZN13PeopleCounter15printBigNumbersEi+0x46c>)
   b495a:	4d4f      	ldr	r5, [pc, #316]	; (b4a98 <_ZN13PeopleCounter15printBigNumbersEi+0x470>)
   b495c:	494f      	ldr	r1, [pc, #316]	; (b4a9c <_ZN13PeopleCounter15printBigNumbersEi+0x474>)
   b495e:	4850      	ldr	r0, [pc, #320]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4960:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4964:	bf38      	it	cc
   b4966:	4635      	movcc	r5, r6
   b4968:	462a      	mov	r2, r5
   b496a:	f7ff fbad 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 7     7", (number < 0) ? "      " : "");
   b496e:	494d      	ldr	r1, [pc, #308]	; (b4aa4 <_ZN13PeopleCounter15printBigNumbersEi+0x47c>)
   b4970:	484b      	ldr	r0, [pc, #300]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4972:	462a      	mov	r2, r5
   b4974:	f7ff fba8 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s      7 ", (number < 0) ? "      " : "");
   b4978:	494b      	ldr	r1, [pc, #300]	; (b4aa8 <_ZN13PeopleCounter15printBigNumbersEi+0x480>)
   b497a:	4849      	ldr	r0, [pc, #292]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b497c:	462a      	mov	r2, r5
   b497e:	f7ff fba3 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s     7  ", (number < 0) ? "------" : "");
   b4982:	4a4a      	ldr	r2, [pc, #296]	; (b4aac <_ZN13PeopleCounter15printBigNumbersEi+0x484>)
   b4984:	494a      	ldr	r1, [pc, #296]	; (b4ab0 <_ZN13PeopleCounter15printBigNumbersEi+0x488>)
   b4986:	4846      	ldr	r0, [pc, #280]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4988:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b498c:	bf38      	it	cc
   b498e:	4632      	movcc	r2, r6
   b4990:	f7ff fb9a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s    7   ", (number < 0) ? "      " : "");
   b4994:	4947      	ldr	r1, [pc, #284]	; (b4ab4 <_ZN13PeopleCounter15printBigNumbersEi+0x48c>)
   b4996:	4842      	ldr	r0, [pc, #264]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4998:	462a      	mov	r2, r5
   b499a:	f7ff fb95 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s   7    ", (number < 0) ? "      " : "");
   b499e:	4946      	ldr	r1, [pc, #280]	; (b4ab8 <_ZN13PeopleCounter15printBigNumbersEi+0x490>)
   b49a0:	483f      	ldr	r0, [pc, #252]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49a2:	462a      	mov	r2, r5
   b49a4:	f7ff fb90 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  7     ", (number < 0) ? "      " : "");
   b49a8:	4944      	ldr	r1, [pc, #272]	; (b4abc <_ZN13PeopleCounter15printBigNumbersEi+0x494>)
   b49aa:	462a      	mov	r2, r5
   b49ac:	e67f      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s  8888  ", (number < 0) ? "      " : "");
   b49ae:	4e39      	ldr	r6, [pc, #228]	; (b4a94 <_ZN13PeopleCounter15printBigNumbersEi+0x46c>)
   b49b0:	4d39      	ldr	r5, [pc, #228]	; (b4a98 <_ZN13PeopleCounter15printBigNumbersEi+0x470>)
   b49b2:	4943      	ldr	r1, [pc, #268]	; (b4ac0 <_ZN13PeopleCounter15printBigNumbersEi+0x498>)
   b49b4:	483a      	ldr	r0, [pc, #232]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49b6:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b49ba:	bf38      	it	cc
   b49bc:	4635      	movcc	r5, r6
   b49be:	462a      	mov	r2, r5
   b49c0:	f7ff fb82 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 8    8 ", (number < 0) ? "      " : "");
   b49c4:	493f      	ldr	r1, [pc, #252]	; (b4ac4 <_ZN13PeopleCounter15printBigNumbersEi+0x49c>)
   b49c6:	4836      	ldr	r0, [pc, #216]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49c8:	462a      	mov	r2, r5
   b49ca:	f7ff fb7d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s8      8", (number < 0) ? "      " : "");
   b49ce:	493e      	ldr	r1, [pc, #248]	; (b4ac8 <_ZN13PeopleCounter15printBigNumbersEi+0x4a0>)
   b49d0:	4833      	ldr	r0, [pc, #204]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49d2:	462a      	mov	r2, r5
   b49d4:	f7ff fb78 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  8888  ", (number < 0) ? "------" : "");
   b49d8:	4a34      	ldr	r2, [pc, #208]	; (b4aac <_ZN13PeopleCounter15printBigNumbersEi+0x484>)
   b49da:	4939      	ldr	r1, [pc, #228]	; (b4ac0 <_ZN13PeopleCounter15printBigNumbersEi+0x498>)
   b49dc:	4830      	ldr	r0, [pc, #192]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49de:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b49e2:	bf38      	it	cc
   b49e4:	4632      	movcc	r2, r6
   b49e6:	f7ff fb6f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s8      8", (number < 0) ? "      " : "");
   b49ea:	4937      	ldr	r1, [pc, #220]	; (b4ac8 <_ZN13PeopleCounter15printBigNumbersEi+0x4a0>)
   b49ec:	482c      	ldr	r0, [pc, #176]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49ee:	462a      	mov	r2, r5
   b49f0:	f7ff fb6a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 8    8 ", (number < 0) ? "      " : "");
   b49f4:	4933      	ldr	r1, [pc, #204]	; (b4ac4 <_ZN13PeopleCounter15printBigNumbersEi+0x49c>)
   b49f6:	482a      	ldr	r0, [pc, #168]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b49f8:	462a      	mov	r2, r5
   b49fa:	f7ff fb65 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s  8888  ", (number < 0) ? "      " : "");
   b49fe:	4930      	ldr	r1, [pc, #192]	; (b4ac0 <_ZN13PeopleCounter15printBigNumbersEi+0x498>)
   b4a00:	462a      	mov	r2, r5
   b4a02:	e654      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("%s 99999  ", (number < 0) ? "      " : "");
   b4a04:	4e23      	ldr	r6, [pc, #140]	; (b4a94 <_ZN13PeopleCounter15printBigNumbersEi+0x46c>)
   b4a06:	4d24      	ldr	r5, [pc, #144]	; (b4a98 <_ZN13PeopleCounter15printBigNumbersEi+0x470>)
   b4a08:	4930      	ldr	r1, [pc, #192]	; (b4acc <_ZN13PeopleCounter15printBigNumbersEi+0x4a4>)
   b4a0a:	4825      	ldr	r0, [pc, #148]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a0c:	ea15 0524 	ands.w	r5, r5, r4, asr #32
   b4a10:	bf38      	it	cc
   b4a12:	4635      	movcc	r5, r6
   b4a14:	462a      	mov	r2, r5
   b4a16:	f7ff fb57 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s9     9 ", (number < 0) ? "      " : "");
   b4a1a:	492d      	ldr	r1, [pc, #180]	; (b4ad0 <_ZN13PeopleCounter15printBigNumbersEi+0x4a8>)
   b4a1c:	4820      	ldr	r0, [pc, #128]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a1e:	462a      	mov	r2, r5
   b4a20:	f7ff fb52 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s9      9", (number < 0) ? "      " : "");
   b4a24:	492b      	ldr	r1, [pc, #172]	; (b4ad4 <_ZN13PeopleCounter15printBigNumbersEi+0x4ac>)
   b4a26:	481e      	ldr	r0, [pc, #120]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a28:	462a      	mov	r2, r5
   b4a2a:	f7ff fb4d 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 99999  ", (number < 0) ? "------" : "");
   b4a2e:	4a1f      	ldr	r2, [pc, #124]	; (b4aac <_ZN13PeopleCounter15printBigNumbersEi+0x484>)
   b4a30:	4926      	ldr	r1, [pc, #152]	; (b4acc <_ZN13PeopleCounter15printBigNumbersEi+0x4a4>)
   b4a32:	481b      	ldr	r0, [pc, #108]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a34:	ea12 0224 	ands.w	r2, r2, r4, asr #32
   b4a38:	bf38      	it	cc
   b4a3a:	4632      	movcc	r2, r6
   b4a3c:	f7ff fb44 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s       9", (number < 0) ? "      " : "");
   b4a40:	4925      	ldr	r1, [pc, #148]	; (b4ad8 <_ZN13PeopleCounter15printBigNumbersEi+0x4b0>)
   b4a42:	4817      	ldr	r0, [pc, #92]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a44:	462a      	mov	r2, r5
   b4a46:	f7ff fb3f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s      9 ", (number < 0) ? "      " : "");
   b4a4a:	4924      	ldr	r1, [pc, #144]	; (b4adc <_ZN13PeopleCounter15printBigNumbersEi+0x4b4>)
   b4a4c:	4814      	ldr	r0, [pc, #80]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a4e:	462a      	mov	r2, r5
   b4a50:	f7ff fb3a 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("%s 999999 ", (number < 0) ? "      " : "");
   b4a54:	4922      	ldr	r1, [pc, #136]	; (b4ae0 <_ZN13PeopleCounter15printBigNumbersEi+0x4b8>)
   b4a56:	462a      	mov	r2, r5
   b4a58:	e629      	b.n	b46ae <_ZN13PeopleCounter15printBigNumbersEi+0x86>
      Log.info("********");
   b4a5a:	4922      	ldr	r1, [pc, #136]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a5c:	4810      	ldr	r0, [pc, #64]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a5e:	f7ff fb33 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a62:	4920      	ldr	r1, [pc, #128]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a64:	480e      	ldr	r0, [pc, #56]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a66:	f7ff fb2f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a6a:	491e      	ldr	r1, [pc, #120]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a6c:	480c      	ldr	r0, [pc, #48]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a6e:	f7ff fb2b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a72:	491c      	ldr	r1, [pc, #112]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a74:	480a      	ldr	r0, [pc, #40]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a76:	f7ff fb27 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a7a:	491a      	ldr	r1, [pc, #104]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a7c:	4808      	ldr	r0, [pc, #32]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a7e:	f7ff fb23 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a82:	4918      	ldr	r1, [pc, #96]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a84:	4806      	ldr	r0, [pc, #24]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a86:	f7ff fb1f 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      Log.info("********");
   b4a8a:	4916      	ldr	r1, [pc, #88]	; (b4ae4 <_ZN13PeopleCounter15printBigNumbersEi+0x4bc>)
   b4a8c:	4804      	ldr	r0, [pc, #16]	; (b4aa0 <_ZN13PeopleCounter15printBigNumbersEi+0x478>)
   b4a8e:	f7ff fb1b 	bl	b40c8 <_ZNK5spark6Logger4infoEPKcz>
      break;
   b4a92:	e60f      	b.n	b46b4 <_ZN13PeopleCounter15printBigNumbersEi+0x8c>
   b4a94:	000b7f22 	.word	0x000b7f22
   b4a98:	000b7c55 	.word	0x000b7c55
   b4a9c:	000b7cbf 	.word	0x000b7cbf
   b4aa0:	2003e6a4 	.word	0x2003e6a4
   b4aa4:	000b7cca 	.word	0x000b7cca
   b4aa8:	000b7cd5 	.word	0x000b7cd5
   b4aac:	000b7b58 	.word	0x000b7b58
   b4ab0:	000b7ce0 	.word	0x000b7ce0
   b4ab4:	000b7ceb 	.word	0x000b7ceb
   b4ab8:	000b7cf6 	.word	0x000b7cf6
   b4abc:	000b7d01 	.word	0x000b7d01
   b4ac0:	000b7d0c 	.word	0x000b7d0c
   b4ac4:	000b7d17 	.word	0x000b7d17
   b4ac8:	000b7d22 	.word	0x000b7d22
   b4acc:	000b7d2d 	.word	0x000b7d2d
   b4ad0:	000b7d38 	.word	0x000b7d38
   b4ad4:	000b7d43 	.word	0x000b7d43
   b4ad8:	000b7d4e 	.word	0x000b7d4e
   b4adc:	000b7d59 	.word	0x000b7d59
   b4ae0:	000b7d64 	.word	0x000b7d64
   b4ae4:	000b7d6f 	.word	0x000b7d6f

000b4ae8 <_ZN13PeopleCounter4loopEv>:
void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool oldOccupancyCount = occupancyCount;
   b4aea:	4f28      	ldr	r7, [pc, #160]	; (b4b8c <_ZN13PeopleCounter4loopEv+0xa4>)
   b4aec:	4d28      	ldr	r5, [pc, #160]	; (b4b90 <_ZN13PeopleCounter4loopEv+0xa8>)
   b4aee:	783b      	ldrb	r3, [r7, #0]
   b4af0:	4c28      	ldr	r4, [pc, #160]	; (b4b94 <_ZN13PeopleCounter4loopEv+0xac>)
   b4af2:	f3bf 8f5b 	dmb	ish
   b4af6:	f013 0f01 	tst.w	r3, #1
void PeopleCounter::loop(){                // This function is only called if there is a change in occupancy state
   b4afa:	4606      	mov	r6, r0
    static bool oldOccupancyCount = occupancyCount;
   b4afc:	d10b      	bne.n	b4b16 <_ZN13PeopleCounter4loopEv+0x2e>
   b4afe:	4638      	mov	r0, r7
   b4b00:	f7ff fada 	bl	b40b8 <__cxa_guard_acquire>
   b4b04:	b138      	cbz	r0, b4b16 <_ZN13PeopleCounter4loopEv+0x2e>
   b4b06:	6823      	ldr	r3, [r4, #0]
   b4b08:	3b00      	subs	r3, #0
   b4b0a:	bf18      	it	ne
   b4b0c:	2301      	movne	r3, #1
   b4b0e:	4638      	mov	r0, r7
   b4b10:	702b      	strb	r3, [r5, #0]
   b4b12:	f7ff fad6 	bl	b40c2 <__cxa_guard_release>
    switch (TofSensor::instance().getOccupancy()) {
   b4b16:	f7ff fc81 	bl	b441c <_ZN9TofSensor8instanceEv>
   b4b1a:	f7ff fd4d 	bl	b45b8 <_ZN9TofSensor12getOccupancyEv>
   b4b1e:	2803      	cmp	r0, #3
   b4b20:	d815      	bhi.n	b4b4e <_ZN13PeopleCounter4loopEv+0x66>
   b4b22:	e8df f000 	tbb	[pc, r0]
   b4b26:	0602      	.short	0x0602
   b4b28:	3021      	.short	0x3021
        oldOccupancyState = 0;
   b4b2a:	4b1b      	ldr	r3, [pc, #108]	; (b4b98 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4b2c:	2200      	movs	r2, #0
        atTheThreshold = true;
   b4b2e:	701a      	strb	r2, [r3, #0]
      break;
   b4b30:	e00d      	b.n	b4b4e <_ZN13PeopleCounter4loopEv+0x66>
        if (atTheThreshold) {
   b4b32:	491a      	ldr	r1, [pc, #104]	; (b4b9c <_ZN13PeopleCounter4loopEv+0xb4>)
   b4b34:	4a18      	ldr	r2, [pc, #96]	; (b4b98 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4b36:	780b      	ldrb	r3, [r1, #0]
   b4b38:	b13b      	cbz	r3, b4b4a <_ZN13PeopleCounter4loopEv+0x62>
          atTheThreshold = false;
   b4b3a:	2000      	movs	r0, #0
   b4b3c:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 2) {
   b4b3e:	7811      	ldrb	r1, [r2, #0]
            occupancyCount++; 
   b4b40:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 2) {
   b4b42:	2902      	cmp	r1, #2
            occupancyCount++; 
   b4b44:	bf04      	itt	eq
   b4b46:	3301      	addeq	r3, #1
   b4b48:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 1;
   b4b4a:	2301      	movs	r3, #1
        oldOccupancyState = 2;
   b4b4c:	7013      	strb	r3, [r2, #0]
    if (oldOccupancyCount != occupancyCount) printBigNumbers(occupancyCount);
   b4b4e:	6821      	ldr	r1, [r4, #0]
   b4b50:	782b      	ldrb	r3, [r5, #0]
   b4b52:	428b      	cmp	r3, r1
   b4b54:	d002      	beq.n	b4b5c <_ZN13PeopleCounter4loopEv+0x74>
   b4b56:	4630      	mov	r0, r6
   b4b58:	f7ff fd66 	bl	b4628 <_ZN13PeopleCounter15printBigNumbersEi>
    oldOccupancyCount = occupancyCount;
   b4b5c:	6823      	ldr	r3, [r4, #0]
   b4b5e:	3b00      	subs	r3, #0
   b4b60:	bf18      	it	ne
   b4b62:	2301      	movne	r3, #1
   b4b64:	702b      	strb	r3, [r5, #0]
}
   b4b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (atTheThreshold) {
   b4b68:	490c      	ldr	r1, [pc, #48]	; (b4b9c <_ZN13PeopleCounter4loopEv+0xb4>)
   b4b6a:	4a0b      	ldr	r2, [pc, #44]	; (b4b98 <_ZN13PeopleCounter4loopEv+0xb0>)
   b4b6c:	780b      	ldrb	r3, [r1, #0]
   b4b6e:	b143      	cbz	r3, b4b82 <_ZN13PeopleCounter4loopEv+0x9a>
          atTheThreshold = false;
   b4b70:	2000      	movs	r0, #0
   b4b72:	7008      	strb	r0, [r1, #0]
          if (oldOccupancyState == 1) {
   b4b74:	7811      	ldrb	r1, [r2, #0]
            occupancyCount++; 
   b4b76:	6823      	ldr	r3, [r4, #0]
          if (oldOccupancyState == 1) {
   b4b78:	2901      	cmp	r1, #1
            occupancyCount--;
   b4b7a:	bf04      	itt	eq
   b4b7c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   b4b80:	6023      	streq	r3, [r4, #0]
        oldOccupancyState = 2;
   b4b82:	2302      	movs	r3, #2
   b4b84:	e7e2      	b.n	b4b4c <_ZN13PeopleCounter4loopEv+0x64>
        atTheThreshold = true;
   b4b86:	4b05      	ldr	r3, [pc, #20]	; (b4b9c <_ZN13PeopleCounter4loopEv+0xb4>)
   b4b88:	2201      	movs	r2, #1
   b4b8a:	e7d0      	b.n	b4b2e <_ZN13PeopleCounter4loopEv+0x46>
   b4b8c:	2003e64c 	.word	0x2003e64c
   b4b90:	2003e659 	.word	0x2003e659
   b4b94:	2003e650 	.word	0x2003e650
   b4b98:	2003e65a 	.word	0x2003e65a
   b4b9c:	2003e658 	.word	0x2003e658

000b4ba0 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   b4ba0:	4770      	bx	lr

000b4ba2 <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   b4ba2:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   b4ba4:	6880      	ldr	r0, [r0, #8]
   b4ba6:	2800      	cmp	r0, #0
   b4ba8:	db03      	blt.n	b4bb2 <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   b4baa:	2100      	movs	r1, #0
   b4bac:	b280      	uxth	r0, r0
   b4bae:	f002 fca8 	bl	b7502 <digitalWrite>
       }
       delay(10);
    }
   b4bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4bb6:	200a      	movs	r0, #10
   b4bb8:	f000 bdc2 	b.w	b5740 <delay>

000b4bbc <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   b4bbc:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   b4bbe:	6880      	ldr	r0, [r0, #8]
   b4bc0:	2800      	cmp	r0, #0
   b4bc2:	db03      	blt.n	b4bcc <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   b4bc4:	2101      	movs	r1, #1
   b4bc6:	b280      	uxth	r0, r0
   b4bc8:	f002 fc9b 	bl	b7502 <digitalWrite>
    }
   b4bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   b4bd0:	200a      	movs	r0, #10
   b4bd2:	f000 bdb5 	b.w	b5740 <delay>

000b4bd6 <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   b4bd6:	b510      	push	{r4, lr}
   b4bd8:	211c      	movs	r1, #28
   b4bda:	4604      	mov	r4, r0
   b4bdc:	f7ff fa5d 	bl	b409a <_ZdlPvj>
   b4be0:	4620      	mov	r0, r4
   b4be2:	bd10      	pop	{r4, pc}

000b4be4 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   b4be4:	b513      	push	{r0, r1, r4, lr}
   b4be6:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   b4be8:	f10d 0106 	add.w	r1, sp, #6
   b4bec:	f000 fb25 	bl	b523a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   b4bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b4bf4:	6023      	str	r3, [r4, #0]
	return status;
    }
   b4bf6:	b002      	add	sp, #8
   b4bf8:	bd10      	pop	{r4, pc}

000b4bfa <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   b4bfa:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   b4bfc:	f10d 0106 	add.w	r1, sp, #6
   b4c00:	f000 fb0a 	bl	b5218 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   b4c04:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   b4c08:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   b4c0c:	1ac0      	subs	r0, r0, r3
   b4c0e:	bf18      	it	ne
   b4c10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4c14:	b003      	add	sp, #12
   b4c16:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c1a <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   b4c1a:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   b4c1c:	f000 f956 	bl	b4ecc <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   b4c20:	bd08      	pop	{r3, pc}
	...

000b4c24 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c28:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   b4c2c:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4c30:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   b4c34:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4c36:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4c38:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   b4c3a:	460f      	mov	r7, r1
   b4c3c:	4616      	mov	r6, r2
   b4c3e:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   b4c40:	f7ff fa27 	bl	b4092 <_Znwj>
   b4c44:	4604      	mov	r4, r0
   b4c46:	b180      	cbz	r0, b4c6a <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4c48:	4b0a      	ldr	r3, [pc, #40]	; (b4c74 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   b4c4a:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4c4e:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   b4c52:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   b4c54:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   b4c58:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   b4c5c:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   b4c5e:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   b4c60:	db03      	blt.n	b4c6a <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   b4c62:	2101      	movs	r1, #1
   b4c64:	b2b0      	uxth	r0, r6
   b4c66:	f002 fc3b 	bl	b74e0 <pinMode>
   b4c6a:	612c      	str	r4, [r5, #16]
}
   b4c6c:	4628      	mov	r0, r5
   b4c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4c72:	bf00      	nop
   b4c74:	000b7d90 	.word	0x000b7d90

000b4c78 <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   b4c78:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   b4c7a:	f10d 0106 	add.w	r1, sp, #6
   b4c7e:	6900      	ldr	r0, [r0, #16]
   b4c80:	f000 faca 	bl	b5218 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   b4c84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   b4c88:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   b4c8c:	1ac3      	subs	r3, r0, r3
   b4c8e:	4258      	negs	r0, r3
   b4c90:	4158      	adcs	r0, r3
   b4c92:	b003      	add	sp, #12
   b4c94:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c98 <_ZN10SFEVL53L1X5beginEv>:
{
   b4c98:	b510      	push	{r4, lr}
   b4c9a:	4604      	mov	r4, r0
	if (checkID() == false)
   b4c9c:	f7ff ffec 	bl	b4c78 <_ZN10SFEVL53L1X7checkIDEv>
   b4ca0:	b130      	cbz	r0, b4cb0 <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
   b4ca2:	6920      	ldr	r0, [r4, #16]
   b4ca4:	f000 f912 	bl	b4ecc <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   b4ca8:	3800      	subs	r0, #0
   b4caa:	bf18      	it	ne
   b4cac:	2001      	movne	r0, #1
}
   b4cae:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   b4cb0:	2001      	movs	r0, #1
   b4cb2:	e7fc      	b.n	b4cae <_ZN10SFEVL53L1X5beginEv+0x16>

000b4cb4 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   b4cb4:	6900      	ldr	r0, [r0, #16]
   b4cb6:	f000 b85b 	b.w	b4d70 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000b4cba <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   b4cba:	6900      	ldr	r0, [r0, #16]
   b4cbc:	f000 b85d 	b.w	b4d7a <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000b4cc0 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   b4cc0:	6900      	ldr	r0, [r0, #16]
   b4cc2:	f000 b85f 	b.w	b4d84 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000b4cc6 <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   b4cc6:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   b4cc8:	f10d 0107 	add.w	r1, sp, #7
   b4ccc:	6900      	ldr	r0, [r0, #16]
   b4cce:	f000 f8e1 	bl	b4e94 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   b4cd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   b4cd6:	3800      	subs	r0, #0
   b4cd8:	bf18      	it	ne
   b4cda:	2001      	movne	r0, #1
   b4cdc:	b003      	add	sp, #12
   b4cde:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ce2 <_ZN10SFEVL53L1X19setTimingBudgetInMsEt>:

void SFEVL53L1X::setTimingBudgetInMs(uint16_t timingBudget)
{
	_device->VL53L1X_SetTimingBudgetInMs(timingBudget);
   b4ce2:	6900      	ldr	r0, [r0, #16]
   b4ce4:	f000 b944 	b.w	b4f70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>

000b4ce8 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
   b4ce8:	6900      	ldr	r0, [r0, #16]
   b4cea:	2102      	movs	r1, #2
   b4cec:	f000 ba39 	b.w	b5162 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

000b4cf0 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   b4cf0:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   b4cf2:	f10d 0106 	add.w	r1, sp, #6
   b4cf6:	6900      	ldr	r0, [r0, #16]
   b4cf8:	f000 fa9f 	bl	b523a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   b4cfc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   b4d00:	b003      	add	sp, #12
   b4d02:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d06 <_ZN10SFEVL53L1X6setROIEhhh>:
	return temp;
}

void SFEVL53L1X::setROI(uint8_t x, uint8_t y, uint8_t opticalCenter)
{
	_device->VL53L1X_SetROI(x, y, opticalCenter);
   b4d06:	6900      	ldr	r0, [r0, #16]
   b4d08:	f000 b841 	b.w	b4d8e <_ZN7VL53L1X14VL53L1X_SetROIEhhh>

000b4d0c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   b4d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4d0e:	4604      	mov	r4, r0
   b4d10:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4d12:	6840      	ldr	r0, [r0, #4]
{
   b4d14:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4d18:	0849      	lsrs	r1, r1, #1
{
   b4d1a:	461e      	mov	r6, r3
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4d1c:	f000 fe50 	bl	b59c0 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   b4d20:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   b4d22:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
   b4d24:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
   b4d28:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
   b4d2c:	6803      	ldr	r3, [r0, #0]
   b4d2e:	2202      	movs	r2, #2
   b4d30:	68db      	ldr	r3, [r3, #12]
   b4d32:	a901      	add	r1, sp, #4
   b4d34:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4d36:	2500      	movs	r5, #0
   b4d38:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
   b4d3a:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
   b4d3c:	dd05      	ble.n	b4d4a <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
   b4d3e:	6803      	ldr	r3, [r0, #0]
   b4d40:	5d71      	ldrb	r1, [r6, r5]
   b4d42:	689b      	ldr	r3, [r3, #8]
   b4d44:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   b4d46:	3501      	adds	r5, #1
   b4d48:	e7f6      	b.n	b4d38 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
   b4d4a:	2101      	movs	r1, #1
   b4d4c:	f000 fe3c 	bl	b59c8 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   b4d50:	2000      	movs	r0, #0
   b4d52:	b003      	add	sp, #12
   b4d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   b4d56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4d58:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   b4d5c:	2301      	movs	r3, #1
   b4d5e:	7809      	ldrb	r1, [r1, #0]
   b4d60:	9300      	str	r3, [sp, #0]
   b4d62:	f10d 030f 	add.w	r3, sp, #15
   b4d66:	f7ff ffd1 	bl	b4d0c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b4d6a:	b005      	add	sp, #20
   b4d6c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d70 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   b4d70:	6981      	ldr	r1, [r0, #24]
   b4d72:	2301      	movs	r3, #1
   b4d74:	2286      	movs	r2, #134	; 0x86
   b4d76:	f7ff bfee 	b.w	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4d7a <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   b4d7a:	6981      	ldr	r1, [r0, #24]
   b4d7c:	2340      	movs	r3, #64	; 0x40
   b4d7e:	2287      	movs	r2, #135	; 0x87
   b4d80:	f7ff bfe9 	b.w	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4d84 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   b4d84:	6981      	ldr	r1, [r0, #24]
   b4d86:	2300      	movs	r3, #0
   b4d88:	2287      	movs	r2, #135	; 0x87
   b4d8a:	f7ff bfe4 	b.w	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000b4d8e <_ZN7VL53L1X14VL53L1X_SetROIEhhh>:
	if (X > 16)
   b4d8e:	2910      	cmp	r1, #16
{
   b4d90:	b570      	push	{r4, r5, r6, lr}
   b4d92:	460d      	mov	r5, r1
   b4d94:	bf28      	it	cs
   b4d96:	2510      	movcs	r5, #16
	if (Y > 16)
   b4d98:	2a10      	cmp	r2, #16
   b4d9a:	4616      	mov	r6, r2
   b4d9c:	bf28      	it	cs
   b4d9e:	2610      	movcs	r6, #16
	if (X > 10 || Y > 10)
   b4da0:	290a      	cmp	r1, #10
{
   b4da2:	4604      	mov	r4, r0
	if (X > 10 || Y > 10)
   b4da4:	d813      	bhi.n	b4dce <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x40>
		opticalCenter = 199;
   b4da6:	2a0b      	cmp	r2, #11
   b4da8:	bf28      	it	cs
   b4daa:	23c7      	movcs	r3, #199	; 0xc7
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_CENTRE_SPAD, opticalCenter);
   b4dac:	69a1      	ldr	r1, [r4, #24]
   b4dae:	227f      	movs	r2, #127	; 0x7f
   b4db0:	4620      	mov	r0, r4
   b4db2:	f7ff ffd0 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
						   (Y - 1) << 4 | (X - 1));
   b4db6:	3d01      	subs	r5, #1
   b4db8:	1e73      	subs	r3, r6, #1
   b4dba:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4dbe:	69a1      	ldr	r1, [r4, #24]
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	b2db      	uxtb	r3, r3
}
   b4dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	status = VL53L1_WrByte(Device, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
   b4dc8:	2280      	movs	r2, #128	; 0x80
   b4dca:	f7ff bfc4 	b.w	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		opticalCenter = 199;
   b4dce:	23c7      	movs	r3, #199	; 0xc7
   b4dd0:	e7ec      	b.n	b4dac <_ZN7VL53L1X14VL53L1X_SetROIEhhh+0x1e>

000b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
   b4dd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
   b4dd4:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
   b4dd6:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4dda:	2302      	movs	r3, #2
   b4ddc:	7809      	ldrb	r1, [r1, #0]
   b4dde:	9300      	str	r3, [sp, #0]
   b4de0:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
   b4de2:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
   b4de6:	f7ff ff91 	bl	b4d0c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   b4dea:	b004      	add	sp, #16
   b4dec:	bd10      	pop	{r4, pc}

000b4dee <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   b4dee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4df2:	4604      	mov	r4, r0
   b4df4:	4690      	mov	r8, r2
   b4df6:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4df8:	084f      	lsrs	r7, r1, #1
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   b4dfa:	ea4f 2912 	mov.w	r9, r2, lsr #8
   b4dfe:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   b4e00:	6860      	ldr	r0, [r4, #4]
   b4e02:	4639      	mov	r1, r7
   b4e04:	f000 fddc 	bl	b59c0 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   b4e08:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   b4e0a:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
   b4e0e:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
   b4e12:	6803      	ldr	r3, [r0, #0]
   b4e14:	a901      	add	r1, sp, #4
   b4e16:	68db      	ldr	r3, [r3, #12]
   b4e18:	2202      	movs	r2, #2
   b4e1a:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   b4e1c:	6860      	ldr	r0, [r4, #4]
   b4e1e:	2100      	movs	r1, #0
   b4e20:	f000 fdd2 	bl	b59c8 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   b4e24:	b118      	cbz	r0, b4e2e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
   b4e26:	3e01      	subs	r6, #1
   b4e28:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b4e2c:	d1e8      	bne.n	b4e00 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   b4e2e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b4e32:	6860      	ldr	r0, [r4, #4]
   b4e34:	4639      	mov	r1, r7
   b4e36:	f000 fdc0 	bl	b59ba <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   b4e3a:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   b4e3c:	6860      	ldr	r0, [r4, #4]
   b4e3e:	6803      	ldr	r3, [r0, #0]
   b4e40:	691b      	ldr	r3, [r3, #16]
   b4e42:	4798      	blx	r3
   b4e44:	b130      	cbz	r0, b4e54 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
   b4e46:	6860      	ldr	r0, [r4, #4]
   b4e48:	6803      	ldr	r3, [r0, #0]
   b4e4a:	695b      	ldr	r3, [r3, #20]
   b4e4c:	4798      	blx	r3
   b4e4e:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   b4e52:	e7f3      	b.n	b4e3c <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
   b4e54:	b003      	add	sp, #12
   b4e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4e5a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   b4e5a:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   b4e5c:	2401      	movs	r4, #1
   b4e5e:	7809      	ldrb	r1, [r1, #0]
   b4e60:	9400      	str	r4, [sp, #0]
   b4e62:	f7ff ffc4 	bl	b4dee <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   b4e66:	3800      	subs	r0, #0
   b4e68:	bf18      	it	ne
   b4e6a:	2001      	movne	r0, #1
}
   b4e6c:	4240      	negs	r0, r0
   b4e6e:	b002      	add	sp, #8
   b4e70:	bd10      	pop	{r4, pc}

000b4e72 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   b4e72:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4e74:	2230      	movs	r2, #48	; 0x30
{
   b4e76:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   b4e78:	f10d 0307 	add.w	r3, sp, #7
   b4e7c:	6981      	ldr	r1, [r0, #24]
   b4e7e:	f7ff ffec 	bl	b4e5a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
   b4e82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4e86:	ea6f 1313 	mvn.w	r3, r3, lsr #4
   b4e8a:	f003 0301 	and.w	r3, r3, #1
   b4e8e:	7023      	strb	r3, [r4, #0]
}
   b4e90:	b002      	add	sp, #8
   b4e92:	bd10      	pop	{r4, pc}

000b4e94 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   b4e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e96:	4605      	mov	r5, r0
   b4e98:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   b4e9a:	f10d 0107 	add.w	r1, sp, #7
   b4e9e:	f7ff ffe8 	bl	b4e72 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   b4ea2:	69a9      	ldr	r1, [r5, #24]
   b4ea4:	f10d 0306 	add.w	r3, sp, #6
   b4ea8:	2231      	movs	r2, #49	; 0x31
   b4eaa:	4628      	mov	r0, r5
   b4eac:	f7ff ffd5 	bl	b4e5a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   b4eb0:	b950      	cbnz	r0, b4ec8 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   b4eb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4eb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b4eba:	f003 0301 	and.w	r3, r3, #1
   b4ebe:	429a      	cmp	r2, r3
			*isDataReady = 1;
   b4ec0:	bf06      	itte	eq
   b4ec2:	2301      	moveq	r3, #1
   b4ec4:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   b4ec6:	7020      	strbne	r0, [r4, #0]
}
   b4ec8:	b003      	add	sp, #12
   b4eca:	bd30      	pop	{r4, r5, pc}

000b4ecc <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   b4ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4ece:	2300      	movs	r3, #0
   b4ed0:	4e1c      	ldr	r6, [pc, #112]	; (b4f44 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   b4ed2:	f88d 3007 	strb.w	r3, [sp, #7]
{
   b4ed6:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   b4ed8:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4eda:	b2aa      	uxth	r2, r5
   b4edc:	f816 3b01 	ldrb.w	r3, [r6], #1
   b4ee0:	69a1      	ldr	r1, [r4, #24]
   b4ee2:	4620      	mov	r0, r4
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4ee4:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   b4ee6:	f7ff ff36 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   b4eea:	2d88      	cmp	r5, #136	; 0x88
   b4eec:	d1f5      	bne.n	b4eda <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   b4eee:	4620      	mov	r0, r4
   b4ef0:	f7ff ff43 	bl	b4d7a <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   b4ef4:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   b4ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4efa:	b963      	cbnz	r3, b4f16 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4efc:	f10d 0107 	add.w	r1, sp, #7
   b4f00:	4620      	mov	r0, r4
		if (timeout++ > 150)
   b4f02:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
   b4f04:	f7ff ffc6 	bl	b4e94 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   b4f08:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4f0c:	d017      	beq.n	b4f3e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   b4f0e:	2001      	movs	r0, #1
   b4f10:	f000 fc16 	bl	b5740 <delay>
	while (dataReady == 0)
   b4f14:	e7ef      	b.n	b4ef6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   b4f16:	4620      	mov	r0, r4
   b4f18:	f7ff ff2a 	bl	b4d70 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	f7ff ff31 	bl	b4d84 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   b4f22:	69a1      	ldr	r1, [r4, #24]
   b4f24:	2309      	movs	r3, #9
   b4f26:	2208      	movs	r2, #8
   b4f28:	4620      	mov	r0, r4
   b4f2a:	f7ff ff14 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   b4f2e:	69a1      	ldr	r1, [r4, #24]
   b4f30:	2300      	movs	r3, #0
   b4f32:	220b      	movs	r2, #11
   b4f34:	4620      	mov	r0, r4
   b4f36:	f7ff ff0e 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   b4f3a:	b002      	add	sp, #8
   b4f3c:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   b4f3e:	f06f 0006 	mvn.w	r0, #6
   b4f42:	e7fa      	b.n	b4f3a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   b4f44:	000b7dac 	.word	0x000b7dac

000b4f48 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
   b4f48:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4f4a:	224b      	movs	r2, #75	; 0x4b
   b4f4c:	f10d 0307 	add.w	r3, sp, #7
{
   b4f50:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
   b4f52:	6981      	ldr	r1, [r0, #24]
   b4f54:	f7ff ff81 	bl	b4e5a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
   b4f58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4f5c:	2b14      	cmp	r3, #20
   b4f5e:	d103      	bne.n	b4f68 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
   b4f60:	2301      	movs	r3, #1
		*DM = 2;
   b4f62:	8023      	strh	r3, [r4, #0]
}
   b4f64:	b002      	add	sp, #8
   b4f66:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
   b4f68:	2b0a      	cmp	r3, #10
   b4f6a:	d1fb      	bne.n	b4f64 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
   b4f6c:	2302      	movs	r3, #2
   b4f6e:	e7f8      	b.n	b4f62 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

000b4f70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
   b4f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4f72:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
   b4f74:	f10d 0106 	add.w	r1, sp, #6
{
   b4f78:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
   b4f7a:	f7ff ffe5 	bl	b4f48 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
   b4f7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
   b4f82:	4606      	mov	r6, r0
	if (DM == 0)
   b4f84:	b153      	cbz	r3, b4f9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
   b4f86:	2b01      	cmp	r3, #1
   b4f88:	d152      	bne.n	b5030 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
   b4f8a:	2d32      	cmp	r5, #50	; 0x32
   b4f8c:	d032      	beq.n	b4ff4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
   b4f8e:	d807      	bhi.n	b4fa0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
   b4f90:	2d14      	cmp	r5, #20
   b4f92:	d025      	beq.n	b4fe0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
   b4f94:	2d21      	cmp	r5, #33	; 0x21
   b4f96:	d02b      	beq.n	b4ff0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
   b4f98:	2d0f      	cmp	r5, #15
   b4f9a:	d012      	beq.n	b4fc2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
   b4f9c:	2601      	movs	r6, #1
   b4f9e:	e01c      	b.n	b4fda <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
   b4fa0:	2dc8      	cmp	r5, #200	; 0xc8
   b4fa2:	d031      	beq.n	b5008 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
   b4fa4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b4fa8:	d038      	beq.n	b501c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
   b4faa:	2d64      	cmp	r5, #100	; 0x64
   b4fac:	d1f6      	bne.n	b4f9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4fae:	f240 23e1 	movw	r3, #737	; 0x2e1
   b4fb2:	69a1      	ldr	r1, [r4, #24]
   b4fb4:	225e      	movs	r2, #94	; 0x5e
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	f7ff ff0b 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4fbc:	f44f 7362 	mov.w	r3, #904	; 0x388
   b4fc0:	e006      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4fc2:	231d      	movs	r3, #29
   b4fc4:	69a1      	ldr	r1, [r4, #24]
   b4fc6:	225e      	movs	r2, #94	; 0x5e
   b4fc8:	4620      	mov	r0, r4
   b4fca:	f7ff ff02 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4fce:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4fd0:	69a1      	ldr	r1, [r4, #24]
   b4fd2:	2261      	movs	r2, #97	; 0x61
   b4fd4:	4620      	mov	r0, r4
   b4fd6:	f7ff fefc 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
   b4fda:	4630      	mov	r0, r6
   b4fdc:	b002      	add	sp, #8
   b4fde:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4fe0:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4fe2:	69a1      	ldr	r1, [r4, #24]
   b4fe4:	225e      	movs	r2, #94	; 0x5e
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	f7ff fef3 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b4fec:	236e      	movs	r3, #110	; 0x6e
   b4fee:	e7ef      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ff0:	23d6      	movs	r3, #214	; 0xd6
   b4ff2:	e7f6      	b.n	b4fe2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b4ff4:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   b4ff8:	69a1      	ldr	r1, [r4, #24]
   b4ffa:	225e      	movs	r2, #94	; 0x5e
   b4ffc:	4620      	mov	r0, r4
   b4ffe:	f7ff fee8 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5002:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   b5006:	e7e3      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5008:	f240 33e1 	movw	r3, #993	; 0x3e1
   b500c:	69a1      	ldr	r1, [r4, #24]
   b500e:	225e      	movs	r2, #94	; 0x5e
   b5010:	4620      	mov	r0, r4
   b5012:	f7ff fede 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5016:	f240 4396 	movw	r3, #1174	; 0x496
   b501a:	e7d9      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b501c:	f240 5391 	movw	r3, #1425	; 0x591
   b5020:	69a1      	ldr	r1, [r4, #24]
   b5022:	225e      	movs	r2, #94	; 0x5e
   b5024:	4620      	mov	r0, r4
   b5026:	f7ff fed4 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b502a:	f240 53c1 	movw	r3, #1473	; 0x5c1
   b502e:	e7cf      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5030:	2d64      	cmp	r5, #100	; 0x64
   b5032:	d027      	beq.n	b5084 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
   b5034:	d80d      	bhi.n	b5052 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
   b5036:	2d21      	cmp	r5, #33	; 0x21
   b5038:	d01a      	beq.n	b5070 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
   b503a:	2d32      	cmp	r5, #50	; 0x32
   b503c:	d01a      	beq.n	b5074 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
   b503e:	2d14      	cmp	r5, #20
   b5040:	d1ac      	bne.n	b4f9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5042:	231e      	movs	r3, #30
   b5044:	69a1      	ldr	r1, [r4, #24]
   b5046:	225e      	movs	r2, #94	; 0x5e
   b5048:	4620      	mov	r0, r4
   b504a:	f7ff fec2 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b504e:	2322      	movs	r3, #34	; 0x22
   b5050:	e7be      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
   b5052:	2dc8      	cmp	r5, #200	; 0xc8
   b5054:	d020      	beq.n	b5098 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
   b5056:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   b505a:	d19f      	bne.n	b4f9c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b505c:	f240 438f 	movw	r3, #1167	; 0x48f
   b5060:	69a1      	ldr	r1, [r4, #24]
   b5062:	225e      	movs	r2, #94	; 0x5e
   b5064:	4620      	mov	r0, r4
   b5066:	f7ff feb4 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b506a:	f240 43a4 	movw	r3, #1188	; 0x4a4
   b506e:	e7af      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5070:	2360      	movs	r3, #96	; 0x60
   b5072:	e7b6      	b.n	b4fe2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5074:	23ad      	movs	r3, #173	; 0xad
   b5076:	69a1      	ldr	r1, [r4, #24]
   b5078:	225e      	movs	r2, #94	; 0x5e
   b507a:	4620      	mov	r0, r4
   b507c:	f7ff fea9 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5080:	23c6      	movs	r3, #198	; 0xc6
   b5082:	e7a5      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5084:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   b5088:	69a1      	ldr	r1, [r4, #24]
   b508a:	225e      	movs	r2, #94	; 0x5e
   b508c:	4620      	mov	r0, r4
   b508e:	f7ff fea0 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b5092:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   b5096:	e79b      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
   b5098:	f240 23d9 	movw	r3, #729	; 0x2d9
   b509c:	69a1      	ldr	r1, [r4, #24]
   b509e:	225e      	movs	r2, #94	; 0x5e
   b50a0:	4620      	mov	r0, r4
   b50a2:	f7ff fe96 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
   b50a6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   b50aa:	e791      	b.n	b4fd0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

000b50ac <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   b50ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b50ae:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   b50b0:	2300      	movs	r3, #0
   b50b2:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   b50b6:	2302      	movs	r3, #2
   b50b8:	7809      	ldrb	r1, [r1, #0]
   b50ba:	9300      	str	r3, [sp, #0]
   b50bc:	ab03      	add	r3, sp, #12
   b50be:	f7ff fe96 	bl	b4dee <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   b50c2:	b930      	cbnz	r0, b50d2 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   b50c4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b50c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b50cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b50d0:	8023      	strh	r3, [r4, #0]
}
   b50d2:	b004      	add	sp, #16
   b50d4:	bd10      	pop	{r4, pc}

000b50d6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
   b50d6:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b50d8:	225e      	movs	r2, #94	; 0x5e
   b50da:	f10d 0306 	add.w	r3, sp, #6
{
   b50de:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
   b50e0:	6981      	ldr	r1, [r0, #24]
   b50e2:	f7ff ffe3 	bl	b50ac <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
   b50e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b50ea:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
   b50ee:	d034      	beq.n	b515a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b50f0:	d810      	bhi.n	b5114 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
   b50f2:	2b51      	cmp	r3, #81	; 0x51
   b50f4:	d02f      	beq.n	b5156 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
   b50f6:	d805      	bhi.n	b5104 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
   b50f8:	2b1d      	cmp	r3, #29
   b50fa:	d028      	beq.n	b514e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
   b50fc:	2b1e      	cmp	r3, #30
   b50fe:	d02a      	beq.n	b5156 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
   b5100:	2300      	movs	r3, #0
   b5102:	e025      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5104:	2bad      	cmp	r3, #173	; 0xad
   b5106:	d028      	beq.n	b515a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
   b5108:	2bd6      	cmp	r3, #214	; 0xd6
   b510a:	d001      	beq.n	b5110 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
   b510c:	2b60      	cmp	r3, #96	; 0x60
   b510e:	d1f7      	bne.n	b5100 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
   b5110:	2321      	movs	r3, #33	; 0x21
   b5112:	e01d      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5114:	f240 32e1 	movw	r2, #993	; 0x3e1
   b5118:	4293      	cmp	r3, r2
   b511a:	d020      	beq.n	b515e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b511c:	d80c      	bhi.n	b5138 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
   b511e:	f240 22d9 	movw	r2, #729	; 0x2d9
   b5122:	4293      	cmp	r3, r2
   b5124:	d01b      	beq.n	b515e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
   b5126:	f240 22e1 	movw	r2, #737	; 0x2e1
   b512a:	4293      	cmp	r3, r2
   b512c:	d002      	beq.n	b5134 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
   b512e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
   b5132:	d1e5      	bne.n	b5100 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
   b5134:	2364      	movs	r3, #100	; 0x64
   b5136:	e00b      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
   b5138:	f240 428f 	movw	r2, #1167	; 0x48f
   b513c:	4293      	cmp	r3, r2
   b513e:	d003      	beq.n	b5148 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
   b5140:	f240 5291 	movw	r2, #1425	; 0x591
   b5144:	4293      	cmp	r3, r2
   b5146:	d1db      	bne.n	b5100 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
   b5148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b514c:	e000      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
   b514e:	230f      	movs	r3, #15
		*pTimingBudget = 0;
   b5150:	8023      	strh	r3, [r4, #0]
}
   b5152:	b002      	add	sp, #8
   b5154:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
   b5156:	2314      	movs	r3, #20
   b5158:	e7fa      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
   b515a:	2332      	movs	r3, #50	; 0x32
   b515c:	e7f8      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
   b515e:	23c8      	movs	r3, #200	; 0xc8
   b5160:	e7f6      	b.n	b5150 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

000b5162 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
   b5162:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5164:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b5166:	f10d 0106 	add.w	r1, sp, #6
{
   b516a:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
   b516c:	f7ff ffb3 	bl	b50d6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
   b5170:	2d01      	cmp	r5, #1
   b5172:	d008      	beq.n	b5186 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
   b5174:	2d02      	cmp	r5, #2
   b5176:	d02d      	beq.n	b51d4 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
   b5178:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b517c:	4620      	mov	r0, r4
   b517e:	f7ff fef7 	bl	b4f70 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
   b5182:	b003      	add	sp, #12
   b5184:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
   b5186:	69a1      	ldr	r1, [r4, #24]
   b5188:	2314      	movs	r3, #20
   b518a:	224b      	movs	r2, #75	; 0x4b
   b518c:	4620      	mov	r0, r4
   b518e:	f7ff fde2 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b5192:	69a1      	ldr	r1, [r4, #24]
   b5194:	2307      	movs	r3, #7
   b5196:	2260      	movs	r2, #96	; 0x60
   b5198:	4620      	mov	r0, r4
   b519a:	f7ff fddc 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b519e:	69a1      	ldr	r1, [r4, #24]
   b51a0:	2305      	movs	r3, #5
   b51a2:	2263      	movs	r2, #99	; 0x63
   b51a4:	4620      	mov	r0, r4
   b51a6:	f7ff fdd6 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b51aa:	69a1      	ldr	r1, [r4, #24]
   b51ac:	2338      	movs	r3, #56	; 0x38
   b51ae:	2269      	movs	r2, #105	; 0x69
   b51b0:	4620      	mov	r0, r4
   b51b2:	f7ff fdd0 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
   b51b6:	f240 7305 	movw	r3, #1797	; 0x705
   b51ba:	69a1      	ldr	r1, [r4, #24]
   b51bc:	2278      	movs	r2, #120	; 0x78
   b51be:	4620      	mov	r0, r4
   b51c0:	f7ff fe07 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
   b51c4:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b51c8:	69a1      	ldr	r1, [r4, #24]
   b51ca:	227a      	movs	r2, #122	; 0x7a
   b51cc:	4620      	mov	r0, r4
   b51ce:	f7ff fe00 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
   b51d2:	e7d1      	b.n	b5178 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
   b51d4:	69a1      	ldr	r1, [r4, #24]
   b51d6:	230a      	movs	r3, #10
   b51d8:	224b      	movs	r2, #75	; 0x4b
   b51da:	4620      	mov	r0, r4
   b51dc:	f7ff fdbb 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b51e0:	69a1      	ldr	r1, [r4, #24]
   b51e2:	230f      	movs	r3, #15
   b51e4:	2260      	movs	r2, #96	; 0x60
   b51e6:	4620      	mov	r0, r4
   b51e8:	f7ff fdb5 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b51ec:	69a1      	ldr	r1, [r4, #24]
   b51ee:	230d      	movs	r3, #13
   b51f0:	2263      	movs	r2, #99	; 0x63
   b51f2:	4620      	mov	r0, r4
   b51f4:	f7ff fdaf 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b51f8:	69a1      	ldr	r1, [r4, #24]
   b51fa:	23b8      	movs	r3, #184	; 0xb8
   b51fc:	2269      	movs	r2, #105	; 0x69
   b51fe:	4620      	mov	r0, r4
   b5200:	f7ff fda9 	bl	b4d56 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
   b5204:	f640 730d 	movw	r3, #3853	; 0xf0d
   b5208:	69a1      	ldr	r1, [r4, #24]
   b520a:	2278      	movs	r2, #120	; 0x78
   b520c:	4620      	mov	r0, r4
   b520e:	f7ff fde0 	bl	b4dd2 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
   b5212:	f640 630e 	movw	r3, #3598	; 0xe0e
   b5216:	e7d7      	b.n	b51c8 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

000b5218 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   b5218:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   b521a:	2300      	movs	r3, #0
{
   b521c:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   b521e:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   b5222:	6981      	ldr	r1, [r0, #24]
   b5224:	f10d 0306 	add.w	r3, sp, #6
   b5228:	f240 120f 	movw	r2, #271	; 0x10f
   b522c:	f7ff ff3e 	bl	b50ac <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   b5230:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b5234:	8023      	strh	r3, [r4, #0]
}
   b5236:	b002      	add	sp, #8
   b5238:	bd10      	pop	{r4, pc}

000b523a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   b523a:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   b523c:	2296      	movs	r2, #150	; 0x96
{
   b523e:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   b5240:	f10d 0306 	add.w	r3, sp, #6
   b5244:	6981      	ldr	r1, [r0, #24]
   b5246:	f7ff ff31 	bl	b50ac <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   b524a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   b524e:	8023      	strh	r3, [r4, #0]
}
   b5250:	b002      	add	sp, #8
   b5252:	bd10      	pop	{r4, pc}

000b5254 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5254:	b508      	push	{r3, lr}
   b5256:	4b02      	ldr	r3, [pc, #8]	; (b5260 <os_mutex_recursive_create+0xc>)
   b5258:	681b      	ldr	r3, [r3, #0]
   b525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b525c:	9301      	str	r3, [sp, #4]
   b525e:	bd08      	pop	{r3, pc}
   b5260:	00030248 	.word	0x00030248

000b5264 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5264:	b508      	push	{r3, lr}
   b5266:	4b02      	ldr	r3, [pc, #8]	; (b5270 <os_mutex_recursive_destroy+0xc>)
   b5268:	681b      	ldr	r3, [r3, #0]
   b526a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b526c:	9301      	str	r3, [sp, #4]
   b526e:	bd08      	pop	{r3, pc}
   b5270:	00030248 	.word	0x00030248

000b5274 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5274:	b508      	push	{r3, lr}
   b5276:	4b02      	ldr	r3, [pc, #8]	; (b5280 <os_mutex_recursive_lock+0xc>)
   b5278:	681b      	ldr	r3, [r3, #0]
   b527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b527c:	9301      	str	r3, [sp, #4]
   b527e:	bd08      	pop	{r3, pc}
   b5280:	00030248 	.word	0x00030248

000b5284 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5284:	b508      	push	{r3, lr}
   b5286:	4b02      	ldr	r3, [pc, #8]	; (b5290 <os_mutex_recursive_unlock+0xc>)
   b5288:	681b      	ldr	r3, [r3, #0]
   b528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b528c:	9301      	str	r3, [sp, #4]
   b528e:	bd08      	pop	{r3, pc}
   b5290:	00030248 	.word	0x00030248

000b5294 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5294:	b508      	push	{r3, lr}
   b5296:	4b02      	ldr	r3, [pc, #8]	; (b52a0 <HAL_RNG_GetRandomNumber+0xc>)
   b5298:	681b      	ldr	r3, [r3, #0]
   b529a:	685b      	ldr	r3, [r3, #4]
   b529c:	9301      	str	r3, [sp, #4]
   b529e:	bd08      	pop	{r3, pc}
   b52a0:	00030218 	.word	0x00030218

000b52a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b52a4:	b508      	push	{r3, lr}
   b52a6:	4b02      	ldr	r3, [pc, #8]	; (b52b0 <HAL_Delay_Microseconds+0xc>)
   b52a8:	681b      	ldr	r3, [r3, #0]
   b52aa:	68db      	ldr	r3, [r3, #12]
   b52ac:	9301      	str	r3, [sp, #4]
   b52ae:	bd08      	pop	{r3, pc}
   b52b0:	00030218 	.word	0x00030218

000b52b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b52b4:	b508      	push	{r3, lr}
   b52b6:	4b02      	ldr	r3, [pc, #8]	; (b52c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b52b8:	681b      	ldr	r3, [r3, #0]
   b52ba:	695b      	ldr	r3, [r3, #20]
   b52bc:	9301      	str	r3, [sp, #4]
   b52be:	bd08      	pop	{r3, pc}
   b52c0:	00030218 	.word	0x00030218

000b52c4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b52c4:	b508      	push	{r3, lr}
   b52c6:	4b02      	ldr	r3, [pc, #8]	; (b52d0 <hal_timer_millis+0xc>)
   b52c8:	681b      	ldr	r3, [r3, #0]
   b52ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b52cc:	9301      	str	r3, [sp, #4]
   b52ce:	bd08      	pop	{r3, pc}
   b52d0:	00030218 	.word	0x00030218

000b52d4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b52d4:	b508      	push	{r3, lr}
   b52d6:	4b02      	ldr	r3, [pc, #8]	; (b52e0 <HAL_Pin_Mode+0xc>)
   b52d8:	681b      	ldr	r3, [r3, #0]
   b52da:	689b      	ldr	r3, [r3, #8]
   b52dc:	9301      	str	r3, [sp, #4]
   b52de:	bd08      	pop	{r3, pc}
   b52e0:	0003022c 	.word	0x0003022c

000b52e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b52e4:	b508      	push	{r3, lr}
   b52e6:	4b02      	ldr	r3, [pc, #8]	; (b52f0 <HAL_Get_Pin_Mode+0xc>)
   b52e8:	681b      	ldr	r3, [r3, #0]
   b52ea:	68db      	ldr	r3, [r3, #12]
   b52ec:	9301      	str	r3, [sp, #4]
   b52ee:	bd08      	pop	{r3, pc}
   b52f0:	0003022c 	.word	0x0003022c

000b52f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b52f4:	b508      	push	{r3, lr}
   b52f6:	4b02      	ldr	r3, [pc, #8]	; (b5300 <HAL_GPIO_Write+0xc>)
   b52f8:	681b      	ldr	r3, [r3, #0]
   b52fa:	691b      	ldr	r3, [r3, #16]
   b52fc:	9301      	str	r3, [sp, #4]
   b52fe:	bd08      	pop	{r3, pc}
   b5300:	0003022c 	.word	0x0003022c

000b5304 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5304:	b508      	push	{r3, lr}
   b5306:	4b02      	ldr	r3, [pc, #8]	; (b5310 <HAL_GPIO_Read+0xc>)
   b5308:	681b      	ldr	r3, [r3, #0]
   b530a:	695b      	ldr	r3, [r3, #20]
   b530c:	9301      	str	r3, [sp, #4]
   b530e:	bd08      	pop	{r3, pc}
   b5310:	0003022c 	.word	0x0003022c

000b5314 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5314:	b508      	push	{r3, lr}
   b5316:	4b02      	ldr	r3, [pc, #8]	; (b5320 <hal_i2c_begin+0xc>)
   b5318:	681b      	ldr	r3, [r3, #0]
   b531a:	68db      	ldr	r3, [r3, #12]
   b531c:	9301      	str	r3, [sp, #4]
   b531e:	bd08      	pop	{r3, pc}
   b5320:	00030228 	.word	0x00030228

000b5324 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b02      	ldr	r3, [pc, #8]	; (b5330 <hal_i2c_begin_transmission+0xc>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	699b      	ldr	r3, [r3, #24]
   b532c:	9301      	str	r3, [sp, #4]
   b532e:	bd08      	pop	{r3, pc}
   b5330:	00030228 	.word	0x00030228

000b5334 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5334:	b508      	push	{r3, lr}
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <hal_i2c_end_transmission+0xc>)
   b5338:	681b      	ldr	r3, [r3, #0]
   b533a:	69db      	ldr	r3, [r3, #28]
   b533c:	9301      	str	r3, [sp, #4]
   b533e:	bd08      	pop	{r3, pc}
   b5340:	00030228 	.word	0x00030228

000b5344 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <hal_i2c_write+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	6a1b      	ldr	r3, [r3, #32]
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	00030228 	.word	0x00030228

000b5354 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <hal_i2c_available+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	00030228 	.word	0x00030228

000b5364 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <hal_i2c_read+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	00030228 	.word	0x00030228

000b5374 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <hal_i2c_peek+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	00030228 	.word	0x00030228

000b5384 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <hal_i2c_flush+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	00030228 	.word	0x00030228

000b5394 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <hal_i2c_is_enabled+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	00030228 	.word	0x00030228

000b53a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <hal_i2c_init+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	00030228 	.word	0x00030228

000b53b4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <hal_i2c_request_ex+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	00030228 	.word	0x00030228

000b53c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <inet_inet_ntop+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	695b      	ldr	r3, [r3, #20]
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	00030264 	.word	0x00030264

000b53d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <netdb_freeaddrinfo+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	689b      	ldr	r3, [r3, #8]
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	00030268 	.word	0x00030268

000b53e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <netdb_getaddrinfo+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	68db      	ldr	r3, [r3, #12]
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	00030268 	.word	0x00030268

000b53f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <hal_spi_init+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	69db      	ldr	r3, [r3, #28]
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030230 	.word	0x00030230

000b5404 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <hal_spi_is_enabled+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	6a1b      	ldr	r3, [r3, #32]
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030230 	.word	0x00030230

000b5414 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <hal_usart_end+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	689b      	ldr	r3, [r3, #8]
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	0003023c 	.word	0x0003023c

000b5424 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <hal_usart_write+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	68db      	ldr	r3, [r3, #12]
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	0003023c 	.word	0x0003023c

000b5434 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <hal_usart_available+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	691b      	ldr	r3, [r3, #16]
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	0003023c 	.word	0x0003023c

000b5444 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <hal_usart_read+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	695b      	ldr	r3, [r3, #20]
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	0003023c 	.word	0x0003023c

000b5454 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <hal_usart_peek+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	699b      	ldr	r3, [r3, #24]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	0003023c 	.word	0x0003023c

000b5464 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <hal_usart_flush+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	69db      	ldr	r3, [r3, #28]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	0003023c 	.word	0x0003023c

000b5474 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <hal_usart_is_enabled+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	6a1b      	ldr	r3, [r3, #32]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	0003023c 	.word	0x0003023c

000b5484 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_usart_available_data_for_write+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	0003023c 	.word	0x0003023c

000b5494 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_usart_begin_config+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	0003023c 	.word	0x0003023c

000b54a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <hal_usart_init_ex+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	0003023c 	.word	0x0003023c

000b54b4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <HAL_USB_USART_Init+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	681b      	ldr	r3, [r3, #0]
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	0003024c 	.word	0x0003024c

000b54c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <HAL_USB_USART_Begin+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	685b      	ldr	r3, [r3, #4]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	0003024c 	.word	0x0003024c

000b54d4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <HAL_USB_USART_End+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	689b      	ldr	r3, [r3, #8]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003024c 	.word	0x0003024c

000b54e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <HAL_USB_USART_Available_Data+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	691b      	ldr	r3, [r3, #16]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003024c 	.word	0x0003024c

000b54f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	695b      	ldr	r3, [r3, #20]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003024c 	.word	0x0003024c

000b5504 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <HAL_USB_USART_Receive_Data+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	699b      	ldr	r3, [r3, #24]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003024c 	.word	0x0003024c

000b5514 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <HAL_USB_USART_Send_Data+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	69db      	ldr	r3, [r3, #28]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003024c 	.word	0x0003024c

000b5524 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <HAL_USB_USART_Flush_Data+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6a1b      	ldr	r3, [r3, #32]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003024c 	.word	0x0003024c

000b5534 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <HAL_USB_USART_Is_Connected+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003024c 	.word	0x0003024c

000b5544 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <panic_+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	00030260 	.word	0x00030260

000b5554 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <log_message_v+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030260 	.word	0x00030260

000b5564 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <log_level_name+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030260 	.word	0x00030260

000b5574 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <log_set_callbacks+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030260 	.word	0x00030260

000b5584 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <set_system_mode+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	685b      	ldr	r3, [r3, #4]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030220 	.word	0x00030220

000b5594 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <system_delay_ms+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	695b      	ldr	r3, [r3, #20]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030220 	.word	0x00030220

000b55a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <system_thread_set_state+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	00030220 	.word	0x00030220

000b55b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b03      	ldr	r3, [pc, #12]	; (b55c4 <system_ctrl_set_app_request_handler+0x10>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b55be:	9301      	str	r3, [sp, #4]
   b55c0:	bd08      	pop	{r3, pc}
   b55c2:	0000      	.short	0x0000
   b55c4:	00030220 	.word	0x00030220

000b55c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b55c8:	b508      	push	{r3, lr}
   b55ca:	4b03      	ldr	r3, [pc, #12]	; (b55d8 <system_ctrl_set_result+0x10>)
   b55cc:	681b      	ldr	r3, [r3, #0]
   b55ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b55d2:	9301      	str	r3, [sp, #4]
   b55d4:	bd08      	pop	{r3, pc}
   b55d6:	0000      	.short	0x0000
   b55d8:	00030220 	.word	0x00030220

000b55dc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b03      	ldr	r3, [pc, #12]	; (b55ec <system_reset+0x10>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b55e6:	9301      	str	r3, [sp, #4]
   b55e8:	bd08      	pop	{r3, pc}
   b55ea:	0000      	.short	0x0000
   b55ec:	00030220 	.word	0x00030220

000b55f0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <spark_process+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	689b      	ldr	r3, [r3, #8]
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030244 	.word	0x00030244

000b5600 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030244 	.word	0x00030244

000b5610 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <network_connect+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	685b      	ldr	r3, [r3, #4]
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030240 	.word	0x00030240

000b5620 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <network_connecting+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	689b      	ldr	r3, [r3, #8]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030240 	.word	0x00030240

000b5630 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <network_disconnect+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	68db      	ldr	r3, [r3, #12]
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030240 	.word	0x00030240

000b5640 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <network_ready+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	691b      	ldr	r3, [r3, #16]
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030240 	.word	0x00030240

000b5650 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <network_on+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	695b      	ldr	r3, [r3, #20]
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030240 	.word	0x00030240

000b5660 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <network_off+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	699b      	ldr	r3, [r3, #24]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030240 	.word	0x00030240

000b5670 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <network_listen+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	69db      	ldr	r3, [r3, #28]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030240 	.word	0x00030240

000b5680 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <network_listening+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6a1b      	ldr	r3, [r3, #32]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030240 	.word	0x00030240

000b5690 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <network_set_listen_timeout+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030240 	.word	0x00030240

000b56a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <network_get_listen_timeout+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030240 	.word	0x00030240

000b56b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <network_is_on+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030240 	.word	0x00030240

000b56c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <network_is_off+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030240 	.word	0x00030240

000b56d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <malloc+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	681b      	ldr	r3, [r3, #0]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	0003021c 	.word	0x0003021c

000b56e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <free+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	685b      	ldr	r3, [r3, #4]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	0003021c 	.word	0x0003021c

000b56f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <realloc+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	689b      	ldr	r3, [r3, #8]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003021c 	.word	0x0003021c

000b5700 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <vsnprintf+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003021c 	.word	0x0003021c

000b5710 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <__errno+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003021c 	.word	0x0003021c

000b5720 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <__assert_func+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003021c 	.word	0x0003021c

000b5730 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <newlib_impure_ptr_callback+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003021c 	.word	0x0003021c

000b5740 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5740:	2100      	movs	r1, #0
   b5742:	f7ff bf27 	b.w	b5594 <system_delay_ms>

000b5746 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5746:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5748:	6843      	ldr	r3, [r0, #4]
   b574a:	3b01      	subs	r3, #1
    {
   b574c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b574e:	6043      	str	r3, [r0, #4]
   b5750:	b963      	cbnz	r3, b576c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5752:	6803      	ldr	r3, [r0, #0]
   b5754:	689b      	ldr	r3, [r3, #8]
   b5756:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5758:	68a3      	ldr	r3, [r4, #8]
   b575a:	3b01      	subs	r3, #1
   b575c:	60a3      	str	r3, [r4, #8]
   b575e:	b92b      	cbnz	r3, b576c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5760:	6823      	ldr	r3, [r4, #0]
   b5762:	4620      	mov	r0, r4
   b5764:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b576a:	4718      	bx	r3
    }
   b576c:	bd10      	pop	{r4, pc}

000b576e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b576e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5770:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5774:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5776:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b577a:	42ae      	cmp	r6, r5
   b577c:	d004      	beq.n	b5788 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b577e:	4628      	mov	r0, r5
   b5780:	f001 fc32 	bl	b6fe8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5784:	3510      	adds	r5, #16
   b5786:	e7f8      	b.n	b577a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5788:	6820      	ldr	r0, [r4, #0]
   b578a:	f7ff ffa9 	bl	b56e0 <free>
    AllocatorT::free(data_);
}
   b578e:	4620      	mov	r0, r4
   b5790:	bd70      	pop	{r4, r5, r6, pc}

000b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5792:	b510      	push	{r4, lr}
   b5794:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b5796:	6800      	ldr	r0, [r0, #0]
   b5798:	b108      	cbz	r0, b579e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b579a:	f7ff ffd4 	bl	b5746 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b579e:	4620      	mov	r0, r4
   b57a0:	bd10      	pop	{r4, pc}
	...

000b57a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b57a4:	4802      	ldr	r0, [pc, #8]	; (b57b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b57a6:	2300      	movs	r3, #0
   b57a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b57aa:	f7ff bd53 	b.w	b5254 <os_mutex_recursive_create>
   b57ae:	bf00      	nop
   b57b0:	2003e65c 	.word	0x2003e65c

000b57b4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b57b4:	2200      	movs	r2, #0
   b57b6:	6840      	ldr	r0, [r0, #4]
   b57b8:	4611      	mov	r1, r2
   b57ba:	f7ff bf41 	b.w	b5640 <network_ready>

000b57be <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b57be:	2200      	movs	r2, #0
   b57c0:	6840      	ldr	r0, [r0, #4]
   b57c2:	4611      	mov	r1, r2
   b57c4:	f7ff bf5c 	b.w	b5680 <network_listening>

000b57c8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b57c8:	2200      	movs	r2, #0
   b57ca:	6840      	ldr	r0, [r0, #4]
   b57cc:	4611      	mov	r1, r2
   b57ce:	f7ff bf67 	b.w	b56a0 <network_get_listen_timeout>

000b57d2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b57d2:	6840      	ldr	r0, [r0, #4]
   b57d4:	2200      	movs	r2, #0
   b57d6:	f7ff bf5b 	b.w	b5690 <network_set_listen_timeout>

000b57da <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b57da:	6840      	ldr	r0, [r0, #4]
   b57dc:	2200      	movs	r2, #0
   b57de:	f081 0101 	eor.w	r1, r1, #1
   b57e2:	f7ff bf45 	b.w	b5670 <network_listen>

000b57e6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b57e6:	2300      	movs	r3, #0
   b57e8:	6840      	ldr	r0, [r0, #4]
   b57ea:	461a      	mov	r2, r3
   b57ec:	4619      	mov	r1, r3
   b57ee:	f7ff bf37 	b.w	b5660 <network_off>

000b57f2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b57f2:	2300      	movs	r3, #0
   b57f4:	6840      	ldr	r0, [r0, #4]
   b57f6:	461a      	mov	r2, r3
   b57f8:	4619      	mov	r1, r3
   b57fa:	f7ff bf29 	b.w	b5650 <network_on>

000b57fe <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b57fe:	2200      	movs	r2, #0
   b5800:	6840      	ldr	r0, [r0, #4]
   b5802:	4611      	mov	r1, r2
   b5804:	f7ff bf0c 	b.w	b5620 <network_connecting>

000b5808 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5808:	6840      	ldr	r0, [r0, #4]
   b580a:	2200      	movs	r2, #0
   b580c:	2102      	movs	r1, #2
   b580e:	f7ff bf0f 	b.w	b5630 <network_disconnect>

000b5812 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5812:	2300      	movs	r3, #0
   b5814:	6840      	ldr	r0, [r0, #4]
   b5816:	461a      	mov	r2, r3
   b5818:	f7ff befa 	b.w	b5610 <network_connect>

000b581c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b581c:	4b08      	ldr	r3, [pc, #32]	; (b5840 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b581e:	b510      	push	{r4, lr}
   b5820:	2428      	movs	r4, #40	; 0x28
   b5822:	4622      	mov	r2, r4
   b5824:	4618      	mov	r0, r3
   b5826:	2100      	movs	r1, #0
   b5828:	f001 ff50 	bl	b76cc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b582c:	4b05      	ldr	r3, [pc, #20]	; (b5844 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b582e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5834:	6042      	str	r2, [r0, #4]
   b5836:	2204      	movs	r2, #4
   b5838:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b583a:	4a03      	ldr	r2, [pc, #12]	; (b5848 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b583c:	601a      	str	r2, [r3, #0]
   b583e:	bd10      	pop	{r4, pc}
   b5840:	2003e668 	.word	0x2003e668
   b5844:	2003e660 	.word	0x2003e660
   b5848:	000b7e10 	.word	0x000b7e10

000b584c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b584c:	2200      	movs	r2, #0
   b584e:	6840      	ldr	r0, [r0, #4]
   b5850:	4611      	mov	r1, r2
   b5852:	f7ff bf15 	b.w	b5680 <network_listening>

000b5856 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5856:	2200      	movs	r2, #0
   b5858:	6840      	ldr	r0, [r0, #4]
   b585a:	4611      	mov	r1, r2
   b585c:	f7ff bf20 	b.w	b56a0 <network_get_listen_timeout>

000b5860 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5860:	6840      	ldr	r0, [r0, #4]
   b5862:	2200      	movs	r2, #0
   b5864:	f7ff bf14 	b.w	b5690 <network_set_listen_timeout>

000b5868 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5868:	6840      	ldr	r0, [r0, #4]
   b586a:	2200      	movs	r2, #0
   b586c:	f081 0101 	eor.w	r1, r1, #1
   b5870:	f7ff befe 	b.w	b5670 <network_listen>

000b5874 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5874:	2300      	movs	r3, #0
   b5876:	6840      	ldr	r0, [r0, #4]
   b5878:	461a      	mov	r2, r3
   b587a:	4619      	mov	r1, r3
   b587c:	f7ff bef0 	b.w	b5660 <network_off>

000b5880 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5880:	2300      	movs	r3, #0
   b5882:	6840      	ldr	r0, [r0, #4]
   b5884:	461a      	mov	r2, r3
   b5886:	4619      	mov	r1, r3
   b5888:	f7ff bee2 	b.w	b5650 <network_on>

000b588c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b588c:	2200      	movs	r2, #0
   b588e:	6840      	ldr	r0, [r0, #4]
   b5890:	4611      	mov	r1, r2
   b5892:	f7ff bed5 	b.w	b5640 <network_ready>

000b5896 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5896:	2200      	movs	r2, #0
   b5898:	6840      	ldr	r0, [r0, #4]
   b589a:	4611      	mov	r1, r2
   b589c:	f7ff bec0 	b.w	b5620 <network_connecting>

000b58a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b58a0:	6840      	ldr	r0, [r0, #4]
   b58a2:	2200      	movs	r2, #0
   b58a4:	2102      	movs	r1, #2
   b58a6:	f7ff bec3 	b.w	b5630 <network_disconnect>

000b58aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b58aa:	2300      	movs	r3, #0
   b58ac:	6840      	ldr	r0, [r0, #4]
   b58ae:	461a      	mov	r2, r3
   b58b0:	f7ff beae 	b.w	b5610 <network_connect>

000b58b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b58b4:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b58b6:	2203      	movs	r2, #3
   b58b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b58ba:	4a02      	ldr	r2, [pc, #8]	; (b58c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b58bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b58be:	4770      	bx	lr
   b58c0:	2003e690 	.word	0x2003e690
   b58c4:	000b7e4c 	.word	0x000b7e4c

000b58c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b58c8:	4770      	bx	lr

000b58ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b58ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58cc:	4606      	mov	r6, r0
   b58ce:	4615      	mov	r5, r2
   b58d0:	460c      	mov	r4, r1
   b58d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58d4:	42bc      	cmp	r4, r7
   b58d6:	d006      	beq.n	b58e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58d8:	6833      	ldr	r3, [r6, #0]
   b58da:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58de:	689b      	ldr	r3, [r3, #8]
   b58e0:	4630      	mov	r0, r6
   b58e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58e4:	e7f6      	b.n	b58d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58e6:	4628      	mov	r0, r5
   b58e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58ea:	7c00      	ldrb	r0, [r0, #16]
   b58ec:	2200      	movs	r2, #0
   b58ee:	f7ff bd29 	b.w	b5344 <hal_i2c_write>

000b58f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58f2:	7c00      	ldrb	r0, [r0, #16]
   b58f4:	2100      	movs	r1, #0
   b58f6:	f7ff bd2d 	b.w	b5354 <hal_i2c_available>

000b58fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58fa:	7c00      	ldrb	r0, [r0, #16]
   b58fc:	2100      	movs	r1, #0
   b58fe:	f7ff bd31 	b.w	b5364 <hal_i2c_read>

000b5902 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5902:	7c00      	ldrb	r0, [r0, #16]
   b5904:	2100      	movs	r1, #0
   b5906:	f7ff bd35 	b.w	b5374 <hal_i2c_peek>

000b590a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b590a:	7c00      	ldrb	r0, [r0, #16]
   b590c:	2100      	movs	r1, #0
   b590e:	f7ff bd39 	b.w	b5384 <hal_i2c_flush>

000b5912 <_ZN7TwoWireD0Ev>:
   b5912:	b510      	push	{r4, lr}
   b5914:	2114      	movs	r1, #20
   b5916:	4604      	mov	r4, r0
   b5918:	f7fe fbbf 	bl	b409a <_ZdlPvj>
   b591c:	4620      	mov	r0, r4
   b591e:	bd10      	pop	{r4, pc}

000b5920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5920:	b538      	push	{r3, r4, r5, lr}
   b5922:	4604      	mov	r4, r0
   b5924:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b592a:	2200      	movs	r2, #0
   b592c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5930:	4b09      	ldr	r3, [pc, #36]	; (b5958 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5932:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5934:	4608      	mov	r0, r1
   b5936:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5938:	4629      	mov	r1, r5
   b593a:	f7ff fd33 	bl	b53a4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b593e:	30bf      	adds	r0, #191	; 0xbf
   b5940:	d108      	bne.n	b5954 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5942:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5944:	07db      	lsls	r3, r3, #31
   b5946:	d505      	bpl.n	b5954 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5948:	6868      	ldr	r0, [r5, #4]
   b594a:	f7ff fec9 	bl	b56e0 <free>
    free(conf.tx_buffer);
   b594e:	68e8      	ldr	r0, [r5, #12]
   b5950:	f7ff fec6 	bl	b56e0 <free>
}
   b5954:	4620      	mov	r0, r4
   b5956:	bd38      	pop	{r3, r4, r5, pc}
   b5958:	000b7e88 	.word	0x000b7e88

000b595c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b595c:	2300      	movs	r3, #0
   b595e:	7c00      	ldrb	r0, [r0, #16]
   b5960:	461a      	mov	r2, r3
   b5962:	4619      	mov	r1, r3
   b5964:	f7ff bcd6 	b.w	b5314 <hal_i2c_begin>

000b5968 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b596a:	2200      	movs	r2, #0
   b596c:	2314      	movs	r3, #20
   b596e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5972:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5976:	780b      	ldrb	r3, [r1, #0]
   b5978:	f88d 3008 	strb.w	r3, [sp, #8]
   b597c:	684b      	ldr	r3, [r1, #4]
   b597e:	9303      	str	r3, [sp, #12]
   b5980:	68cb      	ldr	r3, [r1, #12]
   b5982:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5984:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5986:	7a0b      	ldrb	r3, [r1, #8]
   b5988:	9305      	str	r3, [sp, #20]
   b598a:	a901      	add	r1, sp, #4
   b598c:	f7ff fd12 	bl	b53b4 <hal_i2c_request_ex>
}
   b5990:	b007      	add	sp, #28
   b5992:	f85d fb04 	ldr.w	pc, [sp], #4

000b5996 <_ZN7TwoWire11requestFromEhjh>:
{
   b5996:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5998:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b599a:	f88d 1000 	strb.w	r1, [sp]
   b599e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b59a2:	9103      	str	r1, [sp, #12]
   b59a4:	bf18      	it	ne
   b59a6:	2301      	movne	r3, #1
   b59a8:	4669      	mov	r1, sp
    size_ = size;
   b59aa:	9201      	str	r2, [sp, #4]
   b59ac:	f88d 3008 	strb.w	r3, [sp, #8]
   b59b0:	f7ff ffda 	bl	b5968 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b59b4:	b005      	add	sp, #20
   b59b6:	f85d fb04 	ldr.w	pc, [sp], #4

000b59ba <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b59ba:	2301      	movs	r3, #1
   b59bc:	f7ff bfeb 	b.w	b5996 <_ZN7TwoWire11requestFromEhjh>

000b59c0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b59c0:	7c00      	ldrb	r0, [r0, #16]
   b59c2:	2200      	movs	r2, #0
   b59c4:	f7ff bcae 	b.w	b5324 <hal_i2c_begin_transmission>

000b59c8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b59c8:	7c00      	ldrb	r0, [r0, #16]
   b59ca:	2200      	movs	r2, #0
   b59cc:	f7ff bcb2 	b.w	b5334 <hal_i2c_end_transmission>

000b59d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b59d0:	4770      	bx	lr

000b59d2 <_ZN9IPAddressD0Ev>:
   b59d2:	b510      	push	{r4, lr}
   b59d4:	2118      	movs	r1, #24
   b59d6:	4604      	mov	r4, r0
   b59d8:	f7fe fb5f 	bl	b409a <_ZdlPvj>
   b59dc:	4620      	mov	r0, r4
   b59de:	bd10      	pop	{r4, pc}

000b59e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b59e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b59e2:	7d03      	ldrb	r3, [r0, #20]
   b59e4:	2b06      	cmp	r3, #6
{
   b59e6:	b08d      	sub	sp, #52	; 0x34
   b59e8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59ea:	f100 0704 	add.w	r7, r0, #4
   b59ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b59f2:	d012      	beq.n	b5a1a <_ZNK9IPAddress7printToER5Print+0x3a>
   b59f4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b59f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b59fc:	220a      	movs	r2, #10
   b59fe:	4630      	mov	r0, r6
   b5a00:	f001 fa93 	bl	b6f2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5a04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5a06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5a08:	d019      	beq.n	b5a3e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5a0a:	2c00      	cmp	r4, #0
   b5a0c:	d0f4      	beq.n	b59f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5a0e:	212e      	movs	r1, #46	; 0x2e
   b5a10:	4630      	mov	r0, r6
   b5a12:	f001 fa7b 	bl	b6f0c <_ZN5Print5printEc>
   b5a16:	4404      	add	r4, r0
   b5a18:	e7ee      	b.n	b59f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a1a:	232f      	movs	r3, #47	; 0x2f
   b5a1c:	466a      	mov	r2, sp
   b5a1e:	4639      	mov	r1, r7
   b5a20:	200a      	movs	r0, #10
		buf[0] = 0;
   b5a22:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a26:	f7ff fccd 	bl	b53c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5a2a:	4668      	mov	r0, sp
   b5a2c:	f001 fead 	bl	b778a <strlen>
   b5a30:	6833      	ldr	r3, [r6, #0]
   b5a32:	4602      	mov	r2, r0
   b5a34:	68db      	ldr	r3, [r3, #12]
   b5a36:	4669      	mov	r1, sp
   b5a38:	4630      	mov	r0, r6
   b5a3a:	4798      	blx	r3
   b5a3c:	4604      	mov	r4, r0
    }
    return n;
}
   b5a3e:	4620      	mov	r0, r4
   b5a40:	b00d      	add	sp, #52	; 0x34
   b5a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5a44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5a44:	b510      	push	{r4, lr}
   b5a46:	4b05      	ldr	r3, [pc, #20]	; (b5a5c <_ZN9IPAddressC1Ev+0x18>)
   b5a48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5a4a:	2211      	movs	r2, #17
   b5a4c:	f840 3b04 	str.w	r3, [r0], #4
   b5a50:	2100      	movs	r1, #0
   b5a52:	f001 fe3b 	bl	b76cc <memset>
}
   b5a56:	4620      	mov	r0, r4
   b5a58:	bd10      	pop	{r4, pc}
   b5a5a:	bf00      	nop
   b5a5c:	000b7eb0 	.word	0x000b7eb0

000b5a60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5a60:	4603      	mov	r3, r0
   b5a62:	4a07      	ldr	r2, [pc, #28]	; (b5a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5a64:	b510      	push	{r4, lr}
   b5a66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5a6a:	f101 0210 	add.w	r2, r1, #16
   b5a6e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a72:	f843 4b04 	str.w	r4, [r3], #4
   b5a76:	4291      	cmp	r1, r2
   b5a78:	d1f9      	bne.n	b5a6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a7a:	780a      	ldrb	r2, [r1, #0]
   b5a7c:	701a      	strb	r2, [r3, #0]
}
   b5a7e:	bd10      	pop	{r4, pc}
   b5a80:	000b7eb0 	.word	0x000b7eb0

000b5a84 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a96:	2304      	movs	r3, #4
   b5a98:	6041      	str	r1, [r0, #4]
   b5a9a:	7503      	strb	r3, [r0, #20]
}
   b5a9c:	bd10      	pop	{r4, pc}
	...

000b5aa0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5aa0:	b507      	push	{r0, r1, r2, lr}
   b5aa2:	4b06      	ldr	r3, [pc, #24]	; (b5abc <_ZN9IPAddressC1EPKh+0x1c>)
   b5aa4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5aa6:	78cb      	ldrb	r3, [r1, #3]
   b5aa8:	9300      	str	r3, [sp, #0]
   b5aaa:	788b      	ldrb	r3, [r1, #2]
   b5aac:	784a      	ldrb	r2, [r1, #1]
   b5aae:	7809      	ldrb	r1, [r1, #0]
   b5ab0:	f7ff ffe8 	bl	b5a84 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5ab4:	b003      	add	sp, #12
   b5ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   b5aba:	bf00      	nop
   b5abc:	000b7eb0 	.word	0x000b7eb0

000b5ac0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5ac0:	f100 0310 	add.w	r3, r0, #16
   b5ac4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b5ac6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5aca:	2901      	cmp	r1, #1
   b5acc:	4618      	mov	r0, r3
   b5ace:	d108      	bne.n	b5ae2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5ad0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5ad4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5ad8:	3a01      	subs	r2, #1
   b5ada:	f103 0310 	add.w	r3, r3, #16
   b5ade:	d1f2      	bne.n	b5ac6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5ae0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5ae2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5ae4:	bf04      	itt	eq
   b5ae6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5aea:	1852      	addeq	r2, r2, r1
   b5aec:	e7f4      	b.n	b5ad8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5aee <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5aee:	b40e      	push	{r1, r2, r3}
   b5af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5af2:	b088      	sub	sp, #32
   b5af4:	af00      	add	r7, sp, #0
   b5af6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5afa:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5afc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b00:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5b02:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b04:	462b      	mov	r3, r5
   b5b06:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5b08:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b0a:	f7ff fdf9 	bl	b5700 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5b0e:	280f      	cmp	r0, #15
   b5b10:	687a      	ldr	r2, [r7, #4]
   b5b12:	d91a      	bls.n	b5b4a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5b14:	f100 0308 	add.w	r3, r0, #8
   b5b18:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5b1c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5b1e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b22:	1c41      	adds	r1, r0, #1
   b5b24:	462b      	mov	r3, r5
   b5b26:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5b28:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5b2a:	f7ff fde9 	bl	b5700 <vsnprintf>
        if (n > 0) {
   b5b2e:	1e02      	subs	r2, r0, #0
   b5b30:	dd04      	ble.n	b5b3c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5b32:	6823      	ldr	r3, [r4, #0]
   b5b34:	4669      	mov	r1, sp
   b5b36:	689b      	ldr	r3, [r3, #8]
   b5b38:	4620      	mov	r0, r4
   b5b3a:	4798      	blx	r3
   b5b3c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5b3e:	3720      	adds	r7, #32
   b5b40:	46bd      	mov	sp, r7
   b5b42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5b46:	b003      	add	sp, #12
   b5b48:	4770      	bx	lr
    } else if (n > 0) {
   b5b4a:	2800      	cmp	r0, #0
   b5b4c:	d0f7      	beq.n	b5b3e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5b4e:	6823      	ldr	r3, [r4, #0]
   b5b50:	4602      	mov	r2, r0
   b5b52:	689b      	ldr	r3, [r3, #8]
   b5b54:	f107 0110 	add.w	r1, r7, #16
   b5b58:	4620      	mov	r0, r4
   b5b5a:	4798      	blx	r3
}
   b5b5c:	e7ef      	b.n	b5b3e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5b5e:	b538      	push	{r3, r4, r5, lr}
   b5b60:	680b      	ldr	r3, [r1, #0]
   b5b62:	6003      	str	r3, [r0, #0]
   b5b64:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5b66:	6843      	ldr	r3, [r0, #4]
   b5b68:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5b6a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5b6c:	d008      	beq.n	b5b80 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5b6e:	b115      	cbz	r5, b5b76 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5b70:	686b      	ldr	r3, [r5, #4]
   b5b72:	3301      	adds	r3, #1
   b5b74:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5b76:	6860      	ldr	r0, [r4, #4]
   b5b78:	b108      	cbz	r0, b5b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5b7a:	f7ff fde4 	bl	b5746 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5b7e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5b80:	bd38      	pop	{r3, r4, r5, pc}

000b5b82 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5b82:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5b84:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5b86:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5b8a:	689b      	ldr	r3, [r3, #8]
   b5b8c:	2201      	movs	r2, #1
   b5b8e:	f10d 0107 	add.w	r1, sp, #7
   b5b92:	4798      	blx	r3
}
   b5b94:	b003      	add	sp, #12
   b5b96:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b9a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5b9a:	460b      	mov	r3, r1
   b5b9c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5b9e:	2200      	movs	r2, #0
   b5ba0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5ba2:	e9c0 2200 	strd	r2, r2, [r0]
   b5ba6:	4604      	mov	r4, r0
        t_ = t;
   b5ba8:	6083      	str	r3, [r0, #8]
    if (t) {
   b5baa:	b90b      	cbnz	r3, b5bb0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5bac:	4620      	mov	r0, r4
   b5bae:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5bb0:	f7ff ffd5 	bl	b5b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5bb4:	e7fa      	b.n	b5bac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5bb6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5bb6:	6883      	ldr	r3, [r0, #8]
   b5bb8:	b1eb      	cbz	r3, b5bf6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5bba:	781a      	ldrb	r2, [r3, #0]
   b5bbc:	2a03      	cmp	r2, #3
   b5bbe:	d81a      	bhi.n	b5bf6 <_ZNK5spark9JSONValue4typeEv+0x40>
   b5bc0:	e8df f002 	tbb	[pc, r2]
   b5bc4:	1b021704 	.word	0x1b021704
   b5bc8:	2005      	movs	r0, #5
   b5bca:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5bcc:	6802      	ldr	r2, [r0, #0]
   b5bce:	685b      	ldr	r3, [r3, #4]
   b5bd0:	6852      	ldr	r2, [r2, #4]
   b5bd2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5bd4:	282d      	cmp	r0, #45	; 0x2d
   b5bd6:	d012      	beq.n	b5bfe <_ZNK5spark9JSONValue4typeEv+0x48>
   b5bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5bdc:	2b09      	cmp	r3, #9
   b5bde:	d90e      	bls.n	b5bfe <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b5be0:	2874      	cmp	r0, #116	; 0x74
   b5be2:	d00e      	beq.n	b5c02 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5be4:	2866      	cmp	r0, #102	; 0x66
   b5be6:	d00c      	beq.n	b5c02 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5be8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5bec:	4258      	negs	r0, r3
   b5bee:	4158      	adcs	r0, r3
   b5bf0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b5bf2:	2006      	movs	r0, #6
   b5bf4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5bf6:	2000      	movs	r0, #0
   b5bf8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b5bfa:	2004      	movs	r0, #4
   b5bfc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b5bfe:	2003      	movs	r0, #3
   b5c00:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b5c02:	2002      	movs	r0, #2
}
   b5c04:	4770      	bx	lr

000b5c06 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b5c06:	b510      	push	{r4, lr}
   b5c08:	4604      	mov	r4, r0
    switch (type()) {
   b5c0a:	f7ff ffd4 	bl	b5bb6 <_ZNK5spark9JSONValue4typeEv>
   b5c0e:	2802      	cmp	r0, #2
   b5c10:	d00e      	beq.n	b5c30 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b5c12:	1ec3      	subs	r3, r0, #3
   b5c14:	b2db      	uxtb	r3, r3
   b5c16:	2b01      	cmp	r3, #1
   b5c18:	d814      	bhi.n	b5c44 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5c1a:	6822      	ldr	r2, [r4, #0]
   b5c1c:	68a3      	ldr	r3, [r4, #8]
   b5c1e:	6850      	ldr	r0, [r2, #4]
   b5c20:	685b      	ldr	r3, [r3, #4]
}
   b5c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5c26:	220a      	movs	r2, #10
   b5c28:	2100      	movs	r1, #0
   b5c2a:	4418      	add	r0, r3
   b5c2c:	f001 be60 	b.w	b78f0 <strtol>
        const char* const s = d_->json + t_->start;
   b5c30:	6822      	ldr	r2, [r4, #0]
   b5c32:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5c34:	6852      	ldr	r2, [r2, #4]
   b5c36:	685b      	ldr	r3, [r3, #4]
   b5c38:	5cd0      	ldrb	r0, [r2, r3]
   b5c3a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b5c3e:	4258      	negs	r0, r3
   b5c40:	4158      	adcs	r0, r3
}
   b5c42:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5c44:	2000      	movs	r0, #0
   b5c46:	e7fc      	b.n	b5c42 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5c48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5c48:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5c4a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c4c:	e9c0 3300 	strd	r3, r3, [r0]
   b5c50:	4604      	mov	r4, r0
        n_(0) {
   b5c52:	480e      	ldr	r0, [pc, #56]	; (b5c8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5c54:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5c58:	b1a9      	cbz	r1, b5c86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5c5a:	780b      	ldrb	r3, [r1, #0]
   b5c5c:	2b03      	cmp	r3, #3
   b5c5e:	d006      	beq.n	b5c6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5c60:	b98b      	cbnz	r3, b5c86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5c62:	6813      	ldr	r3, [r2, #0]
   b5c64:	6858      	ldr	r0, [r3, #4]
   b5c66:	684b      	ldr	r3, [r1, #4]
   b5c68:	5cc3      	ldrb	r3, [r0, r3]
   b5c6a:	2b6e      	cmp	r3, #110	; 0x6e
   b5c6c:	d007      	beq.n	b5c7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5c6e:	6813      	ldr	r3, [r2, #0]
   b5c70:	684d      	ldr	r5, [r1, #4]
   b5c72:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5c74:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5c76:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5c78:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5c7a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5c7c:	60e3      	str	r3, [r4, #12]
   b5c7e:	4611      	mov	r1, r2
   b5c80:	4620      	mov	r0, r4
   b5c82:	f7ff ff6c 	bl	b5b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5c86:	4620      	mov	r0, r4
   b5c88:	bd38      	pop	{r3, r4, r5, pc}
   b5c8a:	bf00      	nop
   b5c8c:	000b7f22 	.word	0x000b7f22

000b5c90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5c90:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5c92:	2500      	movs	r5, #0
   b5c94:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c96:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5c9a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5c9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5ca2:	4604      	mov	r4, r0
   b5ca4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5ca6:	b14b      	cbz	r3, b5cbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5ca8:	781a      	ldrb	r2, [r3, #0]
   b5caa:	2a01      	cmp	r2, #1
   b5cac:	d106      	bne.n	b5cbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5cae:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5cb2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5cb4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5cb6:	6143      	str	r3, [r0, #20]
   b5cb8:	f7ff ff51 	bl	b5b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5cbc:	4620      	mov	r0, r4
   b5cbe:	bd38      	pop	{r3, r4, r5, pc}

000b5cc0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5cc0:	b510      	push	{r4, lr}
    if (!n_) {
   b5cc2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5cc4:	4604      	mov	r4, r0
    if (!n_) {
   b5cc6:	b163      	cbz	r3, b5ce2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5cc8:	6880      	ldr	r0, [r0, #8]
   b5cca:	60e0      	str	r0, [r4, #12]
    --n_;
   b5ccc:	3b01      	subs	r3, #1
    ++t_;
   b5cce:	3010      	adds	r0, #16
   b5cd0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5cd2:	6120      	str	r0, [r4, #16]
    --n_;
   b5cd4:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5cd6:	b113      	cbz	r3, b5cde <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5cd8:	f7ff fef2 	bl	b5ac0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5cdc:	60a0      	str	r0, [r4, #8]
    return true;
   b5cde:	2001      	movs	r0, #1
   b5ce0:	e000      	b.n	b5ce4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5ce2:	4618      	mov	r0, r3
}
   b5ce4:	bd10      	pop	{r4, pc}

000b5ce6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5ce6:	b510      	push	{r4, lr}
    write('}');
   b5ce8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5cea:	4604      	mov	r4, r0
    write('}');
   b5cec:	f7ff ff49 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5cf0:	2301      	movs	r3, #1
   b5cf2:	7123      	strb	r3, [r4, #4]
}
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	bd10      	pop	{r4, pc}

000b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5cf8:	b508      	push	{r3, lr}
    switch (state_) {
   b5cfa:	7903      	ldrb	r3, [r0, #4]
   b5cfc:	2b01      	cmp	r3, #1
   b5cfe:	d002      	beq.n	b5d06 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5d00:	2b02      	cmp	r3, #2
   b5d02:	d004      	beq.n	b5d0e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5d04:	bd08      	pop	{r3, pc}
        write(',');
   b5d06:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5d08:	f7ff ff3b 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
}
   b5d0c:	e7fa      	b.n	b5d04 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b5d0e:	213a      	movs	r1, #58	; 0x3a
   b5d10:	e7fa      	b.n	b5d08 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b5d12 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b5d12:	b510      	push	{r4, lr}
   b5d14:	4604      	mov	r4, r0
    writeSeparator();
   b5d16:	f7ff ffef 	bl	b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	217b      	movs	r1, #123	; 0x7b
   b5d1e:	f7ff ff30 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b5d22:	2300      	movs	r3, #0
   b5d24:	7123      	strb	r3, [r4, #4]
}
   b5d26:	4620      	mov	r0, r4
   b5d28:	bd10      	pop	{r4, pc}
	...

000b5d2c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5d2c:	b513      	push	{r0, r1, r4, lr}
   b5d2e:	4604      	mov	r4, r0
   b5d30:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5d32:	f7ff ffe1 	bl	b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5d36:	6823      	ldr	r3, [r4, #0]
   b5d38:	9a01      	ldr	r2, [sp, #4]
   b5d3a:	68db      	ldr	r3, [r3, #12]
   b5d3c:	4903      	ldr	r1, [pc, #12]	; (b5d4c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b5d3e:	4620      	mov	r0, r4
   b5d40:	4798      	blx	r3
    state_ = NEXT;
   b5d42:	2301      	movs	r3, #1
}
   b5d44:	4620      	mov	r0, r4
    state_ = NEXT;
   b5d46:	7123      	strb	r3, [r4, #4]
}
   b5d48:	b002      	add	sp, #8
   b5d4a:	bd10      	pop	{r4, pc}
   b5d4c:	000b7ebc 	.word	0x000b7ebc

000b5d50 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5d50:	b513      	push	{r0, r1, r4, lr}
   b5d52:	4604      	mov	r4, r0
   b5d54:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5d56:	f7ff ffcf 	bl	b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5d5a:	6823      	ldr	r3, [r4, #0]
   b5d5c:	9a01      	ldr	r2, [sp, #4]
   b5d5e:	68db      	ldr	r3, [r3, #12]
   b5d60:	4903      	ldr	r1, [pc, #12]	; (b5d70 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5d62:	4620      	mov	r0, r4
   b5d64:	4798      	blx	r3
    state_ = NEXT;
   b5d66:	2301      	movs	r3, #1
}
   b5d68:	4620      	mov	r0, r4
    state_ = NEXT;
   b5d6a:	7123      	strb	r3, [r4, #4]
}
   b5d6c:	b002      	add	sp, #8
   b5d6e:	bd10      	pop	{r4, pc}
   b5d70:	000b7ebf 	.word	0x000b7ebf

000b5d74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d78:	460d      	mov	r5, r1
    write('"');
   b5d7a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5d7c:	4690      	mov	r8, r2
   b5d7e:	4604      	mov	r4, r0
    write('"');
   b5d80:	f7ff feff 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5d84:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5d88:	44a8      	add	r8, r5
    const char *s = str;
   b5d8a:	462f      	mov	r7, r5
    while (s != end) {
   b5d8c:	4547      	cmp	r7, r8
   b5d8e:	46ba      	mov	sl, r7
   b5d90:	d03d      	beq.n	b5e0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5d92:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5d96:	2e22      	cmp	r6, #34	; 0x22
   b5d98:	d006      	beq.n	b5da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5d9a:	2e5c      	cmp	r6, #92	; 0x5c
   b5d9c:	d004      	beq.n	b5da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5d9e:	4630      	mov	r0, r6
   b5da0:	f001 fc64 	bl	b766c <isprint>
   b5da4:	2800      	cmp	r0, #0
   b5da6:	d1f1      	bne.n	b5d8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5da8:	6823      	ldr	r3, [r4, #0]
   b5daa:	ebaa 0205 	sub.w	r2, sl, r5
   b5dae:	689b      	ldr	r3, [r3, #8]
   b5db0:	4629      	mov	r1, r5
   b5db2:	4620      	mov	r0, r4
   b5db4:	4798      	blx	r3
            write('\\');
   b5db6:	215c      	movs	r1, #92	; 0x5c
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff fee2 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5dbe:	2e0d      	cmp	r6, #13
   b5dc0:	d80a      	bhi.n	b5dd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5dc2:	2e07      	cmp	r6, #7
   b5dc4:	d91c      	bls.n	b5e00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5dc6:	f1a6 0308 	sub.w	r3, r6, #8
   b5dca:	2b05      	cmp	r3, #5
   b5dcc:	d818      	bhi.n	b5e00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5dce:	e8df f003 	tbb	[pc, r3]
   b5dd2:	0f0d      	.short	0x0f0d
   b5dd4:	15131711 	.word	0x15131711
   b5dd8:	2e22      	cmp	r6, #34	; 0x22
   b5dda:	d001      	beq.n	b5de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5ddc:	2e5c      	cmp	r6, #92	; 0x5c
   b5dde:	d10f      	bne.n	b5e00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5de0:	4631      	mov	r1, r6
                write('b');
   b5de2:	4620      	mov	r0, r4
   b5de4:	f7ff fecd 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5de8:	463d      	mov	r5, r7
    while (s != end) {
   b5dea:	e7cf      	b.n	b5d8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5dec:	2162      	movs	r1, #98	; 0x62
   b5dee:	e7f8      	b.n	b5de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5df0:	2174      	movs	r1, #116	; 0x74
   b5df2:	e7f6      	b.n	b5de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5df4:	216e      	movs	r1, #110	; 0x6e
   b5df6:	e7f4      	b.n	b5de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5df8:	2166      	movs	r1, #102	; 0x66
   b5dfa:	e7f2      	b.n	b5de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5dfc:	2172      	movs	r1, #114	; 0x72
   b5dfe:	e7f0      	b.n	b5de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5e00:	6823      	ldr	r3, [r4, #0]
   b5e02:	4632      	mov	r2, r6
   b5e04:	68db      	ldr	r3, [r3, #12]
   b5e06:	4649      	mov	r1, r9
   b5e08:	4620      	mov	r0, r4
   b5e0a:	4798      	blx	r3
                break;
   b5e0c:	e7ec      	b.n	b5de8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5e0e:	42bd      	cmp	r5, r7
   b5e10:	d005      	beq.n	b5e1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5e12:	6823      	ldr	r3, [r4, #0]
   b5e14:	1b7a      	subs	r2, r7, r5
   b5e16:	689b      	ldr	r3, [r3, #8]
   b5e18:	4629      	mov	r1, r5
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	4798      	blx	r3
    }
    write('"');
   b5e1e:	2122      	movs	r1, #34	; 0x22
   b5e20:	4620      	mov	r0, r4
   b5e22:	f7ff feae 	bl	b5b82 <_ZN5spark10JSONWriter5writeEc>
}
   b5e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e2a:	bf00      	nop
   b5e2c:	000b7ec2 	.word	0x000b7ec2

000b5e30 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5e30:	b513      	push	{r0, r1, r4, lr}
   b5e32:	4604      	mov	r4, r0
   b5e34:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5e38:	f7ff ff5e 	bl	b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5e42:	f7ff ff97 	bl	b5d74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5e46:	2302      	movs	r3, #2
}
   b5e48:	4620      	mov	r0, r4
    state_ = VALUE;
   b5e4a:	7123      	strb	r3, [r4, #4]
}
   b5e4c:	b002      	add	sp, #8
   b5e4e:	bd10      	pop	{r4, pc}

000b5e50 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5e50:	b513      	push	{r0, r1, r4, lr}
   b5e52:	4604      	mov	r4, r0
   b5e54:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5e58:	f7ff ff4e 	bl	b5cf8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5e62:	f7ff ff87 	bl	b5d74 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5e66:	2301      	movs	r3, #1
}
   b5e68:	4620      	mov	r0, r4
    state_ = NEXT;
   b5e6a:	7123      	strb	r3, [r4, #4]
}
   b5e6c:	b002      	add	sp, #8
   b5e6e:	bd10      	pop	{r4, pc}

000b5e70 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5e70:	6880      	ldr	r0, [r0, #8]
   b5e72:	6803      	ldr	r3, [r0, #0]
   b5e74:	68db      	ldr	r3, [r3, #12]
   b5e76:	4718      	bx	r3

000b5e78 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5e78:	4770      	bx	lr

000b5e7a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5e7a:	4608      	mov	r0, r1
   b5e7c:	b111      	cbz	r1, b5e84 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5e7e:	680b      	ldr	r3, [r1, #0]
   b5e80:	685b      	ldr	r3, [r3, #4]
   b5e82:	4718      	bx	r3
}
   b5e84:	4770      	bx	lr

000b5e86 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5e86:	4770      	bx	lr

000b5e88 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5e88:	4770      	bx	lr

000b5e8a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5e8a:	4770      	bx	lr

000b5e8c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5e8c:	4770      	bx	lr

000b5e8e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5e8e:	b538      	push	{r3, r4, r5, lr}
   b5e90:	4604      	mov	r4, r0
   b5e92:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5e94:	6800      	ldr	r0, [r0, #0]
   b5e96:	212e      	movs	r1, #46	; 0x2e
   b5e98:	f001 fc5b 	bl	b7752 <strchrnul>
    size = s - category;
   b5e9c:	6823      	ldr	r3, [r4, #0]
   b5e9e:	1ac3      	subs	r3, r0, r3
   b5ea0:	602b      	str	r3, [r5, #0]
    if (size) {
   b5ea2:	b123      	cbz	r3, b5eae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5ea4:	7803      	ldrb	r3, [r0, #0]
   b5ea6:	b103      	cbz	r3, b5eaa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5ea8:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5eaa:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5eac:	6020      	str	r0, [r4, #0]
}
   b5eae:	4618      	mov	r0, r3
   b5eb0:	bd38      	pop	{r3, r4, r5, pc}

000b5eb2 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5eb2:	b510      	push	{r4, lr}
   b5eb4:	210c      	movs	r1, #12
   b5eb6:	4604      	mov	r4, r0
   b5eb8:	f7fe f8ef 	bl	b409a <_ZdlPvj>
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	bd10      	pop	{r4, pc}

000b5ec0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5ec0:	b510      	push	{r4, lr}
   b5ec2:	2104      	movs	r1, #4
   b5ec4:	4604      	mov	r4, r0
   b5ec6:	f7fe f8e8 	bl	b409a <_ZdlPvj>
   b5eca:	4620      	mov	r0, r4
   b5ecc:	bd10      	pop	{r4, pc}

000b5ece <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5ece:	b510      	push	{r4, lr}
   b5ed0:	2104      	movs	r1, #4
   b5ed2:	4604      	mov	r4, r0
   b5ed4:	f7fe f8e1 	bl	b409a <_ZdlPvj>
   b5ed8:	4620      	mov	r0, r4
   b5eda:	bd10      	pop	{r4, pc}

000b5edc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5edc:	f7ff b9ca 	b.w	b5274 <os_mutex_recursive_lock>

000b5ee0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5ee0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5ee2:	f001 fc40 	bl	b7766 <strcmp>
}
   b5ee6:	fab0 f080 	clz	r0, r0
   b5eea:	0940      	lsrs	r0, r0, #5
   b5eec:	bd08      	pop	{r3, pc}

000b5eee <__tcf_1>:
   b5eee:	4770      	bx	lr

000b5ef0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5ef0:	b510      	push	{r4, lr}
   b5ef2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5ef4:	f001 f9f4 	bl	b72e0 <_Z16_fetch_usbserialv>
   b5ef8:	4284      	cmp	r4, r0
   b5efa:	d010      	beq.n	b5f1e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5efc:	f001 fb88 	bl	b7610 <_Z22__fetch_global_Serial1v>
   b5f00:	4284      	cmp	r4, r0
   b5f02:	d105      	bne.n	b5f10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5f04:	f001 fb84 	bl	b7610 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5f0c:	f001 b981 	b.w	b7212 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5f10:	b12c      	cbz	r4, b5f1e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5f12:	6823      	ldr	r3, [r4, #0]
   b5f14:	4620      	mov	r0, r4
   b5f16:	685b      	ldr	r3, [r3, #4]
}
   b5f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f1c:	4718      	bx	r3
   b5f1e:	bd10      	pop	{r4, pc}

000b5f20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5f20:	680b      	ldr	r3, [r1, #0]
   b5f22:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5f24:	684b      	ldr	r3, [r1, #4]
   b5f26:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5f28:	b113      	cbz	r3, b5f30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5f2a:	685a      	ldr	r2, [r3, #4]
   b5f2c:	3201      	adds	r2, #1
   b5f2e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5f30:	4770      	bx	lr

000b5f32 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5f32:	b513      	push	{r0, r1, r4, lr}
   b5f34:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5f36:	4608      	mov	r0, r1
   b5f38:	9101      	str	r1, [sp, #4]
   b5f3a:	f001 fc26 	bl	b778a <strlen>
   b5f3e:	9901      	ldr	r1, [sp, #4]
   b5f40:	4602      	mov	r2, r0
   b5f42:	4620      	mov	r0, r4
}
   b5f44:	b002      	add	sp, #8
   b5f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5f4a:	f7ff bf81 	b.w	b5e50 <_ZN5spark10JSONWriter5valueEPKcj>

000b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5f4e:	b513      	push	{r0, r1, r4, lr}
   b5f50:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5f52:	4608      	mov	r0, r1
   b5f54:	9101      	str	r1, [sp, #4]
   b5f56:	f001 fc18 	bl	b778a <strlen>
   b5f5a:	6823      	ldr	r3, [r4, #0]
   b5f5c:	9901      	ldr	r1, [sp, #4]
   b5f5e:	68db      	ldr	r3, [r3, #12]
   b5f60:	4602      	mov	r2, r0
   b5f62:	4620      	mov	r0, r4
}
   b5f64:	b002      	add	sp, #8
   b5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5f6a:	4718      	bx	r3

000b5f6c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5f6c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5f6e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5f70:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5f74:	68db      	ldr	r3, [r3, #12]
   b5f76:	2201      	movs	r2, #1
   b5f78:	f10d 0107 	add.w	r1, sp, #7
   b5f7c:	4798      	blx	r3
}
   b5f7e:	b003      	add	sp, #12
   b5f80:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f84 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5f84:	b40e      	push	{r1, r2, r3}
   b5f86:	b503      	push	{r0, r1, lr}
   b5f88:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5f8a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5f8c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5f90:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5f92:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5f94:	f000 ffe7 	bl	b6f66 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5f98:	b002      	add	sp, #8
   b5f9a:	f85d eb04 	ldr.w	lr, [sp], #4
   b5f9e:	b003      	add	sp, #12
   b5fa0:	4770      	bx	lr

000b5fa2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5fa2:	680a      	ldr	r2, [r1, #0]
   b5fa4:	6002      	str	r2, [r0, #0]
   b5fa6:	684a      	ldr	r2, [r1, #4]
   b5fa8:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5faa:	2200      	movs	r2, #0
   b5fac:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5fb0:	b510      	push	{r4, lr}
   b5fb2:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5fb4:	688c      	ldr	r4, [r1, #8]
   b5fb6:	6084      	str	r4, [r0, #8]
   b5fb8:	68cc      	ldr	r4, [r1, #12]
   b5fba:	60c4      	str	r4, [r0, #12]
   b5fbc:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fbe:	608a      	str	r2, [r1, #8]
   b5fc0:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5fc2:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fc4:	610a      	str	r2, [r1, #16]
   b5fc6:	bd10      	pop	{r4, pc}

000b5fc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5fcc:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5fd0:	f04f 0a14 	mov.w	sl, #20
   b5fd4:	9300      	str	r3, [sp, #0]
   b5fd6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5fda:	4b18      	ldr	r3, [pc, #96]	; (b603c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5fdc:	10a4      	asrs	r4, r4, #2
   b5fde:	4617      	mov	r7, r2
   b5fe0:	435c      	muls	r4, r3
   b5fe2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5fe4:	2c00      	cmp	r4, #0
   b5fe6:	dd21      	ble.n	b602c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5fe8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5fea:	fb0a f006 	mul.w	r0, sl, r6
   b5fee:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5ff2:	463a      	mov	r2, r7
   b5ff4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5ff8:	5828      	ldr	r0, [r5, r0]
   b5ffa:	9101      	str	r1, [sp, #4]
   b5ffc:	455f      	cmp	r7, fp
   b5ffe:	bf28      	it	cs
   b6000:	465a      	movcs	r2, fp
   b6002:	f001 fbca 	bl	b779a <strncmp>
                if (cmp == 0) {
   b6006:	2800      	cmp	r0, #0
   b6008:	9901      	ldr	r1, [sp, #4]
   b600a:	f04f 0301 	mov.w	r3, #1
   b600e:	d10b      	bne.n	b6028 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6010:	455f      	cmp	r7, fp
   b6012:	d103      	bne.n	b601c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6014:	9a00      	ldr	r2, [sp, #0]
   b6016:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6018:	4634      	mov	r4, r6
   b601a:	e7e3      	b.n	b5fe4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b601c:	d9fc      	bls.n	b6018 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b601e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6020:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6024:	3e01      	subs	r6, #1
   b6026:	e7f7      	b.n	b6018 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6028:	dbf9      	blt.n	b601e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b602a:	e7f5      	b.n	b6018 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b602c:	eba5 0508 	sub.w	r5, r5, r8
}
   b6030:	4802      	ldr	r0, [pc, #8]	; (b603c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6032:	10ad      	asrs	r5, r5, #2
   b6034:	4368      	muls	r0, r5
   b6036:	b003      	add	sp, #12
   b6038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b603c:	cccccccd 	.word	0xcccccccd

000b6040 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6042:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6044:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6046:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6048:	b303      	cbz	r3, b608c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b604a:	b1f9      	cbz	r1, b608c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b604c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b604e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6052:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6054:	a903      	add	r1, sp, #12
   b6056:	a801      	add	r0, sp, #4
   b6058:	f7ff ff19 	bl	b5e8e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b605c:	4601      	mov	r1, r0
   b605e:	b1a8      	cbz	r0, b608c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6060:	f10d 030b 	add.w	r3, sp, #11
   b6064:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6066:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b606a:	4620      	mov	r0, r4
   b606c:	f7ff ffac 	bl	b5fc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6070:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6074:	b153      	cbz	r3, b608c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6076:	6823      	ldr	r3, [r4, #0]
   b6078:	2414      	movs	r4, #20
   b607a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b607e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6080:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6084:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6086:	bfa8      	it	ge
   b6088:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b608a:	e7e3      	b.n	b6054 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b608c:	4628      	mov	r0, r5
   b608e:	b004      	add	sp, #16
   b6090:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6094 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6094:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6096:	4c09      	ldr	r4, [pc, #36]	; (b60bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6098:	7823      	ldrb	r3, [r4, #0]
   b609a:	f3bf 8f5b 	dmb	ish
   b609e:	07db      	lsls	r3, r3, #31
   b60a0:	d409      	bmi.n	b60b6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b60a2:	4620      	mov	r0, r4
   b60a4:	f7fe f808 	bl	b40b8 <__cxa_guard_acquire>
   b60a8:	b128      	cbz	r0, b60b6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b60aa:	4620      	mov	r0, r4
   b60ac:	f7fe f809 	bl	b40c2 <__cxa_guard_release>
   b60b0:	4803      	ldr	r0, [pc, #12]	; (b60c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b60b2:	f001 fad5 	bl	b7660 <atexit>
}
   b60b6:	4803      	ldr	r0, [pc, #12]	; (b60c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b60b8:	bd10      	pop	{r4, pc}
   b60ba:	bf00      	nop
   b60bc:	2003e69c 	.word	0x2003e69c
   b60c0:	000b5e87 	.word	0x000b5e87
   b60c4:	2003e540 	.word	0x2003e540

000b60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b60c8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b60ca:	4c09      	ldr	r4, [pc, #36]	; (b60f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b60cc:	7823      	ldrb	r3, [r4, #0]
   b60ce:	f3bf 8f5b 	dmb	ish
   b60d2:	07db      	lsls	r3, r3, #31
   b60d4:	d409      	bmi.n	b60ea <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60d6:	4620      	mov	r0, r4
   b60d8:	f7fd ffee 	bl	b40b8 <__cxa_guard_acquire>
   b60dc:	b128      	cbz	r0, b60ea <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60de:	4620      	mov	r0, r4
   b60e0:	f7fd ffef 	bl	b40c2 <__cxa_guard_release>
   b60e4:	4803      	ldr	r0, [pc, #12]	; (b60f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b60e6:	f001 fabb 	bl	b7660 <atexit>
    return &factory;
}
   b60ea:	4803      	ldr	r0, [pc, #12]	; (b60f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b60ec:	bd10      	pop	{r4, pc}
   b60ee:	bf00      	nop
   b60f0:	2003e6a0 	.word	0x2003e6a0
   b60f4:	000b5eef 	.word	0x000b5eef
   b60f8:	2003e544 	.word	0x2003e544

000b60fc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b60fc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b60fe:	2500      	movs	r5, #0
   b6100:	4604      	mov	r4, r0
   b6102:	e9c0 5500 	strd	r5, r5, [r0]
   b6106:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b610a:	6085      	str	r5, [r0, #8]
   b610c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b610e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6112:	f7ff f89f 	bl	b5254 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6116:	f7ff ffbd 	bl	b6094 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b611a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b611c:	f7ff ffd4 	bl	b60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6120:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6122:	6220      	str	r0, [r4, #32]
}
   b6124:	4620      	mov	r0, r4
   b6126:	bd38      	pop	{r3, r4, r5, pc}

000b6128 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6128:	b510      	push	{r4, lr}
    static LogManager mgr;
   b612a:	4c0a      	ldr	r4, [pc, #40]	; (b6154 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b612c:	7823      	ldrb	r3, [r4, #0]
   b612e:	f3bf 8f5b 	dmb	ish
   b6132:	07db      	lsls	r3, r3, #31
   b6134:	d40c      	bmi.n	b6150 <_ZN5spark10LogManager8instanceEv+0x28>
   b6136:	4620      	mov	r0, r4
   b6138:	f7fd ffbe 	bl	b40b8 <__cxa_guard_acquire>
   b613c:	b140      	cbz	r0, b6150 <_ZN5spark10LogManager8instanceEv+0x28>
   b613e:	4806      	ldr	r0, [pc, #24]	; (b6158 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6140:	f7ff ffdc 	bl	b60fc <_ZN5spark10LogManagerC1Ev>
   b6144:	4620      	mov	r0, r4
   b6146:	f7fd ffbc 	bl	b40c2 <__cxa_guard_release>
   b614a:	4804      	ldr	r0, [pc, #16]	; (b615c <_ZN5spark10LogManager8instanceEv+0x34>)
   b614c:	f001 fa88 	bl	b7660 <atexit>
    return &mgr;
}
   b6150:	4801      	ldr	r0, [pc, #4]	; (b6158 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6152:	bd10      	pop	{r4, pc}
   b6154:	2003e698 	.word	0x2003e698
   b6158:	2003e6a8 	.word	0x2003e6a8
   b615c:	000b667d 	.word	0x000b667d

000b6160 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6160:	4a02      	ldr	r2, [pc, #8]	; (b616c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6162:	4903      	ldr	r1, [pc, #12]	; (b6170 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6164:	4803      	ldr	r0, [pc, #12]	; (b6174 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6166:	2300      	movs	r3, #0
   b6168:	f7ff ba04 	b.w	b5574 <log_set_callbacks>
   b616c:	000b6461 	.word	0x000b6461
   b6170:	000b63ed 	.word	0x000b63ed
   b6174:	000b636d 	.word	0x000b636d

000b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6178:	2300      	movs	r3, #0
   b617a:	461a      	mov	r2, r3
   b617c:	4619      	mov	r1, r3
   b617e:	4618      	mov	r0, r3
   b6180:	f7ff b9f8 	b.w	b5574 <log_set_callbacks>

000b6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6184:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6186:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6188:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b618a:	4668      	mov	r0, sp
   b618c:	f7ff fec8 	bl	b5f20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6190:	466a      	mov	r2, sp
   b6192:	4629      	mov	r1, r5
   b6194:	4620      	mov	r0, r4
   b6196:	f7ff fd7b 	bl	b5c90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b619a:	a801      	add	r0, sp, #4
   b619c:	f7ff faf9 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61a0:	4620      	mov	r0, r4
   b61a2:	b003      	add	sp, #12
   b61a4:	bd30      	pop	{r4, r5, pc}

000b61a6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b61a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b61a8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b61aa:	4604      	mov	r4, r0
   b61ac:	4668      	mov	r0, sp
   b61ae:	f7ff feb7 	bl	b5f20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b61b2:	466a      	mov	r2, sp
   b61b4:	4629      	mov	r1, r5
   b61b6:	4620      	mov	r0, r4
   b61b8:	f7ff fd46 	bl	b5c48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61bc:	a801      	add	r0, sp, #4
   b61be:	f7ff fae8 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61c2:	4620      	mov	r0, r4
   b61c4:	b003      	add	sp, #12
   b61c6:	bd30      	pop	{r4, r5, pc}

000b61c8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b61ca:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61cc:	4604      	mov	r4, r0
   b61ce:	4668      	mov	r0, sp
   b61d0:	f7ff fea6 	bl	b5f20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b61d4:	466a      	mov	r2, sp
   b61d6:	4629      	mov	r1, r5
   b61d8:	4620      	mov	r0, r4
   b61da:	f7ff fcde 	bl	b5b9a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61de:	a801      	add	r0, sp, #4
   b61e0:	f7ff fad7 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61e4:	4620      	mov	r0, r4
   b61e6:	b003      	add	sp, #12
   b61e8:	bd30      	pop	{r4, r5, pc}
	...

000b61ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b61ec:	b570      	push	{r4, r5, r6, lr}
   b61ee:	b08a      	sub	sp, #40	; 0x28
   b61f0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b61f2:	4601      	mov	r1, r0
   b61f4:	a804      	add	r0, sp, #16
   b61f6:	f7ff ffc5 	bl	b6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b61fa:	4e14      	ldr	r6, [pc, #80]	; (b624c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b61fc:	a804      	add	r0, sp, #16
   b61fe:	f7ff fd5f 	bl	b5cc0 <_ZN5spark18JSONObjectIterator4nextEv>
   b6202:	b1e8      	cbz	r0, b6240 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b6204:	a904      	add	r1, sp, #16
   b6206:	4668      	mov	r0, sp
   b6208:	f7ff ffcd 	bl	b61a6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b620c:	9802      	ldr	r0, [sp, #8]
   b620e:	4631      	mov	r1, r6
   b6210:	f7ff fe66 	bl	b5ee0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6214:	4604      	mov	r4, r0
   b6216:	b110      	cbz	r0, b621e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6218:	1e2c      	subs	r4, r5, #0
   b621a:	bf18      	it	ne
   b621c:	2401      	movne	r4, #1
   b621e:	a801      	add	r0, sp, #4
   b6220:	f7ff fab7 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6224:	2c00      	cmp	r4, #0
   b6226:	d0e9      	beq.n	b61fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6228:	a904      	add	r1, sp, #16
   b622a:	4668      	mov	r0, sp
   b622c:	f7ff ffcc 	bl	b61c8 <_ZNK5spark18JSONObjectIterator5valueEv>
   b6230:	4668      	mov	r0, sp
   b6232:	f7ff fce8 	bl	b5c06 <_ZNK5spark9JSONValue5toIntEv>
   b6236:	6028      	str	r0, [r5, #0]
   b6238:	a801      	add	r0, sp, #4
   b623a:	f7ff faaa 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b623e:	e7dd      	b.n	b61fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6240:	a805      	add	r0, sp, #20
   b6242:	f7ff faa6 	bl	b5792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6246:	b00a      	add	sp, #40	; 0x28
   b6248:	bd70      	pop	{r4, r5, r6, pc}
   b624a:	bf00      	nop
   b624c:	000b7ec8 	.word	0x000b7ec8

000b6250 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6250:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6252:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6254:	4620      	mov	r0, r4
   b6256:	4913      	ldr	r1, [pc, #76]	; (b62a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6258:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b625a:	f001 fa84 	bl	b7766 <strcmp>
   b625e:	b950      	cbnz	r0, b6276 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6260:	f001 f83e 	bl	b72e0 <_Z16_fetch_usbserialv>
   b6264:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6268:	f001 f828 	bl	b72bc <_ZN9USBSerial5beginEl>
}
   b626c:	b003      	add	sp, #12
   b626e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6272:	f001 b835 	b.w	b72e0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6276:	490c      	ldr	r1, [pc, #48]	; (b62a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6278:	4620      	mov	r0, r4
   b627a:	f001 fa74 	bl	b7766 <strcmp>
   b627e:	b978      	cbnz	r0, b62a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6280:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6284:	a901      	add	r1, sp, #4
   b6286:	4628      	mov	r0, r5
        int baud = 9600;
   b6288:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b628a:	f7ff ffaf 	bl	b61ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b628e:	f001 f9bf 	bl	b7610 <_Z22__fetch_global_Serial1v>
   b6292:	9901      	ldr	r1, [sp, #4]
   b6294:	f000 ffba 	bl	b720c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6298:	f001 f9ba 	bl	b7610 <_Z22__fetch_global_Serial1v>
}
   b629c:	b003      	add	sp, #12
   b629e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b62a0:	2000      	movs	r0, #0
   b62a2:	e7fb      	b.n	b629c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b62a4:	000b7ecd 	.word	0x000b7ecd
   b62a8:	000b7ed4 	.word	0x000b7ed4

000b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b62ae:	e9d0 5300 	ldrd	r5, r3, [r0]
   b62b2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62b4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b62b6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b62ba:	42ae      	cmp	r6, r5
   b62bc:	d005      	beq.n	b62ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b62be:	f105 0008 	add.w	r0, r5, #8
   b62c2:	f7ff fff3 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b62c6:	3514      	adds	r5, #20
   b62c8:	e7f7      	b.n	b62ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b62ca:	6820      	ldr	r0, [r4, #0]
   b62cc:	f7ff fa08 	bl	b56e0 <free>
}
   b62d0:	4620      	mov	r0, r4
   b62d2:	bd70      	pop	{r4, r5, r6, pc}

000b62d4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b62d4:	b510      	push	{r4, lr}
   b62d6:	4604      	mov	r4, r0
   b62d8:	300c      	adds	r0, #12
   b62da:	f7ff ffe7 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b62de:	4620      	mov	r0, r4
   b62e0:	f7ff fa45 	bl	b576e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b62e4:	4620      	mov	r0, r4
   b62e6:	bd10      	pop	{r4, pc}

000b62e8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b62e8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b62ea:	4b04      	ldr	r3, [pc, #16]	; (b62fc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b62ec:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b62ee:	f840 3b04 	str.w	r3, [r0], #4
   b62f2:	f7ff ffef 	bl	b62d4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b62f6:	4620      	mov	r0, r4
   b62f8:	bd10      	pop	{r4, pc}
   b62fa:	bf00      	nop
   b62fc:	000b7a14 	.word	0x000b7a14

000b6300 <_ZN5spark16StreamLogHandlerD0Ev>:
   b6300:	b510      	push	{r4, lr}
   b6302:	4604      	mov	r4, r0
   b6304:	f7ff fff0 	bl	b62e8 <_ZN5spark16StreamLogHandlerD1Ev>
   b6308:	4620      	mov	r0, r4
   b630a:	2124      	movs	r1, #36	; 0x24
   b630c:	f7fd fec5 	bl	b409a <_ZdlPvj>
   b6310:	4620      	mov	r0, r4
   b6312:	bd10      	pop	{r4, pc}

000b6314 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b6314:	b510      	push	{r4, lr}
   b6316:	4b03      	ldr	r3, [pc, #12]	; (b6324 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b6318:	6003      	str	r3, [r0, #0]
   b631a:	4604      	mov	r4, r0
   b631c:	f7ff ffe4 	bl	b62e8 <_ZN5spark16StreamLogHandlerD1Ev>
   b6320:	4620      	mov	r0, r4
   b6322:	bd10      	pop	{r4, pc}
   b6324:	000b7f70 	.word	0x000b7f70

000b6328 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b6328:	b510      	push	{r4, lr}
   b632a:	4604      	mov	r4, r0
   b632c:	f7ff fff2 	bl	b6314 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b6330:	4620      	mov	r0, r4
   b6332:	2124      	movs	r1, #36	; 0x24
   b6334:	f7fd feb1 	bl	b409a <_ZdlPvj>
   b6338:	4620      	mov	r0, r4
   b633a:	bd10      	pop	{r4, pc}

000b633c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b633c:	2200      	movs	r2, #0
   b633e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b6342:	b510      	push	{r4, lr}
        capacity_(0) {
   b6344:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6346:	680c      	ldr	r4, [r1, #0]
   b6348:	6004      	str	r4, [r0, #0]
   b634a:	684c      	ldr	r4, [r1, #4]
   b634c:	6044      	str	r4, [r0, #4]
   b634e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6350:	600a      	str	r2, [r1, #0]
   b6352:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6354:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6356:	608a      	str	r2, [r1, #8]
}
   b6358:	bd10      	pop	{r4, pc}

000b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b635a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b635c:	6803      	ldr	r3, [r0, #0]
   b635e:	4604      	mov	r4, r0
   b6360:	6818      	ldr	r0, [r3, #0]
   b6362:	f7fe ff8f 	bl	b5284 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6366:	4620      	mov	r0, r4
   b6368:	bd10      	pop	{r4, pc}
	...

000b636c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6370:	b087      	sub	sp, #28
   b6372:	4680      	mov	r8, r0
   b6374:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6376:	4b1c      	ldr	r3, [pc, #112]	; (b63e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6378:	685b      	ldr	r3, [r3, #4]
   b637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b637e:	4689      	mov	r9, r1
   b6380:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b6382:	b96b      	cbnz	r3, b63a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6384:	f7ff fed0 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b6388:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b638a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b638e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6390:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b6392:	f7ff fda3 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6396:	7b23      	ldrb	r3, [r4, #12]
   b6398:	b12b      	cbz	r3, b63a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b639a:	a805      	add	r0, sp, #20
   b639c:	f7ff ffdd 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b63a0:	b007      	add	sp, #28
   b63a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b63a6:	2301      	movs	r3, #1
   b63a8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b63aa:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b63ae:	fa5f f989 	uxtb.w	r9, r9
   b63b2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b63b6:	45aa      	cmp	sl, r5
   b63b8:	d012      	beq.n	b63e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b63ba:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b63be:	4631      	mov	r1, r6
   b63c0:	1d38      	adds	r0, r7, #4
   b63c2:	f7ff fe3d 	bl	b6040 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b63c6:	4581      	cmp	r9, r0
   b63c8:	d3f5      	bcc.n	b63b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b63ca:	683b      	ldr	r3, [r7, #0]
   b63cc:	9a03      	ldr	r2, [sp, #12]
   b63ce:	9200      	str	r2, [sp, #0]
   b63d0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b63d4:	464a      	mov	r2, r9
   b63d6:	4633      	mov	r3, r6
   b63d8:	4641      	mov	r1, r8
   b63da:	4638      	mov	r0, r7
   b63dc:	47d8      	blx	fp
   b63de:	e7ea      	b.n	b63b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b63e0:	2300      	movs	r3, #0
   b63e2:	7323      	strb	r3, [r4, #12]
   b63e4:	e7d9      	b.n	b639a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b63e6:	bf00      	nop
   b63e8:	e000ed00 	.word	0xe000ed00

000b63ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b63ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63f0:	469b      	mov	fp, r3
   b63f2:	4b1a      	ldr	r3, [pc, #104]	; (b645c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b63f4:	685b      	ldr	r3, [r3, #4]
   b63f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b63fa:	4680      	mov	r8, r0
   b63fc:	4689      	mov	r9, r1
   b63fe:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b6400:	b96b      	cbnz	r3, b641e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b6402:	f7ff fe91 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b6406:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6408:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b640c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b640e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6410:	f7ff fd64 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6414:	7b23      	ldrb	r3, [r4, #12]
   b6416:	b12b      	cbz	r3, b6424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6418:	a801      	add	r0, sp, #4
   b641a:	f7ff ff9e 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b641e:	b003      	add	sp, #12
   b6420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6424:	2301      	movs	r3, #1
   b6426:	7323      	strb	r3, [r4, #12]
   b6428:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b642c:	b2f6      	uxtb	r6, r6
   b642e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6432:	4555      	cmp	r5, sl
   b6434:	d00e      	beq.n	b6454 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6436:	f855 7b04 	ldr.w	r7, [r5], #4
   b643a:	4659      	mov	r1, fp
   b643c:	1d38      	adds	r0, r7, #4
   b643e:	f7ff fdff 	bl	b6040 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6442:	4286      	cmp	r6, r0
   b6444:	d3f5      	bcc.n	b6432 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6446:	683b      	ldr	r3, [r7, #0]
   b6448:	464a      	mov	r2, r9
   b644a:	68db      	ldr	r3, [r3, #12]
   b644c:	4641      	mov	r1, r8
   b644e:	4638      	mov	r0, r7
   b6450:	4798      	blx	r3
   b6452:	e7ee      	b.n	b6432 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6454:	2300      	movs	r3, #0
   b6456:	7323      	strb	r3, [r4, #12]
   b6458:	e7de      	b.n	b6418 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b645a:	bf00      	nop
   b645c:	e000ed00 	.word	0xe000ed00

000b6460 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6460:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6464:	4b16      	ldr	r3, [pc, #88]	; (b64c0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6466:	685b      	ldr	r3, [r3, #4]
   b6468:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b646c:	4605      	mov	r5, r0
   b646e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b6470:	bb1b      	cbnz	r3, b64ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6472:	f7ff fe59 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6476:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b647a:	4604      	mov	r4, r0
   b647c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b647e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6480:	f7ff fd2c 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
   b6484:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6488:	2446      	movs	r4, #70	; 0x46
   b648a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b648e:	45b0      	cmp	r8, r6
   b6490:	d109      	bne.n	b64a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6492:	a801      	add	r0, sp, #4
   b6494:	f7ff ff61 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6498:	42a5      	cmp	r5, r4
   b649a:	bfb4      	ite	lt
   b649c:	2000      	movlt	r0, #0
   b649e:	2001      	movge	r0, #1
}
   b64a0:	b002      	add	sp, #8
   b64a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b64a6:	f856 0b04 	ldr.w	r0, [r6], #4
   b64aa:	4639      	mov	r1, r7
   b64ac:	3004      	adds	r0, #4
   b64ae:	f7ff fdc7 	bl	b6040 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b64b2:	4284      	cmp	r4, r0
   b64b4:	bfa8      	it	ge
   b64b6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b64b8:	e7e9      	b.n	b648e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b64ba:	2000      	movs	r0, #0
   b64bc:	e7f0      	b.n	b64a0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b64be:	bf00      	nop
   b64c0:	e000ed00 	.word	0xe000ed00

000b64c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64c6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b64ca:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64cc:	4604      	mov	r4, r0
   b64ce:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64d0:	db0d      	blt.n	b64ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b64d2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b64d4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b64d6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b64d8:	dd04      	ble.n	b64e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b64da:	00b9      	lsls	r1, r7, #2
   b64dc:	f7ff f908 	bl	b56f0 <realloc>
            if (!d) {
   b64e0:	b918      	cbnz	r0, b64ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b64e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b64e4:	f7ff f8fc 	bl	b56e0 <free>
        T* d = nullptr;
   b64e8:	2000      	movs	r0, #0
        data_ = d;
   b64ea:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b64ec:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b64ee:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b64f0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b64f2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b64f6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b64f8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b64fc:	1d08      	adds	r0, r1, #4
   b64fe:	f001 f8cb 	bl	b7698 <memmove>
    new(p) T(std::move(value));
   b6502:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b6506:	6863      	ldr	r3, [r4, #4]
   b6508:	3301      	adds	r3, #1
   b650a:	6063      	str	r3, [r4, #4]
    return true;
   b650c:	2001      	movs	r0, #1
   b650e:	e7e8      	b.n	b64e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6510 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6510:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b6512:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6516:	4604      	mov	r4, r0
   b6518:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b651a:	9301      	str	r3, [sp, #4]
   b651c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b651e:	f7ff fcdd 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b6522:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6526:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b652a:	4293      	cmp	r3, r2
   b652c:	4619      	mov	r1, r3
   b652e:	d00b      	beq.n	b6548 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6530:	6809      	ldr	r1, [r1, #0]
   b6532:	42a9      	cmp	r1, r5
   b6534:	f103 0304 	add.w	r3, r3, #4
   b6538:	d1f7      	bne.n	b652a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b653a:	a801      	add	r0, sp, #4
   b653c:	f7ff ff0d 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6540:	2500      	movs	r5, #0
}
   b6542:	4628      	mov	r0, r5
   b6544:	b003      	add	sp, #12
   b6546:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6548:	4629      	mov	r1, r5
   b654a:	4620      	mov	r0, r4
   b654c:	f7ff ffba 	bl	b64c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6550:	4605      	mov	r5, r0
   b6552:	2800      	cmp	r0, #0
   b6554:	d0f1      	beq.n	b653a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6556:	6863      	ldr	r3, [r4, #4]
   b6558:	2b01      	cmp	r3, #1
   b655a:	d101      	bne.n	b6560 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b655c:	f7ff fe00 	bl	b6160 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6560:	a801      	add	r0, sp, #4
   b6562:	f7ff fefa 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6566:	e7ec      	b.n	b6542 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6568 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6568:	b570      	push	{r4, r5, r6, lr}
   b656a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b656c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6570:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6572:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6576:	4282      	cmp	r2, r0
   b6578:	d00f      	beq.n	b659a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b657a:	4601      	mov	r1, r0
            if (*p == value) {
   b657c:	681d      	ldr	r5, [r3, #0]
   b657e:	f851 6b04 	ldr.w	r6, [r1], #4
   b6582:	42ae      	cmp	r6, r5
   b6584:	d107      	bne.n	b6596 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6586:	1a52      	subs	r2, r2, r1
   b6588:	f001 f886 	bl	b7698 <memmove>
    --size_;
   b658c:	6863      	ldr	r3, [r4, #4]
   b658e:	3b01      	subs	r3, #1
   b6590:	6063      	str	r3, [r4, #4]
    return true;
   b6592:	2001      	movs	r0, #1
}
   b6594:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6596:	4608      	mov	r0, r1
   b6598:	e7ed      	b.n	b6576 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b659a:	2000      	movs	r0, #0
   b659c:	e7fa      	b.n	b6594 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b659e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b659e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b65a0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b65a4:	4604      	mov	r4, r0
   b65a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b65a8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65aa:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b65ac:	f7ff fc96 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b65b0:	a901      	add	r1, sp, #4
   b65b2:	4620      	mov	r0, r4
   b65b4:	f7ff ffd8 	bl	b6568 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b65b8:	b118      	cbz	r0, b65c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b65ba:	6863      	ldr	r3, [r4, #4]
   b65bc:	b90b      	cbnz	r3, b65c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b65be:	f7ff fddb 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b65c2:	a803      	add	r0, sp, #12
   b65c4:	f7ff fec9 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b65c8:	b004      	add	sp, #16
   b65ca:	bd10      	pop	{r4, pc}

000b65cc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b65cc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b65ce:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b65d2:	2318      	movs	r3, #24
   b65d4:	4604      	mov	r4, r0
   b65d6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b65da:	42ae      	cmp	r6, r5
   b65dc:	d015      	beq.n	b660a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b65de:	f105 0110 	add.w	r1, r5, #16
   b65e2:	4620      	mov	r0, r4
   b65e4:	f7ff ffc0 	bl	b6568 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b65e8:	6863      	ldr	r3, [r4, #4]
   b65ea:	b90b      	cbnz	r3, b65f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b65ec:	f7ff fdc4 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b65f0:	69e0      	ldr	r0, [r4, #28]
   b65f2:	6929      	ldr	r1, [r5, #16]
   b65f4:	6803      	ldr	r3, [r0, #0]
   b65f6:	68db      	ldr	r3, [r3, #12]
   b65f8:	4798      	blx	r3
        if (h.stream) {
   b65fa:	6969      	ldr	r1, [r5, #20]
   b65fc:	b119      	cbz	r1, b6606 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b65fe:	6a20      	ldr	r0, [r4, #32]
   b6600:	6803      	ldr	r3, [r0, #0]
   b6602:	68db      	ldr	r3, [r3, #12]
   b6604:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b6606:	3518      	adds	r5, #24
   b6608:	e7e7      	b.n	b65da <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b660a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b660e:	2618      	movs	r6, #24
   b6610:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6614:	42ae      	cmp	r6, r5
   b6616:	d004      	beq.n	b6622 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6618:	4628      	mov	r0, r5
   b661a:	f000 fce5 	bl	b6fe8 <_ZN6StringD1Ev>
   b661e:	3518      	adds	r5, #24
   b6620:	e7f8      	b.n	b6614 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b6622:	2300      	movs	r3, #0
   b6624:	6163      	str	r3, [r4, #20]
}
   b6626:	bd70      	pop	{r4, r5, r6, pc}

000b6628 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6628:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b662a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b662c:	f7ff fda4 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6630:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6634:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6636:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6638:	f7ff fc50 	bl	b5edc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b663c:	4620      	mov	r0, r4
   b663e:	f7ff ffc5 	bl	b65cc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6642:	a801      	add	r0, sp, #4
   b6644:	f7ff fe89 	bl	b635a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6648:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b664a:	b108      	cbz	r0, b6650 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b664c:	f7fe fe0a 	bl	b5264 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6650:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6654:	2618      	movs	r6, #24
   b6656:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b665a:	42ae      	cmp	r6, r5
   b665c:	d004      	beq.n	b6668 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b665e:	4628      	mov	r0, r5
   b6660:	f000 fcc2 	bl	b6fe8 <_ZN6StringD1Ev>
   b6664:	3518      	adds	r5, #24
   b6666:	e7f8      	b.n	b665a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6668:	6920      	ldr	r0, [r4, #16]
   b666a:	f7ff f839 	bl	b56e0 <free>
   b666e:	6820      	ldr	r0, [r4, #0]
   b6670:	f7ff f836 	bl	b56e0 <free>
}
   b6674:	4620      	mov	r0, r4
   b6676:	b002      	add	sp, #8
   b6678:	bd70      	pop	{r4, r5, r6, pc}
	...

000b667c <__tcf_2>:
    static LogManager mgr;
   b667c:	4801      	ldr	r0, [pc, #4]	; (b6684 <__tcf_2+0x8>)
   b667e:	f7ff bfd3 	b.w	b6628 <_ZN5spark10LogManagerD1Ev>
   b6682:	bf00      	nop
   b6684:	2003e6a8 	.word	0x2003e6a8

000b6688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6688:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b668a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b668c:	4604      	mov	r4, r0
   b668e:	460d      	mov	r5, r1
   b6690:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6692:	d915      	bls.n	b66c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6694:	4290      	cmp	r0, r2
   b6696:	d214      	bcs.n	b66c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6698:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b669c:	1a75      	subs	r5, r6, r1
   b669e:	f1a1 0714 	sub.w	r7, r1, #20
   b66a2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b66a4:	42b7      	cmp	r7, r6
   b66a6:	d01a      	beq.n	b66de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b66a8:	b11c      	cbz	r4, b66b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b66aa:	4631      	mov	r1, r6
   b66ac:	4620      	mov	r0, r4
   b66ae:	f7ff fc78 	bl	b5fa2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b66b2:	f106 0008 	add.w	r0, r6, #8
   b66b6:	f7ff fdf9 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b66ba:	3e14      	subs	r6, #20
   b66bc:	3c14      	subs	r4, #20
   b66be:	e7f1      	b.n	b66a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b66c0:	d00d      	beq.n	b66de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b66c2:	42b5      	cmp	r5, r6
   b66c4:	d00b      	beq.n	b66de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b66c6:	b11c      	cbz	r4, b66d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b66c8:	4629      	mov	r1, r5
   b66ca:	4620      	mov	r0, r4
   b66cc:	f7ff fc69 	bl	b5fa2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b66d0:	f105 0008 	add.w	r0, r5, #8
   b66d4:	f7ff fdea 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b66d8:	3514      	adds	r5, #20
   b66da:	3414      	adds	r4, #20
   b66dc:	e7f1      	b.n	b66c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b66de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b66e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b66e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66e4:	4604      	mov	r4, r0
   b66e6:	460d      	mov	r5, r1
   b66e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b66ea:	d914      	bls.n	b6716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b66ec:	4290      	cmp	r0, r2
   b66ee:	d213      	bcs.n	b6718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b66f0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b66f4:	1a75      	subs	r5, r6, r1
   b66f6:	f1a1 0710 	sub.w	r7, r1, #16
   b66fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b66fc:	42b7      	cmp	r7, r6
   b66fe:	d018      	beq.n	b6732 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6700:	b11c      	cbz	r4, b670a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6702:	4631      	mov	r1, r6
   b6704:	4620      	mov	r0, r4
   b6706:	f000 fcd7 	bl	b70b8 <_ZN6StringC1EOS_>
                end->~T();
   b670a:	4630      	mov	r0, r6
   b670c:	f000 fc6c 	bl	b6fe8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6710:	3e10      	subs	r6, #16
   b6712:	3c10      	subs	r4, #16
   b6714:	e7f2      	b.n	b66fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6716:	d00c      	beq.n	b6732 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6718:	42b5      	cmp	r5, r6
   b671a:	d00a      	beq.n	b6732 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b671c:	b11c      	cbz	r4, b6726 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b671e:	4629      	mov	r1, r5
   b6720:	4620      	mov	r0, r4
   b6722:	f000 fcc9 	bl	b70b8 <_ZN6StringC1EOS_>
                p->~T();
   b6726:	4628      	mov	r0, r5
   b6728:	f000 fc5e 	bl	b6fe8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b672c:	3510      	adds	r5, #16
   b672e:	3410      	adds	r4, #16
   b6730:	e7f2      	b.n	b6718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6734 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6734:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6736:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6738:	4605      	mov	r5, r0
        if (n > 0) {
   b673a:	dd11      	ble.n	b6760 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b673c:	0130      	lsls	r0, r6, #4
   b673e:	f7fe ffc7 	bl	b56d0 <malloc>
            if (!d) {
   b6742:	4604      	mov	r4, r0
   b6744:	b158      	cbz	r0, b675e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6746:	e9d5 1200 	ldrd	r1, r2, [r5]
   b674a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b674e:	f7ff ffc7 	bl	b66e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6752:	6828      	ldr	r0, [r5, #0]
   b6754:	f7fe ffc4 	bl	b56e0 <free>
        data_ = d;
   b6758:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b675a:	60ae      	str	r6, [r5, #8]
        return true;
   b675c:	2001      	movs	r0, #1
    }
   b675e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6760:	2400      	movs	r4, #0
   b6762:	e7f6      	b.n	b6752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6768:	4690      	mov	r8, r2
   b676a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b676c:	2300      	movs	r3, #0
   b676e:	9103      	str	r1, [sp, #12]
    return size_;
   b6770:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6774:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6776:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6778:	4299      	cmp	r1, r3
        capacity_(0) {
   b677a:	e9c0 3300 	strd	r3, r3, [r0]
   b677e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6782:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6786:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b678a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b678c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b678e:	dc23      	bgt.n	b67d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6790:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6794:	2314      	movs	r3, #20
   b6796:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b679a:	42af      	cmp	r7, r5
   b679c:	d03b      	beq.n	b6816 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b679e:	4629      	mov	r1, r5
   b67a0:	a80b      	add	r0, sp, #44	; 0x2c
   b67a2:	f000 fc89 	bl	b70b8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b67a6:	a90b      	add	r1, sp, #44	; 0x2c
   b67a8:	a80f      	add	r0, sp, #60	; 0x3c
   b67aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b67ac:	f000 fc84 	bl	b70b8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67b0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b67b4:	4299      	cmp	r1, r3
   b67b6:	da1b      	bge.n	b67f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b67b8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b67ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b67bc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b67c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b67c4:	4631      	mov	r1, r6
   b67c6:	f106 0010 	add.w	r0, r6, #16
   b67ca:	f7ff ff89 	bl	b66e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b67ce:	b9ee      	cbnz	r6, b680c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b67d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b67d2:	3301      	adds	r3, #1
   b67d4:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b67d6:	e011      	b.n	b67fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b67d8:	a808      	add	r0, sp, #32
   b67da:	f7ff ffab 	bl	b6734 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b67de:	2800      	cmp	r0, #0
   b67e0:	d1d6      	bne.n	b6790 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b67e2:	a808      	add	r0, sp, #32
   b67e4:	f7fe ffc3 	bl	b576e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b67e8:	4620      	mov	r0, r4
   b67ea:	b015      	add	sp, #84	; 0x54
   b67ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67f0:	3101      	adds	r1, #1
   b67f2:	a808      	add	r0, sp, #32
   b67f4:	f7ff ff9e 	bl	b6734 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b67f8:	2800      	cmp	r0, #0
   b67fa:	d1dd      	bne.n	b67b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b67fc:	a80f      	add	r0, sp, #60	; 0x3c
   b67fe:	f000 fbf3 	bl	b6fe8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6802:	a80b      	add	r0, sp, #44	; 0x2c
   b6804:	f000 fbf0 	bl	b6fe8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6808:	3514      	adds	r5, #20
   b680a:	e7c6      	b.n	b679a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b680c:	a90f      	add	r1, sp, #60	; 0x3c
   b680e:	4630      	mov	r0, r6
   b6810:	f000 fc52 	bl	b70b8 <_ZN6StringC1EOS_>
   b6814:	e7dc      	b.n	b67d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6816:	2600      	movs	r6, #0
   b6818:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b681c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b681e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6822:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6826:	429e      	cmp	r6, r3
   b6828:	da7c      	bge.n	b6924 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b682a:	0133      	lsls	r3, r6, #4
   b682c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b682e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6830:	b90b      	cbnz	r3, b6836 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6832:	3601      	adds	r6, #1
   b6834:	e7f5      	b.n	b6822 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6836:	2300      	movs	r3, #0
   b6838:	9307      	str	r3, [sp, #28]
   b683a:	fb09 f306 	mul.w	r3, r9, r6
   b683e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6840:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6842:	a907      	add	r1, sp, #28
   b6844:	a806      	add	r0, sp, #24
   b6846:	f7ff fb22 	bl	b5e8e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b684a:	4682      	mov	sl, r0
   b684c:	2800      	cmp	r0, #0
   b684e:	d0f0      	beq.n	b6832 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6850:	f04f 0300 	mov.w	r3, #0
   b6854:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6858:	4601      	mov	r1, r0
   b685a:	9a07      	ldr	r2, [sp, #28]
   b685c:	f10d 0317 	add.w	r3, sp, #23
   b6860:	4628      	mov	r0, r5
   b6862:	f7ff fbb1 	bl	b5fc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6866:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b686a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b686c:	2f00      	cmp	r7, #0
   b686e:	d14a      	bne.n	b6906 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6870:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6874:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6878:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b687c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6880:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6884:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6888:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b688a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b688e:	4293      	cmp	r3, r2
   b6890:	db17      	blt.n	b68c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6892:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6896:	f1ba 0f00 	cmp.w	sl, #0
   b689a:	dd30      	ble.n	b68fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b689c:	fb09 f00a 	mul.w	r0, r9, sl
   b68a0:	f7fe ff16 	bl	b56d0 <malloc>
            if (!d) {
   b68a4:	4683      	mov	fp, r0
   b68a6:	b360      	cbz	r0, b6902 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b68a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b68ac:	fb09 1202 	mla	r2, r9, r2, r1
   b68b0:	f7ff feea 	bl	b6688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b68b4:	6828      	ldr	r0, [r5, #0]
   b68b6:	f7fe ff13 	bl	b56e0 <free>
        data_ = d;
   b68ba:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b68be:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b68c2:	682b      	ldr	r3, [r5, #0]
   b68c4:	9a01      	ldr	r2, [sp, #4]
   b68c6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b68ca:	686a      	ldr	r2, [r5, #4]
   b68cc:	4651      	mov	r1, sl
   b68ce:	fb09 3202 	mla	r2, r9, r2, r3
   b68d2:	f10a 0014 	add.w	r0, sl, #20
   b68d6:	f7ff fed7 	bl	b6688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b68da:	f1ba 0f00 	cmp.w	sl, #0
   b68de:	d003      	beq.n	b68e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b68e0:	a90f      	add	r1, sp, #60	; 0x3c
   b68e2:	4650      	mov	r0, sl
   b68e4:	f7ff fb5d 	bl	b5fa2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b68e8:	686b      	ldr	r3, [r5, #4]
   b68ea:	3301      	adds	r3, #1
   b68ec:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b68ee:	a811      	add	r0, sp, #68	; 0x44
   b68f0:	f7ff fcdc 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b68f4:	b13f      	cbz	r7, b6906 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b68f6:	a80b      	add	r0, sp, #44	; 0x2c
   b68f8:	f7ff fcd8 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b68fc:	e771      	b.n	b67e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b68fe:	46bb      	mov	fp, r7
   b6900:	e7d8      	b.n	b68b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6902:	2701      	movs	r7, #1
   b6904:	e7f3      	b.n	b68ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6906:	9b01      	ldr	r3, [sp, #4]
   b6908:	682d      	ldr	r5, [r5, #0]
   b690a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b690e:	9b06      	ldr	r3, [sp, #24]
   b6910:	781b      	ldrb	r3, [r3, #0]
   b6912:	b92b      	cbnz	r3, b6920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6914:	f8d8 3000 	ldr.w	r3, [r8]
   b6918:	9a02      	ldr	r2, [sp, #8]
   b691a:	4413      	add	r3, r2
   b691c:	7c1b      	ldrb	r3, [r3, #16]
   b691e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6920:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6922:	e78e      	b.n	b6842 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6924:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6926:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6928:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b692a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b692c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b692e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6932:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6934:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6936:	60a2      	str	r2, [r4, #8]
   b6938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b693a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b693c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b693e:	60e2      	str	r2, [r4, #12]
   b6940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6942:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6944:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6946:	6122      	str	r2, [r4, #16]
   b6948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b694a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b694c:	9b03      	ldr	r3, [sp, #12]
   b694e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6950:	6162      	str	r2, [r4, #20]
   b6952:	7623      	strb	r3, [r4, #24]
   b6954:	e7cf      	b.n	b68f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6958 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6958:	b5f0      	push	{r4, r5, r6, r7, lr}
   b695a:	4604      	mov	r4, r0
   b695c:	b087      	sub	sp, #28
   b695e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6960:	4626      	mov	r6, r4
        stream_(&stream) {
   b6962:	4619      	mov	r1, r3
   b6964:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6966:	4617      	mov	r7, r2
        stream_(&stream) {
   b6968:	f7fd fcb3 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b696c:	4b0b      	ldr	r3, [pc, #44]	; (b699c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b696e:	f846 3b04 	str.w	r3, [r6], #4
   b6972:	4669      	mov	r1, sp
   b6974:	a803      	add	r0, sp, #12
   b6976:	f7fd fcac 	bl	b42d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b697a:	aa03      	add	r2, sp, #12
   b697c:	4639      	mov	r1, r7
   b697e:	4630      	mov	r0, r6
   b6980:	f7ff fef0 	bl	b6764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6984:	a803      	add	r0, sp, #12
   b6986:	f7fd fc63 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b698a:	4668      	mov	r0, sp
   b698c:	f7fd fc60 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6990:	4b03      	ldr	r3, [pc, #12]	; (b69a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6992:	6023      	str	r3, [r4, #0]
}
   b6994:	4620      	mov	r0, r4
        stream_(&stream) {
   b6996:	6225      	str	r5, [r4, #32]
}
   b6998:	b007      	add	sp, #28
   b699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b699c:	000b7a14 	.word	0x000b7a14
   b69a0:	000b7f58 	.word	0x000b7f58

000b69a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b69a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69a6:	460f      	mov	r7, r1
   b69a8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69aa:	491d      	ldr	r1, [pc, #116]	; (b6a20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b69ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69ae:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b69b0:	4616      	mov	r6, r2
   b69b2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69b4:	f000 fed7 	bl	b7766 <strcmp>
   b69b8:	b9c0      	cbnz	r0, b69ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b69ba:	b1a4      	cbz	r4, b69e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b69bc:	4629      	mov	r1, r5
   b69be:	a801      	add	r0, sp, #4
   b69c0:	f7ff fcbc 	bl	b633c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b69c4:	4917      	ldr	r1, [pc, #92]	; (b6a24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b69c6:	2024      	movs	r0, #36	; 0x24
   b69c8:	f000 fe46 	bl	b7658 <_ZnwjRKSt9nothrow_t>
   b69cc:	4605      	mov	r5, r0
   b69ce:	b130      	cbz	r0, b69de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b69d0:	ab01      	add	r3, sp, #4
   b69d2:	4632      	mov	r2, r6
   b69d4:	4621      	mov	r1, r4
   b69d6:	f7ff ffbf 	bl	b6958 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b69da:	4b13      	ldr	r3, [pc, #76]	; (b6a28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b69dc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b69de:	a801      	add	r0, sp, #4
   b69e0:	f7fd fc36 	bl	b4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b69e4:	462c      	mov	r4, r5
}
   b69e6:	4620      	mov	r0, r4
   b69e8:	b005      	add	sp, #20
   b69ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b69ec:	490f      	ldr	r1, [pc, #60]	; (b6a2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b69ee:	4638      	mov	r0, r7
   b69f0:	f000 feb9 	bl	b7766 <strcmp>
   b69f4:	b990      	cbnz	r0, b6a1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b69f6:	2c00      	cmp	r4, #0
   b69f8:	d0f5      	beq.n	b69e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b69fa:	4629      	mov	r1, r5
   b69fc:	a801      	add	r0, sp, #4
   b69fe:	f7ff fc9d 	bl	b633c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6a02:	4908      	ldr	r1, [pc, #32]	; (b6a24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6a04:	2024      	movs	r0, #36	; 0x24
   b6a06:	f000 fe27 	bl	b7658 <_ZnwjRKSt9nothrow_t>
   b6a0a:	4605      	mov	r5, r0
   b6a0c:	2800      	cmp	r0, #0
   b6a0e:	d0e6      	beq.n	b69de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6a10:	ab01      	add	r3, sp, #4
   b6a12:	4632      	mov	r2, r6
   b6a14:	4621      	mov	r1, r4
   b6a16:	f7ff ff9f 	bl	b6958 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a1a:	e7e0      	b.n	b69de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6a1c:	2400      	movs	r4, #0
   b6a1e:	e7e2      	b.n	b69e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6a20:	000b7edc 	.word	0x000b7edc
   b6a24:	000b8068 	.word	0x000b8068
   b6a28:	000b7f70 	.word	0x000b7f70
   b6a2c:	000b7ee0 	.word	0x000b7ee0

000b6a30 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6a30:	4b01      	ldr	r3, [pc, #4]	; (b6a38 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6a32:	4a02      	ldr	r2, [pc, #8]	; (b6a3c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6a34:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6a36:	4770      	bx	lr
   b6a38:	2003e6a4 	.word	0x2003e6a4
   b6a3c:	000b7ef1 	.word	0x000b7ef1

000b6a40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a44:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6a46:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a4a:	4604      	mov	r4, r0
   b6a4c:	460e      	mov	r6, r1
   b6a4e:	4617      	mov	r7, r2
   b6a50:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6a52:	f000 fc45 	bl	b72e0 <_Z16_fetch_usbserialv>
   b6a56:	4581      	cmp	r9, r0
   b6a58:	d04c      	beq.n	b6af4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6a5a:	792b      	ldrb	r3, [r5, #4]
   b6a5c:	0719      	lsls	r1, r3, #28
   b6a5e:	d504      	bpl.n	b6a6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6a60:	696a      	ldr	r2, [r5, #20]
   b6a62:	4954      	ldr	r1, [pc, #336]	; (b6bb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6a64:	4620      	mov	r0, r4
   b6a66:	f7ff fa8d 	bl	b5f84 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6a6a:	f1b8 0f00 	cmp.w	r8, #0
   b6a6e:	d00d      	beq.n	b6a8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6a70:	215b      	movs	r1, #91	; 0x5b
   b6a72:	4620      	mov	r0, r4
   b6a74:	f7ff fa7a 	bl	b5f6c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6a78:	4641      	mov	r1, r8
   b6a7a:	4620      	mov	r0, r4
   b6a7c:	f7ff fa67 	bl	b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6a80:	6823      	ldr	r3, [r4, #0]
   b6a82:	494d      	ldr	r1, [pc, #308]	; (b6bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6a84:	68db      	ldr	r3, [r3, #12]
   b6a86:	2202      	movs	r2, #2
   b6a88:	4620      	mov	r0, r4
   b6a8a:	4798      	blx	r3
    if (attr.has_file) {
   b6a8c:	792b      	ldrb	r3, [r5, #4]
   b6a8e:	07da      	lsls	r2, r3, #31
   b6a90:	d523      	bpl.n	b6ada <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6a92:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6a96:	212f      	movs	r1, #47	; 0x2f
   b6a98:	4640      	mov	r0, r8
   b6a9a:	f000 fe92 	bl	b77c2 <strrchr>
    if (s1) {
   b6a9e:	b108      	cbz	r0, b6aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6aa0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6aa4:	4641      	mov	r1, r8
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	f7ff fa51 	bl	b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6aac:	792b      	ldrb	r3, [r5, #4]
   b6aae:	079b      	lsls	r3, r3, #30
   b6ab0:	d508      	bpl.n	b6ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6ab2:	213a      	movs	r1, #58	; 0x3a
   b6ab4:	4620      	mov	r0, r4
   b6ab6:	f7ff fa59 	bl	b5f6c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6aba:	68ea      	ldr	r2, [r5, #12]
   b6abc:	493f      	ldr	r1, [pc, #252]	; (b6bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6abe:	4620      	mov	r0, r4
   b6ac0:	f7ff fa60 	bl	b5f84 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6ac4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6ac6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6ac8:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6acc:	68db      	ldr	r3, [r3, #12]
   b6ace:	bf14      	ite	ne
   b6ad0:	493b      	ldrne	r1, [pc, #236]	; (b6bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6ad2:	493c      	ldreq	r1, [pc, #240]	; (b6bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6ad4:	2202      	movs	r2, #2
            write(": ", 2);
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	4798      	blx	r3
    if (attr.has_function) {
   b6ada:	792b      	ldrb	r3, [r5, #4]
   b6adc:	0758      	lsls	r0, r3, #29
   b6ade:	d51d      	bpl.n	b6b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6ae0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6ae2:	460b      	mov	r3, r1
   b6ae4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6ae6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6aea:	b160      	cbz	r0, b6b06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6aec:	2820      	cmp	r0, #32
   b6aee:	d108      	bne.n	b6b02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6af0:	4619      	mov	r1, r3
   b6af2:	e7f7      	b.n	b6ae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6af4:	4834      	ldr	r0, [pc, #208]	; (b6bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6af6:	f000 f966 	bl	b6dc6 <_ZN5spark12NetworkClass9listeningEv>
   b6afa:	2800      	cmp	r0, #0
   b6afc:	d0ad      	beq.n	b6a5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6b02:	2828      	cmp	r0, #40	; 0x28
   b6b04:	d1ee      	bne.n	b6ae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6b06:	6823      	ldr	r3, [r4, #0]
   b6b08:	1a52      	subs	r2, r2, r1
   b6b0a:	68db      	ldr	r3, [r3, #12]
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	4798      	blx	r3
        write("(): ", 4);
   b6b10:	6823      	ldr	r3, [r4, #0]
   b6b12:	492e      	ldr	r1, [pc, #184]	; (b6bcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6b14:	68db      	ldr	r3, [r3, #12]
   b6b16:	2204      	movs	r2, #4
   b6b18:	4620      	mov	r0, r4
   b6b1a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6b1c:	2100      	movs	r1, #0
   b6b1e:	4638      	mov	r0, r7
   b6b20:	f7fe fd20 	bl	b5564 <log_level_name>
   b6b24:	4601      	mov	r1, r0
    write(s);
   b6b26:	4620      	mov	r0, r4
   b6b28:	f7ff fa11 	bl	b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6b2c:	6823      	ldr	r3, [r4, #0]
   b6b2e:	4925      	ldr	r1, [pc, #148]	; (b6bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6b30:	68db      	ldr	r3, [r3, #12]
   b6b32:	2202      	movs	r2, #2
   b6b34:	4620      	mov	r0, r4
   b6b36:	4798      	blx	r3
    if (msg) {
   b6b38:	b11e      	cbz	r6, b6b42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6b3a:	4631      	mov	r1, r6
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	f7ff fa06 	bl	b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6b42:	792b      	ldrb	r3, [r5, #4]
   b6b44:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6b48:	d02c      	beq.n	b6ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6b4a:	6823      	ldr	r3, [r4, #0]
   b6b4c:	4920      	ldr	r1, [pc, #128]	; (b6bd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6b4e:	68db      	ldr	r3, [r3, #12]
   b6b50:	2202      	movs	r2, #2
   b6b52:	4620      	mov	r0, r4
   b6b54:	4798      	blx	r3
        if (attr.has_code) {
   b6b56:	792b      	ldrb	r3, [r5, #4]
   b6b58:	06d9      	lsls	r1, r3, #27
   b6b5a:	d50a      	bpl.n	b6b72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6b5c:	6823      	ldr	r3, [r4, #0]
   b6b5e:	491d      	ldr	r1, [pc, #116]	; (b6bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6b60:	68db      	ldr	r3, [r3, #12]
   b6b62:	2207      	movs	r2, #7
   b6b64:	4620      	mov	r0, r4
   b6b66:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6b68:	69aa      	ldr	r2, [r5, #24]
   b6b6a:	491b      	ldr	r1, [pc, #108]	; (b6bd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6b6c:	4620      	mov	r0, r4
   b6b6e:	f7ff fa09 	bl	b5f84 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6b72:	792b      	ldrb	r3, [r5, #4]
   b6b74:	069a      	lsls	r2, r3, #26
   b6b76:	d511      	bpl.n	b6b9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6b78:	06db      	lsls	r3, r3, #27
   b6b7a:	d505      	bpl.n	b6b88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6b7c:	6823      	ldr	r3, [r4, #0]
   b6b7e:	4910      	ldr	r1, [pc, #64]	; (b6bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6b80:	68db      	ldr	r3, [r3, #12]
   b6b82:	2202      	movs	r2, #2
   b6b84:	4620      	mov	r0, r4
   b6b86:	4798      	blx	r3
            write("details = ", 10);
   b6b88:	6823      	ldr	r3, [r4, #0]
   b6b8a:	4914      	ldr	r1, [pc, #80]	; (b6bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6b8c:	68db      	ldr	r3, [r3, #12]
   b6b8e:	4620      	mov	r0, r4
   b6b90:	220a      	movs	r2, #10
   b6b92:	4798      	blx	r3
            write(attr.details);
   b6b94:	69e9      	ldr	r1, [r5, #28]
   b6b96:	4620      	mov	r0, r4
   b6b98:	f7ff f9d9 	bl	b5f4e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6b9c:	215d      	movs	r1, #93	; 0x5d
   b6b9e:	4620      	mov	r0, r4
   b6ba0:	f7ff f9e4 	bl	b5f6c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6ba4:	6823      	ldr	r3, [r4, #0]
   b6ba6:	490e      	ldr	r1, [pc, #56]	; (b6be0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6ba8:	68db      	ldr	r3, [r3, #12]
   b6baa:	4620      	mov	r0, r4
   b6bac:	2202      	movs	r2, #2
}
   b6bae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6bb2:	4718      	bx	r3
   b6bb4:	000b7ef5 	.word	0x000b7ef5
   b6bb8:	000b7efc 	.word	0x000b7efc
   b6bbc:	000b7ebc 	.word	0x000b7ebc
   b6bc0:	000b7eff 	.word	0x000b7eff
   b6bc4:	000b7f04 	.word	0x000b7f04
   b6bc8:	2003e6d0 	.word	0x2003e6d0
   b6bcc:	000b7f02 	.word	0x000b7f02
   b6bd0:	000b7f07 	.word	0x000b7f07
   b6bd4:	000b7f0a 	.word	0x000b7f0a
   b6bd8:	000b7f12 	.word	0x000b7f12
   b6bdc:	000b7f15 	.word	0x000b7f15
   b6be0:	000b7f20 	.word	0x000b7f20

000b6be4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6be8:	b085      	sub	sp, #20
    return stream_;
   b6bea:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6bee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6bf0:	4605      	mov	r5, r0
   b6bf2:	460f      	mov	r7, r1
   b6bf4:	4690      	mov	r8, r2
   b6bf6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6bf8:	f000 fb72 	bl	b72e0 <_Z16_fetch_usbserialv>
   b6bfc:	4581      	cmp	r9, r0
   b6bfe:	d105      	bne.n	b6c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6c00:	4849      	ldr	r0, [pc, #292]	; (b6d28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6c02:	f000 f8e0 	bl	b6dc6 <_ZN5spark12NetworkClass9listeningEv>
   b6c06:	2800      	cmp	r0, #0
   b6c08:	f040 808a 	bne.w	b6d20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6c0c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6c0e:	4a47      	ldr	r2, [pc, #284]	; (b6d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6c10:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6c12:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6c16:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6c18:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6c1a:	f88d 9008 	strb.w	r9, [sp, #8]
   b6c1e:	f7ff f878 	bl	b5d12 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6c22:	4649      	mov	r1, r9
   b6c24:	4640      	mov	r0, r8
   b6c26:	f7fe fc9d 	bl	b5564 <log_level_name>
    json.name("l", 1).value(s);
   b6c2a:	4941      	ldr	r1, [pc, #260]	; (b6d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6c2c:	4680      	mov	r8, r0
   b6c2e:	2201      	movs	r2, #1
   b6c30:	a801      	add	r0, sp, #4
   b6c32:	f7ff f8fd 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c36:	4641      	mov	r1, r8
   b6c38:	f7ff f97b 	bl	b5f32 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6c3c:	b13f      	cbz	r7, b6c4e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6c3e:	493d      	ldr	r1, [pc, #244]	; (b6d34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6c40:	2201      	movs	r2, #1
   b6c42:	a801      	add	r0, sp, #4
   b6c44:	f7ff f8f4 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c48:	4639      	mov	r1, r7
   b6c4a:	f7ff f972 	bl	b5f32 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6c4e:	b13e      	cbz	r6, b6c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6c50:	4939      	ldr	r1, [pc, #228]	; (b6d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6c52:	2201      	movs	r2, #1
   b6c54:	a801      	add	r0, sp, #4
   b6c56:	f7ff f8eb 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c5a:	4631      	mov	r1, r6
   b6c5c:	f7ff f969 	bl	b5f32 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6c60:	7923      	ldrb	r3, [r4, #4]
   b6c62:	07df      	lsls	r7, r3, #31
   b6c64:	d50e      	bpl.n	b6c84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6c66:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6c68:	212f      	movs	r1, #47	; 0x2f
   b6c6a:	4630      	mov	r0, r6
   b6c6c:	f000 fda9 	bl	b77c2 <strrchr>
    if (s1) {
   b6c70:	b100      	cbz	r0, b6c74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6c72:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6c74:	4931      	ldr	r1, [pc, #196]	; (b6d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6c76:	2201      	movs	r2, #1
   b6c78:	a801      	add	r0, sp, #4
   b6c7a:	f7ff f8d9 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c7e:	4631      	mov	r1, r6
   b6c80:	f7ff f957 	bl	b5f32 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6c84:	7923      	ldrb	r3, [r4, #4]
   b6c86:	079e      	lsls	r6, r3, #30
   b6c88:	d507      	bpl.n	b6c9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6c8a:	492d      	ldr	r1, [pc, #180]	; (b6d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6c8c:	2202      	movs	r2, #2
   b6c8e:	a801      	add	r0, sp, #4
   b6c90:	f7ff f8ce 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6c94:	68e1      	ldr	r1, [r4, #12]
   b6c96:	f7ff f849 	bl	b5d2c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6c9a:	7923      	ldrb	r3, [r4, #4]
   b6c9c:	0758      	lsls	r0, r3, #29
   b6c9e:	d514      	bpl.n	b6cca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6ca0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6ca2:	4633      	mov	r3, r6
   b6ca4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6caa:	b12a      	cbz	r2, b6cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6cac:	2a20      	cmp	r2, #32
   b6cae:	d101      	bne.n	b6cb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6cb0:	461e      	mov	r6, r3
   b6cb2:	e7f7      	b.n	b6ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6cb4:	2a28      	cmp	r2, #40	; 0x28
   b6cb6:	d1f5      	bne.n	b6ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6cb8:	4922      	ldr	r1, [pc, #136]	; (b6d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6cba:	2202      	movs	r2, #2
   b6cbc:	a801      	add	r0, sp, #4
   b6cbe:	f7ff f8b7 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cc2:	1bba      	subs	r2, r7, r6
   b6cc4:	4631      	mov	r1, r6
   b6cc6:	f7ff f8c3 	bl	b5e50 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6cca:	7923      	ldrb	r3, [r4, #4]
   b6ccc:	0719      	lsls	r1, r3, #28
   b6cce:	d507      	bpl.n	b6ce0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6cd0:	491d      	ldr	r1, [pc, #116]	; (b6d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6cd2:	2201      	movs	r2, #1
   b6cd4:	a801      	add	r0, sp, #4
   b6cd6:	f7ff f8ab 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cda:	6961      	ldr	r1, [r4, #20]
   b6cdc:	f7ff f838 	bl	b5d50 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6ce0:	7923      	ldrb	r3, [r4, #4]
   b6ce2:	06da      	lsls	r2, r3, #27
   b6ce4:	d508      	bpl.n	b6cf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6ce6:	2204      	movs	r2, #4
   b6ce8:	4918      	ldr	r1, [pc, #96]	; (b6d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6cea:	eb0d 0002 	add.w	r0, sp, r2
   b6cee:	f7ff f89f 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6cf2:	69a1      	ldr	r1, [r4, #24]
   b6cf4:	f7ff f81a 	bl	b5d2c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6cf8:	7923      	ldrb	r3, [r4, #4]
   b6cfa:	069b      	lsls	r3, r3, #26
   b6cfc:	d507      	bpl.n	b6d0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6cfe:	4914      	ldr	r1, [pc, #80]	; (b6d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6d00:	2206      	movs	r2, #6
   b6d02:	a801      	add	r0, sp, #4
   b6d04:	f7ff f894 	bl	b5e30 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d08:	69e1      	ldr	r1, [r4, #28]
   b6d0a:	f7ff f912 	bl	b5f32 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6d0e:	a801      	add	r0, sp, #4
   b6d10:	f7fe ffe9 	bl	b5ce6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6d14:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6d16:	490f      	ldr	r1, [pc, #60]	; (b6d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6d18:	6803      	ldr	r3, [r0, #0]
   b6d1a:	2202      	movs	r2, #2
   b6d1c:	68db      	ldr	r3, [r3, #12]
   b6d1e:	4798      	blx	r3
}
   b6d20:	b005      	add	sp, #20
   b6d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6d26:	bf00      	nop
   b6d28:	2003e6d0 	.word	0x2003e6d0
   b6d2c:	000b7f40 	.word	0x000b7f40
   b6d30:	000b7ed2 	.word	0x000b7ed2
   b6d34:	000b7a85 	.word	0x000b7a85
   b6d38:	000b80d7 	.word	0x000b80d7
   b6d3c:	000b7f23 	.word	0x000b7f23
   b6d40:	000b7f25 	.word	0x000b7f25
   b6d44:	000b7f28 	.word	0x000b7f28
   b6d48:	000b7b44 	.word	0x000b7b44
   b6d4c:	000b7f2b 	.word	0x000b7f2b
   b6d50:	000b7f30 	.word	0x000b7f30
   b6d54:	000b7f20 	.word	0x000b7f20

000b6d58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6d58:	2300      	movs	r3, #0
   b6d5a:	6840      	ldr	r0, [r0, #4]
   b6d5c:	461a      	mov	r2, r3
   b6d5e:	f7fe bc57 	b.w	b5610 <network_connect>

000b6d62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6d62:	6840      	ldr	r0, [r0, #4]
   b6d64:	2200      	movs	r2, #0
   b6d66:	2102      	movs	r1, #2
   b6d68:	f7fe bc62 	b.w	b5630 <network_disconnect>

000b6d6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6d6c:	2200      	movs	r2, #0
   b6d6e:	6840      	ldr	r0, [r0, #4]
   b6d70:	4611      	mov	r1, r2
   b6d72:	f7fe bc55 	b.w	b5620 <network_connecting>

000b6d76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6d76:	2200      	movs	r2, #0
   b6d78:	6840      	ldr	r0, [r0, #4]
   b6d7a:	4611      	mov	r1, r2
   b6d7c:	f7fe bc60 	b.w	b5640 <network_ready>

000b6d80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6d80:	2300      	movs	r3, #0
   b6d82:	6840      	ldr	r0, [r0, #4]
   b6d84:	461a      	mov	r2, r3
   b6d86:	4619      	mov	r1, r3
   b6d88:	f7fe bc62 	b.w	b5650 <network_on>

000b6d8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6d8c:	2300      	movs	r3, #0
   b6d8e:	6840      	ldr	r0, [r0, #4]
   b6d90:	461a      	mov	r2, r3
   b6d92:	4619      	mov	r1, r3
   b6d94:	f7fe bc64 	b.w	b5660 <network_off>

000b6d98 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6d98:	6840      	ldr	r0, [r0, #4]
   b6d9a:	2100      	movs	r1, #0
   b6d9c:	f7fe bc88 	b.w	b56b0 <network_is_on>

000b6da0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6da0:	6840      	ldr	r0, [r0, #4]
   b6da2:	2100      	movs	r1, #0
   b6da4:	f7fe bc8c 	b.w	b56c0 <network_is_off>

000b6da8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6da8:	6840      	ldr	r0, [r0, #4]
   b6daa:	2200      	movs	r2, #0
   b6dac:	f081 0101 	eor.w	r1, r1, #1
   b6db0:	f7fe bc5e 	b.w	b5670 <network_listen>

000b6db4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6db4:	6840      	ldr	r0, [r0, #4]
   b6db6:	2200      	movs	r2, #0
   b6db8:	f7fe bc6a 	b.w	b5690 <network_set_listen_timeout>

000b6dbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6dbc:	2200      	movs	r2, #0
   b6dbe:	6840      	ldr	r0, [r0, #4]
   b6dc0:	4611      	mov	r1, r2
   b6dc2:	f7fe bc6d 	b.w	b56a0 <network_get_listen_timeout>

000b6dc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6dc6:	2200      	movs	r2, #0
   b6dc8:	6840      	ldr	r0, [r0, #4]
   b6dca:	4611      	mov	r1, r2
   b6dcc:	f7fe bc58 	b.w	b5680 <network_listening>

000b6dd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6dd4:	b095      	sub	sp, #84	; 0x54
   b6dd6:	4614      	mov	r4, r2
   b6dd8:	460d      	mov	r5, r1
   b6dda:	4607      	mov	r7, r0
    IPAddress addr;
   b6ddc:	f7fe fe32 	bl	b5a44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6de0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6de2:	221c      	movs	r2, #28
   b6de4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6de6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6de8:	f000 fc70 	bl	b76cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6dec:	2340      	movs	r3, #64	; 0x40
   b6dee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6df0:	4620      	mov	r0, r4
   b6df2:	466b      	mov	r3, sp
   b6df4:	aa0c      	add	r2, sp, #48	; 0x30
   b6df6:	2100      	movs	r1, #0
   b6df8:	f7fe faf4 	bl	b53e4 <netdb_getaddrinfo>
    if (!r) {
   b6dfc:	4604      	mov	r4, r0
   b6dfe:	2800      	cmp	r0, #0
   b6e00:	d14b      	bne.n	b6e9a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e02:	4602      	mov	r2, r0
   b6e04:	2101      	movs	r1, #1
   b6e06:	6868      	ldr	r0, [r5, #4]
   b6e08:	f7fe fc1a 	bl	b5640 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e0c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6e0e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e10:	4622      	mov	r2, r4
   b6e12:	6868      	ldr	r0, [r5, #4]
   b6e14:	f7fe fc14 	bl	b5640 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e18:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6e1a:	4681      	mov	r9, r0
        bool ok = false;
   b6e1c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e1e:	2e00      	cmp	r6, #0
   b6e20:	d03b      	beq.n	b6e9a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6e22:	2900      	cmp	r1, #0
   b6e24:	d139      	bne.n	b6e9a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6e26:	6873      	ldr	r3, [r6, #4]
   b6e28:	2b02      	cmp	r3, #2
   b6e2a:	d003      	beq.n	b6e34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6e2c:	2b0a      	cmp	r3, #10
   b6e2e:	d011      	beq.n	b6e54 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6e30:	69f6      	ldr	r6, [r6, #28]
   b6e32:	e7f4      	b.n	b6e1e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6e34:	f1b8 0f00 	cmp.w	r8, #0
   b6e38:	d0fa      	beq.n	b6e30 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6e3a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6e3c:	a806      	add	r0, sp, #24
   b6e3e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6e40:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6e42:	f7fe fe2d 	bl	b5aa0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e48:	1d3c      	adds	r4, r7, #4
   b6e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e4c:	682b      	ldr	r3, [r5, #0]
   b6e4e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6e50:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6e52:	e7ed      	b.n	b6e30 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6e54:	f1b9 0f00 	cmp.w	r9, #0
   b6e58:	d0ea      	beq.n	b6e30 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6e5a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6e5c:	2210      	movs	r2, #16
   b6e5e:	a801      	add	r0, sp, #4
   b6e60:	f000 fc34 	bl	b76cc <memset>
                    a.v = 6;
   b6e64:	2306      	movs	r3, #6
   b6e66:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6e6a:	ad01      	add	r5, sp, #4
   b6e6c:	f104 0308 	add.w	r3, r4, #8
   b6e70:	3418      	adds	r4, #24
   b6e72:	6818      	ldr	r0, [r3, #0]
   b6e74:	6859      	ldr	r1, [r3, #4]
   b6e76:	462a      	mov	r2, r5
   b6e78:	c203      	stmia	r2!, {r0, r1}
   b6e7a:	3308      	adds	r3, #8
   b6e7c:	42a3      	cmp	r3, r4
   b6e7e:	4615      	mov	r5, r2
   b6e80:	d1f7      	bne.n	b6e72 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6e82:	a901      	add	r1, sp, #4
   b6e84:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6e86:	ad07      	add	r5, sp, #28
   b6e88:	f7fe fdea 	bl	b5a60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e8e:	1d3c      	adds	r4, r7, #4
   b6e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e92:	682b      	ldr	r3, [r5, #0]
   b6e94:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6e96:	4649      	mov	r1, r9
   b6e98:	e7ca      	b.n	b6e30 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6e9a:	9800      	ldr	r0, [sp, #0]
   b6e9c:	f7fe fa9a 	bl	b53d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6ea0:	4638      	mov	r0, r7
   b6ea2:	b015      	add	sp, #84	; 0x54
   b6ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ea8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ea8:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6eaa:	4a03      	ldr	r2, [pc, #12]	; (b6eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6eac:	601a      	str	r2, [r3, #0]
   b6eae:	2200      	movs	r2, #0
   b6eb0:	605a      	str	r2, [r3, #4]

} // spark
   b6eb2:	4770      	bx	lr
   b6eb4:	2003e6d0 	.word	0x2003e6d0
   b6eb8:	000b7fb8 	.word	0x000b7fb8

000b6ebc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ebe:	4606      	mov	r6, r0
   b6ec0:	460d      	mov	r5, r1
  size_t n = 0;
   b6ec2:	188f      	adds	r7, r1, r2
   b6ec4:	2400      	movs	r4, #0
  while (size--) {
   b6ec6:	42bd      	cmp	r5, r7
   b6ec8:	d00c      	beq.n	b6ee4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6eca:	6833      	ldr	r3, [r6, #0]
   b6ecc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6ed0:	689b      	ldr	r3, [r3, #8]
   b6ed2:	4630      	mov	r0, r6
   b6ed4:	4798      	blx	r3
     if (chunk>=0)
   b6ed6:	1e03      	subs	r3, r0, #0
   b6ed8:	db01      	blt.n	b6ede <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6eda:	441c      	add	r4, r3
  while (size--) {
   b6edc:	e7f3      	b.n	b6ec6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6ede:	2c00      	cmp	r4, #0
   b6ee0:	bf08      	it	eq
   b6ee2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ee8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6ee8:	b513      	push	{r0, r1, r4, lr}
   b6eea:	4604      	mov	r4, r0
    }
   b6eec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6eee:	b159      	cbz	r1, b6f08 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ef0:	9101      	str	r1, [sp, #4]
   b6ef2:	f000 fc4a 	bl	b778a <strlen>
   b6ef6:	6823      	ldr	r3, [r4, #0]
   b6ef8:	9901      	ldr	r1, [sp, #4]
   b6efa:	68db      	ldr	r3, [r3, #12]
   b6efc:	4602      	mov	r2, r0
   b6efe:	4620      	mov	r0, r4
    }
   b6f00:	b002      	add	sp, #8
   b6f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6f06:	4718      	bx	r3
    }
   b6f08:	b002      	add	sp, #8
   b6f0a:	bd10      	pop	{r4, pc}

000b6f0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6f0c:	6803      	ldr	r3, [r0, #0]
   b6f0e:	689b      	ldr	r3, [r3, #8]
   b6f10:	4718      	bx	r3

000b6f12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6f12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6f14:	210d      	movs	r1, #13
{
   b6f16:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6f18:	f7ff fff8 	bl	b6f0c <_ZN5Print5printEc>
  n += print('\n');
   b6f1c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6f1e:	4604      	mov	r4, r0
  n += print('\n');
   b6f20:	4628      	mov	r0, r5
   b6f22:	f7ff fff3 	bl	b6f0c <_ZN5Print5printEc>
  return n;
}
   b6f26:	4420      	add	r0, r4
   b6f28:	bd38      	pop	{r3, r4, r5, pc}

000b6f2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6f2a:	b530      	push	{r4, r5, lr}
   b6f2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6f2e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6f30:	2a01      	cmp	r2, #1
  *str = '\0';
   b6f32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6f36:	bf98      	it	ls
   b6f38:	220a      	movls	r2, #10
   b6f3a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6f3c:	460d      	mov	r5, r1
   b6f3e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6f42:	fb01 5312 	mls	r3, r1, r2, r5
   b6f46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f4a:	2b09      	cmp	r3, #9
   b6f4c:	bf94      	ite	ls
   b6f4e:	3330      	addls	r3, #48	; 0x30
   b6f50:	3337      	addhi	r3, #55	; 0x37
   b6f52:	b2db      	uxtb	r3, r3
  } while(n);
   b6f54:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f56:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6f5a:	d9ef      	bls.n	b6f3c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6f5c:	4621      	mov	r1, r4
   b6f5e:	f7ff ffc3 	bl	b6ee8 <_ZN5Print5writeEPKc>
}
   b6f62:	b00b      	add	sp, #44	; 0x2c
   b6f64:	bd30      	pop	{r4, r5, pc}

000b6f66 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f6a:	b086      	sub	sp, #24
   b6f6c:	af00      	add	r7, sp, #0
   b6f6e:	4605      	mov	r5, r0
   b6f70:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6f72:	1d38      	adds	r0, r7, #4
   b6f74:	2114      	movs	r1, #20
{
   b6f76:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6f78:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6f7a:	f7fe fbc1 	bl	b5700 <vsnprintf>

    if (n<bufsize)
   b6f7e:	2813      	cmp	r0, #19
   b6f80:	d80e      	bhi.n	b6fa0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6f82:	1d39      	adds	r1, r7, #4
   b6f84:	4628      	mov	r0, r5
   b6f86:	f7ff ffaf 	bl	b6ee8 <_ZN5Print5writeEPKc>
   b6f8a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6f8c:	b11e      	cbz	r6, b6f96 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6f8e:	4628      	mov	r0, r5
   b6f90:	f7ff ffbf 	bl	b6f12 <_ZN5Print7printlnEv>
   b6f94:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6f96:	4620      	mov	r0, r4
   b6f98:	3718      	adds	r7, #24
   b6f9a:	46bd      	mov	sp, r7
   b6f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6fa0:	f100 0308 	add.w	r3, r0, #8
   b6fa4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6fa8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6faa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6fae:	4622      	mov	r2, r4
   b6fb0:	1c41      	adds	r1, r0, #1
   b6fb2:	683b      	ldr	r3, [r7, #0]
   b6fb4:	4668      	mov	r0, sp
   b6fb6:	f7fe fba3 	bl	b5700 <vsnprintf>
  return write(str);
   b6fba:	4669      	mov	r1, sp
   b6fbc:	4628      	mov	r0, r5
   b6fbe:	f7ff ff93 	bl	b6ee8 <_ZN5Print5writeEPKc>
   b6fc2:	4604      	mov	r4, r0
   b6fc4:	46c5      	mov	sp, r8
   b6fc6:	e7e1      	b.n	b6f8c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6fc8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6fc8:	4b01      	ldr	r3, [pc, #4]	; (b6fd0 <_GLOBAL__sub_I_RGB+0x8>)
   b6fca:	2200      	movs	r2, #0
   b6fcc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6fce:	4770      	bx	lr
   b6fd0:	2003e6d8 	.word	0x2003e6d8

000b6fd4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6fd4:	b510      	push	{r4, lr}
   b6fd6:	4604      	mov	r4, r0
   b6fd8:	4608      	mov	r0, r1
{
    _spi = spi;
   b6fda:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6fdc:	f7fe fa0a 	bl	b53f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6fe0:	2300      	movs	r3, #0
   b6fe2:	6063      	str	r3, [r4, #4]
}
   b6fe4:	4620      	mov	r0, r4
   b6fe6:	bd10      	pop	{r4, pc}

000b6fe8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6fe8:	b510      	push	{r4, lr}
   b6fea:	4604      	mov	r4, r0
{
	free(buffer);
   b6fec:	6800      	ldr	r0, [r0, #0]
   b6fee:	f7fe fb77 	bl	b56e0 <free>
}
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	bd10      	pop	{r4, pc}

000b6ff6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6ff6:	b510      	push	{r4, lr}
   b6ff8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6ffa:	6800      	ldr	r0, [r0, #0]
   b6ffc:	b108      	cbz	r0, b7002 <_ZN6String10invalidateEv+0xc>
   b6ffe:	f7fe fb6f 	bl	b56e0 <free>
	buffer = NULL;
   b7002:	2300      	movs	r3, #0
	capacity = len = 0;
   b7004:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7008:	6023      	str	r3, [r4, #0]
}
   b700a:	bd10      	pop	{r4, pc}

000b700c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b700c:	b538      	push	{r3, r4, r5, lr}
   b700e:	4604      	mov	r4, r0
   b7010:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7012:	6800      	ldr	r0, [r0, #0]
   b7014:	3101      	adds	r1, #1
   b7016:	f7fe fb6b 	bl	b56f0 <realloc>
	if (newbuffer) {
   b701a:	b110      	cbz	r0, b7022 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b701c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7020:	2001      	movs	r0, #1
	}
	return 0;
}
   b7022:	bd38      	pop	{r3, r4, r5, pc}

000b7024 <_ZN6String7reserveEj>:
{
   b7024:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7026:	6803      	ldr	r3, [r0, #0]
{
   b7028:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b702a:	b123      	cbz	r3, b7036 <_ZN6String7reserveEj+0x12>
   b702c:	6843      	ldr	r3, [r0, #4]
   b702e:	428b      	cmp	r3, r1
   b7030:	d301      	bcc.n	b7036 <_ZN6String7reserveEj+0x12>
   b7032:	2001      	movs	r0, #1
}
   b7034:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7036:	4620      	mov	r0, r4
   b7038:	f7ff ffe8 	bl	b700c <_ZN6String12changeBufferEj>
   b703c:	2800      	cmp	r0, #0
   b703e:	d0f9      	beq.n	b7034 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7040:	68a3      	ldr	r3, [r4, #8]
   b7042:	2b00      	cmp	r3, #0
   b7044:	d1f5      	bne.n	b7032 <_ZN6String7reserveEj+0xe>
   b7046:	6822      	ldr	r2, [r4, #0]
   b7048:	7013      	strb	r3, [r2, #0]
   b704a:	e7f2      	b.n	b7032 <_ZN6String7reserveEj+0xe>

000b704c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b704e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7050:	4611      	mov	r1, r2
   b7052:	9201      	str	r2, [sp, #4]
{
   b7054:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7056:	f7ff ffe5 	bl	b7024 <_ZN6String7reserveEj>
   b705a:	9a01      	ldr	r2, [sp, #4]
   b705c:	b928      	cbnz	r0, b706a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b705e:	4620      	mov	r0, r4
   b7060:	f7ff ffc9 	bl	b6ff6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7064:	4620      	mov	r0, r4
   b7066:	b003      	add	sp, #12
   b7068:	bd30      	pop	{r4, r5, pc}
	len = length;
   b706a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b706c:	4629      	mov	r1, r5
   b706e:	6820      	ldr	r0, [r4, #0]
   b7070:	f000 fb04 	bl	b767c <memcpy>
	buffer[len] = 0;
   b7074:	6822      	ldr	r2, [r4, #0]
   b7076:	68a3      	ldr	r3, [r4, #8]
   b7078:	2100      	movs	r1, #0
   b707a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b707c:	e7f2      	b.n	b7064 <_ZN6String4copyEPKcj+0x18>

000b707e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b707e:	b538      	push	{r3, r4, r5, lr}
   b7080:	4605      	mov	r5, r0
	if (buffer) {
   b7082:	6800      	ldr	r0, [r0, #0]
{
   b7084:	460c      	mov	r4, r1
	if (buffer) {
   b7086:	b168      	cbz	r0, b70a4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7088:	686a      	ldr	r2, [r5, #4]
   b708a:	688b      	ldr	r3, [r1, #8]
   b708c:	429a      	cmp	r2, r3
   b708e:	d307      	bcc.n	b70a0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7090:	6809      	ldr	r1, [r1, #0]
   b7092:	f000 fb72 	bl	b777a <strcpy>
			len = rhs.len;
   b7096:	68a3      	ldr	r3, [r4, #8]
   b7098:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b709a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b709c:	60a3      	str	r3, [r4, #8]
}
   b709e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b70a0:	f7fe fb1e 	bl	b56e0 <free>
	buffer = rhs.buffer;
   b70a4:	6823      	ldr	r3, [r4, #0]
   b70a6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b70a8:	6863      	ldr	r3, [r4, #4]
   b70aa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b70ac:	68a3      	ldr	r3, [r4, #8]
   b70ae:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b70b0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b70b2:	e9c4 3300 	strd	r3, r3, [r4]
   b70b6:	e7f1      	b.n	b709c <_ZN6String4moveERS_+0x1e>

000b70b8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b70b8:	b510      	push	{r4, lr}
	buffer = NULL;
   b70ba:	2300      	movs	r3, #0
	capacity = 0;
   b70bc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b70c0:	4604      	mov	r4, r0
	len = 0;
   b70c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b70c4:	7303      	strb	r3, [r0, #12]
	move(rval);
   b70c6:	f7ff ffda 	bl	b707e <_ZN6String4moveERS_>
}
   b70ca:	4620      	mov	r0, r4
   b70cc:	bd10      	pop	{r4, pc}

000b70ce <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b70ce:	4288      	cmp	r0, r1
{
   b70d0:	b510      	push	{r4, lr}
   b70d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b70d4:	d005      	beq.n	b70e2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b70d6:	680b      	ldr	r3, [r1, #0]
   b70d8:	b12b      	cbz	r3, b70e6 <_ZN6StringaSERKS_+0x18>
   b70da:	688a      	ldr	r2, [r1, #8]
   b70dc:	4619      	mov	r1, r3
   b70de:	f7ff ffb5 	bl	b704c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b70e2:	4620      	mov	r0, r4
   b70e4:	bd10      	pop	{r4, pc}
	else invalidate();
   b70e6:	f7ff ff86 	bl	b6ff6 <_ZN6String10invalidateEv>
   b70ea:	e7fa      	b.n	b70e2 <_ZN6StringaSERKS_+0x14>

000b70ec <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b70ec:	b510      	push	{r4, lr}
	buffer = NULL;
   b70ee:	2300      	movs	r3, #0
String::String(const String &value)
   b70f0:	4604      	mov	r4, r0
	capacity = 0;
   b70f2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b70f6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b70f8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b70fa:	f7ff ffe8 	bl	b70ce <_ZN6StringaSERKS_>
}
   b70fe:	4620      	mov	r0, r4
   b7100:	bd10      	pop	{r4, pc}

000b7102 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b7102:	b507      	push	{r0, r1, r2, lr}
   b7104:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b7106:	2100      	movs	r1, #0
{
   b7108:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b710a:	9100      	str	r1, [sp, #0]
   b710c:	2001      	movs	r0, #1
   b710e:	218c      	movs	r1, #140	; 0x8c
   b7110:	f7fe fa64 	bl	b55dc <system_reset>
}
   b7114:	b003      	add	sp, #12
   b7116:	f85d fb04 	ldr.w	pc, [sp], #4

000b711a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b711a:	4601      	mov	r1, r0
    reset(0, flags);
   b711c:	2000      	movs	r0, #0
   b711e:	f7ff bff0 	b.w	b7102 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b7122 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b7122:	2000      	movs	r0, #0
   b7124:	f7ff bff9 	b.w	b711a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b7128 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7128:	4b05      	ldr	r3, [pc, #20]	; (b7140 <_GLOBAL__sub_I_System+0x18>)
   b712a:	2202      	movs	r2, #2
   b712c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b712e:	4b05      	ldr	r3, [pc, #20]	; (b7144 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7130:	4a05      	ldr	r2, [pc, #20]	; (b7148 <_GLOBAL__sub_I_System+0x20>)
   b7132:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7134:	2000      	movs	r0, #0
   b7136:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b713a:	f7fe ba23 	b.w	b5584 <set_system_mode>
   b713e:	bf00      	nop
   b7140:	2003e6f4 	.word	0x2003e6f4
   b7144:	2003e6e8 	.word	0x2003e6e8
   b7148:	ffff0000 	.word	0xffff0000

000b714c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b714c:	4b02      	ldr	r3, [pc, #8]	; (b7158 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b714e:	681a      	ldr	r2, [r3, #0]
   b7150:	4b02      	ldr	r3, [pc, #8]	; (b715c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7152:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7154:	4770      	bx	lr
   b7156:	bf00      	nop
   b7158:	2003e548 	.word	0x2003e548
   b715c:	2003e6f8 	.word	0x2003e6f8

000b7160 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7160:	4770      	bx	lr

000b7162 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7162:	7441      	strb	r1, [r0, #17]
}
   b7164:	4770      	bx	lr

000b7166 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7166:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7168:	7c00      	ldrb	r0, [r0, #16]
   b716a:	f7fe f98b 	bl	b5484 <hal_usart_available_data_for_write>
}
   b716e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7172:	bd08      	pop	{r3, pc}

000b7174 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7174:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7176:	7c00      	ldrb	r0, [r0, #16]
   b7178:	f7fe f95c 	bl	b5434 <hal_usart_available>
}
   b717c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7180:	bd08      	pop	{r3, pc}

000b7182 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7182:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7184:	7c00      	ldrb	r0, [r0, #16]
   b7186:	f7fe f965 	bl	b5454 <hal_usart_peek>
}
   b718a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b718e:	bd08      	pop	{r3, pc}

000b7190 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7190:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7192:	7c00      	ldrb	r0, [r0, #16]
   b7194:	f7fe f956 	bl	b5444 <hal_usart_read>
}
   b7198:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b719c:	bd08      	pop	{r3, pc}

000b719e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b719e:	7c00      	ldrb	r0, [r0, #16]
   b71a0:	f7fe b960 	b.w	b5464 <hal_usart_flush>

000b71a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b71a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71a6:	7c45      	ldrb	r5, [r0, #17]
{
   b71a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71aa:	b12d      	cbz	r5, b71b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b71ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b71ae:	b003      	add	sp, #12
   b71b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b71b4:	f7fe b936 	b.w	b5424 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71b8:	7c00      	ldrb	r0, [r0, #16]
   b71ba:	9101      	str	r1, [sp, #4]
   b71bc:	f7fe f962 	bl	b5484 <hal_usart_available_data_for_write>
   b71c0:	2800      	cmp	r0, #0
   b71c2:	9901      	ldr	r1, [sp, #4]
   b71c4:	dcf2      	bgt.n	b71ac <_ZN11USARTSerial5writeEh+0x8>
}
   b71c6:	4628      	mov	r0, r5
   b71c8:	b003      	add	sp, #12
   b71ca:	bd30      	pop	{r4, r5, pc}

000b71cc <_ZN11USARTSerialD0Ev>:
   b71cc:	b510      	push	{r4, lr}
   b71ce:	2114      	movs	r1, #20
   b71d0:	4604      	mov	r4, r0
   b71d2:	f7fc ff62 	bl	b409a <_ZdlPvj>
   b71d6:	4620      	mov	r0, r4
   b71d8:	bd10      	pop	{r4, pc}
	...

000b71dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b71dc:	b510      	push	{r4, lr}
   b71de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b71e2:	4604      	mov	r4, r0
   b71e4:	4608      	mov	r0, r1
   b71e6:	4611      	mov	r1, r2
   b71e8:	2200      	movs	r2, #0
   b71ea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b71ee:	4b04      	ldr	r3, [pc, #16]	; (b7200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b71f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b71f2:	2301      	movs	r3, #1
  _serial = serial;
   b71f4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b71f6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b71f8:	f7fe f954 	bl	b54a4 <hal_usart_init_ex>
}
   b71fc:	4620      	mov	r0, r4
   b71fe:	bd10      	pop	{r4, pc}
   b7200:	000b8010 	.word	0x000b8010

000b7204 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7204:	7c00      	ldrb	r0, [r0, #16]
   b7206:	2300      	movs	r3, #0
   b7208:	f7fe b944 	b.w	b5494 <hal_usart_begin_config>

000b720c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b720c:	2200      	movs	r2, #0
   b720e:	f7ff bff9 	b.w	b7204 <_ZN11USARTSerial5beginEmm>

000b7212 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7212:	7c00      	ldrb	r0, [r0, #16]
   b7214:	f7fe b8fe 	b.w	b5414 <hal_usart_end>

000b7218 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7218:	7441      	strb	r1, [r0, #17]
}
   b721a:	4770      	bx	lr

000b721c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b721c:	4770      	bx	lr

000b721e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b721e:	4770      	bx	lr

000b7220 <_ZN9USBSerial4readEv>:
{
   b7220:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7222:	2100      	movs	r1, #0
   b7224:	7c00      	ldrb	r0, [r0, #16]
   b7226:	f7fe f96d 	bl	b5504 <HAL_USB_USART_Receive_Data>
}
   b722a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b722e:	bd08      	pop	{r3, pc}

000b7230 <_ZN9USBSerial4peekEv>:
{
   b7230:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7232:	2101      	movs	r1, #1
   b7234:	7c00      	ldrb	r0, [r0, #16]
   b7236:	f7fe f965 	bl	b5504 <HAL_USB_USART_Receive_Data>
}
   b723a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b723e:	bd08      	pop	{r3, pc}

000b7240 <_ZN9USBSerial17availableForWriteEv>:
{
   b7240:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7242:	7c00      	ldrb	r0, [r0, #16]
   b7244:	f7fe f956 	bl	b54f4 <HAL_USB_USART_Available_Data_For_Write>
}
   b7248:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b724c:	bd08      	pop	{r3, pc}

000b724e <_ZN9USBSerial9availableEv>:
{
   b724e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7250:	7c00      	ldrb	r0, [r0, #16]
   b7252:	f7fe f947 	bl	b54e4 <HAL_USB_USART_Available_Data>
}
   b7256:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b725a:	bd08      	pop	{r3, pc}

000b725c <_ZN9USBSerial5writeEh>:
{
   b725c:	b513      	push	{r0, r1, r4, lr}
   b725e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7260:	7c00      	ldrb	r0, [r0, #16]
{
   b7262:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7264:	f7fe f946 	bl	b54f4 <HAL_USB_USART_Available_Data_For_Write>
   b7268:	2800      	cmp	r0, #0
   b726a:	9901      	ldr	r1, [sp, #4]
   b726c:	dc01      	bgt.n	b7272 <_ZN9USBSerial5writeEh+0x16>
   b726e:	7c60      	ldrb	r0, [r4, #17]
   b7270:	b120      	cbz	r0, b727c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7272:	7c20      	ldrb	r0, [r4, #16]
   b7274:	f7fe f94e 	bl	b5514 <HAL_USB_USART_Send_Data>
   b7278:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b727c:	b002      	add	sp, #8
   b727e:	bd10      	pop	{r4, pc}

000b7280 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7280:	7c00      	ldrb	r0, [r0, #16]
   b7282:	f7fe b94f 	b.w	b5524 <HAL_USB_USART_Flush_Data>

000b7286 <_ZN9USBSerialD0Ev>:
   b7286:	b510      	push	{r4, lr}
   b7288:	2114      	movs	r1, #20
   b728a:	4604      	mov	r4, r0
   b728c:	f7fc ff05 	bl	b409a <_ZdlPvj>
   b7290:	4620      	mov	r0, r4
   b7292:	bd10      	pop	{r4, pc}

000b7294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7294:	b510      	push	{r4, lr}
   b7296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b729a:	4604      	mov	r4, r0
   b729c:	4608      	mov	r0, r1
   b729e:	2100      	movs	r1, #0
   b72a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b72a4:	4b04      	ldr	r3, [pc, #16]	; (b72b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b72a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b72a8:	2301      	movs	r3, #1
  _serial = serial;
   b72aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b72ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b72ae:	4611      	mov	r1, r2
   b72b0:	f7fe f900 	bl	b54b4 <HAL_USB_USART_Init>
}
   b72b4:	4620      	mov	r0, r4
   b72b6:	bd10      	pop	{r4, pc}
   b72b8:	000b8040 	.word	0x000b8040

000b72bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b72bc:	7c00      	ldrb	r0, [r0, #16]
   b72be:	2200      	movs	r2, #0
   b72c0:	f7fe b900 	b.w	b54c4 <HAL_USB_USART_Begin>

000b72c4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b72c4:	7c00      	ldrb	r0, [r0, #16]
   b72c6:	f7fe b905 	b.w	b54d4 <HAL_USB_USART_End>

000b72ca <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b72ca:	7c00      	ldrb	r0, [r0, #16]
   b72cc:	f7fe b932 	b.w	b5534 <HAL_USB_USART_Is_Connected>

000b72d0 <_Z19acquireSerialBufferv>:
{
   b72d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b72d2:	2214      	movs	r2, #20
{
   b72d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b72d6:	2100      	movs	r1, #0
   b72d8:	f000 f9f8 	bl	b76cc <memset>
}
   b72dc:	4620      	mov	r0, r4
   b72de:	bd10      	pop	{r4, pc}

000b72e0 <_Z16_fetch_usbserialv>:
{
   b72e0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b72e2:	4c0f      	ldr	r4, [pc, #60]	; (b7320 <_Z16_fetch_usbserialv+0x40>)
{
   b72e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b72e6:	a803      	add	r0, sp, #12
   b72e8:	f7ff fff2 	bl	b72d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b72ec:	7821      	ldrb	r1, [r4, #0]
   b72ee:	f3bf 8f5b 	dmb	ish
   b72f2:	f011 0101 	ands.w	r1, r1, #1
   b72f6:	d10f      	bne.n	b7318 <_Z16_fetch_usbserialv+0x38>
   b72f8:	4620      	mov	r0, r4
   b72fa:	9101      	str	r1, [sp, #4]
   b72fc:	f7fc fedc 	bl	b40b8 <__cxa_guard_acquire>
   b7300:	9901      	ldr	r1, [sp, #4]
   b7302:	b148      	cbz	r0, b7318 <_Z16_fetch_usbserialv+0x38>
   b7304:	aa03      	add	r2, sp, #12
   b7306:	4807      	ldr	r0, [pc, #28]	; (b7324 <_Z16_fetch_usbserialv+0x44>)
   b7308:	f7ff ffc4 	bl	b7294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b730c:	4620      	mov	r0, r4
   b730e:	f7fc fed8 	bl	b40c2 <__cxa_guard_release>
   b7312:	4805      	ldr	r0, [pc, #20]	; (b7328 <_Z16_fetch_usbserialv+0x48>)
   b7314:	f000 f9a4 	bl	b7660 <atexit>
	return _usbserial;
}
   b7318:	4802      	ldr	r0, [pc, #8]	; (b7324 <_Z16_fetch_usbserialv+0x44>)
   b731a:	b008      	add	sp, #32
   b731c:	bd10      	pop	{r4, pc}
   b731e:	bf00      	nop
   b7320:	2003e6fc 	.word	0x2003e6fc
   b7324:	2003e700 	.word	0x2003e700
   b7328:	000b721d 	.word	0x000b721d

000b732c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b732c:	4b01      	ldr	r3, [pc, #4]	; (b7334 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b732e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7330:	4770      	bx	lr
   b7332:	bf00      	nop
   b7334:	2003e54c 	.word	0x2003e54c

000b7338 <serialEventRun>:
{
   b7338:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b733a:	4b0b      	ldr	r3, [pc, #44]	; (b7368 <serialEventRun+0x30>)
   b733c:	b143      	cbz	r3, b7350 <serialEventRun+0x18>
   b733e:	f7ff ffcf 	bl	b72e0 <_Z16_fetch_usbserialv>
   b7342:	6803      	ldr	r3, [r0, #0]
   b7344:	691b      	ldr	r3, [r3, #16]
   b7346:	4798      	blx	r3
   b7348:	2800      	cmp	r0, #0
   b734a:	dd01      	ble.n	b7350 <serialEventRun+0x18>
        serialEvent();
   b734c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7350:	4b06      	ldr	r3, [pc, #24]	; (b736c <serialEventRun+0x34>)
   b7352:	b143      	cbz	r3, b7366 <serialEventRun+0x2e>
   b7354:	f000 f95c 	bl	b7610 <_Z22__fetch_global_Serial1v>
   b7358:	6803      	ldr	r3, [r0, #0]
   b735a:	691b      	ldr	r3, [r3, #16]
   b735c:	4798      	blx	r3
   b735e:	2800      	cmp	r0, #0
   b7360:	dd01      	ble.n	b7366 <serialEventRun+0x2e>
        serialEvent1();
   b7362:	f3af 8000 	nop.w
}
   b7366:	bd08      	pop	{r3, pc}
	...

000b7370 <_post_loop>:
{
   b7370:	b508      	push	{r3, lr}
	serialEventRun();
   b7372:	f7ff ffe1 	bl	b7338 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7376:	f7fd ff9d 	bl	b52b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b737a:	4b01      	ldr	r3, [pc, #4]	; (b7380 <_post_loop+0x10>)
   b737c:	6018      	str	r0, [r3, #0]
}
   b737e:	bd08      	pop	{r3, pc}
   b7380:	2003e728 	.word	0x2003e728

000b7384 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7384:	4805      	ldr	r0, [pc, #20]	; (b739c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7386:	4a06      	ldr	r2, [pc, #24]	; (b73a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7388:	4906      	ldr	r1, [pc, #24]	; (b73a4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b738a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b738c:	1a12      	subs	r2, r2, r0
   b738e:	f000 f975 	bl	b767c <memcpy>
    __backup_sram_signature = signature;
   b7392:	4b05      	ldr	r3, [pc, #20]	; (b73a8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7394:	4a05      	ldr	r2, [pc, #20]	; (b73ac <_Z33system_initialize_user_backup_ramv+0x28>)
   b7396:	601a      	str	r2, [r3, #0]
}
   b7398:	bd08      	pop	{r3, pc}
   b739a:	bf00      	nop
   b739c:	2003f400 	.word	0x2003f400
   b73a0:	2003f404 	.word	0x2003f404
   b73a4:	000b8234 	.word	0x000b8234
   b73a8:	2003f400 	.word	0x2003f400
   b73ac:	9a271c1e 	.word	0x9a271c1e

000b73b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b73b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b73b2:	2300      	movs	r3, #0
   b73b4:	9300      	str	r3, [sp, #0]
   b73b6:	461a      	mov	r2, r3
   b73b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b73bc:	f7fe f904 	bl	b55c8 <system_ctrl_set_result>
}
   b73c0:	b003      	add	sp, #12
   b73c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b73c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b73c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b73ca:	8843      	ldrh	r3, [r0, #2]
   b73cc:	2b0a      	cmp	r3, #10
   b73ce:	d008      	beq.n	b73e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b73d0:	2b50      	cmp	r3, #80	; 0x50
   b73d2:	d10b      	bne.n	b73ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b73d4:	4b09      	ldr	r3, [pc, #36]	; (b73fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b73d6:	681b      	ldr	r3, [r3, #0]
   b73d8:	b14b      	cbz	r3, b73ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b73da:	b003      	add	sp, #12
   b73dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b73e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b73e2:	f7ff ffe5 	bl	b73b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b73e6:	b003      	add	sp, #12
   b73e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b73ec:	2300      	movs	r3, #0
   b73ee:	9300      	str	r3, [sp, #0]
   b73f0:	461a      	mov	r2, r3
   b73f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b73f6:	f7fe f8e7 	bl	b55c8 <system_ctrl_set_result>
}
   b73fa:	e7f4      	b.n	b73e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b73fc:	2003e718 	.word	0x2003e718

000b7400 <module_user_init_hook>:
{
   b7400:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7402:	4812      	ldr	r0, [pc, #72]	; (b744c <module_user_init_hook+0x4c>)
   b7404:	2100      	movs	r1, #0
   b7406:	f7fe f993 	bl	b5730 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b740a:	4b11      	ldr	r3, [pc, #68]	; (b7450 <module_user_init_hook+0x50>)
   b740c:	681a      	ldr	r2, [r3, #0]
   b740e:	4b11      	ldr	r3, [pc, #68]	; (b7454 <module_user_init_hook+0x54>)
   b7410:	429a      	cmp	r2, r3
   b7412:	4b11      	ldr	r3, [pc, #68]	; (b7458 <module_user_init_hook+0x58>)
   b7414:	bf0c      	ite	eq
   b7416:	2201      	moveq	r2, #1
   b7418:	2200      	movne	r2, #0
   b741a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b741c:	d001      	beq.n	b7422 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b741e:	f7ff ffb1 	bl	b7384 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7422:	f7fd ff37 	bl	b5294 <HAL_RNG_GetRandomNumber>
   b7426:	4604      	mov	r4, r0
    srand(seed);
   b7428:	f000 f958 	bl	b76dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b742c:	4b0b      	ldr	r3, [pc, #44]	; (b745c <module_user_init_hook+0x5c>)
   b742e:	b113      	cbz	r3, b7436 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7430:	4620      	mov	r0, r4
   b7432:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7436:	2100      	movs	r1, #0
   b7438:	4808      	ldr	r0, [pc, #32]	; (b745c <module_user_init_hook+0x5c>)
   b743a:	f7fe f8e1 	bl	b5600 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b743e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7442:	4807      	ldr	r0, [pc, #28]	; (b7460 <module_user_init_hook+0x60>)
   b7444:	2100      	movs	r1, #0
   b7446:	f7fe b8b5 	b.w	b55b4 <system_ctrl_set_app_request_handler>
   b744a:	bf00      	nop
   b744c:	000b732d 	.word	0x000b732d
   b7450:	2003f400 	.word	0x2003f400
   b7454:	9a271c1e 	.word	0x9a271c1e
   b7458:	2003e714 	.word	0x2003e714
   b745c:	00000000 	.word	0x00000000
   b7460:	000b73c9 	.word	0x000b73c9

000b7464 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7464:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7466:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7468:	d902      	bls.n	b7470 <pinAvailable+0xc>
    return false;
   b746a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b746c:	b002      	add	sp, #8
   b746e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7470:	f1a0 030b 	sub.w	r3, r0, #11
   b7474:	2b02      	cmp	r3, #2
   b7476:	d81a      	bhi.n	b74ae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7478:	4c17      	ldr	r4, [pc, #92]	; (b74d8 <pinAvailable+0x74>)
   b747a:	7821      	ldrb	r1, [r4, #0]
   b747c:	f3bf 8f5b 	dmb	ish
   b7480:	f011 0101 	ands.w	r1, r1, #1
   b7484:	d10b      	bne.n	b749e <pinAvailable+0x3a>
   b7486:	4620      	mov	r0, r4
   b7488:	9101      	str	r1, [sp, #4]
   b748a:	f7fc fe15 	bl	b40b8 <__cxa_guard_acquire>
   b748e:	9901      	ldr	r1, [sp, #4]
   b7490:	b128      	cbz	r0, b749e <pinAvailable+0x3a>
   b7492:	4812      	ldr	r0, [pc, #72]	; (b74dc <pinAvailable+0x78>)
   b7494:	f7ff fd9e 	bl	b6fd4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7498:	4620      	mov	r0, r4
   b749a:	f7fc fe12 	bl	b40c2 <__cxa_guard_release>
   b749e:	4b0f      	ldr	r3, [pc, #60]	; (b74dc <pinAvailable+0x78>)
   b74a0:	7818      	ldrb	r0, [r3, #0]
   b74a2:	f7fd ffaf 	bl	b5404 <hal_spi_is_enabled>
   b74a6:	2800      	cmp	r0, #0
   b74a8:	d1df      	bne.n	b746a <pinAvailable+0x6>
  return true; // 'pin' is available
   b74aa:	2001      	movs	r0, #1
   b74ac:	e7de      	b.n	b746c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b74ae:	2801      	cmp	r0, #1
   b74b0:	d809      	bhi.n	b74c6 <pinAvailable+0x62>
   b74b2:	f000 f86d 	bl	b7590 <_Z19__fetch_global_Wirev>
   b74b6:	2100      	movs	r1, #0
   b74b8:	7c00      	ldrb	r0, [r0, #16]
   b74ba:	f7fd ff6b 	bl	b5394 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b74be:	f080 0001 	eor.w	r0, r0, #1
   b74c2:	b2c0      	uxtb	r0, r0
   b74c4:	e7d2      	b.n	b746c <pinAvailable+0x8>
   b74c6:	3809      	subs	r0, #9
   b74c8:	2801      	cmp	r0, #1
   b74ca:	d8ee      	bhi.n	b74aa <pinAvailable+0x46>
   b74cc:	f000 f8a0 	bl	b7610 <_Z22__fetch_global_Serial1v>
   b74d0:	7c00      	ldrb	r0, [r0, #16]
   b74d2:	f7fd ffcf 	bl	b5474 <hal_usart_is_enabled>
   b74d6:	e7f2      	b.n	b74be <pinAvailable+0x5a>
   b74d8:	2003e71c 	.word	0x2003e71c
   b74dc:	2003e720 	.word	0x2003e720

000b74e0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b74e0:	2823      	cmp	r0, #35	; 0x23
{
   b74e2:	b538      	push	{r3, r4, r5, lr}
   b74e4:	4604      	mov	r4, r0
   b74e6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b74e8:	d80a      	bhi.n	b7500 <pinMode+0x20>
   b74ea:	29ff      	cmp	r1, #255	; 0xff
   b74ec:	d008      	beq.n	b7500 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b74ee:	f7ff ffb9 	bl	b7464 <pinAvailable>
   b74f2:	b128      	cbz	r0, b7500 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b74f4:	4629      	mov	r1, r5
   b74f6:	4620      	mov	r0, r4
}
   b74f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b74fc:	f7fd beea 	b.w	b52d4 <HAL_Pin_Mode>
}
   b7500:	bd38      	pop	{r3, r4, r5, pc}

000b7502 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7502:	b538      	push	{r3, r4, r5, lr}
   b7504:	4604      	mov	r4, r0
   b7506:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7508:	f7fd feec 	bl	b52e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b750c:	28ff      	cmp	r0, #255	; 0xff
   b750e:	d010      	beq.n	b7532 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7510:	2806      	cmp	r0, #6
   b7512:	d804      	bhi.n	b751e <digitalWrite+0x1c>
   b7514:	234d      	movs	r3, #77	; 0x4d
   b7516:	fa23 f000 	lsr.w	r0, r3, r0
   b751a:	07c3      	lsls	r3, r0, #31
   b751c:	d409      	bmi.n	b7532 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b751e:	4620      	mov	r0, r4
   b7520:	f7ff ffa0 	bl	b7464 <pinAvailable>
   b7524:	b128      	cbz	r0, b7532 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7526:	4629      	mov	r1, r5
   b7528:	4620      	mov	r0, r4
}
   b752a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b752e:	f7fd bee1 	b.w	b52f4 <HAL_GPIO_Write>
}
   b7532:	bd38      	pop	{r3, r4, r5, pc}

000b7534 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7534:	b510      	push	{r4, lr}
   b7536:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7538:	f7fd fed4 	bl	b52e4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b753c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b753e:	b2db      	uxtb	r3, r3
   b7540:	2b01      	cmp	r3, #1
   b7542:	d908      	bls.n	b7556 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7544:	4620      	mov	r0, r4
   b7546:	f7ff ff8d 	bl	b7464 <pinAvailable>
   b754a:	b120      	cbz	r0, b7556 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b754c:	4620      	mov	r0, r4
}
   b754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7552:	f7fd bed7 	b.w	b5304 <HAL_GPIO_Read>
}
   b7556:	2000      	movs	r0, #0
   b7558:	bd10      	pop	{r4, pc}

000b755a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b755a:	4770      	bx	lr

000b755c <_Z17acquireWireBufferv>:
{
   b755c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b755e:	4b0a      	ldr	r3, [pc, #40]	; (b7588 <_Z17acquireWireBufferv+0x2c>)
   b7560:	6003      	str	r3, [r0, #0]
   b7562:	2301      	movs	r3, #1
{
   b7564:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7566:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7568:	4908      	ldr	r1, [pc, #32]	; (b758c <_Z17acquireWireBufferv+0x30>)
   b756a:	2020      	movs	r0, #32
   b756c:	f000 f876 	bl	b765c <_ZnajRKSt9nothrow_t>
	};
   b7570:	2520      	movs	r5, #32
   b7572:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7574:	4905      	ldr	r1, [pc, #20]	; (b758c <_Z17acquireWireBufferv+0x30>)
	};
   b7576:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7578:	4628      	mov	r0, r5
   b757a:	f000 f86f 	bl	b765c <_ZnajRKSt9nothrow_t>
	};
   b757e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7582:	4620      	mov	r0, r4
   b7584:	bd38      	pop	{r3, r4, r5, pc}
   b7586:	bf00      	nop
   b7588:	00010018 	.word	0x00010018
   b758c:	000b8068 	.word	0x000b8068

000b7590 <_Z19__fetch_global_Wirev>:
{
   b7590:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7592:	4d0e      	ldr	r5, [pc, #56]	; (b75cc <_Z19__fetch_global_Wirev+0x3c>)
   b7594:	7829      	ldrb	r1, [r5, #0]
   b7596:	f3bf 8f5b 	dmb	ish
   b759a:	f011 0401 	ands.w	r4, r1, #1
{
   b759e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b75a0:	d111      	bne.n	b75c6 <_Z19__fetch_global_Wirev+0x36>
   b75a2:	4628      	mov	r0, r5
   b75a4:	f7fc fd88 	bl	b40b8 <__cxa_guard_acquire>
   b75a8:	b168      	cbz	r0, b75c6 <_Z19__fetch_global_Wirev+0x36>
   b75aa:	4668      	mov	r0, sp
   b75ac:	f7ff ffd6 	bl	b755c <_Z17acquireWireBufferv>
   b75b0:	466a      	mov	r2, sp
   b75b2:	4621      	mov	r1, r4
   b75b4:	4806      	ldr	r0, [pc, #24]	; (b75d0 <_Z19__fetch_global_Wirev+0x40>)
   b75b6:	f7fe f9b3 	bl	b5920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b75ba:	4628      	mov	r0, r5
   b75bc:	f7fc fd81 	bl	b40c2 <__cxa_guard_release>
   b75c0:	4804      	ldr	r0, [pc, #16]	; (b75d4 <_Z19__fetch_global_Wirev+0x44>)
   b75c2:	f000 f84d 	bl	b7660 <atexit>
	return wire;
}
   b75c6:	4802      	ldr	r0, [pc, #8]	; (b75d0 <_Z19__fetch_global_Wirev+0x40>)
   b75c8:	b007      	add	sp, #28
   b75ca:	bd30      	pop	{r4, r5, pc}
   b75cc:	2003e72c 	.word	0x2003e72c
   b75d0:	2003e730 	.word	0x2003e730
   b75d4:	000b755b 	.word	0x000b755b

000b75d8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b75d8:	4770      	bx	lr
	...

000b75dc <_Z20acquireSerial1Bufferv>:
{
   b75dc:	b538      	push	{r3, r4, r5, lr}
   b75de:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b75e0:	2514      	movs	r5, #20
   b75e2:	462a      	mov	r2, r5
   b75e4:	2100      	movs	r1, #0
   b75e6:	f000 f871 	bl	b76cc <memset>
   b75ea:	8025      	strh	r5, [r4, #0]
   b75ec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b75ee:	4907      	ldr	r1, [pc, #28]	; (b760c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b75f0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b75f2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b75f4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b75f6:	f000 f831 	bl	b765c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b75fa:	4904      	ldr	r1, [pc, #16]	; (b760c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b75fc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b75fe:	4628      	mov	r0, r5
   b7600:	f000 f82c 	bl	b765c <_ZnajRKSt9nothrow_t>
    };
   b7604:	60e0      	str	r0, [r4, #12]
}
   b7606:	4620      	mov	r0, r4
   b7608:	bd38      	pop	{r3, r4, r5, pc}
   b760a:	bf00      	nop
   b760c:	000b8068 	.word	0x000b8068

000b7610 <_Z22__fetch_global_Serial1v>:
{
   b7610:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7612:	4d0e      	ldr	r5, [pc, #56]	; (b764c <_Z22__fetch_global_Serial1v+0x3c>)
   b7614:	7829      	ldrb	r1, [r5, #0]
   b7616:	f3bf 8f5b 	dmb	ish
   b761a:	f011 0401 	ands.w	r4, r1, #1
{
   b761e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7620:	d111      	bne.n	b7646 <_Z22__fetch_global_Serial1v+0x36>
   b7622:	4628      	mov	r0, r5
   b7624:	f7fc fd48 	bl	b40b8 <__cxa_guard_acquire>
   b7628:	b168      	cbz	r0, b7646 <_Z22__fetch_global_Serial1v+0x36>
   b762a:	a801      	add	r0, sp, #4
   b762c:	f7ff ffd6 	bl	b75dc <_Z20acquireSerial1Bufferv>
   b7630:	aa01      	add	r2, sp, #4
   b7632:	4621      	mov	r1, r4
   b7634:	4806      	ldr	r0, [pc, #24]	; (b7650 <_Z22__fetch_global_Serial1v+0x40>)
   b7636:	f7ff fdd1 	bl	b71dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b763a:	4628      	mov	r0, r5
   b763c:	f7fc fd41 	bl	b40c2 <__cxa_guard_release>
   b7640:	4804      	ldr	r0, [pc, #16]	; (b7654 <_Z22__fetch_global_Serial1v+0x44>)
   b7642:	f000 f80d 	bl	b7660 <atexit>
    return serial1;
}
   b7646:	4802      	ldr	r0, [pc, #8]	; (b7650 <_Z22__fetch_global_Serial1v+0x40>)
   b7648:	b007      	add	sp, #28
   b764a:	bd30      	pop	{r4, r5, pc}
   b764c:	2003e744 	.word	0x2003e744
   b7650:	2003e748 	.word	0x2003e748
   b7654:	000b75d9 	.word	0x000b75d9

000b7658 <_ZnwjRKSt9nothrow_t>:
   b7658:	f7fc bd1b 	b.w	b4092 <_Znwj>

000b765c <_ZnajRKSt9nothrow_t>:
   b765c:	f7fc bd1b 	b.w	b4096 <_Znaj>

000b7660 <atexit>:
   b7660:	2300      	movs	r3, #0
   b7662:	4601      	mov	r1, r0
   b7664:	461a      	mov	r2, r3
   b7666:	4618      	mov	r0, r3
   b7668:	f000 b94c 	b.w	b7904 <__register_exitproc>

000b766c <isprint>:
   b766c:	4b02      	ldr	r3, [pc, #8]	; (b7678 <isprint+0xc>)
   b766e:	4418      	add	r0, r3
   b7670:	7840      	ldrb	r0, [r0, #1]
   b7672:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7676:	4770      	bx	lr
   b7678:	000b80d9 	.word	0x000b80d9

000b767c <memcpy>:
   b767c:	440a      	add	r2, r1
   b767e:	4291      	cmp	r1, r2
   b7680:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7684:	d100      	bne.n	b7688 <memcpy+0xc>
   b7686:	4770      	bx	lr
   b7688:	b510      	push	{r4, lr}
   b768a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b768e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7692:	4291      	cmp	r1, r2
   b7694:	d1f9      	bne.n	b768a <memcpy+0xe>
   b7696:	bd10      	pop	{r4, pc}

000b7698 <memmove>:
   b7698:	4288      	cmp	r0, r1
   b769a:	b510      	push	{r4, lr}
   b769c:	eb01 0402 	add.w	r4, r1, r2
   b76a0:	d902      	bls.n	b76a8 <memmove+0x10>
   b76a2:	4284      	cmp	r4, r0
   b76a4:	4623      	mov	r3, r4
   b76a6:	d807      	bhi.n	b76b8 <memmove+0x20>
   b76a8:	1e43      	subs	r3, r0, #1
   b76aa:	42a1      	cmp	r1, r4
   b76ac:	d008      	beq.n	b76c0 <memmove+0x28>
   b76ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   b76b2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b76b6:	e7f8      	b.n	b76aa <memmove+0x12>
   b76b8:	4402      	add	r2, r0
   b76ba:	4601      	mov	r1, r0
   b76bc:	428a      	cmp	r2, r1
   b76be:	d100      	bne.n	b76c2 <memmove+0x2a>
   b76c0:	bd10      	pop	{r4, pc}
   b76c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b76c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b76ca:	e7f7      	b.n	b76bc <memmove+0x24>

000b76cc <memset>:
   b76cc:	4402      	add	r2, r0
   b76ce:	4603      	mov	r3, r0
   b76d0:	4293      	cmp	r3, r2
   b76d2:	d100      	bne.n	b76d6 <memset+0xa>
   b76d4:	4770      	bx	lr
   b76d6:	f803 1b01 	strb.w	r1, [r3], #1
   b76da:	e7f9      	b.n	b76d0 <memset+0x4>

000b76dc <srand>:
   b76dc:	b538      	push	{r3, r4, r5, lr}
   b76de:	4b10      	ldr	r3, [pc, #64]	; (b7720 <srand+0x44>)
   b76e0:	681d      	ldr	r5, [r3, #0]
   b76e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b76e4:	4604      	mov	r4, r0
   b76e6:	b9b3      	cbnz	r3, b7716 <srand+0x3a>
   b76e8:	2018      	movs	r0, #24
   b76ea:	f7fd fff1 	bl	b56d0 <malloc>
   b76ee:	4602      	mov	r2, r0
   b76f0:	63a8      	str	r0, [r5, #56]	; 0x38
   b76f2:	b920      	cbnz	r0, b76fe <srand+0x22>
   b76f4:	4b0b      	ldr	r3, [pc, #44]	; (b7724 <srand+0x48>)
   b76f6:	480c      	ldr	r0, [pc, #48]	; (b7728 <srand+0x4c>)
   b76f8:	2142      	movs	r1, #66	; 0x42
   b76fa:	f7fe f811 	bl	b5720 <__assert_func>
   b76fe:	490b      	ldr	r1, [pc, #44]	; (b772c <srand+0x50>)
   b7700:	4b0b      	ldr	r3, [pc, #44]	; (b7730 <srand+0x54>)
   b7702:	e9c0 1300 	strd	r1, r3, [r0]
   b7706:	4b0b      	ldr	r3, [pc, #44]	; (b7734 <srand+0x58>)
   b7708:	6083      	str	r3, [r0, #8]
   b770a:	230b      	movs	r3, #11
   b770c:	8183      	strh	r3, [r0, #12]
   b770e:	2100      	movs	r1, #0
   b7710:	2001      	movs	r0, #1
   b7712:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7716:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7718:	2200      	movs	r2, #0
   b771a:	611c      	str	r4, [r3, #16]
   b771c:	615a      	str	r2, [r3, #20]
   b771e:	bd38      	pop	{r3, r4, r5, pc}
   b7720:	2003e54c 	.word	0x2003e54c
   b7724:	000b8069 	.word	0x000b8069
   b7728:	000b8080 	.word	0x000b8080
   b772c:	abcd330e 	.word	0xabcd330e
   b7730:	e66d1234 	.word	0xe66d1234
   b7734:	0005deec 	.word	0x0005deec

000b7738 <strchr>:
   b7738:	b2c9      	uxtb	r1, r1
   b773a:	4603      	mov	r3, r0
   b773c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7740:	b11a      	cbz	r2, b774a <strchr+0x12>
   b7742:	428a      	cmp	r2, r1
   b7744:	d1f9      	bne.n	b773a <strchr+0x2>
   b7746:	4618      	mov	r0, r3
   b7748:	4770      	bx	lr
   b774a:	2900      	cmp	r1, #0
   b774c:	bf18      	it	ne
   b774e:	2300      	movne	r3, #0
   b7750:	e7f9      	b.n	b7746 <strchr+0xe>

000b7752 <strchrnul>:
   b7752:	b510      	push	{r4, lr}
   b7754:	4604      	mov	r4, r0
   b7756:	f7ff ffef 	bl	b7738 <strchr>
   b775a:	b918      	cbnz	r0, b7764 <strchrnul+0x12>
   b775c:	4620      	mov	r0, r4
   b775e:	f000 f814 	bl	b778a <strlen>
   b7762:	4420      	add	r0, r4
   b7764:	bd10      	pop	{r4, pc}

000b7766 <strcmp>:
   b7766:	f810 2b01 	ldrb.w	r2, [r0], #1
   b776a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b776e:	2a01      	cmp	r2, #1
   b7770:	bf28      	it	cs
   b7772:	429a      	cmpcs	r2, r3
   b7774:	d0f7      	beq.n	b7766 <strcmp>
   b7776:	1ad0      	subs	r0, r2, r3
   b7778:	4770      	bx	lr

000b777a <strcpy>:
   b777a:	4603      	mov	r3, r0
   b777c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7780:	f803 2b01 	strb.w	r2, [r3], #1
   b7784:	2a00      	cmp	r2, #0
   b7786:	d1f9      	bne.n	b777c <strcpy+0x2>
   b7788:	4770      	bx	lr

000b778a <strlen>:
   b778a:	4603      	mov	r3, r0
   b778c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7790:	2a00      	cmp	r2, #0
   b7792:	d1fb      	bne.n	b778c <strlen+0x2>
   b7794:	1a18      	subs	r0, r3, r0
   b7796:	3801      	subs	r0, #1
   b7798:	4770      	bx	lr

000b779a <strncmp>:
   b779a:	b510      	push	{r4, lr}
   b779c:	b17a      	cbz	r2, b77be <strncmp+0x24>
   b779e:	4603      	mov	r3, r0
   b77a0:	3901      	subs	r1, #1
   b77a2:	1884      	adds	r4, r0, r2
   b77a4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b77a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b77ac:	4290      	cmp	r0, r2
   b77ae:	d101      	bne.n	b77b4 <strncmp+0x1a>
   b77b0:	42a3      	cmp	r3, r4
   b77b2:	d101      	bne.n	b77b8 <strncmp+0x1e>
   b77b4:	1a80      	subs	r0, r0, r2
   b77b6:	bd10      	pop	{r4, pc}
   b77b8:	2800      	cmp	r0, #0
   b77ba:	d1f3      	bne.n	b77a4 <strncmp+0xa>
   b77bc:	e7fa      	b.n	b77b4 <strncmp+0x1a>
   b77be:	4610      	mov	r0, r2
   b77c0:	e7f9      	b.n	b77b6 <strncmp+0x1c>

000b77c2 <strrchr>:
   b77c2:	b538      	push	{r3, r4, r5, lr}
   b77c4:	4603      	mov	r3, r0
   b77c6:	460c      	mov	r4, r1
   b77c8:	b969      	cbnz	r1, b77e6 <strrchr+0x24>
   b77ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b77ce:	f7ff bfb3 	b.w	b7738 <strchr>
   b77d2:	1c43      	adds	r3, r0, #1
   b77d4:	4605      	mov	r5, r0
   b77d6:	4621      	mov	r1, r4
   b77d8:	4618      	mov	r0, r3
   b77da:	f7ff ffad 	bl	b7738 <strchr>
   b77de:	2800      	cmp	r0, #0
   b77e0:	d1f7      	bne.n	b77d2 <strrchr+0x10>
   b77e2:	4628      	mov	r0, r5
   b77e4:	bd38      	pop	{r3, r4, r5, pc}
   b77e6:	2500      	movs	r5, #0
   b77e8:	e7f5      	b.n	b77d6 <strrchr+0x14>
	...

000b77ec <_strtol_l.constprop.0>:
   b77ec:	2b01      	cmp	r3, #1
   b77ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b77f2:	d001      	beq.n	b77f8 <_strtol_l.constprop.0+0xc>
   b77f4:	2b24      	cmp	r3, #36	; 0x24
   b77f6:	d906      	bls.n	b7806 <_strtol_l.constprop.0+0x1a>
   b77f8:	f7fd ff8a 	bl	b5710 <__errno>
   b77fc:	2316      	movs	r3, #22
   b77fe:	6003      	str	r3, [r0, #0]
   b7800:	2000      	movs	r0, #0
   b7802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7806:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b78ec <_strtol_l.constprop.0+0x100>
   b780a:	460d      	mov	r5, r1
   b780c:	462e      	mov	r6, r5
   b780e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7812:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7816:	f017 0708 	ands.w	r7, r7, #8
   b781a:	d1f7      	bne.n	b780c <_strtol_l.constprop.0+0x20>
   b781c:	2c2d      	cmp	r4, #45	; 0x2d
   b781e:	d132      	bne.n	b7886 <_strtol_l.constprop.0+0x9a>
   b7820:	782c      	ldrb	r4, [r5, #0]
   b7822:	2701      	movs	r7, #1
   b7824:	1cb5      	adds	r5, r6, #2
   b7826:	2b00      	cmp	r3, #0
   b7828:	d05b      	beq.n	b78e2 <_strtol_l.constprop.0+0xf6>
   b782a:	2b10      	cmp	r3, #16
   b782c:	d109      	bne.n	b7842 <_strtol_l.constprop.0+0x56>
   b782e:	2c30      	cmp	r4, #48	; 0x30
   b7830:	d107      	bne.n	b7842 <_strtol_l.constprop.0+0x56>
   b7832:	782c      	ldrb	r4, [r5, #0]
   b7834:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7838:	2c58      	cmp	r4, #88	; 0x58
   b783a:	d14d      	bne.n	b78d8 <_strtol_l.constprop.0+0xec>
   b783c:	786c      	ldrb	r4, [r5, #1]
   b783e:	2310      	movs	r3, #16
   b7840:	3502      	adds	r5, #2
   b7842:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7846:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b784a:	f04f 0c00 	mov.w	ip, #0
   b784e:	fbb8 f9f3 	udiv	r9, r8, r3
   b7852:	4666      	mov	r6, ip
   b7854:	fb03 8a19 	mls	sl, r3, r9, r8
   b7858:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b785c:	f1be 0f09 	cmp.w	lr, #9
   b7860:	d816      	bhi.n	b7890 <_strtol_l.constprop.0+0xa4>
   b7862:	4674      	mov	r4, lr
   b7864:	42a3      	cmp	r3, r4
   b7866:	dd24      	ble.n	b78b2 <_strtol_l.constprop.0+0xc6>
   b7868:	f1bc 0f00 	cmp.w	ip, #0
   b786c:	db1e      	blt.n	b78ac <_strtol_l.constprop.0+0xc0>
   b786e:	45b1      	cmp	r9, r6
   b7870:	d31c      	bcc.n	b78ac <_strtol_l.constprop.0+0xc0>
   b7872:	d101      	bne.n	b7878 <_strtol_l.constprop.0+0x8c>
   b7874:	45a2      	cmp	sl, r4
   b7876:	db19      	blt.n	b78ac <_strtol_l.constprop.0+0xc0>
   b7878:	fb06 4603 	mla	r6, r6, r3, r4
   b787c:	f04f 0c01 	mov.w	ip, #1
   b7880:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7884:	e7e8      	b.n	b7858 <_strtol_l.constprop.0+0x6c>
   b7886:	2c2b      	cmp	r4, #43	; 0x2b
   b7888:	bf04      	itt	eq
   b788a:	782c      	ldrbeq	r4, [r5, #0]
   b788c:	1cb5      	addeq	r5, r6, #2
   b788e:	e7ca      	b.n	b7826 <_strtol_l.constprop.0+0x3a>
   b7890:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7894:	f1be 0f19 	cmp.w	lr, #25
   b7898:	d801      	bhi.n	b789e <_strtol_l.constprop.0+0xb2>
   b789a:	3c37      	subs	r4, #55	; 0x37
   b789c:	e7e2      	b.n	b7864 <_strtol_l.constprop.0+0x78>
   b789e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b78a2:	f1be 0f19 	cmp.w	lr, #25
   b78a6:	d804      	bhi.n	b78b2 <_strtol_l.constprop.0+0xc6>
   b78a8:	3c57      	subs	r4, #87	; 0x57
   b78aa:	e7db      	b.n	b7864 <_strtol_l.constprop.0+0x78>
   b78ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b78b0:	e7e6      	b.n	b7880 <_strtol_l.constprop.0+0x94>
   b78b2:	f1bc 0f00 	cmp.w	ip, #0
   b78b6:	da05      	bge.n	b78c4 <_strtol_l.constprop.0+0xd8>
   b78b8:	2322      	movs	r3, #34	; 0x22
   b78ba:	6003      	str	r3, [r0, #0]
   b78bc:	4646      	mov	r6, r8
   b78be:	b942      	cbnz	r2, b78d2 <_strtol_l.constprop.0+0xe6>
   b78c0:	4630      	mov	r0, r6
   b78c2:	e79e      	b.n	b7802 <_strtol_l.constprop.0+0x16>
   b78c4:	b107      	cbz	r7, b78c8 <_strtol_l.constprop.0+0xdc>
   b78c6:	4276      	negs	r6, r6
   b78c8:	2a00      	cmp	r2, #0
   b78ca:	d0f9      	beq.n	b78c0 <_strtol_l.constprop.0+0xd4>
   b78cc:	f1bc 0f00 	cmp.w	ip, #0
   b78d0:	d000      	beq.n	b78d4 <_strtol_l.constprop.0+0xe8>
   b78d2:	1e69      	subs	r1, r5, #1
   b78d4:	6011      	str	r1, [r2, #0]
   b78d6:	e7f3      	b.n	b78c0 <_strtol_l.constprop.0+0xd4>
   b78d8:	2430      	movs	r4, #48	; 0x30
   b78da:	2b00      	cmp	r3, #0
   b78dc:	d1b1      	bne.n	b7842 <_strtol_l.constprop.0+0x56>
   b78de:	2308      	movs	r3, #8
   b78e0:	e7af      	b.n	b7842 <_strtol_l.constprop.0+0x56>
   b78e2:	2c30      	cmp	r4, #48	; 0x30
   b78e4:	d0a5      	beq.n	b7832 <_strtol_l.constprop.0+0x46>
   b78e6:	230a      	movs	r3, #10
   b78e8:	e7ab      	b.n	b7842 <_strtol_l.constprop.0+0x56>
   b78ea:	bf00      	nop
   b78ec:	000b80da 	.word	0x000b80da

000b78f0 <strtol>:
   b78f0:	4613      	mov	r3, r2
   b78f2:	460a      	mov	r2, r1
   b78f4:	4601      	mov	r1, r0
   b78f6:	4802      	ldr	r0, [pc, #8]	; (b7900 <strtol+0x10>)
   b78f8:	6800      	ldr	r0, [r0, #0]
   b78fa:	f7ff bf77 	b.w	b77ec <_strtol_l.constprop.0>
   b78fe:	bf00      	nop
   b7900:	2003e54c 	.word	0x2003e54c

000b7904 <__register_exitproc>:
   b7904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7908:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b79c4 <__register_exitproc+0xc0>
   b790c:	4606      	mov	r6, r0
   b790e:	f8d8 0000 	ldr.w	r0, [r8]
   b7912:	461f      	mov	r7, r3
   b7914:	460d      	mov	r5, r1
   b7916:	4691      	mov	r9, r2
   b7918:	f000 f856 	bl	b79c8 <__retarget_lock_acquire_recursive>
   b791c:	4b25      	ldr	r3, [pc, #148]	; (b79b4 <__register_exitproc+0xb0>)
   b791e:	681c      	ldr	r4, [r3, #0]
   b7920:	b934      	cbnz	r4, b7930 <__register_exitproc+0x2c>
   b7922:	4c25      	ldr	r4, [pc, #148]	; (b79b8 <__register_exitproc+0xb4>)
   b7924:	601c      	str	r4, [r3, #0]
   b7926:	4b25      	ldr	r3, [pc, #148]	; (b79bc <__register_exitproc+0xb8>)
   b7928:	b113      	cbz	r3, b7930 <__register_exitproc+0x2c>
   b792a:	681b      	ldr	r3, [r3, #0]
   b792c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7930:	6863      	ldr	r3, [r4, #4]
   b7932:	2b1f      	cmp	r3, #31
   b7934:	dd07      	ble.n	b7946 <__register_exitproc+0x42>
   b7936:	f8d8 0000 	ldr.w	r0, [r8]
   b793a:	f000 f847 	bl	b79cc <__retarget_lock_release_recursive>
   b793e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7946:	b34e      	cbz	r6, b799c <__register_exitproc+0x98>
   b7948:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b794c:	b988      	cbnz	r0, b7972 <__register_exitproc+0x6e>
   b794e:	4b1c      	ldr	r3, [pc, #112]	; (b79c0 <__register_exitproc+0xbc>)
   b7950:	b923      	cbnz	r3, b795c <__register_exitproc+0x58>
   b7952:	f8d8 0000 	ldr.w	r0, [r8]
   b7956:	f000 f838 	bl	b79ca <__retarget_lock_release>
   b795a:	e7f0      	b.n	b793e <__register_exitproc+0x3a>
   b795c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7960:	f7fd feb6 	bl	b56d0 <malloc>
   b7964:	2800      	cmp	r0, #0
   b7966:	d0f4      	beq.n	b7952 <__register_exitproc+0x4e>
   b7968:	2300      	movs	r3, #0
   b796a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b796e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7972:	6863      	ldr	r3, [r4, #4]
   b7974:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7978:	2201      	movs	r2, #1
   b797a:	409a      	lsls	r2, r3
   b797c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7980:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7984:	4313      	orrs	r3, r2
   b7986:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b798a:	2e02      	cmp	r6, #2
   b798c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7990:	bf02      	ittt	eq
   b7992:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7996:	4313      	orreq	r3, r2
   b7998:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b799c:	6863      	ldr	r3, [r4, #4]
   b799e:	f8d8 0000 	ldr.w	r0, [r8]
   b79a2:	1c5a      	adds	r2, r3, #1
   b79a4:	3302      	adds	r3, #2
   b79a6:	6062      	str	r2, [r4, #4]
   b79a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b79ac:	f000 f80e 	bl	b79cc <__retarget_lock_release_recursive>
   b79b0:	2000      	movs	r0, #0
   b79b2:	e7c6      	b.n	b7942 <__register_exitproc+0x3e>
   b79b4:	2003e7e8 	.word	0x2003e7e8
   b79b8:	2003e75c 	.word	0x2003e75c
   b79bc:	00000000 	.word	0x00000000
   b79c0:	000b56d1 	.word	0x000b56d1
   b79c4:	2003e5b0 	.word	0x2003e5b0

000b79c8 <__retarget_lock_acquire_recursive>:
   b79c8:	4770      	bx	lr

000b79ca <__retarget_lock_release>:
   b79ca:	4770      	bx	lr

000b79cc <__retarget_lock_release_recursive>:
   b79cc:	4770      	bx	lr

000b79ce <link_code_end>:
	...

000b79d0 <dynalib_user>:
   b79d0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b79e0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b79f0:	7620 7269 7574 6c61 5300 6174 7472 7075      virtual.Startup
   b7a00:	2d20 4320 6d6f 6c70 7465 0065                - Complete.

000b7a0c <_ZTVN5spark10LogHandlerE>:
	...
   b7a1c:	40a1 000b 40f9 000b                         .@...@..

000b7a24 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7a2c:	4105 000b 4139 000b 6a41 000b 40fb 000b     .A..9A..Aj...@..
   b7a3c:	6553 736e 726f 5420 6d69 6465 6f20 7475     Sensor Timed out
   b7a4c:	5400 7261 6567 2074 6f7a 656e 6920 2073     .Target zone is 
   b7a5c:	6c63 6165 2072 6977 6874 7a20 6e6f 3165     clear with zone1
   b7a6c:	6120 2074 6925 6d6d 6120 646e 7a20 6e6f      at %imm and zon
   b7a7c:	3265 6120 2074 6925 6d6d 5400 7261 6567     e2 at %imm.Targe
   b7a8c:	2074 6f7a 656e 6e20 746f 6320 656c 7261     t zone not clear
   b7a9c:	2d20 7720 6c69 206c 6177 7469 7420 6e65      - will wait ten
   b7aac:	7320 6365 6e6f 7364 6120 646e 7420 7972      seconds and try
   b7abc:	6120 6167 6e69 5300 6e65 6f73 2072 7265      again.Sensor er
   b7acc:	6f72 2072 6572 6573 2074 6e69 3120 2030     ror reset in 10 
   b7adc:	6573 6f63 646e 0073 6553 736e 726f 6920     seconds.Sensor i
   b7aec:	696e 2074 7573 6363 7365 6673 6c75 796c     nit successfully
   b7afc:	4300 6c61 6269 6172 6974 6e6f 4320 6d6f     .Calibration Com
   b7b0c:	6c70 7465 0065 6e49 7469 6169 206c 6163     plete.Initial ca
   b7b1c:	696c 7262 7461 6f69 206e 6166 6c69 6465     libration failed
   b7b2c:	2d20 7720 6961 2074 3031 7320 6365 2073      - wait 10 secs 
   b7b3c:	6e61 2064 6572 6573 0074 0000               and reset...

000b7b48 <_ZTV9TofSensor>:
	...
   b7b50:	43e5 000b 43e7 000b 2d2d 2d2d 2d2d 2500     .C...C..------.%
   b7b60:	2073 3020 3030 2030 0020 7325 3020 2020     s  0000  .%s 0  
   b7b70:	2020 2030 2500 3073 2020 2020 2020 0030       0 .%s0      0.
   b7b80:	7325 2020 2020 3131 2020 2500 2073 2020     %s    11  .%s   
   b7b90:	2031 2031 0020 7325 2020 2020 3120 2020     1 1  .%s     1  
   b7ba0:	2500 2073 2020 3131 3131 0031 7325 2020     .%s   11111.%s  
   b7bb0:	3232 3232 2020 2500 2073 2032 2020 3220     2222  .%s 2    2
   b7bc0:	0032 7325 2020 2020 3220 2020 2500 2073     2.%s     2  .%s 
   b7bd0:	2020 2032 2020 0020 7325 2020 2032 2020       2    .%s  2   
   b7be0:	2020 2500 3273 2032 2020 2020 0032 7325       .%s22     2.%s
   b7bf0:	3232 3232 3232 2032 2500 2073 3320 3333     2222222 .%s  333
   b7c00:	2033 0020 7325 3320 2020 2020 2033 2500     3  .%s 3    3 .%
   b7c10:	2073 2020 2020 2020 0033 7325 2020 3320     s       3.%s   3
   b7c20:	3333 2020 2500 3473 2020 2020 2020 0034     33  .%s4      4.
   b7c30:	7325 2020 3434 3434 2020 2500 2073 2020     %s  4444  .%s   
   b7c40:	2020 2020 0034 7325 2020 3535 3535 3535         4.%s  555555
   b7c50:	2500 2073 2035 2020 2020 0020 7325 3520     .%s 5      .%s 5
   b7c60:	3535 3535 2035 2500 2073 2020 2020 3520     55555 .%s      5
   b7c70:	0020 7325 2020 2020 2020 3520 2500 2073      .%s       5.%s 
   b7c80:	3620 3636 3636 0036 7325 3620 2020 2020      666666.%s 6    
   b7c90:	2020 2500 2073 3620 3636 3636 0020 7325       .%s  66666 .%s
   b7ca0:	2036 2020 2020 3620 2500 2073 2036 2020     6      6.%s 6   
   b7cb0:	3620 0020 7325 2020 3636 3636 2020 2500      6 .%s  6666  .%
   b7cc0:	2073 3720 3737 3737 0037 7325 3720 2020     s  777777.%s 7  
   b7cd0:	2020 3720 2500 2073 2020 2020 3720 0020        7.%s      7 .
   b7ce0:	7325 2020 2020 3720 2020 2500 2073 2020     %s     7  .%s   
   b7cf0:	3720 2020 0020 7325 2020 3720 2020 2020      7   .%s   7    
   b7d00:	2500 2073 3720 2020 2020 0020 7325 2020     .%s  7     .%s  
   b7d10:	3838 3838 2020 2500 2073 2038 2020 3820     8888  .%s 8    8
   b7d20:	0020 7325 2038 2020 2020 3820 2500 2073      .%s8      8.%s 
   b7d30:	3939 3939 2039 0020 7325 2039 2020 2020     99999  .%s9     
   b7d40:	2039 2500 3973 2020 2020 2020 0039 7325     9 .%s9      9.%s
   b7d50:	2020 2020 2020 3920 2500 2073 2020 2020            9.%s     
   b7d60:	3920 0020 7325 3920 3939 3939 2039 2a00      9 .%s 999999 .*
   b7d70:	2a2a 2a2a 2a2a 002a                         *******.

000b7d78 <_ZTV13PeopleCounter>:
	...
   b7d80:	45e1 000b 45e3 000b                         .E...E..

000b7d88 <_ZTV7VL53L1X>:
	...
   b7d90:	4c1b 000b 4bfb 000b 4be5 000b 4ba1 000b     .L...K...K...K..
   b7da0:	4bd7 000b 4bbd 000b 4ba3 000b               .K...K...K..

000b7dac <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   b7dac:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   b7dbc:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   b7dcc:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   b7ddc:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   b7dec:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   b7dfc:	0200 ffc7 009b 0000 0001 0000               ............

000b7e08 <_ZTVN5spark13CellularClassE>:
	...
   b7e10:	5813 000b 5809 000b 57ff 000b 57b5 000b     .X...X...W...W..
   b7e20:	57f3 000b 57e7 000b 6d99 000b 6da1 000b     .W...W...m...m..
   b7e30:	57db 000b 57d3 000b 57c9 000b 57bf 000b     .W...W...W...W..
   b7e40:	6dd1 000b                                   .m..

000b7e44 <_ZTVN5spark13EthernetClassE>:
	...
   b7e4c:	58ab 000b 58a1 000b 5897 000b 588d 000b     .X...X...X...X..
   b7e5c:	5881 000b 5875 000b 6d99 000b 6da1 000b     .X..uX...m...m..
   b7e6c:	5869 000b 5861 000b 5857 000b 584d 000b     iX..aX..WX..MX..
   b7e7c:	6dd1 000b                                   .m..

000b7e80 <_ZTV7TwoWire>:
	...
   b7e88:	58c9 000b 5913 000b 58eb 000b 58cb 000b     .X...Y...X...X..
   b7e98:	58f3 000b 58fb 000b 5903 000b 590b 000b     .X...X...Y...Y..

000b7ea8 <_ZTV9IPAddress>:
	...
   b7eb0:	59e1 000b 59d1 000b 59d3 000b 6425 2500     .Y...Y...Y..%d.%
   b7ec0:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b7ed0:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b7ee0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b7ef0:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b7f00:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b7f10:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b7f20:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
   b7f30:	6564 6174 6c69 0000                         detail..

000b7f38 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7f40:	5e8d 000b 5eb3 000b 5e71 000b 5aef 000b     .^...^..q^...Z..

000b7f50 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7f58:	62e9 000b 6301 000b 6a41 000b 40fb 000b     .b...c..Aj...@..

000b7f68 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7f70:	6315 000b 6329 000b 6be5 000b 5e79 000b     .c..)c...k..y^..

000b7f80 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7f88:	5e8b 000b 5ec1 000b 69a5 000b 5e7b 000b     .^...^...i..{^..

000b7f98 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7fa0:	5e89 000b 5ecf 000b 6251 000b 5ef1 000b     .^...^..Qb...^..

000b7fb0 <_ZTVN5spark12NetworkClassE>:
	...
   b7fb8:	6d59 000b 6d63 000b 6d6d 000b 6d77 000b     Ym..cm..mm..wm..
   b7fc8:	6d81 000b 6d8d 000b 6d99 000b 6da1 000b     .m...m...m...m..
   b7fd8:	6da9 000b 6db5 000b 6dbd 000b 6dc7 000b     .m...m...m...m..
   b7fe8:	6dd1 000b 5925 252d 2d6d 6425 2554 3a48     .m..%Y-%m-%dT%H:
   b7ff8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8008 <_ZTV11USARTSerial>:
	...
   b8010:	7161 000b 71cd 000b 71a5 000b 6ebd 000b     aq...q...q...n..
   b8020:	7175 000b 7191 000b 7183 000b 719f 000b     uq...q...q...q..
   b8030:	7163 000b 7167 000b                         cq..gq..

000b8038 <_ZTV9USBSerial>:
	...
   b8040:	721f 000b 7287 000b 725d 000b 6ebd 000b     .r...r..]r...n..
   b8050:	724f 000b 7221 000b 7231 000b 7281 000b     Or..!r..1r...r..
   b8060:	7241 000b 7219 000b                         Ar...r..

000b8068 <_ZSt7nothrow>:
   b8068:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8078:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8088:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8098:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b80a8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b80b8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b80c8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b80d9 <_ctype_>:
   b80d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b80e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b80f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8109:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8119:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8129:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8139:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8149:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8159:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b81da <link_const_variable_data_end>:
	...

000b81dc <link_constructors_location>:
   b81dc:	000b4339 	.word	0x000b4339
   b81e0:	000b45c5 	.word	0x000b45c5
   b81e4:	000b57a5 	.word	0x000b57a5
   b81e8:	000b581d 	.word	0x000b581d
   b81ec:	000b58b5 	.word	0x000b58b5
   b81f0:	000b6a31 	.word	0x000b6a31
   b81f4:	000b6ea9 	.word	0x000b6ea9
   b81f8:	000b6fc9 	.word	0x000b6fc9
   b81fc:	000b7129 	.word	0x000b7129
   b8200:	000b714d 	.word	0x000b714d

000b8204 <link_constructors_end>:
	...
